<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="generator"
content="HTML Tidy for Linux/PPC (vers 1st March 2002), see www.w3.org" />
<title>MySQL Reference Manual for version 4.0.9-gamma.</title>
<style type="text/css">
/*<![CDATA[*/
 code {color:purple} tt {color:green} samp {color:navy} pre {color:maroon} 
/*]]>*/
</style>
</head>
<body bgcolor="silver" text="#000000" link="#101090"
vlink="#7030B0">
<h1>MySQL Reference Manual for version 4.0.9-gamma.</h1>

<hr />
<h1><a id="Introduction" name="Introduction"
href="manual_toc.html#Introduction">1 General Information</a></h1>

<p><a id="IDX1" name="IDX1"></a> <a id="IDX2" name="IDX2"></a></p>

<p>The <code>MySQL (TM)</code> software delivers a very fast,
multi-threaded, multi-user, and robust <code>SQL</code>
(<code>Structured Query Language</code>) database server.
<code>MySQL Server</code> is intended for mission-critical,
heavy-load production systems as well as for embedding into
mass-deployed software. <code>MySQL</code> is a trademark of
<code>MySQL AB</code>.</p>

<p>The <code>MySQL</code> software is <code>Dual Licensed</code>.
Users can choose to use the <code>MySQL</code> software as an
<code>Open Source</code>/<code>Free Software</code> product under
the terms of the <code>GNU General Public License</code> (<a
href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>)
or can purchase a standard commercial license from <code>MySQL
AB</code>. See section <a
href="manual.html#Licensing_and_Support">1.4 MySQL Support and
Licensing</a>.</p>

<p>The <code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) provides
the latest information about the <code>MySQL</code> software.</p>

<p>The following list describes some sections of particular
interest in this manual:</p>

<ul>
<li>For information about the company behind the <code>MySQL
Database Server</code>, see section <a
href="manual.html#What_is_MySQL_AB">1.3 What Is MySQL AB?</a>.</li>

<li>For a discussion about the capabilities of the <code>MySQL
Database Server</code>, see section <a
href="manual.html#Features">1.2.2 The Main Features of
MySQL</a>.</li>

<li>For installation instructions, see section <a
href="manual.html#Installing">2 MySQL Installation</a>.</li>

<li>For tips on porting the <code>MySQL Database Software</code> to
new architectures or operating systems, see section <a
href="manual.html#Porting">E Porting to Other Systems</a>.</li>

<li>For information about upgrading from a Version 3.23 release,
see section <a href="manual.html#Upgrading-from-3.23">2.5.2
Upgrading From Version 3.23 to Version 4.0</a>.</li>

<li>For information about upgrading from a Version 3.22 release,
see section <a href="manual.html#Upgrading-from-3.22">2.5.3
Upgrading From Version 3.22 to Version 3.23</a>.</li>

<li>For a tutorial introduction to the <code>MySQL Database
Server</code>, see section <a href="manual.html#Tutorial">3
Tutorial Introduction</a>.</li>

<li>For examples of <code>SQL</code> and benchmarking information,
see the benchmarking directory (<tt>`sql-bench'</tt> in the
distribution).</li>

<li>For a history of new features and bug fixes, see section <a
href="manual.html#News">D MySQL Change History</a>.</li>

<li>For a list of currently known bugs and misfeatures, see section
<a href="manual.html#Bugs">1.7.5 Known Errors and Design
Deficiencies in MySQL</a>.</li>

<li>For future plans, see section <a href="manual.html#TODO">1.8
MySQL and The Future (The TODO)</a>.</li>

<li>For a list of all the contributors to this project, see section
<a href="manual.html#Credits">C Credits</a>.</li>
</ul>

<p><strong>Important</strong>:</p>

<p>Reports of errors (often called bugs), as well as questions and
comments, should be sent to the mailing list at <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. See
section <a href="manual.html#Bug_reports">1.6.1.3 How to Report
Bugs or Problems</a>.</p>

<p>The <code>mysqlbug</code> script should be used to generate bug
reports.</p>

<p>For source distributions, the <code>mysqlbug</code> script can
be found in the <tt>`scripts'</tt> directory. For binary
distributions, <code>mysqlbug</code> can be found in the
<tt>`bin'</tt> directory (<tt>`/usr/bin'</tt> for the
<code>MySQL-server</code> RPM package).</p>

<p>If you have found a sensitive security bug in <code>MySQL
Server</code>, you should send an e-mail to <a
href="mailto:security@mysql.com">security@mysql.com</a>.</p>

<p><a id="IDX3" name="IDX3"></a> <a id="IDX4" name="IDX4"></a> <a
id="IDX5" name="IDX5"></a> <a id="IDX6" name="IDX6"></a></p>

<h2><a id="Manual-info" name="Manual-info"
href="manual_toc.html#Manual-info">1.1 About This Manual</a></h2>

<p><a id="IDX7" name="IDX7"></a> <a id="IDX8" name="IDX8"></a></p>

<p>This is the <code>MySQL</code> reference manual; it documents
<code>MySQL</code> upto Version 4.0.9-gamma. Functional changes are
always indicated with reference to the version, so this manual is
also suitable if you are using an older version of the
<code>MySQL</code> software. Being a reference manual, it does not
provide general instruction on <code>SQL</code> or relational
database concepts.</p>

<p>As the <code>MySQL Database Software</code> is under constant
development, the manual is also updated frequently. The most recent
version of this manual is available at <a
href="http://www.mysql.com/documentation/">http://www.mysql.com/documentation/</a>
in many different formats, including HTML, PDF, and Windows HLP
versions.</p>

<p><a id="IDX9" name="IDX9"></a> <a id="IDX10"
name="IDX10"></a></p>

<p>The primary document is the Texinfo file. The HTML version is
produced automatically using a modified version of
<code>texi2html</code>. The plain text and Info versions are
produced with <code>makeinfo</code>. The PostScript version is
produced using <code>texi2dvi</code> and <code>dvips</code>. The
PDF version is produced with <code>pdftex</code>.</p>

<p>If you have a hard time finding information in the manual, you
can try our searchable version at <a
href="http://www.mysql.com/doc/">http://www.mysql.com/doc/</a>.</p>

<p>If you have any suggestions concerning additions or corrections
to this manual, please send them to the documentation team at <a
href="mailto:docs@mysql.com">docs@mysql.com</a>.</p>

<p>This manual was initially written by David Axmark and Michael
(Monty) Widenius. It is currently maintained by Michael (Monty)
Widenius, Arjen Lentz, and Paul DuBois. For other contributors, see
section <a href="manual.html#Credits">C Credits</a>.</p>

<p>The copyright (2003) to this manual is owned by the Swedish
company <code>MySQL AB</code>. See section <a
href="manual.html#Copyright">1.4.2 Copyrights and Licenses Used by
MySQL</a>.</p>

<h3><a id="Manual_conventions" name="Manual_conventions"
href="manual_toc.html#Manual_conventions">1.1.1 Conventions Used in
This Manual</a></h3>

<p>This manual uses certain typographical conventions:</p>

<p><a id="IDX11" name="IDX11"></a> <a id="IDX12" name="IDX12"></a>
<a id="IDX13" name="IDX13"></a></p>

<dl compact="compact">
<dt><code>constant</code></dt>

<dd>Constant-width font is used for command names and options; SQL
statements; database, table, and column names; C and Perl code; and
environment variables. Example: ``To see how
<code>mysqladmin</code> works, invoke it with the
<code>--help</code> option.''</dd>

<dt><tt>`filename'</tt></dt>

<dd>Constant-width font with surrounding quotes is used for
filenames and pathnames. Example: ``The distribution is installed
under the <tt>`/usr/local/'</tt> directory.''</dd>

<dt><samp>`c'</samp></dt>

<dd>Constant-width font with surrounding quotes is also used to
indicate character sequences. Example: ``To specify a wildcard, use
the <samp>`%'</samp> character.''</dd>

<dt><em>italic</em></dt>

<dd>Italic font is used for emphasis, <em>like this</em>.</dd>

<dt><strong>boldface</strong></dt>

<dd>Boldface font is used in table headings and to convey
<strong>especially strong emphasis</strong>.</dd>
</dl>

<p>When commands are shown that are meant to be executed by a
particular program, the program is indicated by a prompt shown
before the command. For example, <code>shell&gt;</code> indicates a
command that you execute from your login shell, and
<code>mysql&gt;</code> indicates a command that you execute from
the <code>mysql</code> client program:</p>

<pre>
shell&gt; type a shell command here
mysql&gt; type a mysql command here
</pre>

<p>Shell commands are shown using Bourne shell syntax. If you are
using a <code>csh</code>-style shell, you may need to issue
commands slightly differently. For example, the sequence to set an
environment variable and run a command looks like this in Bourne
shell syntax:</p>

<pre>
shell&gt; VARNAME=value some_command
</pre>

<p><a id="IDX14" name="IDX14"></a> <a id="IDX15"
name="IDX15"></a></p>

<p>For <code>csh</code>, you would execute the sequence like
this:</p>

<pre>
shell&gt; setenv VARNAME value
shell&gt; some_command
</pre>

<p>Often database, table, and column names must be substituted into
commands. To indicate that such substitution is necessary, this
manual uses <code>db_name</code>, <code>tbl_name</code> and
<code>col_name</code>. For example, you might see a statement like
this:</p>

<pre>
mysql&gt; SELECT col_name FROM db_name.tbl_name;
</pre>

<p>This means that if you were to enter a similar statement, you
would supply your own database, table, and column names, perhaps
like this:</p>

<pre>
mysql&gt; SELECT author_name FROM biblio_db.author_list;
</pre>

<p>SQL keywords are not case-sensitive and may be written in
uppercase or lowercase. This manual uses uppercase.</p>

<p>In syntax descriptions, square brackets (<samp>`['</samp> and
<samp>`]'</samp>) are used to indicate optional words or clauses.
For example, in the following statement, <code>IF EXISTS</code> is
optional:</p>

<pre>
DROP TABLE [IF EXISTS] tbl_name
</pre>

<p>When a syntax element consists of a number of alternatives, the
alternatives are separated by vertical bars (<samp>`|'</samp>).
When one member from a set of choices <strong>may</strong> be
chosen, the alternatives are listed within square brackets
(<samp>`['</samp> and <samp>`]'</samp>):</p>

<pre>
TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str)
</pre>

<p>When one member from a set of choices <strong>must</strong> be
chosen, the alternatives are listed within braces (<samp>`{'</samp>
and <samp>`}'</samp>):</p>

<pre>
{DESCRIBE | DESC} tbl_name {col_name | wild}
</pre>

<h2><a id="What-is" name="What-is"
href="manual_toc.html#What-is">1.2 What Is MySQL?</a></h2>

<p><a id="IDX16" name="IDX16"></a> <a id="IDX17"
name="IDX17"></a></p>

<p><code>MySQL</code>, the most popular <code>Open Source</code>
SQL database, is developed, distributed and supported by
<code>MySQL AB</code>. <code>MySQL AB</code> is a commercial
company founded by the MySQL developers that builds its business
providing services around the <code>MySQL</code> database. See
section <a href="manual.html#What_is_MySQL_AB">1.3 What Is MySQL
AB?</a>.</p>

<p>The <code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) provides
the latest information about <code>MySQL</code> software and
<code>MySQL AB</code>.</p>

<dl compact="compact">
<dt><code>MySQL</code> is a database management system.</dt>

<dd>A database is a structured collection of data. It may be
anything from a simple shopping list to a picture gallery or the
vast amounts of information in a corporate network. To add, access,
and process data stored in a computer database, you need a database
management system such as <code>MySQL</code> Server. Since
computers are very good at handling large amounts of data, database
management plays a central role in computing, as stand-alone
utilities, or as parts of other applications. <a id="IDX18"
name="IDX18"></a></dd>

<dt>MySQL is a relational database management system.</dt>

<dd>A relational database stores data in separate tables rather
than putting all the data in one big storeroom. This adds speed and
flexibility. The tables are linked by defined relations making it
possible to combine data from several tables on request. The
<code>SQL</code> part of ``<code>MySQL</code>'' stands for
``<code>Structured Query Language</code>''—the most common
standardised language used to access databases. <a id="IDX19"
name="IDX19"></a> <a id="IDX20" name="IDX20"></a></dd>

<dt>MySQL software is <code>Open Source</code>.</dt>

<dd><code>Open Source</code> means that it is possible for anyone
to use and modify. Anybody can download the <code>MySQL</code>
software from the Internet and use it without paying anything.
Anybody so inclined can study the source code and change it to fit
their needs. The <code>MySQL</code> software uses the
<code>GPL</code> (<code>GNU General Public License</code>), <a
href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>,
to define what you may and may not do with the software in
different situations. If you feel uncomfortable with the
<code>GPL</code> or need to embed <code>MySQL</code> code into a
commercial application you can buy a commercially licensed version
from us. See section <a href="manual.html#MySQL_licenses">1.4.3
MySQL Licenses</a>. <a id="IDX21" name="IDX21"></a> <a id="IDX22"
name="IDX22"></a></dd>

<dt>Why use the MySQL Database Server?</dt>

<dd>The <code>MySQL Database Server</code> is very fast, reliable,
and easy to use. If that is what you are looking for, you should
give it a try. <code>MySQL Server</code> also has a practical set
of features developed in close cooperation with our users. You can
find a performance comparison of <code>MySQL Server</code> to some
other database managers on our benchmark page. See section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>. <code>MySQL Server</code> was originally developed to
handle large databases much faster than existing solutions and has
been successfully used in highly demanding production environments
for several years. Though under constant development, <code>MySQL
Server</code> today offers a rich and useful set of functions. Its
connectivity, speed, and security make <code>MySQL Server</code>
highly suited for accessing databases on the Internet.</dd>

<dt>The technical features of MySQL Server</dt>

<dd>For advanced technical information, see section <a
href="manual.html#Reference">6 MySQL Language Reference</a>. The
<code>MySQL Database Software</code> is a client/server system that
consists of a multi-threaded <code>SQL</code> server that supports
different backends, several different client programs and
libraries, administrative tools, and a wide range of programming
interfaces (<code>API</code>s). We also provide <code>MySQL
Server</code> as a multi-threaded library which you can link into
your application to get a smaller, faster, easier-to-manage
product.</dd>

<dt>There is a large amount of contributed MySQL software
available.</dt>

<dd>It is very likely that you will find that your favorite
application or language already supports the <code>MySQL Database
Server</code>.</dd>
</dl>

<p><a id="IDX23" name="IDX23"></a> <a id="IDX24" name="IDX24"></a>
<a id="IDX25" name="IDX25"></a> The official way to pronounce
<code>MySQL</code> is ``My Ess Que Ell'' (not ``my sequel''), but
we don't mind if you pronounce it as ``my sequel'' or in some other
localised way.</p>

<h3><a id="History" name="History"
href="manual_toc.html#History">1.2.1 History of MySQL</a></h3>

<p><a id="IDX26" name="IDX26"></a> <a id="IDX27" name="IDX27"></a>
<a id="IDX28" name="IDX28"></a> <a id="IDX29" name="IDX29"></a></p>

<p>We once started out with the intention of using
<code>mSQL</code> to connect to our tables using our own fast
low-level (ISAM) routines. However, after some testing we came to
the conclusion that <code>mSQL</code> was not fast enough nor
flexible enough for our needs. This resulted in a new SQL interface
to our database but with almost the same API interface as
<code>mSQL</code>. This API was chosen to ease porting of
third-party code.</p>

<p>The derivation of the name <code>MySQL</code> is not perfectly
clear. Our base directory and a large number of our libraries and
tools have had the prefix ``my'' for well over 10 years. However,
Monty's daughter (some years younger) is also named My. Which of
the two gave its name to <code>MySQL</code> is still a mystery,
even for us.</p>

<h3><a id="Features" name="Features"
href="manual_toc.html#Features">1.2.2 The Main Features of
MySQL</a></h3>

<p><a id="IDX30" name="IDX30"></a> <a id="IDX31"
name="IDX31"></a></p>

<p>The following list describes some of the important
characteristics of the <code>MySQL Database Software</code>. See
section <a href="manual.html#MySQL_4.0_In_A_Nutshell">1.5 MySQL 4.x
In A Nutshell</a>.</p>

<dl compact="compact">
<dt>Internals and Portability</dt>

<dd>
<ul>
<li>Written in C and C++. Tested with a broad range of different
compilers.</li>

<li>Works on many different platforms. See section <a
href="manual.html#Which_OS">2.2.2 Operating Systems Supported by
MySQL</a>.</li>

<li>Uses GNU Automake, Autoconf, and Libtool for portability.</li>

<li>APIs for C, C++, Eiffel, Java, Perl, PHP, Python, Ruby, and
Tcl. See section <a href="manual.html#Clients">8 MySQL
APIs</a>.</li>

<li>Fully multi-threaded using kernel threads. This means it can
easily use multiple CPUs if available.</li>

<li>Very fast B-tree disk tables with index compression.</li>

<li>A very fast thread-based memory allocation system.</li>

<li>Very fast joins using an optimised one-sweep multi-join.</li>

<li>In-memory hash tables which are used as temporary tables.</li>

<li>SQL functions are implemented through a highly optimised class
library and should be as fast as possible! Usually there isn't any
memory allocation at all after query initialisation.</li>

<li>The <code>MySQL</code> code gets tested with Purify (a
commercial memory leakage detector) as well as with Valgrind, a GPL
tool (<a
href="http://developer.kde.org/~sewardj/">http://developer.kde.org/~sewardj/</a>).</li>
</ul>
</dd>

<dt>Column Types</dt>

<dd>
<ul>
<li>Many column types: signed/unsigned integers 1, 2, 3, 4, and 8
bytes long, <code>FLOAT</code>, <code>DOUBLE</code>,
<code>CHAR</code>, <code>VARCHAR</code>, <code>TEXT</code>,
<code>BLOB</code>, <code>DATE</code>, <code>TIME</code>,
<code>DATETIME</code>, <code>TIMESTAMP</code>, <code>YEAR</code>,
<code>SET</code>, and <code>ENUM</code> types. See section <a
href="manual.html#Column_types">6.2 Column Types</a>.</li>

<li>Fixed-length and variable-length records.</li>

<li><a id="IDX32" name="IDX32"></a> All columns have default
values. You can use <code>INSERT</code> to insert a subset of a
table's columns; those columns that are not explicitly given values
are set to their default values.</li>
</ul>
</dd>

<dt>Commands and Functions</dt>

<dd>
<ul>
<li>Full operator and function support in the <code>SELECT</code>
and <code>WHERE</code> parts of queries. For example: 

<pre>
mysql&gt; SELECT CONCAT(first_name, " ", last_name)
    -&gt; FROM tbl_name
    -&gt; WHERE income/dependents &gt; 10000 AND age &gt; 30;
</pre>
</li>

<li>Full support for SQL <code>GROUP BY</code> and <code>ORDER
BY</code> clauses with expressions. Support for group functions
(<code>COUNT()</code>, <code>COUNT(DISTINCT ...)</code>,
<code>AVG()</code>, <code>STD()</code>, <code>SUM()</code>,
<code>MAX()</code>, and <code>MIN()</code>).</li>

<li>Support for <code>LEFT OUTER JOIN</code> and <code>RIGHT OUTER
JOIN</code> with ANSI SQL and ODBC syntax.</li>

<li>Aliases on tables and columns are allowed as in the SQL92
standard.</li>

<li><code>DELETE</code>, <code>INSERT</code>, <code>REPLACE</code>,
and <code>UPDATE</code> return the number of rows that were changed
(affected). It is possible to return the number of rows matched
instead by setting a flag when connecting to the server.</li>

<li>The <code>MySQL</code>-specific <code>SHOW</code> command can
be used to retrieve information about databases, tables, and
indexes. The <code>EXPLAIN</code> command can be used to determine
how the optimiser resolves a query.</li>

<li>Function names do not clash with table or column names. For
example, <code>ABS</code> is a valid column name. The only
restriction is that for a function call, no spaces are allowed
between the function name and the <samp>`('</samp> that follows it.
See section <a href="manual.html#Reserved_words">6.1.7 Is MySQL
Picky About Reserved Words?</a>.</li>

<li>You can mix tables from different databases in the same query
(as of Version 3.22).</li>
</ul>
</dd>

<dt>Security</dt>

<dd>
<ul>
<li>A privilege and password system that is very flexible and
secure, and allows host-based verification. Passwords are secure
because all password traffic is encrypted when you connect to a
server.</li>
</ul>
</dd>

<dt>Scalability and Limits</dt>

<dd>
<ul>
<li>Handles large databases. We are using <code>MySQL Server</code>
with some databases that contain 50 million records and we know of
users that use <code>MySQL Server</code> with 60,000 tables and
about 5,000,000,000 rows.</li>

<li>Up to 32 indexes per table are allowed. Each index may consist
of 1 to 16 columns or parts of columns. The maximum index width is
500 bytes (this may be changed when compiling <code>MySQL
Server</code>). An index may use a prefix of a <code>CHAR</code> or
<code>VARCHAR</code> field.</li>
</ul>
</dd>

<dt>Connectivity</dt>

<dd>
<ul>
<li>Clients may connect to the <code>MySQL</code> server using
TCP/IP Sockets, Unix Sockets (Unix), or Named Pipes (NT).</li>

<li><code>ODBC</code> (Open-DataBase-Connectivity) support for
Win32 (with source). All ODBC 2.5 functions and many others. For
example, you can use MS Access to connect to your
<code>MySQL</code> server. See section <a
href="manual.html#ODBC">8.3 MySQL ODBC Support</a>.</li>
</ul>
</dd>

<dt>Localisation</dt>

<dd>
<ul>
<li>The server can provide error messages to clients in many
languages. See section <a href="manual.html#Languages">4.6.2
Non-English Error Messages</a>.</li>

<li>Full support for several different character sets, including
ISO-8859-1 (Latin1), german, big5, ujis, and more. For example, the
Scandinavian characters 'å', 'ä' and 'ö' are allowed in table and
column names.</li>

<li>All data is saved in the chosen character set. All comparisons
for normal string columns are case-insensitive.</li>

<li>Sorting is done according to the chosen character set (the
Swedish way by default). It is possible to change this when the
<code>MySQL</code> server is started. To see an example of very
advanced sorting, look at the Czech sorting code. <code>MySQL
Server</code> supports many different character sets that can be
specified at compile and runtime.</li>
</ul>
</dd>

<dt>Clients and Tools</dt>

<dd>
<ul>
<li>Includes <code>myisamchk</code>, a very fast utility for table
checking, optimisation, and repair. All of the functionality of
<code>myisamchk</code> is also available through the SQL interface
as well. See section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>.</li>

<li>All <code>MySQL</code> programs can be invoked with the
<code>--help</code> or <code>-?</code> options to obtain online
assistance.</li>
</ul>
</dd>
</dl>

<h3><a id="Stability" name="Stability"
href="manual_toc.html#Stability">1.2.3 How Stable Is
MySQL?</a></h3>

<p><a id="IDX33" name="IDX33"></a></p>

<p>This section addresses the questions ``<em>How stable is MySQL
Server?</em>'' and ``<em>Can I depend on MySQL Server in this
project?</em>'' We will try to clarify these issues and answer some
important questions that concern many potential users. The
information in this section is based on data gathered from the
mailing list, which is very active in identifying problems as well
as reporting types of use.</p>

<p>Original code stems back from the early '80s, providing a stable
code base, and the ISAM table format remains backward-compatible.
At TcX, the predecessor of <code>MySQL AB</code>,
<code>MySQL</code> code has worked in projects since mid-1996,
without any problems. When the <code>MySQL Database Software</code>
was released to a wider public, we noticed that there were some
pieces of ``untested code'' that were quickly found by the new
users who made different types of queries from us. Each new release
has had fewer portability problems (even though each new release
has had many new features).</p>

<p>Each release of the <code>MySQL Server</code> has been usable.
There have only been problems when users try code from the ``gray
zones.'' Naturally, new users don't know what the gray zones are;
this section attempts to indicate those that are currently known.
The descriptions mostly deal with Version 3.23 of <code>MySQL
Server</code>. All known and reported bugs are fixed in the latest
version, with the exception of those listed in the bugs section,
which are things that are design-related. See section <a
href="manual.html#Bugs">1.7.5 Known Errors and Design Deficiencies
in MySQL</a>.</p>

<p>The <code>MySQL Server</code> design is multi-layered with
independent modules. Some of the newer modules are listed here with
an indication of how well-tested each of them is:</p>

<p><a id="IDX34" name="IDX34"></a></p>

<dl compact="compact">
<dt><strong>Replication -- Gamma</strong></dt>

<dd>Large server clusters using replication are in production use,
with good results. Work on enhanced replication features is
continuing in <code>MySQL</code> 4.x.</dd>

<dt><strong><code>InnoDB</code> tables -- Stable (in 3.23 from
3.23.49)</strong></dt>

<dd>The <code>InnoDB</code> transactional storage engine has now
been declared stable in the <code>MySQL</code> 3.23 tree, starting
from version 3.23.49. <code>InnoDB</code> is being used in large,
heavy-load production systems.</dd>

<dt><strong><code>BDB</code> tables -- Gamma</strong></dt>

<dd>The <code>Berkeley DB</code> code is very stable, but we are
still improving the <code>BDB</code> transactional storage engine
interface in <code>MySQL Server</code>, so it will take some time
before this is as well tested as the other table types.</dd>

<dt><strong><code>FULLTEXT</code> -- Beta</strong></dt>

<dd>Full-text search works but is not yet widely used. Important
enhancements are being implemented for <code>MySQL</code> 4.0.</dd>

<dt><strong><code>MyODBC 2.50</code> (uses ODBC SDK 2.5) --
Gamma</strong></dt>

<dd>Increasingly in wide use. Some issues brought up appear to be
application-related and independent of the ODBC driver or
underlying database server.</dd>

<dt><strong>Automatic recovery of <code>MyISAM</code> tables --
Gamma</strong></dt>

<dd>This status only regards the new code in the
<code>MyISAM</code> storage engine that checks if the table was
closed properly on open and executes an automatic check/repair of
the table if it wasn't.</dd>

<dt><strong>Bulk-insert -- Alpha</strong></dt>

<dd>New feature in <code>MyISAM</code> tables in <code>MySQL</code>
4.0 for faster insert of many rows.</dd>

<dt><strong>Locking -- Gamma</strong></dt>

<dd>This is very system-dependent. On some systems there are big
problems using standard OS locking (<code>fcntl()</code>). In these
cases, you should run <code>mysqld</code> with the
<code>--skip-external-locking</code> flag. Problems are known to
occur on some Linux systems, and on SunOS when using NFS-mounted
filesystems.</dd>
</dl>

<p><code>MySQL AB</code> provides high-quality support for paying
customers, but the <code>MySQL</code> mailing list usually provides
answers to common questions. Bugs are usually fixed right away with
a patch; for serious bugs, there is almost always a new
release.</p>

<h3><a id="Table_size" name="Table_size"
href="manual_toc.html#Table_size">1.2.4 How Big Can MySQL Tables
Be?</a></h3>

<p><a id="IDX35" name="IDX35"></a> <a id="IDX36" name="IDX36"></a>
<a id="IDX37" name="IDX37"></a> <a id="IDX38" name="IDX38"></a> <a
id="IDX39" name="IDX39"></a></p>

<p><code>MySQL</code> Version 3.22 has a 4G limit on table size.
With the new <code>MyISAM</code> table type in <code>MySQL</code>
Version 3.23, the maximum table size is pushed up to 8 million
terabytes (2 ^ 63 bytes).</p>

<p>Note, however, that operating systems have their own file-size
limits. Here are some examples:</p>

<table border="1" width="100%">
<tr>
<td><strong>Operating System</strong></td>
<td><strong>File-Size Limit</strong></td>
</tr>

<tr>
<td>Linux-Intel 32 bit</td>
<td>2G, 4G or more, depends on Linux version</td>
</tr>

<tr>
<td>Linux-Alpha</td>
<td>8T (?)</td>
</tr>

<tr>
<td>Solaris 2.5.1</td>
<td>2G (possible 4G with patch)</td>
</tr>

<tr>
<td>Solaris 2.6</td>
<td>4G (can be changed with flag)</td>
</tr>

<tr>
<td>Solaris 2.7 Intel</td>
<td>4G</td>
</tr>

<tr>
<td>Solaris 2.7 UltraSPARC</td>
<td>512G</td>
</tr>
</table>

<p>On Linux 2.2 you can get bigger tables than 2G by using the LFS
patch for the ext2 filesystem. On Linux 2.4 patches also exist for
ReiserFS to get support for big files.</p>

<p>This means that the table size for <code>MySQL</code> databases
is normally limited by the operating system.</p>

<p>By default, <code>MySQL</code> tables have a maximum size of
about 4G. You can check the maximum table size for a table with the
<code>SHOW TABLE STATUS</code> command or with the <code>myisamchk
-dv table_name</code>. See section <a href="manual.html#SHOW">4.5.6
<code>SHOW</code> Syntax</a>.</p>

<p>If you need bigger tables than 4G (and your operating system
supports this), you should set the <code>AVG_ROW_LENGTH</code> and
<code>MAX_ROWS</code> parameter when you create your table. See
section <a href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE
TABLE</code> Syntax</a>. You can also set these later with
<code>ALTER TABLE</code>. See section <a
href="manual.html#ALTER_TABLE">6.5.4 <code>ALTER TABLE</code>
Syntax</a>.</p>

<p>If your big table is going to be read-only, you could use
<code>myisampack</code> to merge and compress many tables to one.
<code>myisampack</code> usually compresses a table by at least 50%,
so you can have, in effect, much bigger tables. See section <a
href="manual.html#myisampack">4.7.4 <code>myisampack</code>, The
MySQL Compressed Read-only Table Generator</a>.</p>

<p>You can go around the operating system file limit for
<code>MyISAM</code> data files by using the <code>RAID</code>
option. See section <a href="manual.html#CREATE_TABLE">6.5.3
<code>CREATE TABLE</code> Syntax</a>.</p>

<p>Another solution can be the included <code>MERGE</code> library,
which allows you to handle a collection of identical tables as one.
See section <a href="manual.html#MERGE">7.2 <code>MERGE</code>
Tables</a>.</p>

<h3><a id="Year_2000_compliance" name="Year_2000_compliance"
href="manual_toc.html#Year_2000_compliance">1.2.5 Year 2000
Compliance</a></h3>

<p><a id="IDX40" name="IDX40"></a> <a id="IDX41" name="IDX41"></a>
<a id="IDX42" name="IDX42"></a></p>

<p>The <code>MySQL Server</code> itself has no problems with Year
2000 (Y2K) compliance:</p>

<ul>
<li><code>MySQL Server</code> uses Unix time functions and has no
problems with dates until <code>2069</code>; all 2-digit years are
regarded to be in the range <code>1970</code> to <code>2069</code>,
which means that if you store <code>01</code> in a
<code>year</code> column, <code>MySQL Server</code> treats it as
<code>2001</code>.</li>

<li>All <code>MySQL</code> date functions are stored in one file,
<tt>`sql/time.cc'</tt>, and are coded very carefully to be year
2000-safe.</li>

<li>In <code>MySQL</code> Version 3.22 and later, the new
<code>YEAR</code> column type can store years <code>0</code> and
<code>1901</code> to <code>2155</code> in 1 byte and display them
using 2 or 4 digits.</li>
</ul>

<p>You may run into problems with applications that use <code>MySQL
Server</code> in a way that is not Y2K-safe. For example, many old
applications store or manipulate years using 2-digit values (which
are ambiguous) rather than 4-digit values. This problem may be
compounded by applications that use values such as <code>00</code>
or <code>99</code> as ``missing'' value indicators.</p>

<p>Unfortunately, these problems may be difficult to fix because
different applications may be written by different programmers,
each of whom may use a different set of conventions and
date-handling functions.</p>

<p>Here is a simple demonstration illustrating that <code>MySQL
Server</code> doesn't have any problems with dates until the year
2030:</p>

<pre>
mysql&gt; DROP TABLE IF EXISTS y2k;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CREATE TABLE y2k (date DATE,
    -&gt;                   date_time DATETIME,
    -&gt;                   time_stamp TIMESTAMP);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO y2k VALUES
    -&gt; ("1998-12-31","1998-12-31 23:59:59",19981231235959),
    -&gt; ("1999-01-01","1999-01-01 00:00:00",19990101000000),
    -&gt; ("1999-09-09","1999-09-09 23:59:59",19990909235959),
    -&gt; ("2000-01-01","2000-01-01 00:00:00",20000101000000),
    -&gt; ("2000-02-28","2000-02-28 00:00:00",20000228000000),
    -&gt; ("2000-02-29","2000-02-29 00:00:00",20000229000000),
    -&gt; ("2000-03-01","2000-03-01 00:00:00",20000301000000),
    -&gt; ("2000-12-31","2000-12-31 23:59:59",20001231235959),
    -&gt; ("2001-01-01","2001-01-01 00:00:00",20010101000000),
    -&gt; ("2004-12-31","2004-12-31 23:59:59",20041231235959),
    -&gt; ("2005-01-01","2005-01-01 00:00:00",20050101000000),
    -&gt; ("2030-01-01","2030-01-01 00:00:00",20300101000000),
    -&gt; ("2050-01-01","2050-01-01 00:00:00",20500101000000);
Query OK, 13 rows affected (0.01 sec)
Records: 13  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM y2k;
+------------+---------------------+----------------+
| date       | date_time           | time_stamp     |
+------------+---------------------+----------------+
| 1998-12-31 | 1998-12-31 23:59:59 | 19981231235959 |
| 1999-01-01 | 1999-01-01 00:00:00 | 19990101000000 |
| 1999-09-09 | 1999-09-09 23:59:59 | 19990909235959 |
| 2000-01-01 | 2000-01-01 00:00:00 | 20000101000000 |
| 2000-02-28 | 2000-02-28 00:00:00 | 20000228000000 |
| 2000-02-29 | 2000-02-29 00:00:00 | 20000229000000 |
| 2000-03-01 | 2000-03-01 00:00:00 | 20000301000000 |
| 2000-12-31 | 2000-12-31 23:59:59 | 20001231235959 |
| 2001-01-01 | 2001-01-01 00:00:00 | 20010101000000 |
| 2004-12-31 | 2004-12-31 23:59:59 | 20041231235959 |
| 2005-01-01 | 2005-01-01 00:00:00 | 20050101000000 |
| 2030-01-01 | 2030-01-01 00:00:00 | 20300101000000 |
| 2050-01-01 | 2050-01-01 00:00:00 | 00000000000000 |
+------------+---------------------+----------------+
13 rows in set (0.00 sec)

</pre>

<p>This shows that the <code>DATE</code> and <code>DATETIME</code>
types will not give any problems with future dates (they handle
dates until the year 9999).</p>

<p>The <code>TIMESTAMP</code> type, which is used to store the
current time, has a range up to only <code>2030-01-01</code>.
<code>TIMESTAMP</code> has a range of <code>1970</code> to
<code>2030</code> on 32-bit machines (signed value). On 64-bit
machines it handles times up to <code>2106</code> (unsigned
value).</p>

<p>Even though <code>MySQL Server</code> is Y2K-compliant, it is
your responsibility to provide unambiguous input. See section <a
href="manual.html#Y2K_issues">6.2.2.1 Y2K Issues and Date Types</a>
for <code>MySQL Server</code>'s rules for dealing with ambiguous
date input data (data containing 2-digit year values).</p>

<h2><a id="What_is_MySQL_AB" name="What_is_MySQL_AB"
href="manual_toc.html#What_is_MySQL_AB">1.3 What Is MySQL
AB?</a></h2>

<p><a id="IDX43" name="IDX43"></a></p>

<p><code>MySQL AB</code> is the company of the <code>MySQL</code>
founders and main developers. <code>MySQL AB</code> was originally
established in Sweden by David Axmark, Allan Larsson, and Michael
<code>Monty</code> Widenius.</p>

<p>All the developers of the <code>MySQL</code> server are employed
by the company. We are a virtual organisation with people in a
dozen countries around the world. We communicate extensively over
the Net every day with each other and with our users, supporters
and partners.</p>

<p>We are dedicated to developing the <code>MySQL</code> software
and spreading our database to new users. <code>MySQL AB</code> owns
the copyright to the <code>MySQL</code> source code, the
<code>MySQL</code> logo and trademark, and this manual. See section
<a href="manual.html#What-is">1.2 What Is MySQL?</a>.</p>

<p>The <code>MySQL</code> core values show our dedication to
<code>MySQL</code> and <code>Open Source</code>.</p>

<p>We want the <code>MySQL Database Software</code> to be:</p>

<ul>
<li>The best and the most widely used database in the world.</li>

<li>Available and affordable for all.</li>

<li>Easy to use.</li>

<li>Continuously improving while remaining fast and safe.</li>

<li>Fun to use and improve.</li>

<li>Free from bugs.</li>
</ul>

<p><code>MySQL AB</code> and the people at <code>MySQL
AB</code>:</p>

<ul>
<li>Promote <code>Open Source</code> philosophy and support the
<code>Open Source</code> community.</li>

<li>Aim to be good citizens.</li>

<li>Prefer partners that share our values and mind-set.</li>

<li>Answer e-mail and provide support.</li>

<li>Are a virtual company, networking with others.</li>

<li>Work against software patents.</li>
</ul>

<p>The <code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) provides
the latest information about <code>MySQL</code> and <code>MySQL
AB</code>.</p>

<h3><a id="MySQL_AB_business_model_and_services"
name="MySQL_AB_business_model_and_services"
href="manual_toc.html#MySQL_AB_business_model_and_services">1.3.1
The Business Model and Services of MySQL AB</a></h3>

<p>One of the most common questions we encounter is: ``<em>How can
you make a living from something you give away for free?</em>''
This is how.</p>

<p><code>MySQL AB</code> makes money on support, services,
commercial licenses, and royalties, and we use these revenues to
fund product development and to expand the <code>MySQL</code>
business.</p>

<p>The company has been profitable since its inception. In October
2001, we accepted venture financing from leading Scandinavian
investors and a handful of business angels. This investment is used
to solidify our business model and build a basis for sustainable
growth.</p>

<h4><a id="Business_Services_Support"
name="Business_Services_Support"
href="manual_toc.html#Business_Services_Support">1.3.1.1
Support</a></h4>

<p><code>MySQL AB</code> is run and owned by the founders and main
developers of the <code>MySQL</code> database. The developers are
committed to giving support to customers and other users in order
to stay in touch with their needs and problems. All our support is
given by qualified developers. Really tricky questions are answered
by Michael <code>Monty</code> Widenius, principal author of the
<code>MySQL Server</code>. See section <a
href="manual.html#Support">1.4.1 Support Offered by MySQL
AB</a>.</p>

<p>For more information and ordering support at various levels, see
<a
href="http://www.mysql.com/support/">http://www.mysql.com/support/</a>
or contact our sales staff at <a
href="mailto:sales@mysql.com">sales@mysql.com</a>.</p>

<h4><a id="Business_Services_Training"
name="Business_Services_Training"
href="manual_toc.html#Business_Services_Training">1.3.1.2 Training
and Certification</a></h4>

<p><a id="IDX44" name="IDX44"></a> <a id="IDX45" name="IDX45"></a>
<a id="IDX46" name="IDX46"></a> <a id="IDX47" name="IDX47"></a>
<code>MySQL AB</code> delivers <code>MySQL</code> and related
training worldwide. We offer both open courses and in-house courses
tailored to the specific needs of your company. <code>MySQL
Training</code> is also available through our partners, the
<code>Authorised MySQL Training Centers</code>.</p>

<p>Our training material uses the same example databases as our
documentation and our sample applications, and it is always updated
to reflect the latest <code>MySQL</code> version. Our trainers are
backed by the development team to guarantee the quality of the
training and the continuous development of the course material.
This also ensures that no questions raised during the courses
remain unanswered.</p>

<p>Attending our training courses will enable you to achieve your
goals related to your <code>MySQL</code> applications. You will
also:</p>

<ul>
<li>Save time.</li>

<li>Improve the performance of your application(s).</li>

<li>Reduce or eliminate the need for additional hardware,
decreasing cost.</li>

<li>Enhance security.</li>

<li>Increase customers' and co-workers' satisfaction.</li>

<li>Prepare yourself for <code>MySQL Certification</code>.</li>
</ul>

<p>If you are interested in our training as a potential participant
or as a training partner, please visit the training section at <a
href="http://www.mysql.com/training/">http://www.mysql.com/training/</a>
or contact us at: <a
href="mailto:training@mysql.com">training@mysql.com</a>.</p>

<p>For details about the <code>MySQL Certification Program</code>,
please see <a
href="http://www.mysql.com/certification/">http://www.mysql.com/certification/</a>.</p>

<h4><a id="Business_Services_Consulting"
name="Business_Services_Consulting"
href="manual_toc.html#Business_Services_Consulting">1.3.1.3
Consulting</a></h4>

<p><a id="IDX48" name="IDX48"></a> <a id="IDX49" name="IDX49"></a>
<code>MySQL AB</code> and its <code>Authorised Partners</code>
offer consulting services to users of <code>MySQL Server</code> and
to those who embed <code>MySQL Server</code> in their own software,
all over the world.</p>

<p>Our consultants can help you design and tune your databases,
construct efficient queries, tune your platform for optimal
performance, resolve migration issues, set up replication, build
robust transactional applications, and more. We also help customers
embed <code>MySQL Server</code> in their products and applications
for large-scale deployment.</p>

<p>Our consultants work in close collaboration with our development
team, which ensures the technical quality of our professional
services. Consulting assignments range from 2-day power-start
sessions to projects that span weeks and months. Our expertise not
only covers <code>MySQL Server</code>, but also extends into
programming and scripting languages such as PHP, Perl, and
more.</p>

<p>If you are interested in our consulting services or want to
become a consulting partner, please visit the consulting section of
our web site at <a
href="http://www.mysql.com/consulting/">http://www.mysql.com/consulting/</a>
or contact our consulting staff at <a
href="mailto:consulting@mysql.com">consulting@mysql.com</a>.</p>

<h4><a id="Business_Services_Commercial_licenses"
name="Business_Services_Commercial_licenses"
href="manual_toc.html#Business_Services_Commercial_licenses">1.3.1.4
Commercial Licenses</a></h4>

<p>The <code>MySQL</code> database is released under the <code>GNU
General Public License</code> (<code>GPL</code>). This means that
the <code>MySQL</code> software can be used free of charge under
the <code>GPL</code>. If you do not want to be bound by the
<code>GPL</code> terms (like the requirement that your own
application becomes <code>GPL</code> as well), you may purchase a
commercial license for the same product from <code>MySQL AB</code>.
See <a
href="http://www.mysql.com/products/pricing.html">http://www.mysql.com/products/pricing.html</a>.
Since <code>MySQL AB</code> owns the copyright to the
<code>MySQL</code> source code, we are able to employ <code>Dual
Licensing</code> which means that the same product is available
under <code>GPL</code> and under a commercial license. This does
not in any way affect the <code>Open Source</code> commitment of
<code>MySQL AB</code>. For details about when a commercial license
is required, please see section <a
href="manual.html#MySQL_licenses">1.4.3 MySQL Licenses</a>.</p>

<p>We also sell commercial licenses of third-party <code>Open
Source GPL</code> software that adds value to <code>MySQL
Server</code>. A good example is the <code>InnoDB</code>
transactional storage engine that offers <code>ACID</code> support,
row-level locking, crash recovery, multi-versioning, foreign key
support, and more. See section <a href="manual.html#InnoDB">7.5
<code>InnoDB</code> Tables</a>.</p>

<h4><a id="Business_Services_Partnering"
name="Business_Services_Partnering"
href="manual_toc.html#Business_Services_Partnering">1.3.1.5
Partnering</a></h4>

<p><a id="IDX50" name="IDX50"></a> <code>MySQL AB</code> has a
worldwide partner programme that covers training courses,
consulting &amp; support, publications plus reselling and
distributing <code>MySQL</code> and related products. <code>MySQL
AB Partners</code> get visibility on the <a
href="http://www.mysql.com/">http://www.mysql.com/</a> web site and
the right to use special versions of the <code>MySQL</code>
trademarks to identify their products and promote their
business.</p>

<p>If you are interested in becoming a <code>MySQL AB
Partner</code>, please e-mail <a
href="mailto:partner@mysql.com">partner@mysql.com</a>.</p>

<p>The word <code>MySQL</code> and the <code>MySQL</code> dolphin
logo are trademarks of <code>MySQL AB</code>. See section <a
href="manual.html#MySQL_AB_Logos_and_Trademarks">1.4.4 MySQL AB
Logos and Trademarks</a>. These trademarks represent a significant
value that the <code>MySQL</code> founders have built over the
years.</p>

<h4><a id="Business_Services_Advertising"
name="Business_Services_Advertising"
href="manual_toc.html#Business_Services_Advertising">1.3.1.6
Advertising</a></h4>

<p>The <code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) is popular
among developers and users. In October 2001, we served 10 million
page views. Our visitors represent a group that makes purchase
decisions and recommendations for both software and hardware.
Twelve percent of our visitors authorise purchase decisions, and
only nine percent are not involved in purchase decisions at all.
More than 65% have made one or more online business purchase within
the last half-year, and 70% plan to make one in the next
months.</p>

<h3><a id="Contact_information" name="Contact_information"
href="manual_toc.html#Contact_information">1.3.2 Contact
Information</a></h3>

<p><a id="IDX51" name="IDX51"></a> <a id="IDX52" name="IDX52"></a>
<a id="IDX53" name="IDX53"></a> <a id="IDX54" name="IDX54"></a> <a
id="IDX55" name="IDX55"></a></p>

<p>The <code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) provides
the latest information about <code>MySQL</code> and <code>MySQL
AB</code>.</p>

<p>For press service and inquiries not covered in our News releases
(<a
href="http://www.mysql.com/news/">http://www.mysql.com/news/</a>),
please send e-mail to <a
href="mailto:press@mysql.com">press@mysql.com</a>.</p>

<p>If you have a valid support contract with <code>MySQL AB</code>,
you will get timely, precise answers to your technical questions
about the <code>MySQL</code> software. For more information, see
section <a href="manual.html#Support">1.4.1 Support Offered by
MySQL AB</a>. On our website, see <a
href="http://www.mysql.com/support/">http://www.mysql.com/support/</a>,
or send an e-mail message to <a
href="mailto:sales@mysql.com">sales@mysql.com</a>.</p>

<p>For information about <code>MySQL</code> training, please visit
the training section at <a
href="http://www.mysql.com/training/">http://www.mysql.com/training/</a>.
If you have restricted access to the Internet, please contact the
<code>MySQL AB</code> training staff at <a
href="mailto:training@mysql.com">training@mysql.com</a>. See
section <a href="manual.html#Business_Services_Training">1.3.1.2
Training and Certification</a>.</p>

<p>For information on the <code>MySQL Certification Program</code>,
please see <a
href="http://www.mysql.com/certification/">http://www.mysql.com/certification/</a>.
See section <a
href="manual.html#Business_Services_Training">1.3.1.2 Training and
Certification</a>.</p>

<p>If you're interested in consulting, please visit the consulting
section at <a
href="http://www.mysql.com/consulting/">http://www.mysql.com/consulting/</a>.
If you have restricted access to the Internet, please contact the
<code>MySQL AB</code> consulting staff at <a
href="mailto:consulting@mysql.com">consulting@mysql.com</a>. See
section <a href="manual.html#Business_Services_Consulting">1.3.1.3
Consulting</a>.</p>

<p>Commercial licenses may be purchased online at <a
href="https://order.mysql.com/">https://order.mysql.com/</a>. There
you will also find information on how to fax your purchase order to
<code>MySQL AB</code>. More information about licensing can be
found at <a
href="http://www.mysql.com/products/pricing.html">http://www.mysql.com/products/pricing.html</a>.
If you have questions regarding licensing or you want a quote for a
high-volume license deal, please fill in the contact form on our
web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) or send an
e-mail message to <a
href="mailto:licensing@mysql.com">licensing@mysql.com</a> (for
licensing questions) or to <a
href="mailto:sales@mysql.com">sales@mysql.com</a> (for sales
inquiries). See section <a href="manual.html#MySQL_licenses">1.4.3
MySQL Licenses</a>.</p>

<p>If you represent a business that is interested in partnering
with <code>MySQL AB</code>, please send e-mail to <a
href="mailto:partner@mysql.com">partner@mysql.com</a>. See section
<a href="manual.html#Business_Services_Partnering">1.3.1.5
Partnering</a>.</p>

<p>For more information on the <code>MySQL</code> trademark policy,
refer to <a
href="http://www.mysql.com/company/trademark.html">http://www.mysql.com/company/trademark.html</a>
or send e-mail to <a
href="mailto:trademark@mysql.com">trademark@mysql.com</a>. See
section <a href="manual.html#MySQL_AB_Logos_and_Trademarks">1.4.4
MySQL AB Logos and Trademarks</a>.</p>

<p>If you are interested in any of the <code>MySQL AB</code> jobs
listed in our jobs section (<a
href="http://www.mysql.com/company/jobs/">http://www.mysql.com/company/jobs/</a>),
please send an e-mail message to <a
href="mailto:jobs@mysql.com">jobs@mysql.com</a>. Please do not send
your CV as an attachment, but rather as plain text at the end of
your e-mail message.</p>

<p>For general discussion among our many users, please direct your
attention to the appropriate mailing list. See section <a
href="manual.html#Questions">1.6.1 MySQL Mailing Lists</a>.</p>

<p>Reports of errors (often called bugs), as well as questions and
comments, should be sent to the mailing list at <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. If
you have found a sensitive security bug in the <code>MySQL
Server</code>, please send an e-mail to <a
href="mailto:security@mysql.com">security@mysql.com</a>. See
section <a href="manual.html#Bug_reports">1.6.1.3 How to Report
Bugs or Problems</a>.</p>

<p>If you have benchmark results that we can publish, please
contact us at <a
href="mailto:benchmarks@mysql.com">benchmarks@mysql.com</a>.</p>

<p>If you have any suggestions concerning additions or corrections
to this manual, please send them to the manual team at <a
href="mailto:docs@mysql.com">docs@mysql.com</a>.</p>

<p>For questions or comments about the workings or content of the
<code>MySQL</code> web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>), please
send e-mail to <a
href="mailto:webmaster@mysql.com">webmaster@mysql.com</a>.</p>

<p><code>MySQL AB</code> has a privacy policy, which can be read at
<a
href="http://www.mysql.com/company/privacy.html">http://www.mysql.com/company/privacy.html</a>.
For any queries regarding this policy, please e-mail <a
href="mailto:privacy@mysql.com">privacy@mysql.com</a>.</p>

<p>For all other inquires, please send e-mail to <a
href="mailto:info@mysql.com">info@mysql.com</a>.</p>

<h2><a id="Licensing_and_Support" name="Licensing_and_Support"
href="manual_toc.html#Licensing_and_Support">1.4 MySQL Support and
Licensing</a></h2>

<p><a id="IDX56" name="IDX56"></a> <a id="IDX57"
name="IDX57"></a></p>

<p>This section describes <code>MySQL</code> support and licensing
arrangements.</p>

<h3><a id="Support" name="Support"
href="manual_toc.html#Support">1.4.1 Support Offered by MySQL
AB</a></h3>

<p><a id="IDX58" name="IDX58"></a> <a id="IDX59" name="IDX59"></a>
<a id="IDX60" name="IDX60"></a> <a id="IDX61" name="IDX61"></a> <a
id="IDX62" name="IDX62"></a> <a id="IDX63" name="IDX63"></a> <a
id="IDX64" name="IDX64"></a></p>

<p>Technical support from <code>MySQL AB</code> means
individualised answers to your unique problems direct from the
software engineers who code the <code>MySQL</code> database
engine.</p>

<p>We try to take a broad and inclusive view of technical support.
Almost any problem involving <code>MySQL</code> software is
important to us if it's important to you. Typically customers seek
help on how to get different commands and utilities to work, remove
performance bottlenecks, restore crashed systems, understand
operating system or networking impacts on <code>MySQL</code>, set
up best practices for backup and recovery, utilise
<code>API</code>s, etc. Our support covers only the
<code>MySQL</code> server and our own utilities, not third-party
products that access the <code>MySQL</code> server, though we try
to help with these where we can.</p>

<p>Detailed information about our various support options is given
at <a
href="http://www.mysql.com/support/">http://www.mysql.com/support/</a>,
where support contracts can also be ordered online. If you have
restricted access to the Internet, contact our sales staff at <a
href="mailto:sales@mysql.com">sales@mysql.com</a>.</p>

<p>Technical support is like life insurance. You can live happily
without it for years, but when your hour arrives it becomes
critically important, yet it's too late to buy it! If you use
<code>MySQL</code> Server for important applications and encounter
sudden troubles, it might take too long to figure out all the
answers yourself. You may need immediate access to the most
experienced <code>MySQL</code> troubleshooters available, those
employed by <code>MySQL AB</code>.</p>

<h3><a id="Copyright" name="Copyright"
href="manual_toc.html#Copyright">1.4.2 Copyrights and Licenses Used
by MySQL</a></h3>

<p><a id="IDX65" name="IDX65"></a> <a id="IDX66"
name="IDX66"></a></p>

<p><code>MySQL AB</code> owns the copyright to the
<code>MySQL</code> source code, the <code>MySQL</code> logos and
trademarks and this manual. See section <a
href="manual.html#What_is_MySQL_AB">1.3 What Is MySQL AB?</a>.
Several different licenses are relevant to the <code>MySQL</code>
distribution:</p>

<ol>
<li>All the <code>MySQL</code>-specific source in the server, the
<code>mysqlclient</code> library and the client, as well as the
<code>GNU</code> <code>readline</code> library is covered by the
<code>GNU General Public License</code>. See section <a
href="manual.html#GPL_license">H GNU General Public License</a>.
The text of this license can also be found as the file
<tt>`COPYING'</tt> in the distributions.</li>

<li>The <code>GNU</code> <code>getopt</code> library is covered by
the <code>GNU Lesser General Public License</code>. See section <a
href="manual.html#LGPL_license">I GNU Lesser General Public
License</a>.</li>

<li>Some parts of the source (the <code>regexp</code> library) are
covered by a Berkeley-style copyright.</li>

<li>Older versions of <code>MySQL</code> (3.22 and earlier) are
subject to a more strict license (<a
href="http://www.mysql.com/products/mypl.html">http://www.mysql.com/products/mypl.html</a>).
See the documentation of the specific version for information.</li>

<li>The manual is currently <strong>not</strong> distributed under
a <code>GPL</code>-style license. Use of the manual is subject to
the following terms: 

<ul>
<li>Conversion to other formats is allowed, but the actual content
may not be altered or edited in any way.</li>

<li>You may create a printed copy for your own personal use.</li>

<li>For all other uses, such as selling printed copies or using
(parts of) the manual in another publication, prior written
agreement from <code>MySQL AB</code> is required.</li>
</ul>

Please e-mail <a href="mailto:docs@mysql.com">docs@mysql.com</a>
for more information or if you are interested in doing a
translation.</li>
</ol>

<p>For information about how the <code>MySQL</code> licenses work
in practice, please refer to section <a
href="manual.html#MySQL_licenses">1.4.3 MySQL Licenses</a>. Also
see section <a
href="manual.html#MySQL_AB_Logos_and_Trademarks">1.4.4 MySQL AB
Logos and Trademarks</a>.</p>

<h3><a id="MySQL_licenses" name="MySQL_licenses"
href="manual_toc.html#MySQL_licenses">1.4.3 MySQL Licenses</a></h3>

<p><a id="IDX67" name="IDX67"></a> <a id="IDX68" name="IDX68"></a>
<a id="IDX69" name="IDX69"></a> <a id="IDX70" name="IDX70"></a> <a
id="IDX71" name="IDX71"></a> <a id="IDX72" name="IDX72"></a> <a
id="IDX73" name="IDX73"></a> <a id="IDX74" name="IDX74"></a></p>

<p>The <code>MySQL</code> software is released under the <code>GNU
General Public License</code> (<code>GPL</code>), which probably is
the best known <code>Open Source</code> license. The formal terms
of the <code>GPL</code> license can be found at <a
href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
See also <a
href="http://www.gnu.org/licenses/gpl-faq.html">http://www.gnu.org/licenses/gpl-faq.html</a>
and <a
href="http://www.gnu.org/philosophy/enforcing-gpl.html">http://www.gnu.org/philosophy/enforcing-gpl.html</a>.</p>

<p>Since the <code>MySQL</code> software is released under the
<code>GPL</code>, it may often be used for free, but for certain
uses you may want or need to buy commercial licenses from
<code>MySQL AB</code> at <a
href="https://order.mysql.com/">https://order.mysql.com/</a>. See
<a
href="http://www.mysql.com/products/licensing.html">http://www.mysql.com/products/licensing.html</a>
for more information.</p>

<p>Older versions of <code>MySQL</code> (3.22 and earlier) are
subject to a more strict license (<a
href="http://www.mysql.com/products/mypl.html">http://www.mysql.com/products/mypl.html</a>).
See the documentation of the specific version for information.</p>

<p>Please note that the use of the <code>MySQL</code> software
under commercial license, <code>GPL</code>, or the old
<code>MySQL</code> license does not automatically give you the
right to use <code>MySQL AB</code> trademarks. See section <a
href="manual.html#MySQL_AB_Logos_and_Trademarks">1.4.4 MySQL AB
Logos and Trademarks</a>.</p>

<h4><a id="Using_the_MySQL_software_under_a_commercial_license"
name="Using_the_MySQL_software_under_a_commercial_license"
href="manual_toc.html#Using_the_MySQL_software_under_a_commercial_license">
1.4.3.1 Using the MySQL Software Under a Commercial
License</a></h4>

<p>The <code>GPL</code> license is contagious in the sense that
when a program is linked to a <code>GPL</code> program all the
source code for all the parts of the resulting product must also be
released under the <code>GPL</code>. Otherwise you break the
license terms and forfeit your right to use the <code>GPL</code>
program altogether and also risk damages.</p>

<p>You need a commercial license:</p>

<ul>
<li>When you link a program with any <code>GPL</code> code from the
<code>MySQL</code> software and don't want the resulting product to
be <code>GPL</code>, maybe because you want to build a commercial
product or keep the added non-<code>GPL</code> code closed source
for other reasons. When purchasing commercial licenses, you are not
using the <code>MySQL</code> software under <code>GPL</code> even
though it's the same code.</li>

<li>When you distribute a non-<code>GPL</code> application that
<strong>only</strong> works with the <code>MySQL</code> software
and ship it with the <code>MySQL</code> software. This type of
solution is actually considered to be linking even if it's done
over a network.</li>

<li>When you distribute copies of the <code>MySQL</code> software
without providing the source code as required under the
<code>GPL</code> license.</li>

<li>When you want to support the further development of the
<code>MySQL</code> database even if you don't formally need a
commercial license. Purchasing support directly from <code>MySQL
AB</code> is another good way of contributing to the development of
the <code>MySQL</code> software, with immediate advantages for you.
See section <a href="manual.html#Support">1.4.1 Support Offered by
MySQL AB</a>.</li>
</ul>

<p>If you require a license, you will need one for each
installation of the <code>MySQL</code> software. This covers any
number of CPUs on a machine, and there is no artificial limit on
the number of clients that connect to the server in any way.</p>

<p>For commercial licenses, please visit our website at <a
href="http://www.mysql.com/products/licensing.html">http://www.mysql.com/products/licensing.html</a>.
For support contracts, see <a
href="http://www.mysql.com/support/">http://www.mysql.com/support/</a>.
If you have special needs or you have restricted access to the
Internet, please contact our sales staff at <a
href="mailto:sales@mysql.com">sales@mysql.com</a>.</p>

<h4><a id="Using_the_MySQL_software_for_free_under_GPL"
name="Using_the_MySQL_software_for_free_under_GPL"
href="manual_toc.html#Using_the_MySQL_software_for_free_under_GPL">1.4.3.2
Using the MySQL Software for Free Under GPL</a></h4>

<p><a id="IDX75" name="IDX75"></a> <a id="IDX76"
name="IDX76"></a></p>

<p>You can use the <code>MySQL</code> software for free under the
<code>GPL</code> if you adhere to the conditions of the
<code>GPL</code>. For more complete coverage of the common
questions about the <code>GPL</code> see the generic FAQ from the
Free Software Foundation at <a
href="http://www.gnu.org/licenses/gpl-faq.html">http://www.gnu.org/licenses/gpl-faq.html</a>.
Some common cases:</p>

<ul>
<li>When you distribute both your own application as well as the
<code>MySQL</code> source code under the <code>GPL</code> with your
product.</li>

<li>When you distribute the <code>MySQL</code> source code bundled
with other programs that are not linked to or dependent on the
<code>MySQL</code> system for their functionality even if you sell
the distribution commercially. This is called mere aggregation in
the <code>GPL</code> license.</li>

<li>If you are not distributing <strong>any</strong> part of the
<code>MySQL</code> system, you can use it for free.</li>

<li><a id="IDX77" name="IDX77"></a> <a id="IDX78" name="IDX78"></a>
<a id="IDX79" name="IDX79"></a> <a id="IDX80" name="IDX80"></a>
When you are an Internet Service Provider (ISP), offering web
hosting with <code>MySQL</code> servers for your customers.
However, we do encourage people to use ISPs that have MySQL
support, as this will give them the confidence that if they have
some problem with the <code>MySQL</code> installation, their ISP
will in fact have the resources to solve the problem for them. Note
that even if an ISP does not have a commercial license for
<code>MySQL Server</code>, they should at least give their
customers read access to the source of the <code>MySQL</code>
installation so that the customers can verify that it is patched
correctly.</li>

<li><a id="IDX81" name="IDX81"></a> <a id="IDX82" name="IDX82"></a>
When you use the <code>MySQL</code> Database Software in
conjunction with a web server, you do not need a commercial license
(so long as it is not a product you distribute). This is true even
if you run a commercial web server that uses <code>MySQL
Server</code>, because you are not distributing any part of the
<code>MySQL</code> system. However, in this case we would like you
to purchase <code>MySQL</code> support because the
<code>MySQL</code> software is helping your enterprise.</li>
</ul>

<p>If your use of <code>MySQL</code> database software does not
require a commercial license, we encourage you to purchase support
from <code>MySQL AB</code> anyway. This way you contribute toward
<code>MySQL</code> development and also gain immediate advantages
for yourself. See section <a href="manual.html#Support">1.4.1
Support Offered by MySQL AB</a>.</p>

<p>If you use the <code>MySQL</code> database software in a
commercial context such that you profit by its use, we ask that you
further the development of the <code>MySQL</code> software by
purchasing some level of support. We feel that if the
<code>MySQL</code> database helps your business, it is reasonable
to ask that you help <code>MySQL AB</code>. (Otherwise, if you ask
us support questions, you are not only using for free something
into which we've put a lot a work, you're asking us to provide free
support, too.)</p>

<h3><a id="MySQL_AB_Logos_and_Trademarks"
name="MySQL_AB_Logos_and_Trademarks"
href="manual_toc.html#MySQL_AB_Logos_and_Trademarks">1.4.4 MySQL AB
Logos and Trademarks</a></h3>

<p><a id="IDX83" name="IDX83"></a> <a id="IDX84"
name="IDX84"></a></p>

<p>Many users of the <code>MySQL</code> database want to display
the <code>MySQL AB</code> dolphin logo on their web sites, books,
or boxed products. We welcome and encourage this, although it
should be noted that the word <code>MySQL</code> and the
<code>MySQL</code> dolphin logo are trademarks of <code>MySQL
AB</code> and may only be used as stated in our trademark policy at
<a
href="http://www.mysql.com/company/trademark.html">http://www.mysql.com/company/trademark.html</a>.</p>

<h4><a id="The_Original_MySQL_logo" name="The_Original_MySQL_logo"
href="manual_toc.html#The_Original_MySQL_logo">1.4.4.1 The Original
MySQL Logo</a></h4>

<p>The <code>MySQL</code> dolphin logo was designed by the Finnish
advertising agency Priority in 2001. The dolphin was chosen as a
suitable symbol for the <code>MySQL</code> database since it is a
smart, fast, and lean animal, effortlessly navigating oceans of
data. We also happen to like dolphins.</p>

<p>The original <code>MySQL</code> logo may only be used by
representatives of <code>MySQL AB</code> and by those having a
written agreement allowing them to do so.</p>

<h4><a id="MySQL_Logos_that_may_be_Used_Without_Written_Permission"
name="MySQL_Logos_that_may_be_Used_Without_Written_Permission"
href="manual_toc.html#MySQL_Logos_that_may_be_Used_Without_Written_Permission">
1.4.4.2 MySQL Logos that may be Used Without Written
Permission</a></h4>

<p>We have designed a set of special <em>Conditional Use</em> logos
that may be downloaded from our web site at <a
href="http://www.mysql.com/press/logos.html">http://www.mysql.com/press/logos.html</a>
and used on third-party web sites without written permission from
<code>MySQL AB</code>. The use of these logos is not entirely
unrestricted but, as the name implies, subject to our trademark
policy that is also available on our web site. You should read
through the trademark policy if you plan to use them. The
requirements are basically:</p>

<ul>
<li>Use the logo you need as displayed on the <a
href="http://www.mysql.com/">http://www.mysql.com/</a> site. You
may scale it to fit your needs, but not change colours or design,
or alter the graphics in any way.</li>

<li>Make it evident that you, and not <code>MySQL AB</code>, are
the creator and owner of the site that displays the
<code>MySQL</code> trademark.</li>

<li>Don't use the trademark in a way that is detrimental to
<code>MySQL AB</code> or to the value of <code>MySQL AB</code>
trademarks. We reserve the right to revoke the right to use the
<code>MySQL AB</code> trademark.</li>

<li>If you use the trademark on a web site, make it clickable,
leading directly to <a
href="http://www.mysql.com/">http://www.mysql.com/</a>.</li>

<li>If you are using the <code>MySQL</code> database under
<code>GPL</code> in an application, your application must be
<code>Open Source</code> and be able to connect to a
<code>MySQL</code> server.</li>
</ul>

<p>Contact us at <a
href="mailto:trademark@mysql.com">trademark@mysql.com</a> to
inquire about special arrangements to fit your needs.</p>

<h4><a id="When_need_MySQL_logo_permission"
name="When_need_MySQL_logo_permission"
href="manual_toc.html#When_need_MySQL_logo_permission">1.4.4.3 When
do you need a Written Permission to use MySQL Logos?</a></h4>

<p>In the following cases you need a written permission from
<code>MySQL AB</code> before using <code>MySQL</code> logos:</p>

<ul>
<li>When displaying any <code>MySQL AB</code> logo anywhere except
on your web site.</li>

<li>When displaying any <code>MySQL AB</code> logo except the
<em>Conditional Use</em> logos mentioned previously on web sites or
elsewhere.</li>
</ul>

<p>Out of legal and commercial reasons we have to monitor the use
of MySQL trademarks on products, books, etc. We will usually
require a fee for displaying <code>MySQL AB</code> logos on
commercial products, since we think it is reasonable that some of
the revenue is returned to fund further development of the
<code>MySQL</code> database.</p>

<h4><a id="MySQL_AB_Partnership_Logos"
name="MySQL_AB_Partnership_Logos"
href="manual_toc.html#MySQL_AB_Partnership_Logos">1.4.4.4 MySQL AB
Partnership Logos</a></h4>

<p><code>MySQL</code> partnership logos may only be used by
companies and persons having a written partnership agreement with
<code>MySQL AB</code>. Partnerships include certification as a
<code>MySQL</code> trainer or consultant. Please see section <a
href="manual.html#Business_Services_Partnering">1.3.1.5
Partnering</a>.</p>

<h4><a id="Using_MySQL_word_in_presentations"
name="Using_MySQL_word_in_presentations"
href="manual_toc.html#Using_MySQL_word_in_presentations">1.4.4.5
Using the word <code>MySQL</code> in Printed Text or
Presentations</a></h4>

<p><code>MySQL AB</code> welcomes references to the
<code>MySQL</code> database, but note that the word
<code>MySQL</code> is a trademark of <code>MySQL AB</code>. Because
of this, you should append the trademark symbol (<code>TM</code>)
to the first or most prominent use of the word <code>MySQL</code>
in a text and where appropriate, state that <code>MySQL</code> is a
trademark of <code>MySQL AB</code>. Please refer to our trademark
policy at <a
href="http://www.mysql.com/company/trademark.html">http://www.mysql.com/company/trademark.html</a>
for details.</p>

<h4><a id="Using_MySQL_word_in_company_and_product_names"
name="Using_MySQL_word_in_company_and_product_names"
href="manual_toc.html#Using_MySQL_word_in_company_and_product_names">
1.4.4.6 Using the word <code>MySQL</code> in Company and Product
Names</a></h4>

<p>Use of the word <code>MySQL</code> in product or company names
or in Internet domain names is not allowed without written
permission from <code>MySQL AB</code>.</p>

<h2><a id="MySQL_4.0_In_A_Nutshell" name="MySQL_4.0_In_A_Nutshell"
href="manual_toc.html#MySQL_4.0_In_A_Nutshell">1.5 MySQL 4.x In A
Nutshell</a></h2>

<p>Long promised by <code>MySQL AB</code> and long awaited by our
users, MySQL Server 4.0 is now available in beta version for
download from <a
href="http://www.mysql.com/">http://www.mysql.com/</a> and our
mirrors.</p>

<p>Main new features of MySQL Server 4.0 are geared toward our
existing business and community users, enhancing the MySQL database
software as the solution for mission-critical, heavy-load database
systems. Other new features target the users of embedded
databases.</p>

<h3><a id="Nutshell_Stepwise_Rollout"
name="Nutshell_Stepwise_Rollout"
href="manual_toc.html#Nutshell_Stepwise_Rollout">1.5.1 Stepwise
Rollout</a></h3>

<p>MySQL is starting from 4.0.6 been labelled gamma, which means
that 4.0.x has been available more than 2 months (first in alpha
and then in beta) without any found serious hard to fix bugs and
should now be ready for production use.</p>

<p>We will drop the gamma prefix when MySQL 4.0 has been out for
more than a month without any serious bugs.</p>

<p>Further new features are being added in MySQL 4.1, which is now
available from our bk source tree, and is targeted for alpha
release in first quarter of 2003. See section <a
href="manual.html#Installing_source_tree">2.3.4 Installing from the
Development Source Tree</a>.</p>

<h3><a id="Nutshell_Ready_for_Immediate_Use"
name="Nutshell_Ready_for_Immediate_Use"
href="manual_toc.html#Nutshell_Ready_for_Immediate_Use">1.5.2 Ready
for Immediate Use</a></h3>

<p>All binary releases pass our extensive test suite without any
errors on any of the platforms we test on. MySQL 4.0 has been
tested on by a large number of users and is in production used by
several big sites.</p>

<h3><a id="Nutshell_Embedded_MySQL" name="Nutshell_Embedded_MySQL"
href="manual_toc.html#Nutshell_Embedded_MySQL">1.5.3 Embedded
MySQL</a></h3>

<p><code>libmysqld</code> makes MySQL Server suitable for a vastly
expanded realm of applications. Using the embedded MySQL server
library, one can embed MySQL Server into various applications and
electronics devices, where the end user has no knowledge of there
actually being an underlying database. Embedded MySQL Server is
ideal for use behind the scenes in Internet appliances, public
kiosks, turnkey hardware/software combination units, high
performance Internet servers, self-contained databases distributed
on CD-ROM, etc.</p>

<p>Many users of <code>libmysqld</code> will benefit from the MySQL
<em>Dual Licensing</em>. For those not wishing to be bound by the
GPL, the software is also made available under a commercial
license. The embedded MySQL library uses the same interface as the
normal client library, so it is convenient and easy to use. See
section <a href="manual.html#libmysqld">8.4.9 libmysqld, the
Embedded MySQL Server Library</a>.</p>

<h3><a id="Nutshell_Other_features" name="Nutshell_Other_features"
href="manual_toc.html#Nutshell_Other_features">1.5.4 Other Features
Available From MySQL 4.0</a></h3>

<ul>
<li>Version 4.0 further increases <em>the speed of MySQL
Server</em> in a number of areas, such as bulk
<code>INSERT</code>s, searching on packed indexes, creation of
<code>FULLTEXT</code> indexes, as well as
<code>COUNT(DISTINCT)</code>.</li>

<li>The <code>InnoDB</code> storage engine is now offered as a
feature of the standard MySQL server, including full support for
<code>transactions</code> and <code>row-level locking</code>.</li>

<li>Our German, Austrian, and Swiss users will note that we have a
new character set, <code>latin1_de</code>, which corrects the
<em>German sorting order</em>, placing German umlauts in the same
order as German telephone books.</li>

<li>Features to simplify migration from other database systems to
MySQL Server include <code>TRUNCATE TABLE</code> (like in Oracle)
and <code>IDENTITY</code> as a synonym for automatically
incremented keys (like in Sybase). Many users will also be happy to
learn that MySQL Server now supports the <code>UNION</code>
statement, a long-awaited standard SQL feature.</li>

<li>In the process of building features for new users, we have not
forgotten requests by the community of loyal users. We have
multi-table <code>DELETE</code> and <code>UPDATE</code> statements.
By adding support for <code>symbolic linking</code> to
<code>MyISAM</code> on the table level (and not just the database
level as before), as well as by enabling symlink handling by
default on Windows, we hope to show that we take enhancement
requests seriously. Functions like <code>SQL_CALC_FOUND_ROWS</code>
and <code>FOUND_ROWS()</code> make it possible to know how many
rows a query would have returned without a <code>LIMIT</code>
clause.</li>
</ul>

<h3><a id="Nutshell_Future_features"
name="Nutshell_Future_features"
href="manual_toc.html#Nutshell_Future_features">1.5.5 Future MySQL
4.x Features</a></h3>

<p>For the upcoming MySQL Server 4.x releases, expect the following
features now still under development:</p>

<ul>
<li>Mission-critical, heavy-load users of MySQL Server will
appreciate the additions to our replication system and our online
hot backup. Later versions of 4.x will include <code>fail-safe
replication</code>; already existing in 4.0, the <code>LOAD DATA
FROM MASTER</code> command will soon automate slave setup. The
<code>online backup</code> will make it easy to add a new
replication slave without taking down the master, and have a very
low performance penalty on update-heavy systems.</li>

<li>A convenience feature for Database Administrators is that
<code>mysqld</code> parameters (startup options) can soon be set
without taking down the servers.</li>

<li>The new <code>FULLTEXT</code> search properties of MySQL Server
4.0 enable the use of <code>FULLTEXT</code> indexing of large text
masses with both binary and natural-language searching logic. Users
can customise minimal word length and define their own stop word
lists in any human language, enabling a new set of applications to
be built on MySQL Server.</li>

<li>Many read-heavy applications will benefit from further
increased speed through the rewritten <code>key cache</code>.</li>

<li>Many developers will also be happy to see the <code>MySQL
command help</code> in the client.</li>
</ul>

<h3><a id="Nutshell_4.1_development_release"
name="Nutshell_4.1_development_release"
href="manual_toc.html#Nutshell_4.1_development_release">1.5.6 MySQL
4.1, The Following Development Release</a></h3>

<p>MySQL Server 4.0 lays the foundation for the new features of
MySQL Server 4.1 and onward, such as <code>nested subqueries</code>
(4.1), <code>stored procedures</code> (5.0), and <code>foreign key
integrity rules</code> for <code>MyISAM</code> tables (5.0), which
form the top of the wish list for many of our customers.</p>

<p>After those additions, critics of the MySQL Database Server have
to be more imaginative than ever in pointing out deficiencies in
the MySQL Database Management System. For long already known for
its stability, speed, and ease of use, MySQL Server will then match
the requirement checklist of very demanding buyers.</p>

<h2><a id="MySQL_Information_Sources"
name="MySQL_Information_Sources"
href="manual_toc.html#MySQL_Information_Sources">1.6 MySQL
Information Sources</a></h2>

<h3><a id="Questions" name="Questions"
href="manual_toc.html#Questions">1.6.1 MySQL Mailing Lists</a></h3>

<p><a id="IDX85" name="IDX85"></a> <a id="IDX86" name="IDX86"></a>
<a id="IDX87" name="IDX87"></a></p>

<p>This section introduces you to the MySQL mailing lists, and
gives some guidelines as to how to use them. By subscribing to a
mailing list, you will receive as e-mail messages all other
postings on the list, and you will be able to send in your own
questions and answers.</p>

<h4><a id="Mailing-list" name="Mailing-list"
href="manual_toc.html#Mailing-list">1.6.1.1 The MySQL Mailing
Lists</a></h4>

<p><a id="IDX88" name="IDX88"></a> <a id="IDX89"
name="IDX89"></a></p>

<p>To subscribe to the main MySQL mailing list, send a message to
the electronic mail address <a
href="mailto:mysql-subscribe@lists.mysql.com">mysql-subscribe@lists.mysql.com</a>.</p>

<p>To unsubscribe from the main MySQL mailing list, send a message
to the electronic mail address <a
href="mailto:mysql-unsubscribe@lists.mysql.com">mysql-unsubscribe@lists.mysql.com</a>.</p>

<p>Only the address to which you send your messages is significant.
The subject line and the body of the message are ignored.</p>

<p>If your reply address is not valid, you can specify your address
explicitly, by adding a hyphen to the subscribe or unsubscribe
command word, followed by your address with the <samp>`@'</samp>
character in your address replaced by a <samp>`='</samp>. For
example, to subscribe <code>your_name@host.domain</code>, send a
message to
<code>mysql-subscribe-your_name=host.domain@lists.mysql.com</code>.</p>

<p>Mail to <a
href="mailto:mysql-subscribe@lists.mysql.com">mysql-subscribe@lists.mysql.com</a>
or <a
href="mailto:mysql-unsubscribe@lists.mysql.com">mysql-unsubscribe@lists.mysql.com</a>
is handled automatically by the ezmlm mailing list processor.
Information about ezmlm is available at the ezmlm web site (<a
href="http://www.ezmlm.org/">http://www.ezmlm.org/</a>).</p>

<p>To post a message to the list itself, send your message to
<code>mysql@lists.mysql.com</code>. However, please <strong>do
not</strong> send mail about subscribing or unsubscribing to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>
because any mail sent to that address is distributed automatically
to thousands of other users.</p>

<p>Your local site may have many subscribers to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. If
so, it may have a local mailing list, so messages sent from
<code>lists.mysql.com</code> to your site are propagated to the
local list. In such cases, please contact your system administrator
to be added to or dropped from the local MySQL list.</p>

<p>If you wish to have traffic for a mailing list go to a separate
mailbox in your mail program, set up a filter based on the message
headers. You can use either the <code>List-ID:</code> or
<code>Delivered-To:</code> headers to identify list messages.</p>

<p>The following MySQL mailing lists exist:</p>

<dl compact="compact">
<dt><code><a
href="mailto:announce-subscribe@lists.mysql.com">announce-subscribe@lists.mysql.com</a>
announce</code></dt>

<dd>This is for announcement of new versions of MySQL and related
programs. This is a low-volume list all MySQL users should
subscribe to.</dd>

<dt><code><a
href="mailto:mysql-subscribe@lists.mysql.com">mysql-subscribe@lists.mysql.com</a>
mysql</code></dt>

<dd>The main list for general MySQL discussion. Please note that
some topics are better discussed on the more-specialised lists. If
you post to the wrong list, you may not get an answer!</dd>

<dt><code><a
href="mailto:mysql-digest-subscribe@lists.mysql.com">mysql-digest-subscribe@lists.mysql.com</a>
mysql-digest</code></dt>

<dd>The <code>mysql</code> list in digest form. That means you get
all individual messages, sent as one large mail message once a
day.</dd>

<dt><code><a
href="mailto:bugs-subscribe@lists.mysql.com">bugs-subscribe@lists.mysql.com</a>
bugs</code></dt>

<dd>On this list you should only post a full, repeatable bug report
using the <code>mysqlbug</code> script (if you are running on
Windows, you should include a description of the operating system
and the MySQL version). Preferably, you should test the problem
using the latest stable or development version of MySQL Server
before posting! Anyone should be able to repeat the bug by just
using <code>mysql test &lt; script</code> on the included test
case. All bugs posted on this list will be corrected or documented
in the next MySQL release! If only small code changes are needed,
we will also post a patch that fixes the problem.</dd>

<dt><code><a
href="mailto:bugs-digest-subscribe@lists.mysql.com">bugs-digest-subscribe@lists.mysql.com</a>
bugs-digest</code></dt>

<dd>The <code>bugs</code> list in digest form.</dd>

<dt><code><a
href="mailto:internals-subscribe@lists.mysql.com">internals-subscribe@lists.mysql.com</a>
internals</code></dt>

<dd>A list for people who work on the MySQL code. On this list one
can also discuss MySQL development and post patches.</dd>

<dt><code><a
href="mailto:internals-digest-subscribe@lists.mysql.com">internals-digest-subscribe@lists.mysql.com</a>
internals-digest</code></dt>

<dd>A digest version of the <code>internals</code> list.</dd>

<dt><code><a
href="mailto:java-subscribe@lists.mysql.com">java-subscribe@lists.mysql.com</a>
java</code></dt>

<dd>Discussion about the MySQL server and Java. Mostly about the
JDBC drivers including MySQL Connector/J.</dd>

<dt><code><a
href="mailto:java-digest-subscribe@lists.mysql.com">java-digest-subscribe@lists.mysql.com</a>
java-digest</code></dt>

<dd>A digest version of the <code>java</code> list.</dd>

<dt><code><a
href="mailto:win32-subscribe@lists.mysql.com">win32-subscribe@lists.mysql.com</a>
win32</code></dt>

<dd>All things concerning the MySQL software on Microsoft operating
systems such as Windows 9x/Me/NT/2000/XP.</dd>

<dt><code><a
href="mailto:win32-digest-subscribe@lists.mysql.com">win32-digest-subscribe@lists.mysql.com</a>
win32-digest</code></dt>

<dd>A digest version of the <code>win32</code> list.</dd>

<dt><code><a
href="mailto:myodbc-subscribe@lists.mysql.com">myodbc-subscribe@lists.mysql.com</a>
myodbc</code></dt>

<dd>All things about connecting to the MySQL server with ODBC.</dd>

<dt><code><a
href="mailto:myodbc-digest-subscribe@lists.mysql.com">myodbc-digest-subscribe@lists.mysql.com</a>
myodbc-digest</code></dt>

<dd>A digest version of the <code>myodbc</code> list.</dd>

<dt><code><a
href="mailto:mysqlcc-subscribe@lists.mysql.com">mysqlcc-subscribe@lists.mysql.com</a>
mysqlcc</code></dt>

<dd>All things about the <code>MySQL Control Center</code>
graphical client.</dd>

<dt><code><a
href="mailto:mysqlcc-digest-subscribe@lists.mysql.com">mysqlcc-digest-subscribe@lists.mysql.com</a>
mysqlcc-digest</code></dt>

<dd>A digest version of the <code>mysqlcc</code> list.</dd>

<dt><code><a
href="mailto:plusplus-subscribe@lists.mysql.com">plusplus-subscribe@lists.mysql.com</a>
plusplus</code></dt>

<dd>All things concerning programming with the C++ API to
MySQL.</dd>

<dt><code><a
href="mailto:plusplus-digest-subscribe@lists.mysql.com">plusplus-digest-subscribe@lists.mysql.com</a>
plusplus-digest</code></dt>

<dd>A digest version of the <code>plusplus</code> list.</dd>

<dt><code><a
href="mailto:msql-mysql-modules-subscribe@lists.mysql.com">msql-mysql-modules-subscribe@lists.mysql.com</a>
msql-mysql-modules</code></dt>

<dd>A list about the Perl support for MySQL with
msql-mysql-modules.</dd>

<dt><code><a
href="mailto:msql-mysql-modules-digest-subscribe@lists.mysql.com">msql-mysql-modules-digest-subscribe@lists.mysql.com</a>
msql-mysql-modules-digest</code></dt>

<dd>A digest version of the <code>msql-mysql-modules</code>
list.</dd>
</dl>

<p>You subscribe or unsubscribe to all lists in the same way as
described previously. In your subscribe or unsubscribe message,
just put the appropriate mailing list name rather than
<code>mysql</code>. For example, to subscribe to or unsubscribe
from the <code>myodbc</code> list, send a message to <a
href="mailto:myodbc-subscribe@lists.mysql.com">myodbc-subscribe@lists.mysql.com</a>
or <a
href="mailto:myodbc-unsubscribe@lists.mysql.com">myodbc-unsubscribe@lists.mysql.com</a>.</p>

<p>If you can't get an answer for your questions from the mailing
list, one option is to pay for support from MySQL AB, which will
put you in direct contact with MySQL developers. See section <a
href="manual.html#Support">1.4.1 Support Offered by MySQL
AB</a>.</p>

<p>The following table shows some MySQL mailing in languages other
than English. Note that these are not operated by MySQL AB, so we
can't guarantee the quality on these.</p>

<dl compact="compact">
<dt><code><a
href="mailto:mysql-france-subscribe@yahoogroups.com">mysql-france-subscribe@yahoogroups.com</a>
A French mailing list</code></dt>

<dt><code><a href="mailto:list@tinc.net">list@tinc.net</a> A Korean
mailing list</code></dt>

<dd>E-mail <code>subscribe mysql your@e-mail.address</code> to this
list.</dd>

<dt><code><a
href="mailto:mysql-de-request@lists.4t2.com">mysql-de-request@lists.4t2.com</a>
A German mailing list</code></dt>

<dd>E-mail <code>subscribe mysql-de your@e-mail.address</code> to
this list. You can find information about this mailing list at <a
href="http://www.4t2.com/mysql/">http://www.4t2.com/mysql/</a>.</dd>

<dt><code><a
href="mailto:mysql-br-request@listas.linkway.com.br">mysql-br-request@listas.linkway.com.br</a>
A Portugese mailing list</code></dt>

<dd>E-mail <code>subscribe mysql-br your@e-mail.address</code> to
this list.</dd>

<dt><code><a
href="mailto:mysql-alta@elistas.net">mysql-alta@elistas.net</a> A
Spanish mailing list</code></dt>

<dd>E-mail <code>subscribe mysql your@e-mail.address</code> to this
list.</dd>
</dl>

<h4><a id="Asking_questions" name="Asking_questions"
href="manual_toc.html#Asking_questions">1.6.1.2 Asking Questions or
Reporting Bugs</a></h4>

<p><a id="IDX90" name="IDX90"></a> <a id="IDX91" name="IDX91"></a>
<a id="IDX92" name="IDX92"></a></p>

<p>Before posting a bug report or question, please do the
following:</p>

<ul>
<li>Start by searching the MySQL online manual at:<br />
<a
href="http://www.mysql.com/doc/">http://www.mysql.com/doc/</a><br />

We try to keep the manual up to date by updating it frequently with
solutions to newly found problems! The change history appendix (<a
href="http://www.mysql.com/doc/en/News.html">http://www.mysql.com/doc/en/News.html</a>)
can be particularly useful since it is quite possible that a newer
version already contains a solution to your problem.</li>

<li>Search the MySQL mailing list archives:<br />
<a href="http://lists.mysql.com/">http://lists.mysql.com/</a><br />
</li>

<li>You can also use <a
href="http://www.mysql.com/search/">http://www.mysql.com/search/</a>
to search all the web pages (including the manual) that are located
at <a href="http://www.mysql.com/">http://www.mysql.com/</a>.</li>
</ul>

<p>If you can't find an answer in the manual or the archives, check
with your local MySQL expert. If you still can't find an answer to
your question, go ahead and read the next section about how to send
mail to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>.</p>

<h4><a id="Bug_reports" name="Bug_reports"
href="manual_toc.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a></h4>

<p><a id="IDX93" name="IDX93"></a> <a id="IDX94" name="IDX94"></a>
<a id="IDX95" name="IDX95"></a> <a id="IDX96" name="IDX96"></a> <a
id="IDX97" name="IDX97"></a> <a id="IDX98" name="IDX98"></a> <a
id="IDX99" name="IDX99"></a></p>

<p>Writing a good bug report takes patience, but doing it right the
first time saves time for us and for you. A good bug report
containing a full test case for the bug will make it very likely
that we will fix it in the next release. This section will help you
write your report correctly so that you don't waste your time doing
things that may not help us much or at all.</p>

<p>We encourage everyone to use the <code>mysqlbug</code> script to
generate a bug report (or a report about any problem), if possible.
<code>mysqlbug</code> can be found in the <tt>`scripts'</tt>
directory in the source distribution, or for a binary distribution,
in the <tt>`bin'</tt> directory under your MySQL installation
directory. If you are unable to use <code>mysqlbug</code>, you
should still include all the necessary information listed in this
section.</p>

<p>The <code>mysqlbug</code> script helps you generate a report by
determining much of the following information automatically, but if
something important is missing, please include it with your
message! Please read this section carefully and make sure that all
the information described here is included in your report.</p>

<p><a id="IDX100" name="IDX100"></a> The normal place to report
bugs and problems is <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. If
you can make a test case that clearly demonstrates the bug, you
should post it to the <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a> list.
Note that on this list you should only post a full, repeatable bug
report using the <code>mysqlbug</code> script. If you are running
on Windows, you should include a description of the operating
system and the MySQL version. Preferably, you should test the
problem using the latest stable or development version of MySQL
Server before posting! Anyone should be able to repeat the bug by
just using ``<code>mysql test &lt; script</code>'' on the included
test case or run the shell or Perl script that is included in the
bug report. All bugs posted on the <code>bugs</code> list will be
corrected or documented in the next MySQL release! If only small
code changes are needed to correct this problem, we will also post
a patch that fixes the problem.</p>

<p>If you have found a sensitive security bug in MySQL, you should
send an e-mail to <a
href="mailto:security@mysql.com">security@mysql.com</a>.</p>

<p>Remember that it is possible to respond to a message containing
too much information, but not to one containing too little. Often
people omit facts because they think they know the cause of a
problem and assume that some details don't matter. A good principle
is: if you are in doubt about stating something, state it! It is a
thousand times faster and less troublesome to write a couple of
lines more in your report than to be forced to ask again and wait
for the answer because you didn't include enough information the
first time.</p>

<p>The most common errors are that people don't indicate the
version number of the MySQL distribution they are using, or don't
indicate what platform they have the MySQL server installed on
(including the platform version number). This is highly relevant
information, and in 99 cases out of 100 the bug report is useless
without it! Very often we get questions like, ``Why doesn't this
work for me?'' Then we find that the feature requested wasn't
implemented in that MySQL version, or that a bug described in a
report has been fixed already in newer MySQL versions. Sometimes
the error is platform-dependent; in such cases, it is next to
impossible to fix anything without knowing the operating system and
the version number of the platform.</p>

<p>Remember also to provide information about your compiler, if it
is related to the problem. Often people find bugs in compilers and
think the problem is MySQL-related. Most compilers are under
development all the time and become better version by version. To
determine whether your problem depends on your compiler, we need to
know what compiler is used. Note that every compiling problem
should be regarded as a bug report and reported accordingly.</p>

<p>It is most helpful when a good description of the problem is
included in the bug report. That is, a good example of all the
things you did that led to the problem and the problem itself
exactly described. The best reports are those that include a full
example showing how to reproduce the bug or problem. See section <a
href="manual.html#Reproduceable_test_case">E.1.6 Making a Test Case
When You Experience Table Corruption</a>.</p>

<p>If a program produces an error message, it is very important to
include the message in your report! If we try to search for
something from the archives using programs, it is better that the
error message reported exactly matches the one that the program
produces. (Even the case should be observed!) You should never try
to remember what the error message was; instead, copy and paste the
entire message into your report!</p>

<p>If you have a problem with MyODBC, you should try to generate a
MyODBC trace file. See section <a
href="manual.html#MyODBC_bug_report">8.3.7 Reporting Problems with
MyODBC</a>.</p>

<p>Please remember that many of the people who will read your
report will do so using an 80-column display. When generating
reports or examples using the <code>mysql</code> command-line tool,
you should therefore use the <code>--vertical</code> option (or the
<code>\G</code> statement terminator) for output that would exceed
the available width for such a display (for example, with the
<code>EXPLAIN SELECT</code> statement; see the example later in
this section).</p>

<p><a id="IDX101" name="IDX101"></a> Please include the following
information in your report:</p>

<ul>
<li>The version number of the MySQL distribution you are using (for
example, MySQL Version 3.22.22). You can find out which version you
are running by executing <code>mysqladmin version</code>.
<code>mysqladmin</code> can be found in the <tt>`bin'</tt>
directory under your MySQL installation directory.</li>

<li>The manufacturer and model of the machine you are working
on.</li>

<li>The operating system name and version. For most operating
systems, you can get this information by executing the Unix command
<code>uname -a</code>.</li>

<li>Sometimes the amount of memory (real and virtual) is relevant.
If in doubt, include these values.</li>

<li>If you are using a source distribution of the MySQL software,
the name and version number of the compiler used is needed. If you
have a binary distribution, the distribution name is needed.</li>

<li>If the problem occurs during compilation, include the exact
error message(s) and also a few lines of context around the
offending code in the file where the error occurred.</li>

<li>If <code>mysqld</code> died, you should also report the query
that crashed <code>mysqld</code>. You can usually find this out by
running <code>mysqld</code> with logging enabled. See section <a
href="manual.html#Using_log_files">E.1.5 Using Log Files to Find
Cause of Errors in mysqld</a>.</li>

<li>If any database table is related to the problem, include the
output from <code>mysqldump --no-data db_name tbl_name1 tbl_name2
...</code>. This is very easy to do and is a powerful way to get
information about any table in a database that will help us create
a situation matching the one you have.</li>

<li>For speed-related bugs or problems with <code>SELECT</code>
statements, you should always include the output of <code>EXPLAIN
SELECT ...</code>, and at least the number of rows that the
<code>SELECT</code> statement produces. You should also include the
output from <code>SHOW CREATE TABLE table_name</code> for each
involved table. The more information you give about your situation,
the more likely it is that someone can help you! For example, the
following is an example of a very good bug report (it should of
course be posted with the <code>mysqlbug</code> script): Example
run using the <code>mysql</code> command-line tool (note the use of
the <code>\G</code> statement terminator for statements whose
output width would otherwise exceed that of an 80-column display
device): 

<pre>
mysql&gt; SHOW VARIABLES;
mysql&gt; SHOW COLUMNS FROM ...\G
       &lt;output from SHOW COLUMNS&gt;
mysql&gt; EXPLAIN SELECT ...\G
       &lt;output from EXPLAIN&gt;
mysql&gt; FLUSH STATUS;
mysql&gt; SELECT ...;
       &lt;A short version of the output from SELECT,
       including the time taken to run the query&gt;
mysql&gt; SHOW STATUS;
       &lt;output from SHOW STATUS&gt;
</pre>
</li>

<li>If a bug or problem occurs while running <code>mysqld</code>,
try to provide an input script that will reproduce the anomaly.
This script should include any necessary source files. The more
closely the script can reproduce your situation, the better. If you
can make a reproduceable test case, you should post this to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a> for a
high-priority treatment! If you can't provide a script, you should
at least include the output from <code>mysqladmin variables
extended-status processlist</code> in your mail to provide some
information of how your system is performing!</li>

<li>If you can't produce a test case in a few rows, or if the test
table is too big to be mailed to the mailing list (more than 10
rows), you should dump your tables using <code>mysqldump</code> and
create a <tt>`README'</tt> file that describes your problem. Create
a compressed archive of your files using <code>tar</code> and
<code>gzip</code> or <code>zip</code>, and use <code>ftp</code> to
transfer the archive to <a
href="ftp://support.mysql.com/pub/mysql/secret/">ftp://support.mysql.com/pub/mysql/secret/</a>.
Then send a short description of the problem to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a>.</li>

<li>If you think that the MySQL server produces a strange result
from a query, include not only the result, but also your opinion of
what the result should be, and an account describing the basis for
your opinion.</li>

<li>When giving an example of the problem, it's better to use the
variable names, table names, etc., that exist in your actual
situation than to come up with new names. The problem could be
related to the name of a variable or table! These cases are rare,
perhaps, but it is better to be safe than sorry. After all, it
should be easier for you to provide an example that uses your
actual situation, and it is by all means better for us. In case you
have data you don't want to show to others, you can use
<code>ftp</code> to transfer it to <a
href="ftp://support.mysql.com/pub/mysql/secret/">ftp://support.mysql.com/pub/mysql/secret/</a>.
If the data is really top secret and you don't want to show it even
to us, then go ahead and provide an example using other names, but
please regard this as the last choice.</li>

<li>Include all the options given to the relevant programs, if
possible. For example, indicate the options that you use when you
start the <code>mysqld</code> daemon and that you use to run any
MySQL client programs. The options to programs like
<code>mysqld</code> and <code>mysql</code>, and to the
<code>configure</code> script, are often keys to answers and are
very relevant! It is never a bad idea to include them anyway! If
you use any modules, such as Perl or PHP, please include the
version number(s) of those as well.</li>

<li>If your question is related to the privilege system, please
include the output of <code>mysqlaccess</code>, the output of
<code>mysqladmin reload</code>, and all the error messages you get
when trying to connect! When you test your privileges, you should
first run <code>mysqlaccess</code>. After this, execute
<code>mysqladmin reload version</code> and try to connect with the
program that gives you trouble. <code>mysqlaccess</code> can be
found in the <tt>`bin'</tt> directory under your MySQL installation
directory.</li>

<li>If you have a patch for a bug, that is good. But don't assume
the patch is all we need, or that we will use it, if you don't
provide some necessary information such as test cases showing the
bug that your patch fixes. We might find problems with your patch
or we might not understand it at all; if so, we can't use it. If we
can't verify exactly what the patch is meant for, we won't use it.
Test cases will help us here. Show that the patch will handle all
the situations that may occur. If we find a borderline case (even a
rare one) where the patch won't work, it may be useless.</li>

<li>Guesses about what the bug is, why it occurs, or what it
depends on are usually wrong. Even the MySQL team can't guess such
things without first using a debugger to determine the real cause
of a bug.</li>

<li>Indicate in your mail message that you have checked the
reference manual and mail archive so that others know you have
tried to solve the problem yourself.</li>

<li>If you get a <code>parse error</code>, please check your syntax
closely! If you can't find something wrong with it, it's extremely
likely that your current version of MySQL Server doesn't support
the query you are using. If you are using the current version and
the manual at <a
href="http://www.mysql.com/doc/">http://www.mysql.com/doc/</a>
doesn't cover the syntax you are using, MySQL Server doesn't
support your query. In this case, your only options are to
implement the syntax yourself or e-mail <a
href="mailto:licensing@mysql.com">licensing@mysql.com</a> and ask
for an offer to implement it! If the manual covers the syntax you
are using, but you have an older version of MySQL Server, you
should check the MySQL change history to see when the syntax was
implemented. In this case, you have the option of upgrading to a
newer version of MySQL Server. See section <a
href="manual.html#News">D MySQL Change History</a>.</li>

<li>If you have a problem such that your data appears corrupt or
you get errors when you access some particular table, you should
first check and then try repairing your tables with
<code>myisamchk</code> or <code>CHECK TABLE</code> and <code>REPAIR
TABLE</code>. See section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>.</li>

<li>If you often get corrupted tables you should try to find out
when and why this happens. In this case, the
<tt>`mysql-data-directory/'hostname'.err'</tt> file may contain
some information about what happened. See section <a
href="manual.html#Error_log">4.9.1 The Error Log</a>. Please
include any relevant information from this file in your bug report.
Normally <code>mysqld</code> should <strong>never</strong> crash a
table if nothing killed it in the middle of an update! If you can
find the cause of <code>mysqld</code> dying, it's much easier for
us to provide you with a fix for the problem. See section <a
href="manual.html#What_is_crashing">A.1 How to Determine What Is
Causing Problems</a>.</li>

<li>If possible, download and install the most recent version of
MySQL Server and check whether it solves your problem. All versions
of the MySQL software are thoroughly tested and should work without
problems. We believe in making everything as backward-compatible as
possible, and you should be able to switch MySQL versions without
any hassle. See section <a href="manual.html#Which_version">2.2.3
Which MySQL Version to Use</a>.</li>
</ul>

<p><a id="IDX102" name="IDX102"></a> <a id="IDX103"
name="IDX103"></a> <a id="IDX104" name="IDX104"></a> <a id="IDX105"
name="IDX105"></a> If you are a support customer, please cross-post
the bug report to <a
href="mailto:mysql-support@mysql.com">mysql-support@mysql.com</a>
for higher-priority treatment, as well as to the appropriate
mailing list to see if someone else has experienced (and perhaps
solved) the problem.</p>

<p>For information on reporting bugs in <code>MyODBC</code>, see
section <a href="manual.html#ODBC_Problems">8.3.4 How to Report
Problems with MyODBC</a>.</p>

<p>For solutions to some common problems, see section <a
href="manual.html#Problems">A Problems and Common Errors</a>.</p>

<p>When answers are sent to you individually and not to the mailing
list, it is considered good etiquette to summarise the answers and
send the summary to the mailing list so that others may have the
benefit of responses you received that helped you solve your
problem!</p>

<h4><a id="Answering_questions" name="Answering_questions"
href="manual_toc.html#Answering_questions">1.6.1.4 Guidelines for
Answering Questions on the Mailing List</a></h4>

<p><a id="IDX106" name="IDX106"></a> <a id="IDX107"
name="IDX107"></a> <a id="IDX108" name="IDX108"></a> <a id="IDX109"
name="IDX109"></a></p>

<p>If you consider your answer to have broad interest, you may want
to post it to the mailing list instead of replying directly to the
individual who asked. Try to make your answer general enough that
people other than the original poster may benefit from it. When you
post to the list, please make sure that your answer is not a
duplication of a previous answer.</p>

<p>Try to summarise the essential part of the question in your
reply; don't feel obliged to quote the entire original message.</p>

<p>Please don't post mail messages from your browser with HTML mode
turned on! Many users don't read mail with a browser!</p>

<h3><a id="IRC" name="IRC" href="manual_toc.html#IRC">1.6.2 MySQL
Community Support on IRC (Internet Relay Chat)</a></h3>

<p><a id="IDX110" name="IDX110"></a> <a id="IDX111"
name="IDX111"></a></p>

<p>In addition to the various MySQL mailing lists, you can find
experienced community people on <code>IRC</code> (<code>Internet
Relay Chat</code>). These are the best networks/channels currently
known to us:</p>

<ul>
<li><strong>freenode</strong> (see <a
href="http://www.freenode.net/">http://www.freenode.net/</a> for
servers) 

<ul>
<li><code>#mysql</code> Primarily MySQL questions but other
database and SQL questions welcome.</li>

<li><code>#mysqlphp</code> Questions about MySQL+PHP, a popular
combo.</li>
</ul>
</li>

<li><strong>EFnet</strong> (see <a
href="http://www.efnet.org/">http://www.efnet.org/</a> for servers)


<ul>
<li><code>#mysql</code> MySQL questions.</li>
</ul>
</li>
</ul>

<p>If you are looking for IRC client software to connect to an IRC
network, take a peek at <code>X-Chat</code> (<a
href="http://www.xchat.org/">http://www.xchat.org/</a>). X-Chat is
available for Unix as well as for Windows platforms.</p>

<h2><a id="Compatibility" name="Compatibility"
href="manual_toc.html#Compatibility">1.7 How Standards-compatible
Is MySQL?</a></h2>

<p><a id="IDX112" name="IDX112"></a> <a id="IDX113"
name="IDX113"></a> <a id="IDX114" name="IDX114"></a> <a id="IDX115"
name="IDX115"></a></p>

<p>This section describes how MySQL relates to the ANSI SQL
standards. MySQL Server has many extensions to the ANSI SQL
standards, and here you will find out what they are and how to use
them. You will also find information about functionality missing
from MySQL Server, and how to work around some differences.</p>

<p>Our goal is to not, without a very good reason, restrict MySQL
Server usability for any usage. Even if we don't have the resources
to do development for every possible use, we are always willing to
help and offer suggestions to people who are trying to use MySQL
Server in new territories.</p>

<p>One of our main goals with the product is to continue to work
toward ANSI 99 compliancy, but without sacrificing speed or
reliability. We are not afraid to add extensions to SQL or support
for non-SQL features if this greatly increases the usability of
MySQL Server for a big part of our users. (The new
<code>HANDLER</code> interface in MySQL Server 4.0 is an example of
this strategy. See section <a href="manual.html#HANDLER">6.4.2
<code>HANDLER</code> Syntax</a>.)</p>

<p>We will continue to support transactional and non-transactional
databases to satisfy both heavy web/logging usage and
mission-critical 24/7 usage.</p>

<p>MySQL Server was designed from the start to work with medium
size databases (10-100 million rows, or about 100 MB per table) on
small computer systems. We will continue to extend MySQL Server to
work even better with terabyte-size databases, as well as to make
it possible to compile a reduced MySQL version that is more
suitable for hand-held devices and embedded usage. The compact
design of the MySQL server makes both of these directions possible
without any conflicts in the source tree.</p>

<p>We are currently not targeting realtime support or clustered
databases (even if you can already do a lot of things with our
replication services).</p>

<p>We don't believe that one should have native XML support in the
database, but will instead add the XML support our users request
from us on the client side. We think it's better to keep the main
server code as ``lean and clean'' as possible and instead develop
libraries to deal with the complexity on the client side. This is
part of the strategy mentioned previously of not sacrificing speed
or reliability in the server.</p>

<h3><a id="Standards" name="Standards"
href="manual_toc.html#Standards">1.7.1 What Standards Does MySQL
Follow?</a></h3>

<p>Entry-level SQL92. ODBC levels 0-3.51.</p>

<p>We are aiming toward supporting the full ANSI SQL99 standard,
but without concessions to speed and quality of the code.</p>

<h3><a id="ANSI_mode" name="ANSI_mode"
href="manual_toc.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a></h3>

<p><a id="IDX116" name="IDX116"></a> <a id="IDX117"
name="IDX117"></a></p>

<p>If you start <code>mysqld</code> with the <code>--ansi</code>
option, the following behaviour of MySQL Server changes:</p>

<ul>
<li><code>||</code> is string concatenation instead of
<code>OR</code>.</li>

<li>You can have any number of spaces between a function name and
the <samp>`('</samp>. This forces all function names to be treated
as reserved words.</li>

<li><samp>`"'</samp> will be an identifier quote character (like
the MySQL Server <samp>``'</samp> quote character) and not a string
quote character.</li>

<li><code>REAL</code> will be a synonym for <code>FLOAT</code>
instead of a synonym for <code>DOUBLE</code>.</li>

<li>The default transaction isolation level is
<code>SERIALIZABLE</code>. See section <a
href="manual.html#SET_TRANSACTION">6.7.3 <code>SET
TRANSACTION</code> Syntax</a>.</li>
</ul>

<p>This is the same as using
<code>--sql-mode=REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,
IGNORE_SPACE,SERIALIZE,ONLY_FULL_GROUP_BY</code>.</p>

<h3><a id="Extensions_to_ANSI" name="Extensions_to_ANSI"
href="manual_toc.html#Extensions_to_ANSI">1.7.3 MySQL Extensions to
ANSI SQL92</a></h3>

<p><a id="IDX118" name="IDX118"></a> MySQL Server includes some
extensions that you probably will not find in other SQL databases.
Be warned that if you use them, your code will not be portable to
other SQL servers. In some cases, you can write code that includes
MySQL extensions, but is still portable, by using comments of the
form <code>/*! ... */</code>. In this case, MySQL Server will parse
and execute the code within the comment as it would any other MySQL
statement, but other SQL servers will ignore the extensions. For
example:</p>

<pre>
SELECT /*! STRAIGHT_JOIN */ col_name FROM table1,table2 WHERE ...
</pre>

<p>If you add a version number after the <code>'!'</code>, the
syntax will be executed only if the MySQL version is equal to or
newer than the used version number:</p>

<pre>
CREATE /*!32302 TEMPORARY */ TABLE t (a int);
</pre>

<p>This means that if you have Version 3.23.02 or newer, MySQL
Server will use the <code>TEMPORARY</code> keyword.</p>

<p>The following is a list of MySQL extensions:</p>

<ul>
<li>The field types <code>MEDIUMINT</code>, <code>SET</code>,
<code>ENUM</code>, and the different <code>BLOB</code> and
<code>TEXT</code> types.</li>

<li>The field attributes <code>AUTO_INCREMENT</code>,
<code>BINARY</code>, <code>NULL</code>, <code>UNSIGNED</code>, and
<code>ZEROFILL</code>.</li>

<li>All string comparisons are case-insensitive by default, with
sort ordering determined by the current character set (ISO-8859-1
Latin1 by default). If you don't like this, you should declare your
columns with the <code>BINARY</code> attribute or use the
<code>BINARY</code> cast, which causes comparisons to be done
according to the ASCII order used on the MySQL server host.</li>

<li>MySQL Server maps each database to a directory under the MySQL
data directory, and tables within a database to filenames in the
database directory. This has a few implications: <a id="IDX119"
name="IDX119"></a> <a id="IDX120" name="IDX120"></a> <a id="IDX121"
name="IDX121"></a> <a id="IDX122" name="IDX122"></a> 

<ul>
<li>Database names and table names are case-sensitive in MySQL
Server on operating systems that have case-sensitive filenames
(like most Unix systems). See section <a
href="manual.html#Name_case_sensitivity">6.1.3 Case Sensitivity in
Names</a>.</li>

<li>Database, table, index, column, or alias names may begin with a
digit (but may not consist solely of digits).</li>

<li>You can use standard system commands to back up, rename, move,
delete, and copy tables. For example, to rename a table, rename the
<tt>`.MYD'</tt>, <tt>`.MYI'</tt>, and <tt>`.frm'</tt> files to
which the table corresponds.</li>
</ul>
</li>

<li>In SQL statements, you can access tables from different
databases with the <code>db_name.tbl_name</code> syntax. Some SQL
servers provide the same functionality but call this <code>User
space</code>. MySQL Server doesn't support tablespaces as in:
<code>create table ralph.my_table...IN my_tablespace</code>.</li>

<li><code>LIKE</code> is allowed on numeric columns.</li>

<li>Use of <code>INTO OUTFILE</code> and <code>STRAIGHT_JOIN</code>
in a <code>SELECT</code> statement. See section <a
href="manual.html#SELECT">6.4.1 <code>SELECT</code>
Syntax</a>.</li>

<li>The <code>SQL_SMALL_RESULT</code> option in a
<code>SELECT</code> statement.</li>

<li><code>EXPLAIN SELECT</code> to get a description on how tables
are joined.</li>

<li>Use of index names, indexes on a prefix of a field, and use of
<code>INDEX</code> or <code>KEY</code> in a <code>CREATE
TABLE</code> statement. See section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</li>

<li>Use of <code>TEMPORARY</code> or <code>IF NOT EXISTS</code>
with <code>CREATE TABLE</code>.</li>

<li>Use of <code>COUNT(DISTINCT list)</code> where
<code>list</code> is more than one element.</li>

<li>Use of <code>CHANGE col_name</code>, <code>DROP
col_name</code>, or <code>DROP INDEX</code>, <code>IGNORE</code> or
<code>RENAME</code> in an <code>ALTER TABLE</code> statement. See
section <a href="manual.html#ALTER_TABLE">6.5.4 <code>ALTER
TABLE</code> Syntax</a>.</li>

<li>Use of <code>RENAME TABLE</code>. See section <a
href="manual.html#RENAME_TABLE">6.5.5 <code>RENAME TABLE</code>
Syntax</a>.</li>

<li>Use of multiple <code>ADD</code>, <code>ALTER</code>,
<code>DROP</code>, or <code>CHANGE</code> clauses in an <code>ALTER
TABLE</code> statement.</li>

<li>Use of <code>DROP TABLE</code> with the keywords <code>IF
EXISTS</code>.</li>

<li>You can drop multiple tables with a single <code>DROP
TABLE</code> statement.</li>

<li>The <code>LIMIT</code> clause of the <code>DELETE</code>
statement.</li>

<li>The <code>DELAYED</code> clause of the <code>INSERT</code> and
<code>REPLACE</code> statements.</li>

<li>The <code>LOW_PRIORITY</code> clause of the
<code>INSERT</code>, <code>REPLACE</code>, <code>DELETE</code>, and
<code>UPDATE</code> statements. <a id="IDX123" name="IDX123"></a>
<a id="IDX124" name="IDX124"></a></li>

<li>Use of <code>LOAD DATA INFILE</code>. In many cases, this
syntax is compatible with Oracle's <code>LOAD DATA INFILE</code>.
See section <a href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA
INFILE</code> Syntax</a>.</li>

<li>The <code>ANALYZE TABLE</code>, <code>CHECK TABLE</code>,
<code>OPTIMIZE TABLE</code>, and <code>REPAIR TABLE</code>
statements.</li>

<li>The <code>SHOW</code> statement. See section <a
href="manual.html#SHOW">4.5.6 <code>SHOW</code> Syntax</a>.</li>

<li>Strings may be enclosed by either <samp>`"'</samp> or
<samp>`''</samp>, not just by <samp>`''</samp>.</li>

<li>Use of the escape <samp>`\'</samp> character.</li>

<li>The <code>SET</code> statement. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</li>

<li>You don't need to name all selected columns in the <code>GROUP
BY</code> part. This gives better performance for some very
specific, but quite normal queries. See section <a
href="manual.html#Group_by_functions">6.3.7 Functions for Use with
<code>GROUP BY</code> Clauses</a>.</li>

<li>One can specify <code>ASC</code> and <code>DESC</code> with
<code>GROUP BY</code>.</li>

<li>To make it easier for users who come from other SQL
environments, MySQL Server supports aliases for many functions. For
example, all string functions support both ANSI SQL syntax and ODBC
syntax.</li>

<li>MySQL Server understands the <code>||</code> and
<code>&amp;&amp;</code> operators to mean logical OR and AND, as in
the C programming language. In MySQL Server, <code>||</code> and
<code>OR</code> are synonyms, as are <code>&amp;&amp;</code> and
<code>AND</code>. Because of this nice syntax, MySQL Server doesn't
support the ANSI SQL <code>||</code> operator for string
concatenation; use <code>CONCAT()</code> instead. Because
<code>CONCAT()</code> takes any number of arguments, it's easy to
convert use of the <code>||</code> operator to MySQL Server.</li>

<li><code>CREATE DATABASE</code> or <code>DROP DATABASE</code>. See
section <a href="manual.html#CREATE_DATABASE">6.5.1 <code>CREATE
DATABASE</code> Syntax</a>. <a id="IDX125" name="IDX125"></a> <a
id="IDX126" name="IDX126"></a></li>

<li>The <code>%</code> operator is a synonym for
<code>MOD()</code>. That is, <code>N % M</code> is equivalent to
<code>MOD(N,M)</code>. <code>%</code> is supported for C
programmers and for compatibility with PostgreSQL.</li>

<li>The <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>
,<code>&lt;</code>, <code>&gt;=</code>,<code>&gt;</code>,
<code>&lt;&lt;</code>, <code>&gt;&gt;</code>,
<code>&lt;=&gt;</code>, <code>AND</code>, <code>OR</code>, or
<code>LIKE</code> operators may be used in column comparisons to
the left of the <code>FROM</code> in <code>SELECT</code>
statements. For example: 

<pre>
mysql&gt; SELECT col1=1 AND col2=2 FROM tbl_name;
</pre>
</li>

<li>The <code>LAST_INSERT_ID()</code> function. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>.</li>

<li>The <code>REGEXP</code> and <code>NOT REGEXP</code> extended
regular expression operators.</li>

<li><code>CONCAT()</code> or <code>CHAR()</code> with one argument
or more than two arguments. (In MySQL Server, these functions can
take any number of arguments.)</li>

<li>The <code>BIT_COUNT()</code>, <code>CASE</code>,
<code>ELT()</code>, <code>FROM_DAYS()</code>,
<code>FORMAT()</code>, <code>IF()</code>, <code>PASSWORD()</code>,
<code>ENCRYPT()</code>, <code>MD5()</code>, <code>ENCODE()</code>,
<code>DECODE()</code>, <code>PERIOD_ADD()</code>,
<code>PERIOD_DIFF()</code>, <code>TO_DAYS()</code>, or
<code>WEEKDAY()</code> functions.</li>

<li>Use of <code>TRIM()</code> to trim substrings. ANSI SQL only
supports removal of single characters.</li>

<li>The <code>GROUP BY</code> functions <code>STD()</code>,
<code>BIT_OR()</code>, and <code>BIT_AND()</code>.</li>

<li>Use of <code>REPLACE</code> instead of <code>DELETE</code> +
<code>INSERT</code>. See section <a
href="manual.html#REPLACE">6.4.8 <code>REPLACE</code>
Syntax</a>.</li>

<li>The <code>FLUSH</code>, <code>RESET</code> and <code>DO</code>
statements.</li>

<li>The ability to set variables in a statement with
<code>:=</code>: 

<pre>
SELECT @a:=SUM(total),@b=COUNT(*),@a/@b AS avg FROM test_table;
SELECT @t1:=(@t2:=1)+@t3:=4,@t1,@t2,@t3;
</pre>
</li>
</ul>

<h3><a id="Differences_from_ANSI" name="Differences_from_ANSI"
href="manual_toc.html#Differences_from_ANSI">1.7.4 MySQL
Differences Compared to ANSI SQL92</a></h3>

<p>We try to make MySQL Server follow the ANSI SQL standard and the
ODBC SQL standard, but in some cases MySQL Server does things
differently:</p>

<ul>
<li>For <code>VARCHAR</code> columns, trailing spaces are removed
when the value is stored. See section <a
href="manual.html#Bugs">1.7.5 Known Errors and Design Deficiencies
in MySQL</a>.</li>

<li>In some cases, <code>CHAR</code> columns are silently changed
to <code>VARCHAR</code> columns. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>.</li>

<li>Privileges for a table are not automatically revoked when you
delete a table. You must explicitly issue a <code>REVOKE</code> to
revoke privileges for a table. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</li>

<li><code>NULL AND FALSE</code> will evaluate to <code>NULL</code>
and not to <code>FALSE</code>. This is because we don't think it's
good to have to evaluate a lot of extra conditions in this
case.</li>
</ul>

<p>For a prioritised list indicating when new extensions will be
added to MySQL Server, you should consult the online MySQL TODO
list at <a
href="http://www.mysql.com/doc/en/TODO.html">http://www.mysql.com/doc/en/TODO.html</a>.
That is the latest version of the TODO list in this manual. See
section <a href="manual.html#TODO">1.8 MySQL and The Future (The
TODO)</a>.</p>

<h4><a id="ANSI_diff_Sub-selects" name="ANSI_diff_Sub-selects"
href="manual_toc.html#ANSI_diff_Sub-selects">1.7.4.1
Sub<code>SELECT</code>s</a></h4>

<p><a id="IDX127" name="IDX127"></a></p>

<p>MySQL Server until version 4.0 only supports nested queries of
the form <code>INSERT ... SELECT ...</code> and <code>REPLACE ...
SELECT ...</code>. You can, however, use the function
<code>IN()</code> in other contexts. Subselects are being
implemented in the 4.1 development tree.</p>

<p>Meanwhile, you can often rewrite the query without a
subselect:</p>

<pre>
SELECT * FROM table1 WHERE id IN (SELECT id FROM table2);
</pre>

<p>This can be rewritten as:</p>

<pre>
SELECT table1.* FROM table1,table2 WHERE table1.id=table2.id;
</pre>

<p>The queries:</p>

<pre>
SELECT * FROM table1 WHERE id NOT IN (SELECT id FROM table2);
SELECT * FROM table1 WHERE NOT EXISTS (SELECT id FROM table2
                                       WHERE table1.id=table2.id);
</pre>

<p>Can be rewritten as:</p>

<pre>
SELECT table1.* FROM table1 LEFT JOIN table2 ON table1.id=table2.id
                                       WHERE table2.id IS NULL;
</pre>

<p>For more complicated subqueries you can often create temporary
tables to hold the subquery. In some cases, however, this option
will not work. The most frequently encountered of these cases
arises with <code>DELETE</code> statements, for which standard SQL
does not support joins (except in subselects). For this situation
there are two options available until subqueries are supported by
MySQL Server.</p>

<p>The first option is to use a procedural programming language
(such as Perl or PHP) to submit a <code>SELECT</code> query to
obtain the primary keys for the records to be deleted, and then use
these values to construct the <code>DELETE</code> statement
(<code>DELETE FROM ... WHERE ... IN (key1, key2, ...)</code>).</p>

<p>The second option is to use interactive SQL to construct a set
of <code>DELETE</code> statements automatically, using the MySQL
extension <code>CONCAT()</code> (in lieu of the standard
<code>||</code> operator). For example:</p>

<pre>
SELECT CONCAT('DELETE FROM tab1 WHERE pkid = ', "'", tab1.pkid, "'", ';')
  FROM tab1, tab2
 WHERE tab1.col1 = tab2.col2;
</pre>

<p>You can place this query in a script file and redirect input
from it to the <code>mysql</code> command-line interpreter, piping
its output back to a second instance of the interpreter:</p>

<pre>
shell&gt; mysql --skip-column-names mydb &lt; myscript.sql | mysql mydb
</pre>

<p>MySQL Server 4.0 supports multi-table deletes that can be used
to efficiently delete rows based on information from one table or
even from many tables at the same time.</p>

<h4><a id="ANSI_diff_SELECT_INTO_TABLE"
name="ANSI_diff_SELECT_INTO_TABLE"
href="manual_toc.html#ANSI_diff_SELECT_INTO_TABLE">1.7.4.2
<code>SELECT INTO TABLE</code></a></h4>

<p><a id="IDX128" name="IDX128"></a></p>

<p>MySQL Server doesn't yet support the Oracle SQL extension:
<code>SELECT ... INTO TABLE ...</code>. MySQL Server supports
instead the ANSI SQL syntax <code>INSERT INTO ... SELECT
...</code>, which is basically the same thing. See section <a
href="manual.html#INSERT_SELECT">6.4.3.1 <code>INSERT ...
SELECT</code> Syntax</a>.</p>

<pre>
INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID
       FROM tblTemp1 WHERE tblTemp1.fldOrder_ID &gt; 100;
</pre>

<p>Alternatively, you can use <code>SELECT INTO OUTFILE...</code>
or <code>CREATE TABLE ... SELECT</code>.</p>

<h4><a id="ANSI_diff_Transactions" name="ANSI_diff_Transactions"
href="manual_toc.html#ANSI_diff_Transactions">1.7.4.3 Transactions
and Atomic Operations</a></h4>

<p><a id="IDX129" name="IDX129"></a> <a id="IDX130"
name="IDX130"></a> <a id="IDX131" name="IDX131"></a> <a id="IDX132"
name="IDX132"></a> <a id="IDX133" name="IDX133"></a> <a id="IDX134"
name="IDX134"></a> <a id="IDX135" name="IDX135"></a> <a id="IDX136"
name="IDX136"></a> <a id="IDX137" name="IDX137"></a></p>

<p>MySQL Server supports transactions with the <code>InnoDB</code>
and <code>BDB</code> <code>Transactional table handlers</code>. See
section <a href="manual.html#Table_types">7 MySQL Table Types</a>.
<code>InnoDB</code> provides <code>ACID</code> compliancy.</p>

<p>However, the non-transactional table types in MySQL Server such
as <code>MyISAM</code> follow another paradigm for data integrity
called ``<code>Atomic Operations</code>.'' Atomic operations often
offer equal or even better integrity with much better performance.
With MySQL Server supporting both paradigms, the user is able to
decide if he needs the speed of atomic operations or if he need to
use transactional features in his applications. This choice can be
made on a per-table basis.</p>

<p>How does one use the features of MySQL Server to maintain
rigorous integrity and how do these features compare with the
transactional paradigm?</p>

<ol>
<li>In the transactional paradigm, if your applications are written
in a way that is dependent on the calling of <code>ROLLBACK</code>
instead of <code>COMMIT</code> in critical situations, transactions
are more convenient. Transactions also ensure that unfinished
updates or corrupting activities are not committed to the database;
the server is given the opportunity to do an automatic rollback and
your database is saved. MySQL Server, in almost all cases, allows
you to resolve potential problems by including simple checks before
updates and by running simple scripts that check the databases for
inconsistencies and automatically repair or warn if such an
inconsistency occurs. Note that just by using the MySQL log or even
adding one extra log, one can normally fix tables perfectly with no
data integrity loss.</li>

<li>More often than not, fatal transactional updates can be
rewritten to be atomic. Generally speaking, all integrity problems
that transactions solve can be done with <code>LOCK TABLES</code>
or atomic updates, ensuring that you never will get an automatic
abort from the database, which is a common problem with
transactional databases.</li>

<li>Even a transactional system can lose data if the server goes
down. The difference between different systems lies in just how
small the time-lap is where they could lose data. No system is 100%
secure, only ``secure enough.'' Even Oracle, reputed to be the
safest of transactional databases, is reported to sometimes lose
data in such situations. To be safe with MySQL Server, whether
using transactional tables or not, you only need to have backups
and have the update logging turned on. With this you can recover
from any situation that you could with any other transactional
database. It is, of course, always good to have backups,
independent of which database you use.</li>
</ol>

<p>The transactional paradigm has its benefits and its drawbacks.
Many users and application developers depend on the ease with which
they can code around problems where an abort appears to be, or is
necessary. However, even if you are new to the atomic operations
paradigm, or more familiar with transactions, do consider the speed
benefit that non-transactional tables can offer on the order of
three to five times the speed of the fastest and most optimally
tuned transactional tables.</p>

<p>In situations where integrity is of highest importance, MySQL
Server offers transaction-level or better reliability and integrity
even for non-transactional tables. If you lock tables with
<code>LOCK TABLES</code>, all updates will stall until any
integrity checks are made. If you only obtain a read lock (as
opposed to a write lock), reads and inserts are still allowed to
happen. The new inserted records will not be seen by any of the
clients that have a read lock until they release their read locks.
With <code>INSERT DELAYED</code> you can queue inserts into a local
queue, until the locks are released, without having the client wait
for the insert to complete. See section <a
href="manual.html#INSERT_DELAYED">6.4.4 <code>INSERT DELAYED</code>
Syntax</a>.</p>

<p>``Atomic,'' in the sense that we mean it, is nothing magical. It
only means that you can be sure that while each specific update is
running, no other user can interfere with it, and there will never
be an automatic rollback (which can happen with transactional
tables if you are not very careful). MySQL Server also guarantees
that there will not be any dirty reads.</p>

<p>Following are some techniques for working with non-transactional
tables:</p>

<ul>
<li>Loops that need transactions normally can be coded with the
help of <code>LOCK TABLES</code>, and you don't need cursors when
you can update records on the fly.</li>

<li>To avoid using <code>ROLLBACK</code>, you can use the following
strategy: 

<ol>
<li>Use <code>LOCK TABLES ...</code> to lock all the tables you
want to access.</li>

<li>Test conditions.</li>

<li>Update if everything is okay.</li>

<li>Use <code>UNLOCK TABLES</code> to release your locks.</li>
</ol>

This is usually a much faster method than using transactions with
possible <code>ROLLBACK</code>s, although not always. The only
situation this solution doesn't handle is when someone kills the
threads in the middle of an update. In this case, all locks will be
released but some of the updates may not have been executed.</li>

<li>You can also use functions to update records in a single
operation. You can get a very efficient application by using the
following techniques: 

<ul>
<li>Modify fields relative to their current value.</li>

<li>Update only those fields that actually have changed.</li>
</ul>

For example, when we are doing updates to some customer
information, we update only the customer data that has changed and
test only that none of the changed data, or data that depends on
the changed data, has changed compared to the original row. The
test for changed data is done with the <code>WHERE</code> clause in
the <code>UPDATE</code> statement. If the record wasn't updated, we
give the client a message: "Some of the data you have changed has
been changed by another user." Then we show the old row versus the
new row in a window, so the user can decide which version of the
customer record he should use. This gives us something that is
similar to column locking but is actually even better because we
only update some of the columns, using values that are relative to
their current values. This means that typical <code>UPDATE</code>
statements look something like these: 

<pre>
UPDATE tablename SET pay_back=pay_back+'relative change';

UPDATE customer
  SET
    customer_date='current_date',
    address='new address',
    phone='new phone',
    money_he_owes_us=money_he_owes_us+'new_money'
  WHERE
    customer_id=id AND address='old address' AND phone='old phone';
</pre>

As you can see, this is very efficient and works even if another
client has changed the values in the <code>pay_back</code> or
<code>money_he_owes_us</code> columns.</li>

<li><a id="IDX138" name="IDX138"></a> <a id="IDX139"
name="IDX139"></a> In many cases, users have wanted
<code>ROLLBACK</code> and/or <code>LOCK TABLES</code> for the
purpose of managing unique identifiers for some tables. This can be
handled much more efficiently by using an
<code>AUTO_INCREMENT</code> column and either the SQL function
<code>LAST_INSERT_ID()</code> or the C API function
<code>mysql_insert_id()</code>. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>. <a id="IDX140"
name="IDX140"></a> <a id="IDX141" name="IDX141"></a> You can
generally code around row-level locking. Some situations really
need it, but they are very few. <code>InnoDB</code> tables support
row-level locking. With MyISAM, you can use a flag column in the
table and do something like the following: 

<pre>
UPDATE tbl_name SET row_flag=1 WHERE id=ID;
</pre>

MySQL returns 1 for the number of affected rows if the row was
found and <code>row_flag</code> wasn't already 1 in the original
row. You can think of it as though MySQL Server changed the
preceding query to: 

<pre>
UPDATE tbl_name SET row_flag=1 WHERE id=ID AND row_flag &lt;&gt; 1;
</pre>
</li>
</ul>

<h4><a id="ANSI_diff_Triggers" name="ANSI_diff_Triggers"
href="manual_toc.html#ANSI_diff_Triggers">1.7.4.4 Stored Procedures
and Triggers</a></h4>

<p><a id="IDX142" name="IDX142"></a> <a id="IDX143"
name="IDX143"></a> <a id="IDX144" name="IDX144"></a></p>

<p>A stored procedure is a set of SQL commands that can be compiled
and stored in the server. Once this has been done, clients don't
need to keep re-issuing the entire query but can refer to the
stored procedure. This provides better performance because the
query has to be parsed only once, and less information needs to be
sent between the server and the client. You can also raise the
conceptual level by having libraries of functions in the
server.</p>

<p>A trigger is a stored procedure that is invoked when a
particular event occurs. For example, you can install a stored
procedure that is triggered each time a record is deleted from a
transaction table and that automatically deletes the corresponding
customer from a customer table when all his transactions are
deleted.</p>

<p>The planned update language will be able to handle stored
procedures. Our aim is to have stored procedures implemented in
MySQL Server around version 5.0. We are also looking at
triggers.</p>

<h4><a id="ANSI_diff_Foreign_Keys" name="ANSI_diff_Foreign_Keys"
href="manual_toc.html#ANSI_diff_Foreign_Keys">1.7.4.5 Foreign
Keys</a></h4>

<p><a id="IDX145" name="IDX145"></a> <a id="IDX146"
name="IDX146"></a></p>

<p>Note that foreign keys in SQL are not used to join tables, but
are used mostly for checking referential integrity (foreign key
constraints). If you want to get results from multiple tables from
a <code>SELECT</code> statement, you do this by joining tables:</p>

<pre>
SELECT * FROM table1,table2 WHERE table1.id = table2.id;
</pre>

<p>See section <a href="manual.html#JOIN">6.4.1.1 <code>JOIN</code>
Syntax</a>. See section <a
href="manual.html#example-Foreign_keys">3.5.6 Using Foreign
Keys</a>.</p>

<p>In MySQL Server 3.23.44 and up, <code>InnoDB</code> tables
support checking of foreign key constraints. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>. For
other table types, MySQL Server does parse the <code>FOREIGN
KEY</code> syntax in <code>CREATE TABLE</code> commands, but
without further action being taken.</p>

<p>The <code>FOREIGN KEY</code> syntax without <code>ON DELETE
...</code> is mostly used for documentation purposes. Some ODBC
applications may use this to produce automatic <code>WHERE</code>
clauses, but this is usually easy to override. <code>FOREIGN
KEY</code> is sometimes used as a constraint check, but this check
is unnecessary in practice if rows are inserted into the tables in
the right order.</p>

<p>In MySQL Server, you can work around the problem of <code>ON
DELETE ...</code> not being implemented by adding the appropriate
<code>DELETE</code> statement to an application when you delete
records from a table that has a foreign key. In practice this is as
quick (in some cases quicker) and much more portable than using
foreign keys.</p>

<p>In MySQL Server 4.0 you can use multi-table delete to delete
rows from many tables with one command. See section <a
href="manual.html#DELETE">6.4.6 <code>DELETE</code> Syntax</a>.</p>

<p>In the near future we will extend the <code>FOREIGN KEY</code>
implementation so that the information will be saved in the table
specification file and may be retrieved by <code>mysqldump</code>
and ODBC. At a later stage we will implement the foreign key
constraints for applications that can't easily be coded to avoid
them.</p>

<p>Do keep in mind that foreign keys are often misused, which can
cause severe problems. Even when used properly, it is not a magic
solution for the referential integrity problem, although it does
make things easier in some cases.</p>

<p>Some advantages of foreign key enforcement:</p>

<ul>
<li>Assuming proper design of the relations, foreign key
constraints will make it more difficult for a programmer to
introduce an inconsistency into the database.</li>

<li>Using cascading updates and deletes can simplify the client
code.</li>

<li>Properly designed foreign key rules aid in documenting
relations between tables.</li>
</ul>

<p>Disadvantages:</p>

<ul>
<li>Mistakes, which are easy to make in designing key relations,
can cause severe problems—for example, circular rules, or the wrong
combination of cascading deletes.</li>

<li>A properly written application will make sure internally that
it is not violating referential integrity constraints before
proceding with a query. Thus, additional checks on the database
level will only slow down performance for such an application.</li>

<li>It is not uncommon for a DBA to make such a complex topology of
relations that it becomes very difficult, and in some cases
impossible, to back up or restore individual tables.</li>
</ul>

<h4><a id="ANSI_diff_Views" name="ANSI_diff_Views"
href="manual_toc.html#ANSI_diff_Views">1.7.4.6 Views</a></h4>

<p><a id="IDX147" name="IDX147"></a></p>

<p>It is planned to implement views in MySQL Server around version
5.0.</p>

<p>Views are mostly useful for letting users access a set of
relations as one table (in read-only mode). Many SQL databases
don't allow one to update any rows in a view, but you have to do
the updates in the separate tables.</p>

<p>As MySQL Server is mostly used in applications and on web
systems where the application writer has full control on the
database usage, most of our users haven't regarded views to be very
important. (At least no one has been interested enough in this to
be prepared to finance the implementation of views.)</p>

<p>One doesn't need views in MySQL Server to restrict access to
columns, as MySQL Server has a very sophisticated privilege system.
See section <a href="manual.html#Privilege_system">4.2 General
Security Issues and the MySQL Access Privilege System</a>.</p>

<h4><a id="ANSI_diff_comments" name="ANSI_diff_comments"
href="manual_toc.html#ANSI_diff_comments">1.7.4.7 <samp>`--'</samp>
as the Start of a Comment</a></h4>

<p><a id="IDX148" name="IDX148"></a> <a id="IDX149"
name="IDX149"></a></p>

<p>Some other SQL databases use <samp>`--'</samp> to start
comments. MySQL Server has <samp>`#'</samp> as the start comment
character. You can also use the C comment style <code>/* this is a
comment */</code> with MySQL Server. See section <a
href="manual.html#Comments">6.1.6 Comment Syntax</a>.</p>

<p>MySQL Server Version 3.23.3 and above support the
<samp>`--'</samp> comment style, provided the comment is followed
by a space. This is because this comment style has caused many
problems with automatically generated SQL queries that have used
something like the following code, where we automatically insert
the value of the payment for <code>!payment!</code>:</p>

<pre>
UPDATE tbl_name SET credit=credit-!payment!
</pre>

<p>Think about what happens if the value of <code>payment</code> is
negative. Because <code>1--1</code> is legal in SQL, the
consequences of allowing comments to start with <samp>`--'</samp>
are terrible.</p>

<p>Using our implementation of this method of commenting in MySQL
Server Version 3.23.3 and up, <code>1-- This is a comment</code> is
actually safe.</p>

<p>Another safe feature is that the <code>mysql</code> command-line
client removes all lines that start with <samp>`--'</samp>.</p>

<p>The following information is relevant only if you are running a
MySQL version earlier than 3.23.3:</p>

<p>If you have a SQL program in a text file that contains
<samp>`--'</samp> comments you should use:</p>

<pre>
shell&gt; replace " --" " #" &lt; text-file-with-funny-comments.sql \
         | mysql database
</pre>

<p>instead of the usual:</p>

<pre>
shell&gt; mysql database &lt; text-file-with-funny-comments.sql
</pre>

<p>You can also edit the command file ``in place'' to change the
<samp>`--'</samp> comments to <samp>`#'</samp> comments:</p>

<pre>
shell&gt; replace " --" " #" -- text-file-with-funny-comments.sql
</pre>

<p>Change them back with this command:</p>

<pre>
shell&gt; replace " #" " --" -- text-file-with-funny-comments.sql
</pre>

<h3><a id="Bugs" name="Bugs" href="manual_toc.html#Bugs">1.7.5
Known Errors and Design Deficiencies in MySQL</a></h3>

<p><a id="IDX150" name="IDX150"></a> <a id="IDX151"
name="IDX151"></a> <a id="IDX152" name="IDX152"></a> <a id="IDX153"
name="IDX153"></a></p>

<p>The following problems are known and have a very high priority
to get fixed:</p>

<ul>
<li><code>ANALYZE TABLE</code> on a BDB table may in some case make
the table unusable until one has restarted <code>mysqld</code>.
When this happens you will see errors like the following in the
MySQL error file: 

<pre>
001207 22:07:56  bdb:  log_flush: LSN past current end-of-log
</pre>
</li>

<li>Don't execute <code>ALTER TABLE</code> on a <code>BDB</code>
table on which you are running multi-statement transactions until
all those transactions complete. (The transaction will probably be
ignored.)</li>

<li><code>ANALYZE TABLE</code>, <code>OPTIMIZE TABLE</code>, and
<code>REPAIR TABLE</code> may cause problems on tables for which
you are using <code>INSERT DELAYED</code>.</li>

<li>Doing a <code>LOCK TABLE ...</code> and <code>FLUSH TABLES
...</code> doesn't guarantee that there isn't a half-finished
transaction in progress on the table.</li>

<li>BDB tables are a bit slow to open. If you have many BDB tables
in a database, it will take a long time to use the
<code>mysql</code> client on the database if you are not using the
<code>-A</code> option or if you are using <code>rehash</code>.
This is especially notable when you have a big table cache.</li>
</ul>

<p>The following problems are known and will be fixed in due
time:</p>

<ul>
<li>When using <code>RPAD</code> function, or any other string
function that ends up adding blanks to the right, in a query that
has to use temporary table to be resolved, then all resulting
strings will be RTRIM'ed. This is an example of the query:
<code>SELECT RPAD(t1.field1, 50, ' ') AS f2, RPAD(t2.field2, 50, '
') AS f1 FROM table1 as t1 LEFT JOIN table2 AS t2 ON
t1.record=t2.joinID ORDER BY t2.record;</code> Final result of this
bug is that use will not be able to get blanks on the right side of
the resulting field. The above behaviour exists in all versions of
MySQL. The reason for this is due to the fact that HEAP tables,
which are used first for temporary tables, are not capable of
handling VARCHAR columns. This behaviour will be fixed in one of
4.1 releases.</li>

<li>When using <code>SET CHARACTER SET</code>, one can't use
translated characters in database, table, and column names.</li>

<li>One can't use <code>_</code> or <code>%</code> with
<code>ESCAPE</code> in <code>LIKE ... ESCAPE</code>.</li>

<li>If you have a <code>DECIMAL</code> column with a number stored
in different formats (+01.00, 1.00, 01.00), <code>GROUP BY</code>
may regard each value as a different value.</li>

<li><code>DELETE FROM merge_table</code> used without a
<code>WHERE</code> will only clear the mapping for the table, not
delete everything in the mapped tables.</li>

<li>You cannot build the server in another directory when using
MIT-pthreads. Because this requires changes to MIT-pthreads, we are
not likely to fix this. See section <a
href="manual.html#MIT-pthreads">2.3.6 MIT-pthreads Notes</a>.</li>

<li><code>BLOB</code> values can't ``reliably'' be used in
<code>GROUP BY</code> or <code>ORDER BY</code> or
<code>DISTINCT</code>. Only the first <code>max_sort_length</code>
bytes (default 1024) are used when comparing <code>BLOB</code>s in
these cases. This can be changed with the <code>-O
max_sort_length</code> option to <code>mysqld</code>. A workaround
for most cases is to use a substring: <code>SELECT DISTINCT
LEFT(blob,2048) FROM tbl_name</code>.</li>

<li>Calculation is done with <code>BIGINT</code> or
<code>DOUBLE</code> (both are normally 64 bits long). It depends on
the function which precision one gets. The general rule is that bit
functions are done with <code>BIGINT</code> precision,
<code>IF</code>, and <code>ELT()</code> with <code>BIGINT</code> or
<code>DOUBLE</code> precision and the rest with <code>DOUBLE</code>
precision. One should try to avoid using unsigned long long values
if they resolve to be bigger than 63 bits (9223372036854775807) for
anything else than bit fields! MySQL Server 4.0 has better
<code>BIGINT</code> handling than 3.23.</li>

<li>All string columns, except <code>BLOB</code> and
<code>TEXT</code> columns, automatically have all trailing spaces
removed when retrieved. For <code>CHAR</code> types this is okay,
and may be regarded as a feature according to ANSI SQL92. The bug
is that in MySQL Server, <code>VARCHAR</code> columns are treated
the same way.</li>

<li>You can only have up to 255 <code>ENUM</code> and
<code>SET</code> columns in one table.</li>

<li>In <code>MIN()</code>, <code>MAX()</code> and other aggregate
functions, MySQL currently compares <code>ENUM</code> and
<code>SET</code> columns by their string value rather than by the
string's relative position in the set.</li>

<li><code>safe_mysqld</code> redirects all messages from
<code>mysqld</code> to the <code>mysqld</code> log. One problem
with this is that if you execute <code>mysqladmin refresh</code> to
close and reopen the log, <code>stdout</code> and
<code>stderr</code> are still redirected to the old log. If you use
<code>--log</code> extensively, you should edit
<code>safe_mysqld</code> to log to <tt>`'hostname'.err'</tt>
instead of <tt>`'hostname'.log'</tt> so you can easily reclaim the
space for the old log by deleting the old one and executing
<code>mysqladmin refresh</code>.</li>

<li>In the <code>UPDATE</code> statement, columns are updated from
left to right. If you refer to an updated column, you will get the
updated value instead of the original value. For example: 

<pre>
mysql&gt; UPDATE tbl_name SET KEY=KEY+1,KEY=KEY+1;
</pre>

This will update <code>KEY</code> with <code>2</code> instead of
with <code>1</code>.</li>

<li>You can't use temporary tables more than once in the same
query. For example, the following doesn't work: 

<pre>
mysql&gt; SELECT * FROM temporary_table, temporary_table AS t2;
</pre>
</li>

<li><code>RENAME</code> doesn't work with <code>TEMPORARY</code>
tables or tables used in a <code>MERGE</code> table.</li>

<li>The optimiser may handle <code>DISTINCT</code> differently if
you are using 'hidden' columns in a join or not. In a join, hidden
columns are counted as part of the result (even if they are not
shown) while in normal queries hidden columns don't participate in
the <code>DISTINCT</code> comparison. We will probably change this
in the future to never compare the hidden columns when executing
<code>DISTINCT</code>. An example of this is: 

<pre>
SELECT DISTINCT mp3id FROM band_downloads
       WHERE userid = 9 ORDER BY id DESC;
</pre>

and 

<pre>
SELECT DISTINCT band_downloads.mp3id
       FROM band_downloads,band_mp3
       WHERE band_downloads.userid = 9
       AND band_mp3.id = band_downloads.mp3id
       ORDER BY band_downloads.id DESC;
</pre>

In the second case you may in MySQL Server 3.23.x get two identical
rows in the result set (because the hidden <code>id</code> column
may differ). Note that this happens only for queries where you
don't have the ORDER BY columns in the result, something that you
are not allowed to do in ANSI SQL.</li>

<li>Because MySQL Server allows you to work with table types that
don't support transactions, and thus can't <code>rollback</code>
data, some things behave a little differently in MySQL Server than
in other SQL servers. This is just to ensure that MySQL Server
never needs to do a rollback for a SQL command. This may be a
little awkward at times as column values must be checked in the
application, but this will actually give you a nice speed increase
as it allows MySQL Server to do some optimisations that otherwise
would be very hard to do. If you set a column to an incorrect
value, MySQL Server will, instead of doing a rollback, store the
<code>best possible value</code> in the column: 

<ul>
<li>If you try to store a value outside the range in a numerical
column, MySQL Server will instead store the smallest or biggest
possible value in the column.</li>

<li>If you try to store a string that doesn't start with a number
into a numerical column, MySQL Server will store 0 into it.</li>

<li>If you try to store <code>NULL</code> into a column that
doesn't take <code>NULL</code> values, MySQL Server will store 0 or
<code>''</code> (empty string) in it instead. (This behaviour can,
however, be changed with the -DDONT_USE_DEFAULT_FIELDS compile
option.)</li>

<li>MySQL allows you to store some wrong date values into
<code>DATE</code> and <code>DATETIME</code> columns (like
2000-02-31 or 2000-02-00). The idea is that it's not the SQL server
job to validate date. If MySQL can store a date and retrieve
exactly the same date, then MySQL will store the date. If the date
is totally wrong (outside the server's ability to store it), then
the special date value 0000-00-00 will be stored in the
column.</li>

<li>If you set an <code>ENUM</code> column to an unsupported value,
it will be set to the error value <code>empty string</code>, with
numeric value 0.</li>

<li>If you set a <code>SET</code> column to an unsupported value,
the value will be ignored.</li>
</ul>
</li>

<li>If you execute a <code>PROCEDURE</code> on a query that returns
an empty set, in some cases the <code>PROCEDURE</code> will not
transform the columns.</li>

<li>Creation of a table of type <code>MERGE</code> doesn't check if
the underlying tables are of compatible types.</li>

<li>MySQL Server can't yet handle <code>NaN</code>,
<code>-Inf</code>, and <code>Inf</code> values in double. Using
these will cause problems when trying to export and import data. We
should as an intermediate solution change <code>NaN</code> to
<code>NULL</code> (if possible) and <code>-Inf</code> and
<code>Inf</code> to the minimum respective maximum possible
<code>double</code> value.</li>

<li><code>LIMIT</code> on negative numbers are treated as big
positive numbers.</li>

<li>If you use <code>ALTER TABLE</code> to first add a
<code>UNIQUE</code> index to a table used in a <code>MERGE</code>
table and then use <code>ALTER TABLE</code> to add a normal index
on the <code>MERGE</code> table, the key order will be different
for the tables if there was an old key that was not unique in the
table. This is because <code>ALTER TABLE</code> puts
<code>UNIQUE</code> keys before normal keys to be able to detect
duplicate keys as early as possible.</li>
</ul>

<p>The following are known bugs in earlier versions of MySQL:</p>

<ul>
<li>You can get a hung thread if you do a <code>DROP TABLE</code>
on a table that is one among many tables that is locked with
<code>LOCK TABLES</code>.</li>

<li>In the following case you can get a core dump: 

<ul>
<li>Delayed insert handler has pending inserts to a table.</li>

<li><code>LOCK table</code> with <code>WRITE</code>.</li>

<li><code>FLUSH TABLES</code>.</li>
</ul>
</li>

<li>Before MySQL Server Version 3.23.2 an <code>UPDATE</code> that
updated a key with a <code>WHERE</code> on the same key may have
failed because the key was used to search for records and the same
row may have been found multiple times: 

<pre>
UPDATE tbl_name SET KEY=KEY+1 WHERE KEY &gt; 100;
</pre>

A workaround is to use: 

<pre>
mysql&gt; UPDATE tbl_name SET KEY=KEY+1 WHERE KEY+0 &gt; 100;
</pre>

This will work because MySQL Server will not use an index on
expressions in the <code>WHERE</code> clause.</li>

<li>Before MySQL Server Version 3.23, all numeric types where
treated as fixed-point fields. That means you had to specify how
many decimals a floating-point field shall have. All results were
returned with the correct number of decimals.</li>
</ul>

<p>For platform-specific bugs, see the sections about compiling and
porting.</p>

<h2><a id="TODO" name="TODO" href="manual_toc.html#TODO">1.8 MySQL
and The Future (The TODO)</a></h2>

<p><a id="IDX154" name="IDX154"></a></p>

<p>This section lists the features that we plan to implement in
MySQL Server.</p>

<p>Everything in this list is approximately in the order it will be
done. If you want to affect the priority order, please register a
license or support us and tell us what you want to have done more
quickly. See section <a
href="manual.html#Licensing_and_Support">1.4 MySQL Support and
Licensing</a>.</p>

<p>The plan is that we in the future will support the full ANSI
SQL99 standard, but with a lot of useful extensions. The challenge
is to do this without sacrificing the speed or compromising the
code.</p>

<h3><a id="TODO_MySQL_4.0" name="TODO_MySQL_4.0"
href="manual_toc.html#TODO_MySQL_4.0">1.8.1 Things That Should be
in 4.0</a></h3>

<p>All done. We now only do bug fixes for MySQL 4.0. See section <a
href="manual.html#News-4.0.x">D.2 Changes in release 4.0.x
(Gamma)</a>. Development has shifted to 4.1</p>

<h3><a id="TODO_MySQL_4.1" name="TODO_MySQL_4.1"
href="manual_toc.html#TODO_MySQL_4.1">1.8.2 Things That Should be
in 4.1</a></h3>

<p>The following features are planned for inclusion into MySQL 4.1.
Note that because we have many developers that are working on
different projects, there will also be many additional features.
There is also a small chance that some of these features will be
added to MySQL 4.0. Some of the work on MySQL 4.1 is already in
progress.</p>

<ul>
<li>Subqueries. 

<pre>
SELECT id FROM t WHERE grp IN (SELECT grp FROM g WHERE u &gt; 100);
</pre>
</li>

<li>New table definition file format (<tt>`.frm'</tt> files). This
will enable us to not run out of bits when adding more table
options. One will still be able to use the old <tt>`.frm'</tt> file
format with 4.0. All newly created tables will, however, use the
new format. The new file format will enable us to add new column
types, more options for keys, and possibly to store and retrieve
<code>FOREIGN KEY</code> definitions.</li>

<li><code>SHOW COLUMNS FROM table_name</code> (used by
<code>mysql</code> client to allow expansions of column names)
should not open the table, only the definition file. This will
require less memory and be much faster.</li>

<li>Foreign keys for <code>MyISAM</code> tables, including
cascading delete.</li>

<li>Fail-safe replication.</li>

<li>Replication should work with <code>RAND()</code> and user
variables <code>@var</code>.</li>

<li>Online backup with very low performance penalty. The online
backup will make it easy to add a new replication slave without
taking down the master.</li>

<li>Derived tables: 

<pre>
SELECT a.col1, b.col2
       FROM (SELECT MAX(col1) AS col1 FROM root_table) a,
       other_table b
       WHERE a.col1=b.col1;
</pre>

This could be done by automatically creating temporary tables for
the derived tables for the duration of the query. Please, do note,
that as per SQL-99, all derived tables have to be aliased. This is
enforced in MySQL too ...</li>

<li><code>ROLLUP</code> and <code>CUBE</code> OLAP (Online
Analytical Processing) grouping options for data warehousing
applications.</li>

<li>Allow <code>DELETE</code> on <code>MyISAM</code> tables to use
the record cache. To do this, we need to update the threads record
cache when we update the <tt>`.MYD'</tt> file.</li>

<li>When using <code>SET CHARACTER SET</code> we should translate
the whole query at once and not only strings. This will enable
users to use the translated characters in database, table, and
column names.</li>

<li>Add <code>record_in_range()</code> method to <code>MERGE</code>
tables to be able to choose the right index when there are many to
choose from. We should also extend the info interface to get the
key distribution for each index, if <code>analyze</code> is run on
all subtables.</li>

<li>Resolving the issue of <code>RENAME TABLE</code> on a table
used in an active <code>MERGE</code> table possibly corrupting the
table.</li>

<li>A faster, smaller embedded MySQL library (compatible with the
old one).</li>

<li>Stable OpenSSL support (MySQL 4.0 supports rudimentary, not
100% tested, support for OpenSSL).</li>

<li>Add support for sorting on <code>UNICODE</code>.</li>

<li>Character set casts and syntax for handling multiple character
sets.</li>

<li>Help for all commands from the client.</li>

<li>New faster client/server protocol which will support prepared
statements, bound parameters, and bound result columns, binary
transfer of data, warnings...</li>

<li>Add database and real table name (in case of alias) to the
MYSQL_FIELD structure.</li>

<li>Add options to the client/server protocol to get progress notes
for long running commands.</li>

<li>Implement <code>RENAME DATABASE</code>. To make this safe for
all storage engines, it should work as follows: 

<ul>
<li>Create the new database.</li>

<li>For every table do a rename of the table to another database,
as we do with the <code>RENAME</code> command.</li>

<li>Drop the old database.</li>
</ul>
</li>

<li>Add true <code>VARCHAR</code> support (there is already support
for this in <code>MyISAM</code>).</li>

<li>Optimise <code>BIT</code> type to take 1 bit (now
<code>BIT</code> takes 1 char).</li>

<li>New internal file interface change. This will make all file
handling much more general and make it easier to add extensions
like RAID. (the current implementation is a hack.)</li>

<li>Better in-memory (<code>HEAP</code>) tables: 

<ul>
<li>Support for B-tree indexes</li>

<li>Dynamic size rows</li>

<li>Faster row handling (less copying)</li>
</ul>
</li>
</ul>

<h3><a id="TODO_future" name="TODO_future"
href="manual_toc.html#TODO_future">1.8.3 Things That Must be Done
in the Near Future</a></h3>

<ul>
<li>Don't allow more than a defined number of threads to run MyISAM
recover at the same time.</li>

<li>Change <code>INSERT ... SELECT</code> to optionally use
concurrent inserts.</li>

<li>Return the original field types() when doing <code>SELECT
MIN(column) ... GROUP BY</code>.</li>

<li>Multiple result sets.</li>

<li>Make it possible to specify <code>long_query_time</code> with a
granularity in microseconds.</li>

<li>Link the <code>myisampack</code> code into the server.</li>

<li>Port of the MySQL code to QNX.</li>

<li>Port of the MySQL code to BeOS.</li>

<li>Port of the MySQL clients to LynxOS.</li>

<li>Add a temporary key buffer cache during
<code>INSERT/DELETE/UPDATE</code> so that we can gracefully recover
if the index file gets full.</li>

<li>If you perform an <code>ALTER TABLE</code> on a table that is
symlinked to another disk, create temporary tables on this
disk.</li>

<li>Implement a <code>DATE/DATETIME</code> type that handles time
zone information properly so that dealing with dates in different
time zones is easier.</li>

<li>FreeBSD and MIT-pthreads; do sleeping threads take CPU
time?</li>

<li>Check if locked threads take any CPU time.</li>

<li>Fix configure so that one can compile all libraries (like
<code>MyISAM</code>) without threads.</li>

<li>Add an option to periodically flush key pages for tables with
delayed keys if they haven't been used in a while.</li>

<li>Allow join on key parts (optimisation issue).</li>

<li><code>INSERT SQL_CONCURRENT</code> and <code>mysqld
--concurrent-insert</code> to do a concurrent insert at the end of
the file if the file is read-locked.</li>

<li>Server-side cursors.</li>

<li>Check if <code>lockd</code> works with modern Linux kernels; if
not, we have to fix <code>lockd</code>! To test this, start
<code>mysqld</code> with <code>--enable-locking</code> and run the
different fork* test suits. They shouldn't give any errors if
<code>lockd</code> works.</li>

<li>Allow SQL variables in <code>LIMIT</code>, like in <code>LIMIT
@a,@b</code>.</li>

<li>Allow update of variables in <code>UPDATE</code> statements.
For example: <code>UPDATE TABLE foo SET @a=a+b,a=@a,
b=@a+c</code>.</li>

<li>Change when user variables are updated so that one can use them
with <code>GROUP BY</code>, as in the following example:
<code>SELECT id, @a:=COUNT(*), SUM(sum_col)/@a FROM table_name
GROUP BY id</code>.</li>

<li>Don't add automatic <code>DEFAULT</code> values to columns.
Give an error when using an <code>INSERT</code> that doesn't
contain a column that doesn't have a <code>DEFAULT</code>.</li>

<li>Fix <tt>`libmysql.c'</tt> to allow two
<code>mysql_query()</code> commands in a row without reading
results or give a nice error message when one does this.</li>

<li>Check why MIT-pthreads <code>ctime()</code> doesn't work on
some FreeBSD systems.</li>

<li>Add an <code>IMAGE</code> option to <code>LOAD DATA
INFILE</code> to not update <code>TIMESTAMP</code> and
<code>AUTO_INCREMENT</code> fields.</li>

<li>Added <code>LOAD DATE INFILE ... UPDATE</code> syntax. 

<ul>
<li>For tables with primary keys, if the data contains the primary
key, entries matching that primary key are updated from the
remainder of the columns. However, columns <strong>missing</strong>
from the incoming data feed are not touched.</li>

<li>For tables with primary keys that are missing some part of the
key in the incoming data stream, or that have no primary key, the
feed is treated as a <code>LOAD DATA INFILE ... REPLACE INTO</code>
now.</li>
</ul>
</li>

<li>Make <code>LOAD DATA INFILE</code> understand syntax like: 

<pre>
LOAD DATA INFILE 'file_name.txt' INTO TABLE tbl_name
     TEXT_FIELDS (text_field1, text_field2, text_field3)
     SET table_field1=CONCAT(text_field1, text_field2),
         table_field3=23
     IGNORE text_field3
</pre>

This can be used to skip over extra columns in the text file, or
update columns based on expressions of the read data.</li>

<li><code>LOAD DATA INFILE 'file_name' INTO TABLE 'table_name'
ERRORS TO err_table_name</code>. This would cause any errors and
warnings to be logged into the <code>err_table_name</code> table.
That table would have a structure like: 

<pre>
line_number    - line number in datafile
error_message  - the error/warning message
and maybe
data_line      - the line from the datafile
</pre>
</li>

<li>Automatic output from <code>mysql</code> to Netscape.</li>

<li><code>LOCK DATABASES</code> (with various options.)</li>

<li>Functions: ADD_TO_SET(value,set) and
REMOVE_FROM_SET(value,set).</li>

<li>Add use of <code>t1 JOIN t2 ON ...</code> and <code>t1 JOIN t2
USING ...</code> Currently, you can only use this syntax with
<code>LEFT JOIN</code>.</li>

<li>Many more variables for <code>show status</code>. Records reads
and updates. Selects on 1 table and selects with joins. Mean number
of tables in select. Number of <code>ORDER BY</code> and
<code>GROUP BY</code> queries.</li>

<li>If you abort <code>mysql</code> in the middle of a query, you
should open another connection and kill the old running query.
Alternatively, an attempt should be made to detect this in the
server.</li>

<li>Add a storage engine interface for table information so that
you can use it as a system table. This would be a bit slow if you
requested information about all tables, but very flexible.
<code>SHOW INFO FROM tbl_name</code> for basic table information
should be implemented.</li>

<li><code>NATURAL JOIN</code>.</li>

<li>Allow <code>SELECT a FROM crash_me LEFT JOIN crash_me2 USING
(a)</code>; in this case <code>a</code> is assumed to come from the
<code>crash_me</code> table.</li>

<li>Fix so that <code>ON</code> and <code>USING</code> works with
the <code>JOIN</code> join type.</li>

<li>Oracle-like <code>CONNECT BY PRIOR ...</code> to search
hierarchy structures.</li>

<li><code>mysqladmin copy database new-database</code>; requires
<code>COPY</code> command to be added to <code>mysqld</code>.</li>

<li>Processlist should show number of queries/threads.</li>

<li><code>SHOW HOSTS</code> for printing information about the
hostname cache.</li>

<li><code>DELETE</code> and <code>REPLACE</code> options to the
<code>UPDATE</code> statement (this will delete rows when one gets
a duplicate key error while updating).</li>

<li>Change the format of <code>DATETIME</code> to store fractions
of seconds.</li>

<li>Add all missing ANSI92 and ODBC 3.0 types.</li>

<li>Change table names from empty strings to <code>NULL</code> for
calculated columns.</li>

<li>Don't use <code>Item_copy_string</code> on numerical values to
avoid number-&gt;string-&gt;number conversion in case of:
<code>SELECT COUNT(*)*(id+0) FROM table_name GROUP BY
id</code></li>

<li>Make it possible to use the new GNU regexp library instead of
the current one (the GNU library should be much faster than the old
one).</li>

<li>Change so that <code>ALTER TABLE</code> doesn't abort clients
that execute <code>INSERT DELAYED</code>.</li>

<li>Fix so that when columns are referenced in an
<code>UPDATE</code> clause, they contain the old values from before
the update started.</li>

<li>Add simulation of <code>pread()</code>/<code>pwrite()</code> on
Windows to enable concurrent inserts.</li>

<li>A logfile analyser that could parse out information about which
tables are hit most often, how often multi-table joins are
executed, etc. It should help users identify areas or table design
that could be optimised to execute much more efficient
queries.</li>

<li>Add <code>SUM(DISTINCT)</code>.</li>

<li>Add <code>ANY()</code>, <code>EVERY()</code>, and
<code>SOME()</code> group functions. In ANSI SQL these work only on
boolean columns, but we can extend these to work on any
columns/expressions by applying: value == 0 -&gt; FALSE and value
&lt;&gt; 0 -&gt; TRUE.</li>

<li>Fix that the type for <code>MAX(column)</code> is the same as
the column type: 

<pre>
mysql&gt; CREATE TABLE t1 (a DATE);
mysql&gt; INSERT INTO t1 VALUES (NOW());
mysql&gt; CREATE TABLE t2 SELECT MAX(a) FROM t1;
mysql&gt; SHOW COLUMNS FROM t2;
</pre>
</li>

<li>Come up with a nice syntax for a statement that will
<code>UPDATE</code> the row if it exists and <code>INSERT</code> a
new row if the row didn't exist (like <code>REPLACE</code> works
with <code>INSERT</code> / <code>DELETE</code>).</li>
</ul>

<h3><a id="TODO_sometime" name="TODO_sometime"
href="manual_toc.html#TODO_sometime">1.8.4 Things That Have to be
Done Sometime</a></h3>

<ul>
<li>Implement function:
<code>get_changed_tables(timeout,table1,table2,...)</code>.</li>

<li>Change reading through tables to use memmap when possible. Now
only compressed tables use memmap.</li>

<li>Make the automatic timestamp code nicer. Add timestamps to the
update log with <code>SET TIMESTAMP=#;</code>.</li>

<li>Use read/write mutex in some places to get more speed.</li>

<li>Full foreign key support in for <code>MyISAM</code> tables,
probably after the implementation of stored procedures with
triggers.</li>

<li>Simple views (first on one table, later on any
expression).</li>

<li>Automatically close some tables if a table, temporary table, or
temporary files gets error 23 (not enough open files).</li>

<li>When one finds a field=#, change all occurrences of field to #.
Now this is only done for some simple cases.</li>

<li>Change all const expressions with calculated expressions if
possible.</li>

<li>Optimise key = expression. At the moment only key = field or
key = constant are optimised.</li>

<li>Join some of the copy functions for nicer code.</li>

<li>Change <tt>`sql_yacc.yy'</tt> to an inline parser to reduce its
size and get better error messages (5 days).</li>

<li>Change the parser to use only one rule per different number of
arguments in function.</li>

<li>Use of full calculation names in the order part (for
ACCESS97).</li>

<li><code>MINUS</code>, <code>INTERSECT</code>, and <code>FULL
OUTER JOIN</code>. (Currently <code>UNION</code> [in 4.0] and
<code>LEFT OUTER JOIN</code> are supported.)</li>

<li><code>SQL_OPTION MAX_SELECT_TIME=#</code> to put a time limit
on a query.</li>

<li>Make the update log write to a database.</li>

<li>Add to <code>LIMIT</code> to allow retrieval of data from the
end of a result set.</li>

<li>Alarm around client connect/read/write functions.</li>

<li>Please note the changes to <code>safe_mysqld</code>: according
to FSSTND (which Debian tries to follow) PID files should go into
<tt>`/var/run/&lt;progname&gt;.pid'</tt> and log files into
<tt>`/var/log'</tt>. It would be nice if you could put the
"DATADIR" in the first declaration of "pidfile" and "log", so the
placement of these files can be changed with a single
statement.</li>

<li>Allow a client to request logging.</li>

<li>Add use of <code>zlib()</code> for <code>gzip</code>-ed files
to <code>LOAD DATA INFILE</code>.</li>

<li>Fix sorting and grouping of <code>BLOB</code> columns (partly
solved now).</li>

<li>Stored procedures. Triggers are also being looked at.</li>

<li>A simple (atomic) update language that can be used to write
loops and such in the MySQL server.</li>

<li>Change to use semaphores when counting threads. One should
first implement a semaphore library to MIT-pthreads.</li>

<li>Don't assign a new <code>AUTO_INCREMENT</code> value when one
sets a column to 0. Use <code>NULL</code> instead.</li>

<li>Add full support for <code>JOIN</code> with parentheses.</li>

<li>As an alternative for one thread/connection manage a pool of
threads to handle the queries.</li>

<li>Allow one to get more than one lock with <code>GET_LOCK</code>.
When doing this, one must also handle the possible deadlocks this
change will introduce.</li>
</ul>

<p>Time is given according to amount of work, not real time.</p>

<h3><a id="TODO_unplanned" name="TODO_unplanned"
href="manual_toc.html#TODO_unplanned">1.8.5 Things We Don't Plan To
Do</a></h3>

<ul>
<li>Nothing; we aim toward full ANSI 92/ANSI 99 compliancy.</li>
</ul>

<h2><a id="Comparisons" name="Comparisons"
href="manual_toc.html#Comparisons">1.9 How MySQL Compares to Other
Databases</a></h2>

<p><a id="IDX155" name="IDX155"></a> <a id="IDX156"
name="IDX156"></a></p>

<p>Our users have successfully run their own benchmarks against a
number of <code>Open Source</code> and traditional database
servers. We are aware of tests against <code>Oracle</code> server,
<code>DB/2</code> server, <code>Microsoft SQL Server</code>, and
other commercial products. Due to legal reasons we are restricted
from publishing some of those benchmarks in our reference
manual.</p>

<p>This section includes a comparison with <code>mSQL</code> for
historical reasons and with <code>PostgreSQL</code> as it is also
an <code>Open Source</code> database. If you have benchmark results
that we can publish, please contact us at <a
href="mailto:benchmarks@mysql.com">benchmarks@mysql.com</a>.</p>

<p>For comparative lists of all supported functions and types as
well as measured operational limits of many different database
systems, see the <code>crash-me</code> web page at <a
href="http://www.mysql.com/information/crash-me.php">http://www.mysql.com/information/crash-me.php</a>.</p>

<h3><a id="Compare_mSQL" name="Compare_mSQL"
href="manual_toc.html#Compare_mSQL">1.9.1 How MySQL Compares to
<code>mSQL</code></a></h3>

<p><a id="IDX157" name="IDX157"></a></p>

<dl compact="compact">
<dt><strong>Performance</strong></dt>

<dd>For a true comparison of speed, consult the growing MySQL
benchmark suite. See section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>. Because there is no thread creation overhead, a small
parser, few features, and simple security, <code>mSQL</code> should
be quicker at: 

<ul>
<li>Tests that perform repeated connects and disconnects, running a
very simple query during each connection.</li>

<li><code>INSERT</code> operations into very simple tables with few
columns and keys.</li>

<li><code>CREATE TABLE</code> and <code>DROP TABLE</code>.</li>

<li><code>SELECT</code> on something that isn't an index. (A table
scan is very easy.)</li>
</ul>

Because these operations are so simple, it is hard to be better at
them when you have a higher startup overhead. After the connection
is established, MySQL Server should perform much better. On the
other hand, MySQL Server is much faster than <code>mSQL</code> (and
most other SQL implementations) on the following: 

<ul>
<li>Complex <code>SELECT</code> operations.</li>

<li>Retrieving large results (MySQL Server has a better, faster,
and safer protocol).</li>

<li>Tables with variable-length strings because MySQL Server has
more efficient handling and can have indexes on
<code>VARCHAR</code> columns.</li>

<li>Handling tables with many columns.</li>

<li>Handling tables with large record lengths.</li>

<li><code>SELECT</code> with many expressions.</li>

<li><code>SELECT</code> on large tables.</li>

<li>Handling many connections at the same time. MySQL Server is
fully multi-threaded. Each connection has its own thread, which
means that no thread has to wait for another (unless a thread is
modifying a table another thread wants to access). In
<code>mSQL</code>, once one connection is established, all others
must wait until the first has finished, regardless of whether the
connection is running a query that is short or long. When the first
connection terminates, the next can be served, while all the others
wait again, etc.</li>

<li>Joins. <code>mSQL</code> can become pathologically slow if you
change the order of tables in a <code>SELECT</code>. In the
benchmark suite, a time more than 15,000 times slower than MySQL
Server was seen. This is due to <code>mSQL</code>'s lack of a join
optimiser to order tables in the optimal order. However, if you put
the tables in exactly the right order in <code>mSQL</code>2 and the
<code>WHERE</code> is simple and uses index columns, the join will
be relatively fast! See section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>.</li>

<li><code>ORDER BY</code> and <code>GROUP BY</code>.</li>

<li><code>DISTINCT</code>.</li>

<li>Using <code>TEXT</code> or <code>BLOB</code> columns.</li>
</ul>
</dd>

<dt><strong>SQL Features</strong></dt>

<dd>
<ul>
<li><code>GROUP BY</code> and <code>HAVING</code>.
<code>mSQL</code> does not support <code>GROUP BY</code> at all.
MySQL Server supports a full <code>GROUP BY</code> with both
<code>HAVING</code> and the following functions:
<code>COUNT()</code>, <code>AVG()</code>, <code>MIN()</code>,
<code>MAX()</code>, <code>SUM()</code>, and <code>STD()</code>.
<code>COUNT(*)</code> is optimised to return very quickly if the
<code>SELECT</code> retrieves from one table, no other columns are
retrieved, and there is no <code>WHERE</code> clause.
<code>MIN()</code> and <code>MAX()</code> may take string
arguments.</li>

<li><code>INSERT</code> and <code>UPDATE</code> with calculations.
MySQL Server can do calculations in an <code>INSERT</code> or
<code>UPDATE</code>. For example: 

<pre>
mysql&gt; UPDATE SET x=x*10+y WHERE x&lt;20;
</pre>
</li>

<li>Aliasing. MySQL Server has column aliasing.</li>

<li>Qualifying column names. In MySQL Server, if a column name is
unique among the tables used in a query, you do not have to use the
full qualifier.</li>

<li><code>SELECT</code> with functions. MySQL Server has many
functions (too many to list here; see section <a
href="manual.html#Functions">6.3 Functions for Use in
<code>SELECT</code> and <code>WHERE</code> Clauses</a>).</li>
</ul>
</dd>

<dt><strong>Disk Space Efficiency</strong></dt>

<dd>That is, how small can you make your tables? MySQL Server has
very precise types, so you can create tables that take very little
space. An example of a useful MySQL datatype is the
<code>MEDIUMINT</code> that is 3 bytes long. If you have 100
million records, saving even 1 byte per record is very important.
<code>mSQL2</code> has a more limited set of column types, so it is
more difficult to get small tables.</dd>

<dt><strong>Stability</strong></dt>

<dd>This is harder to judge objectively. For a discussion of MySQL
Server stability, see section <a href="manual.html#Stability">1.2.3
How Stable Is MySQL?</a>. We have no experience with
<code>mSQL</code> stability, so we cannot say anything about
that.</dd>

<dt><strong>Price</strong></dt>

<dd>Another important issue is the license. MySQL Server has a more
flexible license than <code>mSQL</code>, and is also less expensive
than <code>mSQL</code>. Whichever product you choose to use,
remember to at least consider paying for a license or e-mail
support.</dd>

<dt><strong>Perl Interfaces</strong></dt>

<dd>MySQL Server has basically the same interfaces to Perl as
<code>mSQL</code> with some added features.</dd>

<dt><strong>JDBC (Java)</strong></dt>

<dd>MySQL Server currently has a lot of different JDBC drivers: 

<ul>
<li>MySQL Connector/J is a native Java driver. Version 3.x is
released under dual licensing (GPL and commercial).</li>

<li>The Resin driver: this is a commercial JDBC driver released
under open source. <a
href="http://www.caucho.com/projects/jdbc-mysql/index.xtp">http://www.caucho.com/projects/jdbc-mysql/index.xtp</a></li>

<li>The gwe driver: a Java interface by GWE technologies (not
supported anymore).</li>

<li>The jms driver: an improved gwe driver by Xiaokun Kelvin ZHU <a
href="mailto:X.Zhu@brad.ac.uk">X.Zhu@brad.ac.uk</a> (not supported
anymore).</li>

<li>The twz driver: a type 4 JDBC driver by Terrence W. Zellers <a
href="mailto:zellert@voicenet.com">zellert@voicenet.com</a>. This
is commercial but is free for private and educational use (not
supported anymore).</li>
</ul>

The recommended driver is the mm driver. The Resin driver may also
be good (at least the benchmarks look good), but we haven't
received that much information about this yet. We know that
<code>mSQL</code> has a JDBC driver, but we have too little
experience with it to compare.</dd>

<dt><strong>Rate of Development</strong></dt>

<dd>MySQL Server has a small core team of developers, but we are
quite used to coding C and C++ very rapidly. Because threads,
functions, <code>GROUP BY</code>, and so on are still not
implemented in <code>mSQL</code>, it has a lot of catching up to
do. To get some perspective on this, you can view the
<code>mSQL</code> <tt>`HISTORY'</tt> file for the last year and
compare it with the News section of the MySQL Reference Manual (see
section <a href="manual.html#News">D MySQL Change History</a>). It
should be pretty obvious which one has developed most rapidly.</dd>

<dt><strong>Utility Programs</strong></dt>

<dd>Both <code>mSQL</code> and MySQL Server have many interesting
third-party tools. Because it is very easy to port upward (from
<code>mSQL</code> to MySQL Server), almost all the interesting
applications that are available for <code>mSQL</code> are also
available for MySQL Server. MySQL Server comes with a simple
<code>msql2mysql</code> program that fixes differences in spelling
between <code>mSQL</code> and MySQL Server for the most-used C API
functions. For example, it changes instances of
<code>msqlConnect()</code> to <code>mysql_connect()</code>.
Converting a client program from <code>mSQL</code> to MySQL Server
usually requires only minor effort.</dd>
</dl>

<h4><a id="Using_mSQL_tools" name="Using_mSQL_tools"
href="manual_toc.html#Using_mSQL_tools">1.9.1.1 How to Convert
<code>mSQL</code> Tools for MySQL</a></h4>

<p><a id="IDX158" name="IDX158"></a> <a id="IDX159"
name="IDX159"></a> <a id="IDX160" name="IDX160"></a></p>

<p>According to our experience, it doesn't take long to convert
tools such as <code>msql-tcl</code> and <code>msqljava</code> that
use the <code>mSQL</code> C API so that they work with the MySQL C
API.</p>

<p>The conversion procedure is:</p>

<ol>
<li>Run the shell script <code>msql2mysql</code> on the source.
This requires the <code>replace</code> program, which is
distributed with MySQL Server.</li>

<li>Compile.</li>

<li>Fix all compiler errors.</li>
</ol>

<p>Differences between the <code>mSQL</code> C API and the MySQL C
API are:</p>

<ul>
<li>MySQL Server uses a <code>MYSQL</code> structure as a
connection type (<code>mSQL</code> uses an <code>int</code>).</li>

<li><code>mysql_connect()</code> takes a pointer to a
<code>MYSQL</code> structure as a parameter. It is easy to define
one globally or to use <code>malloc()</code> to get one.
<code>mysql_connect()</code> also takes two parameters for
specifying the user and password. You may set these to <code>NULL,
NULL</code> for default use.</li>

<li><code>mysql_error()</code> takes the <code>MYSQL</code>
structure as a parameter. Just add the parameter to your old
<code>msql_error()</code> code if you are porting old code.</li>

<li>MySQL Server returns an error number and a text error message
for all errors. <code>mSQL</code> returns only a text error
message.</li>

<li>Some incompatibilities exist as a result of MySQL Server
supporting multiple connections to the server from the same
process.</li>
</ul>

<h4><a id="Protocol_differences" name="Protocol_differences"
href="manual_toc.html#Protocol_differences">1.9.1.2 How
<code>mSQL</code> and MySQL Client/Server Communications Protocols
Differ</a></h4>

<p><a id="IDX161" name="IDX161"></a> <a id="IDX162"
name="IDX162"></a></p>

<p>There are enough differences that it is impossible (or at least
not easy) to support both.</p>

<p>The most significant ways in which the MySQL protocol differs
from the <code>mSQL</code> protocol are listed here:</p>

<ul>
<li>A message buffer may contain many result rows.</li>

<li>The message buffers are dynamically enlarged if the query or
the result is bigger than the current buffer, up to a configurable
server and client limit.</li>

<li>All packets are numbered to catch duplicated or missing
packets.</li>

<li>All column values are sent in ASCII. The lengths of columns and
rows are sent in packed binary coding (1, 2, or 3 bytes).</li>

<li>MySQL can read in the result unbuffered (without having to
store the full set in the client).</li>

<li>If a single read/write takes more than 30 seconds, the server
closes the connection.</li>

<li>If a connection is idle for 8 hours, the server closes the
connection.</li>
</ul>

<h4><a id="Syntax_differences" name="Syntax_differences"
href="manual_toc.html#Syntax_differences">1.9.1.3 How
<code>mSQL</code> 2.0 SQL Syntax Differs from MySQL</a></h4>

<p><strong>Column types</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Has the following additional types (among others; see section
<a href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>): 

<ul>
<li><code>ENUM</code> type for one of a set of strings.</li>

<li><code>SET</code> type for many of a set of strings.</li>

<li><code>BIGINT</code> type for 64-bit integers.</li>
</ul>
</dd>

<dd>MySQL Server also supports the following additional type
attributes: 

<ul>
<li><code>UNSIGNED</code> option for integer and floating-point
columns.</li>

<li><code>ZEROFILL</code> option for integer columns.</li>

<li><code>AUTO_INCREMENT</code> option for integer columns that are
a <code>PRIMARY KEY</code>. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>.</li>

<li><code>DEFAULT</code> value for all columns.</li>
</ul>
</dd>

<dt><code>mSQL2</code></dt>

<dd><code>mSQL</code> column types correspond to the MySQL types
shown in the following table: 

<table border="1" width="100%">
<tr>
<td><code>mSQL</code> <strong>type</strong></td>
<td><strong>Corresponding MySQL type</strong></td>
</tr>

<tr>
<td><code>CHAR(len)</code></td>
<td><code>CHAR(len)</code></td>
</tr>

<tr>
<td><code>TEXT(len)</code></td>
<td><code>TEXT(len)</code>. <code>len</code> is the maximal length.
And <code>LIKE</code> works.</td>
</tr>

<tr>
<td><code>INT</code></td>
<td><code>INT</code>. With many more options!</td>
</tr>

<tr>
<td><code>REAL</code></td>
<td><code>REAL</code>. Or <code>FLOAT</code>. Both 4- and 8-byte
versions are available.</td>
</tr>

<tr>
<td><code>UINT</code></td>
<td><code>INT UNSIGNED</code></td>
</tr>

<tr>
<td><code>DATE</code></td>
<td><code>DATE</code>. Uses ANSI SQL format rather than
<code>mSQL</code>'s own format.</td>
</tr>

<tr>
<td><code>TIME</code></td>
<td><code>TIME</code></td>
</tr>

<tr>
<td><code>MONEY</code></td>
<td><code>DECIMAL(12,2)</code>. A fixed-point value with two
decimals.</td>
</tr>
</table>
</dd>
</dl>

<p><strong>Index Creation</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Indexes may be specified at table creation time with the
<code>CREATE TABLE</code> statement.</dd>

<dt><code>mSQL</code></dt>

<dd>Indexes must be created after the table has been created, with
separate <code>CREATE INDEX</code> statements.</dd>
</dl>

<p><strong>To Insert a Unique Identifier into a Table</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Use <code>AUTO_INCREMENT</code> as a column type specifier. See
section <a href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>.</dd>

<dt><code>mSQL</code></dt>

<dd>Create a <code>SEQUENCE</code> on a table and select the
<code>_seq</code> column.</dd>
</dl>

<p><strong>To Obtain a Unique Identifier for a Row</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Add a <code>PRIMARY KEY</code> or <code>UNIQUE</code> key to
the table and use this. New in Version 3.23.11: If the
<code>PRIMARY</code> or <code>UNIQUE</code> key consists of only
one column and this is of type integer, one can also refer to it as
<code>_rowid</code>.</dd>

<dt><code>mSQL</code></dt>

<dd>Use the <code>_rowid</code> column. Observe that
<code>_rowid</code> may change over time depending on many
factors.</dd>
</dl>

<p><strong>To Get the Time a Column Was Last Modified</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Add a <code>TIMESTAMP</code> column to the table. This column
is automatically set to the current date and time for
<code>INSERT</code> or <code>UPDATE</code> statements if you don't
give the column a value or if you give it a <code>NULL</code>
value.</dd>

<dt><code>mSQL</code></dt>

<dd>Use the <code>_timestamp</code> column.</dd>
</dl>

<p><strong><code>NULL</code> Value Comparisons</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>MySQL Server follows ANSI SQL, and a comparison with
<code>NULL</code> is always <code>NULL</code>.</dd>

<dt><code>mSQL</code></dt>

<dd>In <code>mSQL</code>, <code>NULL = NULL</code> is TRUE. You
must change <code>=NULL</code> to <code>IS NULL</code> and
<code>&lt;&gt;NULL</code> to <code>IS NOT NULL</code> when porting
old code from <code>mSQL</code> to MySQL Server.</dd>
</dl>

<p><strong>String Comparisons</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Normally, string comparisons are performed in case-independent
fashion with the sort order determined by the current character set
(ISO-8859-1 Latin1 by default). If you don't like this, declare
your columns with the <code>BINARY</code> attribute, which causes
comparisons to be done according to the ASCII order used on the
MySQL server host.</dd>

<dt><code>mSQL</code></dt>

<dd>All string comparisons are performed in case-sensitive fashion
with sorting in ASCII order.</dd>
</dl>

<p><strong>Case-insensitive Searching</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd><code>LIKE</code> is a case-insensitive or case-sensitive
operator, depending on the columns involved. If possible, MySQL
uses indexes if the <code>LIKE</code> argument doesn't start with a
wildcard character.</dd>

<dt><code>mSQL</code></dt>

<dd>Use <code>CLIKE</code>.</dd>
</dl>

<p><strong>Handling of Trailing Spaces</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Strips all spaces at the end of <code>CHAR</code> and
<code>VARCHAR</code> columns. Use a <code>TEXT</code> column if
this behaviour is not desired.</dd>

<dt><code>mSQL</code></dt>

<dd>Retains trailing space.</dd>
</dl>

<p><strong><code>WHERE</code> Clauses</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>MySQL correctly prioritises everything (<code>AND</code> is
evaluated before <code>OR</code>). To get <code>mSQL</code>
behaviour in MySQL Server, use parentheses (as shown in an example
later in this section).</dd>

<dt><code>mSQL</code></dt>

<dd>Evaluates everything from left to right. This means that some
logical calculations with more than three arguments cannot be
expressed in any way. It also means you must change some queries
when you upgrade to MySQL Server. You do this easily by adding
parentheses. Suppose you have the following <code>mSQL</code>
query: 

<pre>
mysql&gt; SELECT * FROM table WHERE a=1 AND b=2 OR a=3 AND b=4;
</pre>

To make MySQL Server evaluate this the way that <code>mSQL</code>
would, you must add parentheses: 

<pre>
mysql&gt; SELECT * FROM table WHERE (a=1 AND (b=2 OR (a=3 AND (b=4))));
</pre>
</dd>
</dl>

<p><strong>Access Control</strong></p>

<dl compact="compact">
<dt><code>MySQL Server</code></dt>

<dd>Has tables to store grant (permission) options per user, host,
and database. See section <a href="manual.html#Privileges">4.2.6
How the Privilege System Works</a>.</dd>

<dt><code>mSQL</code></dt>

<dd>Has a file <tt>`mSQL.acl'</tt> in which you can grant
read/write privileges for users.</dd>
</dl>

<h3><a id="Compare_PostgreSQL" name="Compare_PostgreSQL"
href="manual_toc.html#Compare_PostgreSQL">1.9.2 How MySQL Compares
to <code>PostgreSQL</code></a></h3>

<p><a id="IDX163" name="IDX163"></a></p>

<p>When reading the following, please note that both products are
continually evolving. We at MySQL AB and the PostgreSQL developers
are both working on making our respective databases as good as
possible, so we are both a serious alternative to any commercial
database.</p>

<p>The following comparison is made by us at MySQL AB. We have
tried to be as accurate and fair as possible, but although we know
MySQL Server thoroughly, we don't have a full knowledge of all
PostgreSQL features, so we may have got some things wrong. We will,
however, correct these when they come to our attention.</p>

<p>We would first like to note that PostgreSQL and MySQL Server are
both widely used products, but with different design goals, even if
we are both striving toward ANSI SQL compliancy. This means that
for some applications MySQL Server is more suited, while for others
PostgreSQL is more suited. When choosing which database to use, you
should first check if the database's feature set satisfies your
application. If you need raw speed, MySQL Server is probably your
best choice. If you need some of the extra features that only
PostgreSQL can offer, you should use <code>PostgreSQL</code>.</p>

<h4><a id="MySQL-PostgreSQL_goals" name="MySQL-PostgreSQL_goals"
href="manual_toc.html#MySQL-PostgreSQL_goals">1.9.2.1 MySQL and
PostgreSQL development strategies</a></h4>

<p><a id="IDX164" name="IDX164"></a> When adding things to MySQL
Server we take pride to do an optimal, definite solution. The code
should be so good that we shouldn't have any need to change it in
the foreseeable future. We also do not like to sacrifice speed for
features but instead will do our utmost to find a solution that
will give maximal throughput. This means that development will take
a little longer, but the end result will be well worth this. This
kind of development is only possible because all server code are
checked by one of a few (currently two) persons before it's
included in the MySQL server.</p>

<p>We at MySQL AB believe in frequent releases to be able to push
out new features quickly to our users. Because of this we do a new
small release about every three weeks, and a major branch every
year. All releases are thoroughly tested with our testing tools on
a lot of different platforms.</p>

<p>PostgreSQL is based on a kernel with lots of contributors. In
this setup it makes sense to prioritise adding a lot of new
features, instead of implementing them optimally, because one can
always optimise things later if there arises a need for this.</p>

<p>Another big difference between MySQL Server and PostgreSQL is
that nearly all of the code in the MySQL server is coded by
developers that are employed by MySQL AB and are still working on
the server code. The exceptions are the transaction engines and the
regexp library.</p>

<p>This is in sharp contrast to the PostgreSQL code, the majority
of which is coded by a big group of people with different
backgrounds. It was only recently that the PostgreSQL developers
announced that their current developer group had finally had time
to take a look at all the code in the current PostgreSQL
release.</p>

<p>Both of the aforementioned development methods have their own
merits and drawbacks. We here at MySQL AB think, of course, that
our model is better because our model gives better code
consistency, more optimal and reusable code, and in our opinion,
fewer bugs. Because we are the authors of the MySQL server code, we
are better able to coordinate new features and releases.</p>

<h4><a id="MySQL-PostgreSQL_features"
name="MySQL-PostgreSQL_features"
href="manual_toc.html#MySQL-PostgreSQL_features">1.9.2.2
Featurewise Comparison of MySQL and PostgreSQL</a></h4>

<p><a id="IDX165" name="IDX165"></a></p>

<p>On the <code>crash-me</code> page (<a
href="http://www.mysql.com/information/crash-me.php">http://www.mysql.com/information/crash-me.php</a>)
you can find a list of those database constructs and limits that
one can detect automatically with a program. Note, however, that a
lot of the numerical limits may be changed with startup options for
their respective databases. This web page is, however, extremely
useful when you want to ensure that your applications work with
many different databases or when you want to convert your
application from one database to another.</p>

<p>MySQL Server offers the following advantages over
PostgreSQL:</p>

<ul>
<li><code>MySQL</code> Server is generally much faster than
PostgreSQL. MySQL 4.0.1 also has a query cache that can boost up
the query speed for mostly-read-only sites many times.</li>

<li>MySQL has a much larger user base than PostgreSQL. Therefore,
the code is tested more and has historically proven more stable
than PostgreSQL. MySQL Server is used more in production
environments than PostgreSQL, mostly thanks to the fact that MySQL
AB, formerly TCX DataKonsult AB, has provided top-quality
commercial support for MySQL Server from the day it was released,
whereas until recently PostgreSQL was unsupported.</li>

<li>MySQL Server works better on Windows than PostgreSQL does.
MySQL Server runs as a native Windows application (a service on
NT/2000/XP), while PostgreSQL is run under the <code>Cygwin</code>
emulation. We have heard that PostgreSQL is not yet that stable on
Windows but we haven't been able to verify this ourselves.</li>

<li>MySQL has more APIs to other languages and is supported by more
existing programs than PostgreSQL. See section <a
href="manual.html#Contrib">B Contributed Programs</a>.</li>

<li>MySQL Server works on 24/7 heavy-duty systems. In most
circumstances you never have to run any cleanups on MySQL Server.
PostgreSQL doesn't yet support 24/7 systems because you have to run
<code>VACUUM</code> once in a while to reclaim space from
<code>UPDATE</code> and <code>DELETE</code> commands and to perform
statistics analyses that are critical to get good performance with
PostgreSQL. <code>VACUUM</code> is also needed after adding a lot
of new rows to a table. On a busy system with lots of changes,
<code>VACUUM</code> must be run very frequently, in the worst cases
even many times a day. During the <code>VACUUM</code> run, which
may take hours if the database is big, the database is, from a
production standpoint, practically dead. Please note: in PostgreSQL
version 7.2, basic vacuuming no longer locks tables, thus allowing
normal user access during the vacuum. A new <code>VACUUM
FULL</code> command does old-style vacuum by locking the table and
shrinking the on-disk copy of the table.</li>

<li>MySQL replication has been thoroughly tested, and is used by
sites like: 

<ul>
<li>Yahoo Finance (<a
href="http://finance.yahoo.com/">http://finance.yahoo.com/</a>)</li>

<li>Mobile.de (<a
href="http://www.mobile.de/">http://www.mobile.de/</a>)</li>

<li>Slashdot (<a
href="http://www.slashdot.org/">http://www.slashdot.org/</a>)</li>
</ul>
</li>

<li>Included in the MySQL distribution are two different testing
suites, <tt>`mysql-test-run'</tt> and <code>crash-me</code> (<a
href="http://www.mysql.com/information/crash-me.php">http://www.mysql.com/information/crash-me.php</a>),
as well as a benchmark suite. The test system is actively updated
with code to test each new feature and almost all reproduceable
bugs that have come to our attention. We test MySQL Server with
these on a lot of platforms before every release. These tests are
more sophisticated than anything we have seen from PostgreSQL, and
they ensure that the MySQL Server is kept to a high standard.</li>

<li>There are far more books in print about MySQL Server than about
PostgreSQL. O'Reilly, SAMS, Que, and New Riders are all major
publishers with books about MySQL. All MySQL features are also
documented in the MySQL online manual because when a new feature is
implemented, the MySQL developers are required to document it
before it's included in the source.</li>

<li>MySQL Server supports more of the standard ODBC functions than
<code>PostgreSQL</code>.</li>

<li>MySQL Server has a much more sophisticated <code>ALTER
TABLE</code>.</li>

<li>MySQL Server has support for tables without transactions for
applications that need all the speed they can get. The tables may
be memory-based, <code>HEAP</code> tables or disk based
<code>MyISAM</code>. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</li>

<li>MySQL Server has support for two different storage engines that
support transactions, <code>InnoDB</code>, and
<code>BerkeleyDB</code>. Because every transaction engine performs
differently under different conditions, this gives the application
writer more options to find an optimal solution for his or her
setup, if need be per individual table. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</li>

<li><code>MERGE</code> tables gives you a unique way to instantly
make a view over a set of identical tables and use these as one.
This is perfect for systems where you have log files that you
order, for example, by month. See section <a
href="manual.html#MERGE">7.2 <code>MERGE</code> Tables</a>.</li>

<li>The option to compress read-only tables, but still have direct
access to the rows in the table, gives you better performance by
minimising disk reads. This is very useful when you are archiving
things. See section <a href="manual.html#myisampack">4.7.4
<code>myisampack</code>, The MySQL Compressed Read-only Table
Generator</a>.</li>

<li>MySQL Server has internal support for full-text search. See
section <a href="manual.html#Fulltext_Search">6.8 MySQL Full-text
Search</a>.</li>

<li>You can access many databases from the same connection
(depending, of course, on your privileges).</li>

<li>MySQL Server is coded from the start to be multi-threaded,
while PostgreSQL uses processes. Context switching and access to
common storage areas is much faster between threads than between
separate processes. This gives MySQL Server a big speed advantage
in multi-user applications and also makes it easier for MySQL
Server to take full advantage of symmetric multiprocessor (SMP)
systems.</li>

<li>MySQL Server has a much more sophisticated privilege system
than PostgreSQL. While PostgreSQL only supports
<code>INSERT</code>, <code>SELECT</code>, and
<code>UPDATE/DELETE</code> grants per user on a database or a
table, MySQL Server allows you to define a full set of different
privileges on the database, table, and column level. MySQL Server
also allows you to specify the privilege on host and user
combinations. See section <a href="manual.html#GRANT">4.3.1
<code>GRANT</code> and <code>REVOKE</code> Syntax</a>.</li>

<li>MySQL Server supports a compressed client/server protocol which
improves performance over slow links.</li>

<li>MySQL Server employs a ``storage engine'' concept, and is the
only relational database we know of built around this concept. This
allows different low-level table types to be called from the SQL
engine, and each table type can be optimised for different
performance characteristics.</li>

<li>All MySQL table types (except <code>InnoDB</code>) are
implemented as files (one table per file), which makes it really
easy to back up, move, delete, and even symlink databases and
tables, even when the server is down.</li>

<li>Tools to repair and optimise <code>MyISAM</code> tables (the
most common MySQL table type). A repair tool is only needed when a
physical corruption of a datafile happens, usually from a hardware
failure. It allows a majority of the data to be recovered.</li>

<li>Upgrading MySQL Server is painless. When you are upgrading
MySQL Server, you don't need to dump/restore your data, as you have
to do with most PostgreSQL upgrades.</li>
</ul>

<p>Drawbacks with MySQL Server compared to PostgreSQL:</p>

<ul>
<li>The transaction support in MySQL Server is not yet as well
tested as PostgreSQL's system.</li>

<li>Because MySQL Server uses threads, which are not yet flawless
on many OSes, one must either use binaries from <a
href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a>,
or carefully follow our instructions in section <a
href="manual.html#Installing_source">2.3 Installing a MySQL Source
Distribution</a> to get an optimal binary that works in all
cases.</li>

<li>Table locking, as used by the non-transactional
<code>MyISAM</code> tables, is in many cases faster than page
locks, row locks, or versioning. The drawback, however, is that if
one doesn't take into account how table locks work, a single
long-running query can block a table for updates for a long time.
This can usually be avoided when designing the application. If not,
one can always switch the trouble table to use one of the
transactional table types. See section <a
href="manual.html#Table_locking">5.3.2 Table Locking
Issues</a>.</li>

<li>With UDF (user-defined functions) one can extend MySQL Server
with both normal SQL functions and aggregates, but this is not yet
as easy or as flexible as in PostgreSQL. See section <a
href="manual.html#Adding_functions">9.2 Adding New Functions to
MySQL</a>.</li>

<li>Updates that run over multiple tables used to be harder to do
in MySQL Server. However, this has been fixed in MySQL Server 4.0.2
with multi-table <code>UPDATE</code> and in MySQL Server 4.1 with
subselects. In MySQL Server 4.0 one can use multi-table deletes to
delete from many tables at the same time. See section <a
href="manual.html#DELETE">6.4.6 <code>DELETE</code>
Syntax</a>.</li>
</ul>

<p>PostgreSQL currently offers the following advantages over MySQL
Server:</p>

<p>Note that because we know the MySQL road map, we have included
in the following table the version when MySQL Server should support
this feature. Unfortunately we couldn't do this for previous
comparisons, because we don't know the PostgreSQL roadmap.</p>

<table border="1" width="100%">
<tr>
<td><strong>Feature</strong></td>
<td><strong>MySQL version</strong></td>
</tr>

<tr>
<td>Subselects</td>
<td>4.1</td>
</tr>

<tr>
<td>Foreign keys</td>
<td>5.0 (3.23 with InnoDB)</td>
</tr>

<tr>
<td>Views</td>
<td>5.0</td>
</tr>

<tr>
<td>Stored procedures</td>
<td>5.0</td>
</tr>

<tr>
<td>Triggers</td>
<td>5.0</td>
</tr>

<tr>
<td>Unions</td>
<td>4.0</td>
</tr>

<tr>
<td>Full join</td>
<td>4.1</td>
</tr>

<tr>
<td>Constraints</td>
<td>4.1 or 5.0</td>
</tr>

<tr>
<td>Cursors</td>
<td>4.1 or 5.0</td>
</tr>

<tr>
<td>R-trees</td>
<td>4.1 (for MyISAM tables)</td>
</tr>

<tr>
<td>Inherited tables</td>
<td>Not planned</td>
</tr>

<tr>
<td>Extensible type system</td>
<td>Not planned</td>
</tr>
</table>

<p>Other reasons someone may consider using PostgreSQL:</p>

<ul>
<li>Standard usage in PostgreSQL is closer to ANSI SQL in some
cases.</li>

<li>One can speed up PostgreSQL by coding things as stored
procedures.</li>

<li>For geographical data, R-trees make PostgreSQL better than
MySQL Server. (note: MySQL version 4.1 has R-trees for MyISAM
tables).</li>

<li>The PostgreSQL optimiser can do some optimisation that the
current MySQL optimiser can't do. Most notable is doing joins when
you don't have the proper keys in place and doing a join where you
are using different keys combined with OR. The MySQL benchmark
suite at <a
href="http://www.mysql.com/information/benchmarks.html">http://www.mysql.com/information/benchmarks.html</a>
shows you what kind of constructs you should watch out for when
using different databases.</li>

<li>PostgreSQL has a bigger team of developers that contribute to
the server.</li>
</ul>

<p>Drawbacks with PostgreSQL compared to MySQL Server:</p>

<ul>
<li><code>VACUUM</code> makes PostgreSQL hard to use in a 24/7
environment.</li>

<li>Only transactional tables.</li>

<li>Much slower <code>INSERT</code>, <code>DELETE</code>, and
<code>UPDATE</code>.</li>
</ul>

<p>For a complete list of drawbacks, you should also examine the
first table in this section.</p>

<h4><a id="MySQL-PostgreSQL_benchmarks"
name="MySQL-PostgreSQL_benchmarks"
href="manual_toc.html#MySQL-PostgreSQL_benchmarks">1.9.2.3
Benchmarking MySQL and PostgreSQL</a></h4>

<p><a id="IDX166" name="IDX166"></a></p>

<p>The only <code>Open Source</code> benchmark that we know of that
can be used to benchmark MySQL Server and PostgreSQL (and other
databases) is our own. It can be found at <a
href="http://www.mysql.com/information/benchmarks.html">http://www.mysql.com/information/benchmarks.html</a>.</p>

<p>We have many times asked the PostgreSQL developers and some
PostgreSQL users to help us extend this benchmark to make it the
definitive benchmark for databases, but unfortunately we haven't
gotten any feedback for this.</p>

<p>We, the MySQL developers, have, because of this, spent a lot of
hours to get maximum performance from PostgreSQL for the
benchmarks, but because we don't know PostgreSQL intimately, we are
sure that there are things that we have missed. We have on the
benchmark page documented exactly how we did run the benchmark so
that it should be easy for anyone to repeat and verify our
results.</p>

<p>The benchmarks are usually run with and without the
<code>--fast</code> option. When run with <code>--fast</code> we
are trying to use every trick the server can do to get the code to
execute as fast as possible. The idea is that the normal run should
show how the server would work in a default setup and the
<code>--fast</code> run shows how the server would do if the
application developer would use extensions in the server to make
his application run faster.</p>

<p>When running with PostgreSQL and <code>--fast</code> we do a
<code>VACUUM</code> after every major table <code>UPDATE</code> and
<code>DROP TABLE</code> to make the database in perfect shape for
the following <code>SELECT</code>s. The time for
<code>VACUUM</code> is measured separately.</p>

<p>When running with PostgreSQL 7.1.1 we could, however, not run
with <code>--fast</code> because during the <code>INSERT</code>
test, the postmaster (the PostgreSQL deamon) died and the database
was so corrupted that it was impossible to restart postmaster.
After this happened twice, we decided to postpone the
<code>--fast</code> test until the next PostgreSQL release. The
details about the machine we run the benchmark on can be found on
the benchmark page.</p>

<p>Before going to the other benchmarks we know of, we would like
to give some background on benchmarks.</p>

<p>It's very easy to write a test that shows <strong>any</strong>
database to be the best database in the world, by just restricting
the test to something the database is very good at and not testing
anything that the database is not good at. If one, after doing
this, summarises the result as a single figure, things are even
easier.</p>

<p>This would be like us measuring the speed of MySQL Server
compared to PostgreSQL by looking at the summary time of the MySQL
benchmarks on our web page. Based on this MySQL Server would be
more than 40 times faster than PostgreSQL, something that is, of
course, not true. We could make things even worse by just taking
the test where PostgreSQL performs worst and claim that MySQL
Server is more than 2000 times faster than PostgreSQL.</p>

<p>The case is that MySQL does a lot of optimisations that
PostgreSQL doesn't do. This is, of course, also true the other way
around. An SQL optimiser is a very complex thing, and a company
could spend years just making the optimiser faster and faster.</p>

<p>When looking at the benchmark results you should look for things
that you do in your application and just use these results to
decide which database would be best suited for your application.
The benchmark results also show things a particular database is not
good at and should give you a notion about things to avoid and what
you may have to do in other ways.</p>

<p>We know of two benchmark tests that claim that PostgreSQL
performs better than MySQL Server. These both where multi-user
tests, a test that we here at MySQL AB haven't had time to write
and include in the benchmark suite, mainly because it's a big task
to do this in a manner that is fair to all databases.</p>

<p>One is the benchmark paid for by Great Bridge, the company that
for 16 months attempted to build a business based on PostgreSQL but
now has ceased operations. This is probably the worst benchmark we
have ever seen anyone conduct. This was not only tuned to only test
what PostgreSQL is absolutely best at, but it was also totally
unfair to every other database involved in the test.</p>

<p><strong>Note</strong>: We know that even some of the main
PostgreSQL developers did not like the way Great Bridge conducted
the benchmark, so we don't blame the PostgreSQL team for the way
the benchmark was done.</p>

<p>This benchmark has been condemned in a lot of postings and
newsgroups, so here we will just briefly repeat some things that
were wrong with it.</p>

<ul>
<li>The tests were run with an expensive commercial tool that makes
it impossible for an <code>Open Source</code> company like us to
verify the benchmarks, or even check how the benchmarks were really
done. The tool is not even a true benchmark tool, but an
application/setup testing tool. To refer to this as a ``standard''
benchmark tool is to stretch the truth a long way.</li>

<li>Great Bridge admitted that they had optimised the PostgreSQL
database (with <code>VACUUM</code> before the test) and tuned the
startup for the tests, something they hadn't done for any of the
other databases involved. They say ``This process optimises indexes
and frees up disk space a bit. The optimised indexes boost
performance by some margin.'' Our benchmarks clearly indicate that
the difference in running a lot of selects on a database with and
without <code>VACUUM</code> can easily differ by a factor of
10.</li>

<li>The test results were also strange. The AS3AP test
documentation mentions that the test does ``selections, simple
joins, projections, aggregates, one-tuple updates, and bulk
updates.'' PostgreSQL is good at doing <code>SELECT</code>s and
<code>JOIN</code>s (especially after a <code>VACUUM</code>), but
doesn't perform as well on <code>INSERT</code>s or
<code>UPDATE</code>s. The benchmarks seem to indicate that only
<code>SELECT</code>s were done (or very few updates). This could
easily explain the good results for PostgreSQL in this test. The
bad results for MySQL will be obvious a bit down in this
document.</li>

<li>They did run the so-called benchmark from a Windows machine
against a Linux machine over ODBC, a setup that no normal database
user would ever do when running a heavy multi-user application.
This tested more the ODBC driver and the Windows protocol used
between the clients than the database itself.</li>

<li>When running the database against Oracle and MS-SQL (Great
Bridge has indirectly indicated the databases they used in the
test), they didn't use the native protocol but instead ODBC. Anyone
that has ever used Oracle knows that all real applications use the
native interface instead of ODBC. Doing a test through ODBC and
claiming that the results had anything to do with using the
database in a real-world situation can't be regarded as fair. They
should have done two tests with and without ODBC to provide the
right facts (after having gotten experts to tune all involved
databases, of course).</li>

<li>They refer to the TPC-C tests, but they don't mention anywhere
that the test they did was not a true TPC-C test and they were not
even allowed to call it a TPC-C test. A TPC-C test can only be
conducted by the rules approved by the TPC Council (<a
href="http://www.tpc.org/">http://www.tpc.org/</a>). Great Bridge
didn't do that. By doing this they have both violated the TPC
trademark and miscredited their own benchmarks. The rules set by
the TPC Council are very strict to ensure that no one can produce
false results or make unprovable statements. Apparently Great
Bridge wasn't interested in doing this.</li>

<li>After the first test, we contacted Great Bridge and mentioned
to them some of the obvious mistakes they had done with MySQL
Server: 

<ul>
<li>Running with a debug version of our ODBC driver</li>

<li>Running on a Linux system that wasn't optimised for
threads</li>

<li>Using an old MySQL version when there was a recommended newer
one available</li>

<li>Not starting MySQL Server with the right options for heavy
multi-user use (the default installation of MySQL Server is tuned
for minimal resource use)</li>
</ul>

Great Bridge did run a new test, with our optimised ODBC driver and
with better startup options for MySQL Server, but refused to either
use our updated glibc library or our standard binary (used by 80%
of our users), which was statically linked with a fixed glibc
library. According to what we know, Great Bridge did nothing to
ensure that the other databases were set up correctly to run well
in their test environment. We are sure, however, that they didn't
contact Oracle or Microsoft to ask for their advice in this matter.
;)</li>

<li>The benchmark was paid for by Great Bridge, and they decided to
publish only partial, chosen results (instead of publishing it
all).</li>
</ul>

<p>Tim Perdue, a long-time PostgreSQL fan and a reluctant MySQL
user, published a comparison on PHPbuilder (<a
href="http://www.phpbuilder.com/columns/tim20001112.php3">http://www.phpbuilder.com/columns/tim20001112.php3</a>).</p>

<p>When we became aware of the comparison, we phoned Tim Perdue
about this because there were a lot of strange things in his
results. For example, he claimed that MySQL Server had a problem
with five users in his tests, when we know that there are users
with similar machines as his that are using MySQL Server with 2000
simultaneous connections doing 400 queries per second. (In this
case the limit was the web bandwidth, not the database.)</p>

<p>It sounded like he was using a Linux kernel that either had some
problems with many threads, such as kernels before 2.4, which had a
problem with many threads on multi-CPU machines. We have documented
in this manual how to fix this and Tim should be aware of this
problem.</p>

<p>The other possible problem could have been an old glibc library
and that Tim didn't use a MySQL binary from our site, which is
linked with a corrected glibc library, but had compiled a version
of his own. In any of these cases, the symptom would have been
exactly what Tim had measured.</p>

<p>We asked Tim if we could get access to his data so that we could
repeat the benchmark and if he could check the MySQL version on the
machine to find out what was wrong and he promised to come back to
us about this. He has not done that yet.</p>

<p>Because of this we can't put any trust in this benchmark either.
:(</p>

<p>Over time things also change and the preceding benchmarks are
not that relevant anymore. MySQL Server now has a couple of
different storage engines with different speed/concurrency
tradeoffs. See section <a href="manual.html#Table_types">7 MySQL
Table Types</a>. It would be interesting to see how the above tests
would run with the different transactional table types in MySQL
Server. PostgreSQL has, of course, also got new features since the
test was made. As these tests are not publicly available there is
no way for us to know how the database would perform in the same
tests today.</p>

<p>Conclusion:</p>

<p>The only benchmarks that exist today that anyone can download
and run against MySQL Server and PostgreSQL are the MySQL
benchmarks. We here at MySQL AB believe that <code>Open
Source</code> databases should be tested with <code>Open
Source</code> tools! This is the only way to ensure that no one
does tests that nobody can reproduce and use this to claim that one
database is better than another. Without knowing all the facts it's
impossible to answer the claims of the tester.</p>

<p>The thing we find strange is that every test we have seen about
PostgreSQL, that is impossible to reproduce, claims that PostgreSQL
is better in most cases while our tests, which anyone can
reproduce, clearly show otherwise. With this we don't want to say
that PostgreSQL isn't good at many things (it is!) or that it isn't
faster than MySQL Server under certain conditions. We would just
like to see a fair test where PostgreSQL performs very well, so
that we could get some friendly competition going!</p>

<p>For more information about our benchmark suite, see section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>.</p>

<p>We are working on an even better benchmark suite, including
multi-user tests, and a better documentation of what the individual
tests really do and how to add more tests to the suite.</p>

<h1><a id="Installing" name="Installing"
href="manual_toc.html#Installing">2 MySQL Installation</a></h1>

<p><a id="IDX167" name="IDX167"></a></p>

<p>This chapter describes how to obtain and install MySQL:</p>

<ul>
<li>For a list of sites from which you can obtain MySQL, see
section <a href="manual.html#Getting_MySQL">2.2.1 How to Get
MySQL</a>.</li>

<li>To see which platforms are supported, see section <a
href="manual.html#Which_OS">2.2.2 Operating Systems Supported by
MySQL</a>. Please note that not all supported systems are equally
good for running MySQL on them. On some it is much more robust and
efficient than others—see section <a
href="manual.html#Which_OS">2.2.2 Operating Systems Supported by
MySQL</a> for details.</li>

<li>Several versions of MySQL are available in both binary and
source distributions. We also provide public access to our current
source tree for those who want to see our most recent developments
and help us test new code. To determine which version and type of
distribution you should use, see section <a
href="manual.html#Which_version">2.2.3 Which MySQL Version to
Use</a>. When in doubt, use the binary distribution.</li>

<li>Installation instructions for binary and source distributions
are described in section <a
href="manual.html#Installing_binary">2.2.7 Installing a MySQL
Binary Distribution</a>, and section <a
href="manual.html#Installing_source">2.3 Installing a MySQL Source
Distribution</a>. Each set of instructions includes a section on
system-specific problems you may run into.</li>

<li>For post-installation procedures, see section <a
href="manual.html#Post-installation">2.4 Post-installation Setup
and Testing</a>. These procedures apply whether you install MySQL
using a binary or source distribution.</li>
</ul>

<h2><a id="Quick_Standard_Installation"
name="Quick_Standard_Installation"
href="manual_toc.html#Quick_Standard_Installation">2.1 Quick
Standard Installation of MySQL</a></h2>

<h3><a id="Linux-RPM" name="Linux-RPM"
href="manual_toc.html#Linux-RPM">2.1.1 Installing MySQL on
Linux</a></h3>

<p><a id="IDX168" name="IDX168"></a> <a id="IDX169"
name="IDX169"></a></p>

<p>The recommended way to install MySQL on Linux is by using the
RPM packages. The MySQL RPMs are currently being built on a SuSE
Linux 7.3 system but should work on most versions of Linux that
support <code>rpm</code> and use <code>glibc</code>.</p>

<p>If you have problems with an RPM file, for example, if you
receive the error ``<code>Sorry, the host 'xxxx' could not be
looked up</code>''—see section <a
href="manual.html#Binary_notes-Linux">2.6.1.1 Linux Notes for
Binary Distributions</a>.</p>

<p>The RPM files you may want to use are:</p>

<ul>
<li><code>MySQL-server-VERSION.i386.rpm</code> The MySQL server.
You will need this unless you only want to connect to a MySQL
server running on another machine. Please note, that this package
was called <code>MySQL-VERSION.i386.rpm</code> before MySQL
4.0.10.</li>

<li><code>MySQL-client-VERSION.i386.rpm</code> The standard MySQL
client programs. You probably always want to install this
package.</li>

<li><code>MySQL-bench-VERSION.i386.rpm</code> Tests and benchmarks.
Requires Perl and msql-mysql-modules RPMs.</li>

<li><code>MySQL-devel-VERSION.i386.rpm</code> Libraries and include
files needed if you want to compile other MySQL clients, such as
the Perl modules.</li>

<li><code>MySQL-shared-VERSION.i386.rpm</code> This package
contains the shared libraries (<code>libmysqlclient.so*</code>)
which certain languages and applications need to dynamically load
and use MySQL.</li>

<li><code>MySQL-embedded-VERSION.i386.rpm</code> The embedded MySQL
server library (MySQL 4.x and onwards only).</li>

<li><code>MySQL-VERSION.src.rpm</code> This contains the source
code for all of the previous packages. It can also be used to
rebuild the RPMs on other architectures (for example, Alpha or
SPARC).</li>
</ul>

<p>To see all files in an RPM package, run:</p>

<pre>
shell&gt; rpm -qpl MySQL-VERSION.i386.rpm
</pre>

<p>To perform a standard minimal installation, run:</p>

<pre>
shell&gt; rpm -i MySQL-server-VERSION.i386.rpm MySQL-client-VERSION.i386.rpm
</pre>

<p>To install just the client package, run:</p>

<pre>
shell&gt; rpm -i MySQL-client-VERSION.i386.rpm
</pre>

<p>The RPM places data in <tt>`/var/lib/mysql'</tt>. The RPM also
creates the appropriate entries in <tt>`/etc/init.d/'</tt> to start
the server automatically at boot time. (This means that if you have
performed a previous installation, you may want to make a copy of
your previously installed MySQL startup file if you made any
changes to it, so you don't lose your changes.)</p>

<p>If you want to install the MySQL RPM on older Linux
distributions that do not support init scripts in
<tt>`/etc/init.d'</tt> (directly or via a symlink), you should
create a symbolic link pointing to the old location before
installing the RPM:</p>

<pre>
shell&gt; cd /etc ; ln -s rc.d/init.d .
</pre>

<p>However, all current major Linux distributions should already
support this new directory layout as it is required for LSB (Linux
Standard Base) compliance.</p>

<p>After installing the RPM file(s), the <code>mysqld</code> daemon
should be up and running and you should now be able to start using
MySQL. See section <a href="manual.html#Post-installation">2.4
Post-installation Setup and Testing</a>.</p>

<p>If something goes wrong, you can find more information in the
binary installation chapter. See section <a
href="manual.html#Installing_binary">2.2.7 Installing a MySQL
Binary Distribution</a>.</p>

<h3><a id="Windows_installation" name="Windows_installation"
href="manual_toc.html#Windows_installation">2.1.2 Installing MySQL
on Windows</a></h3>

<p>The MySQL server for Windows is available in two distribution
types:</p>

<ol>
<li>The binary distribution contains a setup program which installs
everything you need so that you can start the server
immediately.</li>

<li>The source distribution contains all the code and support files
for building the executables using the VC++ 6.0 compiler. See
section <a href="manual.html#Windows_source_build">2.3.7 Windows
Source Distribution</a>.</li>
</ol>

<p>Generally speaking, you should use the binary distribution.</p>

<p>You will need the following:</p>

<ul>
<li>A 32-bit Windows Operating System such as 9x, Me, NT, 2000, or
XP. The NT family (NT, Windows 2000 and XP) permits running the
MySQL server as a service. See section <a
href="manual.html#NT_start">2.6.2.2 Starting MySQL on Windows NT,
2000 or XP</a>. If you want to use tables bigger than 4G, you
should install MySQL on an NTFS or newer filesystem. Don't forget
to use <code>MAX_ROWS</code> and <code>AVG_ROW_LENGTH</code> when
you create the table. See section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</li>

<li>TCP/IP protocol support.</li>

<li>A copy of the MySQL binary or distribution for Windows, which
can be downloaded from <a
href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a>.
Note: The distribution files are supplied with a zipped format and
we recommend the use of an adequate FTP client with resume feature
to avoid corruption of files during the download process.</li>

<li>A <code>ZIP</code> program to unpack the distribution
file.</li>

<li>Enough space on the hard drive to unpack, install, and create
the databases in accorandance with your requirements.</li>

<li>If you plan to connect to the MySQL server via
<code>ODBC</code>, you will also need the <code>MyODBC</code>
driver. See section <a href="manual.html#ODBC">8.3 MySQL ODBC
Support</a>.</li>
</ul>

<h4><a id="Windows_binary_installation"
name="Windows_binary_installation"
href="manual_toc.html#Windows_binary_installation">2.1.2.1
Installing the Binaries</a></h4>

<ol>
<li>If you are working on an NT/2000/XP server, logon as a user
with administrator privileges.</li>

<li>If you are doing an upgrade of an earlier MySQL installation,
it is necessary to stop the server. If you are running the server
as a service, use: 

<pre>
C:\&gt; NET STOP MySQL
</pre>

Otherwise, use: 

<pre>
C:\mysql\bin&gt; mysqladmin -u root shutdown
</pre>
</li>

<li>On NT/2000/XP machines, if you want to change the server
executable (e.g., -max or -nt), it is also necessary to remove the
service: 

<pre>
C:\mysql\bin&gt; mysqld-max-nt --remove
</pre>
</li>

<li>Unzip the distribution file to a temporary directory.</li>

<li>Run the <tt>`setup.exe'</tt> file to begin the installation
process. If you want to install into another directory than the
default <tt>`c:\mysql'</tt>, use the <code>Browse</code> button to
specify your preferred directory.</li>

<li>Finish the install process.</li>
</ol>

<h4><a id="Windows_prepare_environment"
name="Windows_prepare_environment"
href="manual_toc.html#Windows_prepare_environment">2.1.2.2
Preparing the Windows MySQL Environment</a></h4>

<p>Starting with MySQL 3.23.38, the Windows distribution includes
both the normal and the MySQL-Max server binaries. Here is a list
of the different MySQL servers you can use:</p>

<table border="1" width="100%">
<tr>
<td><strong>Binary</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>mysqld</code></td>
<td>Compiled with full debugging and automatic memory allocation
checking, symbolic links, InnoDB, and BDB tables.</td>
</tr>

<tr>
<td><code>mysqld-opt</code></td>
<td>Optimised binary with no support for transactional tables.</td>
</tr>

<tr>
<td><code>mysqld-nt</code></td>
<td>Optimised binary for NT/2000/XP with support for named pipes.
You can run this version on Windows 9x/Me, but in this case no
named pipes are created and you must have TCP/IP installed.</td>
</tr>

<tr>
<td><code>mysqld-max</code></td>
<td>Optimised binary with support for symbolic links, InnoDB and
BDB tables.</td>
</tr>

<tr>
<td><code>mysqld-max-nt</code></td>
<td>Like <code>mysqld-max</code>, but compiled with support for
named pipes.</td>
</tr>
</table>

<p>Starting from 3.23.50, named pipes are only enabled if one
starts mysqld with <code>--enable-named-pipe</code>.</p>

<p>All of the preceding binaries are optimised for the Pentium Pro
processor but should work on any Intel processor &gt;= i386.</p>

<p>You will need to use an option file to specify your MySQL
configuration under the following circumstances:</p>

<ul>
<li>The installation or data directories are different from the
default locations (<tt>`c:\mysql'</tt> and
<tt>`c:\mysql\data'</tt>).</li>

<li>You want to use one of these servers: 

<ul>
<li>mysqld.exe</li>

<li>mysqld-max.exe</li>

<li>mysqld-max-nt.exe</li>
</ul>
</li>

<li>You need to tune the server settings.</li>
</ul>

<p>Normally you can use the <code>WinMySQLAdmin</code> tool to edit
the option file <code>my.ini</code>. In this case you don't have to
worry about the following section.</p>

<p>There are two option files with the same function:
<tt>`my.cnf'</tt> and <tt>`my.ini'</tt>. However, to avoid
confusion, it's best if you use only of one them. Both files are
plain text. The <tt>`my.cnf'</tt> file, if used, should be created
in the root directory of the C drive. The <tt>`my.ini'</tt> file,
if used, should be created in the Windows system directory. (This
directory is typically something like <tt>`C:\WINDOWS'</tt> or
<tt>`C:\WINNT'</tt>. You can determine its exact location from the
value of the <code>windir</code> environment variable.) MySQL looks
first for the <code>my.ini</code> file, then for the
<tt>`my.cnf'</tt> file.</p>

<p>If your PC uses a boot loader where the C drive isn't the boot
drive, your only option is to use the <tt>`my.ini'</tt> file. Also
note that if you use the <code>WinMySQLAdmin</code> tool, it uses
only the <tt>`my.ini'</tt> file. The <tt>`\mysql\bin'</tt>
directory contains a help file with instructions for using this
tool.</p>

<p>Using <code>notepad.exe</code>, create the option file and edit
the <code>[mysqld]</code> section to specify values for the
<code>basedir</code> and <code>datadir</code> parameters:</p>

<pre>
[mysqld]
# set basedir to installation path, e.g., c:/mysql
basedir=the_install_path
# set datadir to location of data directory,
# e.g., c:/mysql/data or d:/mydata/data
datadir=the_data_path
</pre>

<p>Note that Windows pathnames should be specified in option files
using forward slashes rather than backslashes. If you do use
backslashes, you must double them.</p>

<p>If you would like to use a data directory different from the
default of <tt>`c:\mysql\data'</tt>, you must copy the entire
contents of the <tt>`c:\mysql\data'</tt> directory to the new
location.</p>

<p>If you want to use the <code>InnoDB</code> transactional tables,
you need to manually create two new directories to hold the InnoDB
data and log files—e.g., <tt>`c:\ibdata'</tt> and
<tt>`c:\iblogs'</tt>. You will also need to add some extra lines to
the option file. See section <a
href="manual.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a>.</p>

<p>If you don't want to use <code>InnoDB</code> tables, add the
<code>skip-innodb</code> option to the option file.</p>

<p>Now you are ready to test starting the server.</p>

<h4><a id="Windows_server_first_start"
name="Windows_server_first_start"
href="manual_toc.html#Windows_server_first_start">2.1.2.3 Starting
the Server for the First Time</a></h4>

<p>Testing from a DOS command prompt is the best thing to do
because the server displays status messages that appear in the DOS
window. If something is wrong with your configuration, these
messages will make it easier for you to identify and fix any
problems.</p>

<p>Make sure you are in the directory where the server is located,
then enter this command:</p>

<pre>
C:\mysql\bin&gt; mysqld-max --standalone
</pre>

<p>You should see the following messages as the server starts
up:</p>

<pre>
InnoDB: The first specified datafile c:\ibdata\ibdata1 did not exist:
InnoDB: a new database to be created!
InnoDB: Setting file c:\ibdata\ibdata1 size to 209715200
InnoDB: Database physically writes the file full: wait...
InnoDB: Log file c:\iblogs\ib_logfile0 did not exist: new to be created
InnoDB: Setting log file c:\iblogs\ib_logfile0 size to 31457280
InnoDB: Log file c:\iblogs\ib_logfile1 did not exist: new to be created
InnoDB: Setting log file c:\iblogs\ib_logfile1 size to 31457280
InnoDB: Log file c:\iblogs\ib_logfile2 did not exist: new to be created
InnoDB: Setting log file c:\iblogs\ib_logfile2 size to 31457280
InnoDB: Doublewrite buffer not found: creating new
InnoDB: Doublewrite buffer created
InnoDB: creating foreign key constraint system tables
InnoDB: foreign key constraint system tables created
011024 10:58:25  InnoDB: Started
</pre>

<p>For further information about running MySQL on Windows, see
section <a href="manual.html#Windows">2.6.2 Windows Notes</a>.</p>

<h2><a id="General_Installation_Issues"
name="General_Installation_Issues"
href="manual_toc.html#General_Installation_Issues">2.2 General
Installation Issues</a></h2>

<h3><a id="Getting_MySQL" name="Getting_MySQL"
href="manual_toc.html#Getting_MySQL">2.2.1 How to Get
MySQL</a></h3>

<p><a id="IDX170" name="IDX170"></a> <a id="IDX171"
name="IDX171"></a> <a id="IDX172" name="IDX172"></a> <a id="IDX173"
name="IDX173"></a> <a id="IDX174" name="IDX174"></a> <a id="IDX175"
name="IDX175"></a></p>

<p>Check the MySQL homepage (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>) for
information about the current version and for downloading
instructions.</p>

<p>Our main mirror is located at <a
href="http://mirrors.sunsite.dk/mysql/">http://mirrors.sunsite.dk/mysql/</a>.</p>

<p>For a complete upto-date list of MySQL web/download mirrors, see
<a
href="http://www.mysql.com/downloads/mirrors.html">http://www.mysql.com/downloads/mirrors.html</a>.
There you will also find information about becoming a MySQL mirror
site and how to report a bad or out-of-date mirror.</p>

<h3><a id="Which_OS" name="Which_OS"
href="manual_toc.html#Which_OS">2.2.2 Operating Systems Supported
by MySQL</a></h3>

<p><a id="IDX176" name="IDX176"></a> <a id="IDX177"
name="IDX177"></a> <a id="IDX178" name="IDX178"></a> <a id="IDX179"
name="IDX179"></a> <a id="IDX180" name="IDX180"></a></p>

<p>We use GNU Autoconf, so it is possible to port MySQL to all
modern systems with working Posix threads and a C++ compiler. (To
compile only the client code, a C++ compiler is required but not
threads.) We use and develop the software ourselves primarily on
Sun Solaris (Versions 2.5 - 2.7) and SuSE Linux Version 7.x.</p>

<p>Note that for many operating systems, the native thread support
works only in the latest versions. MySQL has been reported to
compile successfully on the following operating system/thread
package combinations:</p>

<ul>
<li>AIX 4.x, 5.x with native threads. See section <a
href="manual.html#IBM-AIX">2.6.6.4 IBM-AIX notes</a>.</li>

<li>Amiga.</li>

<li>BSDI 2.x with the MIT-pthreads package. See section <a
href="manual.html#BSDI">2.6.4.5 BSD/OS Version 2.x Notes</a>.</li>

<li>BSDI 3.0, 3.1 and 4.x with native threads. See section <a
href="manual.html#BSDI">2.6.4.5 BSD/OS Version 2.x Notes</a>.</li>

<li>DEC Unix 4.x with native threads. See section <a
href="manual.html#Alpha-DEC-UNIX">2.6.6.6 Alpha-DEC-UNIX Notes
(Tru64)</a>.</li>

<li>FreeBSD 2.x with the MIT-pthreads package. See section <a
href="manual.html#FreeBSD">2.6.4.1 FreeBSD Notes</a>.</li>

<li>FreeBSD 3.x and 4.x with native threads. See section <a
href="manual.html#FreeBSD">2.6.4.1 FreeBSD Notes</a>.</li>

<li>HP-UX 10.20 with the DCE threads or the MIT-pthreads package.
See section <a href="manual.html#HP-UX_10.20">2.6.6.2 HP-UX Version
10.20 Notes</a>.</li>

<li>HP-UX 11.x with the native threads. See section <a
href="manual.html#HP-UX_11.x">2.6.6.3 HP-UX Version 11.x
Notes</a>.</li>

<li>Linux 2.0+ with LinuxThreads 0.7.1+ or <code>glibc</code>
2.0.7+. See section <a href="manual.html#Linux">2.6.1 Linux Notes
(All Linux Versions)</a>.</li>

<li>Mac OS X. See section <a href="manual.html#Mac_OS_X">2.6.5 Mac
OS X Notes</a>.</li>

<li>NetBSD 1.3/1.4 Intel and NetBSD 1.3 Alpha (Requires GNU make).
See section <a href="manual.html#NetBSD">2.6.4.2 NetBSD
notes</a>.</li>

<li>OpenBSD &gt; 2.5 with native threads. OpenBSD &lt; 2.5 with the
MIT-pthreads package. See section <a
href="manual.html#OpenBSD">2.6.4.3 OpenBSD 2.5 Notes</a>.</li>

<li>OS/2 Warp 3, FixPack 29 and OS/2 Warp 4, FixPack 4. See section
<a href="manual.html#OS_2">2.6.7 OS/2 Notes</a>.</li>

<li>SGI Irix 6.x with native threads. See section <a
href="manual.html#SGI-Irix">2.6.6.8 SGI Irix Notes</a>.</li>

<li>Solaris 2.5 and above with native threads on SPARC and x86. See
section <a href="manual.html#Solaris">2.6.3 Solaris Notes</a>.</li>

<li>SunOS 4.x with the MIT-pthreads package. See section <a
href="manual.html#Solaris">2.6.3 Solaris Notes</a>.</li>

<li>Caldera (SCO) OpenServer with a recent port of the FSU Pthreads
package. See section <a href="manual.html#Caldera">2.6.6.9 Caldera
(SCO) Notes</a>.</li>

<li>Caldera (SCO) UnixWare 7.0.1. See section <a
href="manual.html#Caldera_Unixware">2.6.6.10 Caldera (SCO) Unixware
Version 7.0 Notes</a>.</li>

<li>Tru64 Unix</li>

<li>Windows 9x, Me, NT, 2000 and XP. See section <a
href="manual.html#Windows">2.6.2 Windows Notes</a>.</li>
</ul>

<p>Note that not all platforms are suited equally well for running
MySQL. How well a certain platform is suited for a high-load
mission-critical MySQL server is determined by the following
factors:</p>

<ul>
<li>General stability of the thread library. A platform may have
excellent reputation otherwise, but if the thread library is
unstable in the code that is called by MySQL, even if everything
else is perfect, MySQL will be only as stable as the thread
library.</li>

<li>The ability of the kernel and/or thread library to take
advantage of <strong>SMP</strong> on multi-processor systems. In
other words, when a process creates a thread, it should be possible
for that thread to run on a different CPU than the original
process.</li>

<li>The ability of the kernel and/or the thread library to run many
threads which acquire/release a mutex over a short critical region
frequently without excessive context switches. In other words, if
the implementation of <code>pthread_mutex_lock()</code> is too
anxious to yield CPU time, this will hurt MySQL tremendously. If
this issue is not taken care of, adding extra CPUs will actually
make MySQL slower.</li>

<li>General filesystem stability/performance.</li>

<li>Ability of the filesystem to deal with large files at all and
deal with them efficiently, if your tables are big.</li>

<li>Our level of expertise here at MySQL AB with the platform. If
we know a platform well, we introduce platform-specific
optimisations/fixes enabled at compile time. We can also provide
advice on configuring your system optimally for MySQL.</li>

<li>The amount of testing of similar configurations we have done
internally.</li>

<li>The number of users that have successfully run MySQL on that
platform in similar configurations. If this number is high, the
chances of hitting some platform-specific surprises are much
smaller.</li>
</ul>

<p>Based on the preceding criteria, the best platforms for running
MySQL at this point are x86 with SuSE Linux 7.1, 2.4 kernel, and
ReiserFS (or any similar Linux distribution) and SPARC with Solaris
2.7 or 2.8. FreeBSD comes third, but we really hope it will join
the top club once the thread library is improved. We also hope that
at some point we will be able to include all other platforms on
which MySQL compiles, runs okay, but not quite with the same level
of stability and performance, into the top category. This will
require some effort on our part in cooperation with the developers
of the OS/library components MySQL depends upon. If you are
interested in making one of those components better, are in a
position to influence their development, and need more detailed
instructions on what MySQL needs to run better, send an e-mail to
<a
href="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.</p>

<p>Please note that the preceding comparison is not to say that one
OS is better or worse than the other in general. We are talking
about choosing a particular OS for a dedicated purpose—running
MySQL, and compare platforms in that regard only. With this in
mind, the result of this comparison would be different if we
included more issues into it. And in some cases, the reason one OS
is better than the other could simply be that we have put forth
more effort into testing on and optimising for that particular
platform. We are just stating our observations to help you decide
on which platform to use MySQL on in your setup.</p>

<h3><a id="Which_version" name="Which_version"
href="manual_toc.html#Which_version">2.2.3 Which MySQL Version to
Use</a></h3>

<p><a id="IDX181" name="IDX181"></a> <a id="IDX182"
name="IDX182"></a> <a id="IDX183" name="IDX183"></a> <a id="IDX184"
name="IDX184"></a> <a id="IDX185" name="IDX185"></a></p>

<p>The first decision to make is whether you want to use the latest
development release or the last stable release:</p>

<ul>
<li>Normally, if you are beginning to use MySQL for the first time
or trying to port it to some system for which there is no binary
distribution, we recommend going with the stable release (currently
version 3.23). Note that all MySQL releases are checked with the
MySQL benchmarks and an extensive test suite before each release
(even the development releases).</li>

<li>Otherwise, if you are running an old system and want to
upgrade, but don't want to take chances with a non-seamless
upgrade, you should upgrade to the latest in the same branch you
are using (where only the last version number is newer than yours).
We have tried to fix only fatal bugs and make small, relatively
safe changes to that version.</li>
</ul>

<p>The second decision to make is whether you want to use a source
distribution or a binary distribution. In most cases you should
probably use a binary distribution, if one exists for your
platform, as this generally will be easier to install than a source
distribution.</p>

<p>In the following cases you probably will be better off with a
source installation:</p>

<ul>
<li>If you want to install MySQL at some explicit location. (The
standard binary distributions are ``ready to run'' at any place,
but you may want to get even more flexibility).</li>

<li>To be able to satisfy different user requirements, we are
providing two different binary versions: one compiled with the
non-transactional storage engines (a small, fast binary), and one
configured with the most important extended options like
transaction-safe tables. Both versions are compiled from the same
source distribution. All native <code>MySQL</code> clients can
connect to both MySQL versions. The extended MySQL binary
distribution is marked with the <code>-max</code> suffix and is
configured with the same options as <code>mysqld-max</code>. See
section <a href="manual.html#mysqld-max">4.7.5
<code>mysqld-max</code>, An Extended <code>mysqld</code>
Server</a>. If you want to use the MySQL-Max RPM, you must first
install the standard MySQL RPM.</li>

<li>If you want to configure <code>mysqld</code> with some extra
features that are not in the standard binary distributions. Here is
a list of the most common extra options that you may want to use: 

<ul>
<li><code>--with-innodb</code></li>

<li><code>--with-berkeley-db</code></li>

<li><code>--with-raid</code></li>

<li><code>--with-libwrap</code></li>

<li><code>--with-named-z-lib (This is done for some of the
binaries)</code></li>

<li><code>--with-debug[=full]</code></li>
</ul>
</li>

<li>The default binary distribution is normally compiled with
support for all character sets and should work on a variety of
processors from the same processor family. If you want a faster
MySQL server you may want to recompile it with support for only the
character sets you need, use a better compiler (like
<code>pgcc</code>), or use compiler options that are better
optimised for your processor.</li>

<li>If you have found a bug and reported it to the MySQL
development team you will probably receive a patch that you need to
apply to the source distribution to get the bug fixed.</li>

<li>If you want to read (and/or modify) the C and C++ code that
makes up MySQL, you should get a source distribution. The source
code is always the ultimate manual. Source distributions also
contain more tests and examples than binary distributions.</li>
</ul>

<p><a id="IDX186" name="IDX186"></a> <a id="IDX187"
name="IDX187"></a></p>

<p>The MySQL naming scheme uses release numbers that consist of
three numbers and a suffix. For example, a release name like
<code>mysql-3.21.17-beta</code> is interpreted like this:</p>

<ul>
<li>The first number (<code>3</code>) describes the file format.
All Version 3 releases have the same file format.</li>

<li>The second number (<code>21</code>) is the release level.
Normally there are two to choose from. One is the release/stable
branch (currently <code>23</code>) and the other is the development
branch (currently <code>4.0</code>). Normally both are stable, but
the development version may have quirks, may be missing
documentation on new features, or may fail to compile on some
systems.</li>

<li>The third number (<code>17</code>) is the version number within
the release level. This is incremented for each new distribution.
Usually you want the latest version for the release level you have
chosen.</li>

<li>The suffix (<code>beta</code>) indicates the stability level of
the release. The possible suffixes are: 

<ul>
<li><code>alpha</code> indicates that the release contains some
large section of new code that hasn't been 100% tested. Known bugs
(usually there are none) should be documented in the News section.
See section <a href="manual.html#News">D MySQL Change History</a>.
There are also new commands and extensions in most alpha releases.
Active development that may involve major code changes can occur on
an alpha release, but everything will be tested before doing a
release. There should be no known bugs in any MySQL release.</li>

<li><code>beta</code> means that all new code has been tested. No
major new features that could cause corruption on old code are
added. There should be no known bugs. A version changes from alpha
to beta when there haven't been any reported fatal bugs within an
alpha version for at least a month and we don't plan to add any
features that could make any old command more unreliable.</li>

<li><code>gamma</code> is a beta that has been around a while and
seems to work fine. Only minor fixes are added. This is what many
other companies call a release.</li>

<li>If there is no suffix, it means that the version has been run
for a while at many different sites with no reports of bugs other
than platform-specific bugs. Only critical bug fixes are applied to
the release. This is what we call a stable release.</li>
</ul>
</li>
</ul>

<p>All versions of MySQL are run through our standard tests and
benchmarks to ensure that they are relatively safe to use. Because
the standard tests are extended over time to check for all
previously found bugs, the test suite keeps getting better.</p>

<p><a id="IDX188" name="IDX188"></a> <a id="IDX189"
name="IDX189"></a></p>

<p>Note that all releases have been tested at least with:</p>

<dl compact="compact">
<dt>An internal test suite</dt>

<dd>This is part of a production system for a customer. It has many
tables with hundreds of megabytes of data.</dd>

<dt>The MySQL benchmark suite</dt>

<dd>This runs a range of common queries. It is also a test to see
whether the latest batch of optimisations actually made the code
faster. See section <a href="manual.html#MySQL_Benchmarks">5.1.4
The MySQL Benchmark Suite</a>.</dd>

<dt>The <code>crash-me</code> test</dt>

<dd>This tries to determine what features the database supports and
what its capabilities and limitations are. See section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>.</dd>
</dl>

<p>Another test is that we use the newest MySQL version in our
internal production environment, on at least one machine. We have
more than 100 gigabytes of data to work with.</p>

<h3><a id="Installation_layouts" name="Installation_layouts"
href="manual_toc.html#Installation_layouts">2.2.4 Installation
Layouts</a></h3>

<p><a id="IDX190" name="IDX190"></a> <a id="IDX191"
name="IDX191"></a> <a id="IDX192" name="IDX192"></a> <a id="IDX193"
name="IDX193"></a></p>

<p>This section describes the default layout of the directories
created by installing binary and source distributions.</p>

<p>A binary distribution is installed by unpacking it at the
installation location you choose (typically
<tt>`/usr/local/mysql'</tt>) and creates the following directories
in that location:</p>

<table border="1" width="100%">
<tr>
<td><strong>Directory</strong></td>
<td><strong>Contents of directory</strong></td>
</tr>

<tr>
<td><tt>`bin'</tt></td>
<td>Client programs and the <code>mysqld</code> server</td>
</tr>

<tr>
<td><tt>`data'</tt></td>
<td>Log files, databases</td>
</tr>

<tr>
<td><tt>`include'</tt></td>
<td>Include (header) files</td>
</tr>

<tr>
<td><tt>`lib'</tt></td>
<td>Libraries</td>
</tr>

<tr>
<td><tt>`scripts'</tt></td>
<td><code>mysql_install_db</code></td>
</tr>

<tr>
<td><tt>`share/mysql'</tt></td>
<td>Error message files</td>
</tr>

<tr>
<td><tt>`sql-bench'</tt></td>
<td>Benchmarks</td>
</tr>
</table>

<p>A source distribution is installed after you configure and
compile it. By default, the installation step installs files under
<tt>`/usr/local'</tt>, in the following subdirectories:</p>

<table border="1" width="100%">
<tr>
<td><strong>Directory</strong></td>
<td><strong>Contents of directory</strong></td>
</tr>

<tr>
<td><tt>`bin'</tt></td>
<td>Client programs and scripts</td>
</tr>

<tr>
<td><tt>`include/mysql'</tt></td>
<td>Include (header) files</td>
</tr>

<tr>
<td><tt>`info'</tt></td>
<td>Documentation in Info format</td>
</tr>

<tr>
<td><tt>`lib/mysql'</tt></td>
<td>Libraries</td>
</tr>

<tr>
<td><tt>`libexec'</tt></td>
<td>The <code>mysqld</code> server</td>
</tr>

<tr>
<td><tt>`share/mysql'</tt></td>
<td>Error message files</td>
</tr>

<tr>
<td><tt>`sql-bench'</tt></td>
<td>Benchmarks and <code>crash-me</code> test</td>
</tr>

<tr>
<td><tt>`var'</tt></td>
<td>Databases and log files</td>
</tr>
</table>

<p>Within an installation directory, the layout of a source
installation differs from that of a binary installation in the
following ways:</p>

<ul>
<li>The <code>mysqld</code> server is installed in the
<tt>`libexec'</tt> directory rather than in the <tt>`bin'</tt>
directory.</li>

<li>The data directory is <tt>`var'</tt> rather than
<tt>`data'</tt>.</li>

<li><code>mysql_install_db</code> is installed in the
<tt>`/usr/local/bin'</tt> directory rather than in
<tt>`/usr/local/mysql/scripts'</tt>.</li>

<li>The header file and library directories are
<tt>`include/mysql'</tt> and <tt>`lib/mysql'</tt> rather than
<tt>`include'</tt> and <tt>`lib'</tt>.</li>
</ul>

<p>You can create your own binary installation from a compiled
source distribution by executing the script
<tt>`scripts/make_binary_distribution'</tt>.</p>

<h3><a id="Many_versions" name="Many_versions"
href="manual_toc.html#Many_versions">2.2.5 How and When Updates Are
Released</a></h3>

<p><a id="IDX194" name="IDX194"></a> <a id="IDX195"
name="IDX195"></a></p>

<p>MySQL is evolving quite rapidly here at MySQL AB and we want to
share this with other MySQL users. We try to make a release when we
have very useful features that others seem to have a need for.</p>

<p>We also try to help out users who request features that are easy
to implement. We take note of what our licensed users want to have,
and we especially take note of what our extended e-mail supported
customers want and try to help them out.</p>

<p>No one has to download a new release. The News section will tell
you if the new release has something you really want. See section
<a href="manual.html#News">D MySQL Change History</a>.</p>

<p>We use the following policy when updating MySQL:</p>

<ul>
<li>For each minor update, the last number in the version string is
incremented. When there are major new features or minor
incompatibilities with previous versions, the second number in the
version string is incremented. When the file format changes, the
first number is increased.</li>

<li>Stable-tested releases are meant to appear about 1-2 times a
year, but if small bugs are found, a release with only bug fixes
will be released.</li>

<li>Working releases/bug fixes to old releases are meant to appear
about every 1-8 weeks.</li>

<li>Binary distributions for some platforms will be made by us for
major releases. Other people may make binary distributions for
other systems but probably less frequently.</li>

<li>We usually make patches available as soon as we have located
and fixed small bugs. They are posted to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a> and
will be added to the next release.</li>

<li>For non-critical but annoying bugs, we will add them the MySQL
source repository and they will be fixed in the next release.</li>

<li>If there is, by any chance, a fatal bug in a release we will
make a new release as soon as possible. We would like other
companies to do this, too.</li>
</ul>

<p>The current stable release is Version 3.23; we have already
moved active development to Version 4.0. Bugs will still be fixed
in the stable version. We don't believe in a complete freeze, as
this also leaves out bug fixes and things that ``must be done.''
``Somewhat frozen'' means that we may add small things that
``almost surely will not affect anything that's already
working.''</p>

<p>MySQL uses a slightly different naming scheme from most other
products. In general it's relatively safe to use any version that
has been out for a couple of weeks without being replaced with a
new version. See section <a href="manual.html#Which_version">2.2.3
Which MySQL Version to Use</a>.</p>

<h3><a id="MySQL_binaries" name="MySQL_binaries"
href="manual_toc.html#MySQL_binaries">2.2.6 MySQL Binaries Compiled
by MySQL AB</a></h3>

<p><a id="IDX196" name="IDX196"></a></p>

<p>As a service, we at MySQL AB provide a set of binary
distributions of MySQL that are compiled at our site or at sites
where customers kindly have given us access to their machines.</p>

<p>These distributions are generated using the script
<code>Build-tools/Do-compile</code> which compiles the source code
and creates the binary <code>tar.gz</code> archive using
<code>scripts/make_binary_distribution</code> These binaries are
configured and built with the following compilers and options.</p>

<p>Binaries built on MySQL AB development systems:</p>

<dl compact="compact">
<dt>Linux 2.4.xx i386 with <code>gcc</code> 2.95.3</dt>

<dd><code>CFLAGS="-O2 -mcpu=pentiumpro" CXX=gcc CXXFLAGS="-O2
-mcpu=pentiumpro -felide-constructors" ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--enable-assembler --disable-shared
--with-client-ldflags=-all-static
--with-mysqld-ldflags=-all-static</code></dd>

<dt>Linux 2.4.xx ia64 with <code>ecc</code> (Intel C++ Itanium
Compiler 7.0)</dt>

<dd><code>CC=ecc CFLAGS=-tpp1 CXX=ecc CXXFLAGS=-tpp1 ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile</code></dd>

<dt>Linux 2.4.xx alpha with <code>ccc</code> (Compaq C V6.2-505 /
Compaq C++ V6.3-006)</dt>

<dd><code>CC=ccc CFLAGS="-fast -arch generic" CXX=cxx
CXXFLAGS="-fast -arch generic -noexceptions -nortti" ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--with-mysqld-ldflags=-non_shared --with-client-ldflags=-non_shared
--disable-shared</code></dd>

<dt>Linux 2.2.xx sparc with <code>egcs</code> 1.1.2</dt>

<dd><code>CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --enable-assembler
--disable-shared</code></dd>

<dt>Linux 2.4.xx s390 with <code>gcc</code> 2.95.3</dt>

<dd><code>CFLAGS="-O2" CXX=gcc CXXFLAGS="-O2 -felide-constructors"
./configure --prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile --disable-shared
--with-client-ldflags=-all-static
--with-mysqld-ldflags=-all-static</code></dd>

<dt>Sun Solaris 2.8 sparc with <code>gcc</code> 3.2</dt>

<dd><code>CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --enable-assembler --with-named-z-libs=no
--with-named-curses-libs=-lcurses --disable-shared</code></dd>

<dt>Sun Solaris 2.9 sparc with <code>gcc</code> 2.95.3</dt>

<dd><code>CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --enable-assembler
--with-named-curses-libs=-lcurses --disable-shared</code></dd>

<dt>Sun Solaris 2.9 sparc with <code>cc-5.0</code> (Sun Forte
5.0)</dt>

<dd><code>CC=cc-5.0 CXX=CC ASFLAGS="-xarch=v9" CFLAGS="-Xa
-xstrconst -mt -D_FORTEC_ -xarch=v9" CXXFLAGS="-noex -mt -D_FORTEC_
-xarch=v9" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --enable-assembler --with-named-z-libs=no
--enable-thread-safe-client --disable-shared</code></dd>

<dt>IBM AIX 4.3.2 ppc with <code>gcc</code> 3.2.1</dt>

<dd><code>CFLAGS="-O2 -mcpu=powerpc -Wa,-many " CXX=gcc
CXXFLAGS="-O2 -mcpu=powerpc -Wa,-many -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --with-named-z-libs=no
--disable-shared</code></dd>

<dt>IBM AIX 5.1.0 ppc with <code>gcc</code> 3.2.1</dt>

<dd><code>CFLAGS="-O2 -mcpu=powerpc -Wa,-many" CXX=gcc
CXXFLAGS="-O2 -mcpu=powerpc -Wa,-many -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --with-server-suffix="-pro"
--enable-thread-safe-client --enable-local-infile
--with-named-z-libs=no --disable-shared --with-innodb</code></dd>

<dt>HP-UX 10.20 pa-risc1.1 with <code>gcc</code> 3.1</dt>

<dd><code>CFLAGS="-DHPUX -I/opt/dce/include -O3 -fPIC" CXX=gcc
CXXFLAGS="-DHPUX -I/opt/dce /include -felide-constructors
-fno-exceptions -fno-rtti -O3 -fPIC" ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile --with-pthread
--with-named-thread-libs=-ldce --with-lib-ccflags=-fPIC
--disable-shared</code></dd>

<dt>HP-UX 11.11 pa-risc2.0 with <code>aCC</code> (HP ANSI C++
B3910B A.03.33)</dt>

<dd><code>CC=cc CXX=aCC CFLAGS=+DD64 CXXFLAGS=+DD64 ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--disable-shared</code></dd>

<dt>Apple MacOS X 10.2 powerpc with <code>gcc</code> 3.1</dt>

<dd><code>CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --disable-shared</code></dd>

<dt>FreeBSD 4.7 i386 with <code>gcc</code> 2.95.4</dt>

<dd><code>CFLAGS=-DHAVE_BROKEN_REALPATH ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--enable-assembler --with-named-z-libs=not-used
--disable-shared</code></dd>
</dl>

<p>The following binaries are built on third-party systems kindly
provided to MySQL AB by other users. Please note that these are
only provided as a courtesy. Since MySQL AB does not have full
control over these systems, we can only provide limited support for
the binaries built on these systems.</p>

<dl compact="compact">
<dt>SCO Unix 3.2v5.0.6 i386 with <code>gcc</code> 2.95.3</dt>

<dd><code>CFLAGS="-O3 -mpentium" LDFLAGS=-static CXX=gcc
CXXFLAGS="-O3 -mpentium -felide-constructors" ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--with-named-z-libs=no --enable-thread-safe-client
--disable-shared</code></dd>

<dt>Caldera Open Unix 8.0.0 i386 with <code>CC</code> 3.2</dt>

<dd><code>CC=cc CFLAGS="-O" CXX=CC ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex
--enable-thread-safe-client --enable-local-infile
--with-named-z-libs=no --enable-thread-safe-client
--disable-shared</code></dd>

<dt>Compaq Tru64 OSF/1 V5.1 732 alpha with <code>cc/cxx</code>
(Compaq C V6.3-029i / DIGITAL C++ V6.1-027)</dt>

<dd><code>CC="cc -pthread" CFLAGS="-O4 -ansi_alias -ansi_args -fast
-inline speed -speculate all" CXX="cxx -pthread" CXXFLAGS="-O4
-ansi_alias -fast -inline speed -speculate all -noexceptions
-nortti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --with-prefix=/usr/local/mysql
--with-named-thread-libs="-lpthread -lmach -lexc -lc"
--disable-shared --with-mysqld-ldflags=-all-static</code></dd>

<dt>SGI Irix 6.5 IP32 with <code>gcc</code> 3.0.1</dt>

<dd><code>CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXXFLAGS="-O3
-fno-omit-frame-pointer -felide-constructors -fno-exceptions
-fno-rtti" ./configure --prefix=/usr/local/mysql
--with-extra-charsets=complex --enable-thread-safe-client
--enable-local-infile --disable-shared</code></dd>
</dl>

<p>The following compile options have been used for binary packages
MySQL AB used to provide in the past. These binaries are currently
not being updated anymore, but the compile options are kept in here
for reference purposes.</p>

<dl compact="compact">
<dt>Linux 2.2.x with x686 with <code>gcc</code> 2.95.2</dt>

<dd><code>CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3
-mpentiumpro -felide-constructors -fno-exceptions -fno-rtti"
./configure --prefix=/usr/local/mysql --enable-assembler
--with-mysqld-ldflags=-all-static --disable-shared
--with-extra-charsets=complex</code></dd>

<dt>SunOS 4.1.4 2 sun4c with <code>gcc</code> 2.7.2.1</dt>

<dd><code>CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors"
./configure --prefix=/usr/local/mysql --disable-shared
--with-extra-charsets=complex --enable-assembler</code></dd>

<dt>SunOS 5.5.1 (and above) sun4u with <code>egcs</code> 1.0.3a or
2.90.27 or gcc 2.95.2 and newer</dt>

<dd><code>CC=gcc CFLAGS="-O3" CXX=gcc CXXFLAGS="-O3
-felide-constructors -fno-exceptions -fno-rtti" ./configure
--prefix=/usr/local/mysql --with-low-memory
--with-extra-charsets=complex --enable-assembler</code></dd>

<dt>SunOS 5.6 i86pc with <code>gcc</code> 2.8.1</dt>

<dd><code>CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure
--prefix=/usr/local/mysql --with-low-memory
--with-extra-charsets=complex</code></dd>

<dt>BSDI BSD/OS 3.1 i386 with <code>gcc</code> 2.7.2.1</dt>

<dd><code>CC=gcc CXX=gcc CXXFLAGS=-O ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex</code></dd>

<dt>BSDI BSD/OS 2.1 i386 with <code>gcc</code> 2.7.2</dt>

<dd><code>CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex</code></dd>

<dt>AIX 2 4 with <code>gcc</code> 2.7.2.2</dt>

<dd><code>CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure
--prefix=/usr/local/mysql --with-extra-charsets=complex</code></dd>
</dl>

<p>Anyone who has more optimal options for any of the preceding
configurations listed can always mail them to the developer's
mailing list at <a
href="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.</p>

<p>RPM distributions prior to MySQL Version 3.22 are
user-contributed. Beginning with Version 3.22, the RPMs are
generated by us at MySQL AB.</p>

<p>If you want to compile a debug version of MySQL, you should add
<code>--with-debug</code> or <code>--with-debug=full</code> to the
preceding configure lines and remove any
<code>-fomit-frame-pointer</code> options.</p>

<p>For the Windows distribution, please see section <a
href="manual.html#Windows_installation">2.1.2 Installing MySQL on
Windows</a>.</p>

<h3><a id="Installing_binary" name="Installing_binary"
href="manual_toc.html#Installing_binary">2.2.7 Installing a MySQL
Binary Distribution</a></h3>

<p><a id="IDX197" name="IDX197"></a> <a id="IDX198"
name="IDX198"></a></p>

<p>See also section <a
href="manual.html#Windows_binary_installation">2.1.2.1 Installing
the Binaries</a>, section <a href="manual.html#Linux-RPM">2.1.1
Installing MySQL on Linux</a>, and section <a
href="manual.html#Building_clients">8.4.7 Building Client
Programs</a>.</p>

<p>You need the following tools to install a MySQL binary
distribution:</p>

<ul>
<li>GNU <code>gunzip</code> to uncompress the distribution.</li>

<li>A reasonable <code>tar</code> to unpack the distribution. GNU
<code>tar</code> is known to work. Sun <code>tar</code> is known to
have problems.</li>
</ul>

<p><a id="IDX199" name="IDX199"></a> <a id="IDX200"
name="IDX200"></a> An alternative installation method under Linux
is to use RPM-based (RPM Package Manager) distributions. See
section <a href="manual.html#Linux-RPM">2.1.1 Installing MySQL on
Linux</a>.</p>

<p>If you run into problems, <strong>please always use
<code>mysqlbug</code></strong> when posting questions to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. Even
if the problem isn't a bug, <code>mysqlbug</code> gathers system
information that will help others solve your problem. By not using
<code>mysqlbug</code>, you lessen the likelihood of getting a
solution to your problem! You will find <code>mysqlbug</code> in
the <tt>`bin'</tt> directory after you unpack the distribution. See
section <a href="manual.html#Bug_reports">1.6.1.3 How to Report
Bugs or Problems</a>.</p>

<p><a id="IDX201" name="IDX201"></a> The basic commands you must
execute to install and use a MySQL binary distribution are:</p>

<pre>
shell&gt; groupadd mysql
shell&gt; useradd -g mysql mysql
shell&gt; cd /usr/local
shell&gt; gunzip &lt; /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
shell&gt; ln -s full-path-to-mysql-VERSION-OS mysql
shell&gt; cd mysql
shell&gt; scripts/mysql_install_db
shell&gt; chown -R root  .
shell&gt; chown -R mysql data
shell&gt; chgrp -R mysql .
shell&gt; bin/safe_mysqld --user=mysql &amp;
or
shell&gt; bin/mysqld_safe --user=mysql &amp;
if you are running MySQL 4.x
</pre>

<p><a id="IDX202" name="IDX202"></a> <a id="IDX203"
name="IDX203"></a> <a id="IDX204" name="IDX204"></a></p>

<p>You can add new users using the
<code>bin/mysql_setpermission</code> script if you install the
<code>DBI</code> and <code>Msql-Mysql-modules</code> Perl
modules.</p>

<p>A more detailed description follows.</p>

<p>To install a binary distribution, follow these steps, then
proceed to section <a href="manual.html#Post-installation">2.4
Post-installation Setup and Testing</a>, for post-installation
setup and testing:</p>

<ol>
<li>Pick the directory under which you want to unpack the
distribution, and move into it. In the following example, we unpack
the distribution under <tt>`/usr/local'</tt> and create a directory
<tt>`/usr/local/mysql'</tt> into which MySQL is installed. (The
following instructions, therefore, assume you have permission to
create files in <tt>`/usr/local'</tt>. If that directory is
protected, you will need to perform the installation as
<code>root</code>.)</li>

<li>Obtain a distribution file from one of the sites listed in
section <a href="manual.html#Getting_MySQL">2.2.1 How to Get
MySQL</a>. MySQL binary distributions are provided as compressed
<code>tar</code> archives and have names like
<tt>`mysql-VERSION-OS.tar.gz'</tt>, where <code>VERSION</code> is a
number (for example, <code>3.21.15</code>), and <code>OS</code>
indicates the type of operating system for which the distribution
is intended (for example, <code>pc-linux-gnu-i586</code>).</li>

<li>If you see a binary distribution marked with the
<code>-max</code> suffix, this means that the binary has support
for transaction-safe tables and other features. See section <a
href="manual.html#mysqld-max">4.7.5 <code>mysqld-max</code>, An
Extended <code>mysqld</code> Server</a>. Note that all binaries are
built from the same MySQL source distribution.</li>

<li>Add a user and group for <code>mysqld</code> to run as: 

<pre>
shell&gt; groupadd mysql
shell&gt; useradd -g mysql mysql
</pre>

These commands add the <code>mysql</code> group and the
<code>mysql</code> user. The syntax for <code>useradd</code> and
<code>groupadd</code> may differ slightly on different versions of
Unix. They may also be called <code>adduser</code> and
<code>addgroup</code>. You may wish to call the user and group
something else instead of <code>mysql</code>.</li>

<li>Change into the intended installation directory: 

<pre>
shell&gt; cd /usr/local
</pre>
</li>

<li>Unpack the distribution and create the installation directory: 

<pre>
shell&gt; gunzip &lt; /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
shell&gt; ln -s full-path-to-mysql-VERSION-OS mysql
</pre>

The first command creates a directory named
<tt>`mysql-VERSION-OS'</tt>. The second command makes a symbolic
link to that directory. This lets you refer more easily to the
installation directory as <tt>`/usr/local/mysql'</tt>.</li>

<li>Change into the installation directory: 

<pre>
shell&gt; cd mysql
</pre>

You will find several files and subdirectories in the
<code>mysql</code> directory. The most important for installation
purposes are the <tt>`bin'</tt> and <tt>`scripts'</tt>
subdirectories. 

<dl compact="compact">
<dt><tt>`bin'</tt></dt>

<dd><a id="IDX205" name="IDX205"></a> <a id="IDX206"
name="IDX206"></a> This directory contains client programs and the
server You should add the full pathname of this directory to your
<code>PATH</code> environment variable so that your shell finds the
MySQL programs properly. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</dd>

<dt><tt>`scripts'</tt></dt>

<dd>This directory contains the <code>mysql_install_db</code>
script used to initialise the <code>mysql</code> database
containing the grant tables that store the server access
permissions.</dd>
</dl>
</li>

<li>If you would like to use <code>mysqlaccess</code> and have the
MySQL distribution in some non-standard place, you must change the
location where <code>mysqlaccess</code> expects to find the
<code>mysql</code> client. Edit the <tt>`bin/mysqlaccess'</tt>
script at approximately line 18. Search for a line that looks like
this: 

<pre>
$MYSQL     = '/usr/local/bin/mysql';    # path to mysql executable
</pre>

Change the path to reflect the location where <code>mysql</code>
actually is stored on your system. If you do not do this, you will
get a <code>Broken pipe</code> error when you run
<code>mysqlaccess</code>.</li>

<li>Create the MySQL grant tables (necessary only if you haven't
installed MySQL before): 

<pre>
shell&gt; scripts/mysql_install_db
</pre>

Note that MySQL versions older than Version 3.22.10 started the
MySQL server when you run <code>mysql_install_db</code>. This is no
longer true!</li>

<li>Change ownership of binaries to <code>root</code> and ownership
of the data directory to the user that you will run
<code>mysqld</code> as: 

<pre>
shell&gt; chown -R root  /usr/local/mysql/.
shell&gt; chown -R mysql /usr/local/mysql/data
shell&gt; chgrp -R mysql /usr/local/mysql/.
</pre>

The first command changes the <code>owner</code> attribute of the
files to the <code>root</code> user, the second one changes the
<code>owner</code> attribute of the data directory to the
<code>mysql</code> user, and the third one changes the
<code>group</code> attribute to the <code>mysql</code> group.</li>

<li>If you want to install support for the Perl
<code>DBI</code>/<code>DBD</code> interface, see section <a
href="manual.html#Perl_support">2.7 Perl Installation
Comments</a>.</li>

<li>If you would like MySQL to start automatically when you boot
your machine, you can copy <code>support-files/mysql.server</code>
to the location where your system has its startup files. More
information can be found in the
<code>support-files/mysql.server</code> script itself and in
section <a href="manual.html#Automatic_start">2.4.3 Starting and
Stopping MySQL Automatically</a>.</li>
</ol>

<p>After everything has been unpacked and installed, you should
initialise and test your distribution.</p>

<p>You can start the MySQL server with the following command:</p>

<pre>
shell&gt; bin/safe_mysqld --user=mysql &amp;
</pre>

<p>Now proceed to section <a href="manual.html#safe_mysqld">4.7.2
<code>safe_mysqld</code>, The Wrapper Around
<code>mysqld</code></a>, and See section <a
href="manual.html#Post-installation">2.4 Post-installation Setup
and Testing</a>.</p>

<h2><a id="Installing_source" name="Installing_source"
href="manual_toc.html#Installing_source">2.3 Installing a MySQL
Source Distribution</a></h2>

<p><a id="IDX207" name="IDX207"></a> <a id="IDX208"
name="IDX208"></a> <a id="IDX209" name="IDX209"></a></p>

<p>Before you proceed with the source installation, check first to
see if our binary is available for your platform and if it will
work for you. We put a lot of effort into making sure that our
binaries are built with the best possible options.</p>

<p>You need the following tools to build and install MySQL from
source:</p>

<ul>
<li>GNU <code>gunzip</code> to uncompress the distribution.</li>

<li>A reasonable <code>tar</code> to unpack the distribution. GNU
<code>tar</code> is known to work. Sun <code>tar</code> is known to
have problems.</li>

<li>A working ANSI C++ compiler. <code>gcc</code> &gt;= 2.95.2,
<code>egcs</code> &gt;= 1.0.2 or <code>egcs 2.91.66</code>, SGI
C++, and SunPro C++ are some of the compilers that are known to
work. <code>libg++</code> is not needed when using
<code>gcc</code>. <code>gcc</code> 2.7.x has a bug that makes it
impossible to compile some perfectly legal C++ files, such as
<tt>`sql/sql_base.cc'</tt>. If you only have <code>gcc</code>
2.7.x, you must upgrade your <code>gcc</code> to be able to compile
MySQL. <code>gcc</code> 2.8.1 is also known to have problems on
some platforms, so it should be avoided if a new compiler exists
for the platform. <code>gcc</code> &gt;= 2.95.2 is recommended when
compiling MySQL Version 3.23.x.</li>

<li>A good <code>make</code> program. GNU <code>make</code> is
always recommended and is sometimes required. If you have problems,
we recommend trying GNU <code>make</code> 3.75 or newer.</li>
</ul>

<p>If you are using a recent version of <code>gcc</code>, recent
enough to understand the <code>-fno-exceptions</code> option, it is
<strong>very important</strong> that you use it. Otherwise, you may
compile a binary that crashes randomly. We also recommend that you
use <code>-felide-constructors</code> and <code>-fno-rtti</code>
along with <code>-fno-exceptions</code>. When in doubt, do the
following:</p>

<pre>
CFLAGS="-O3" CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions \
       -fno-rtti" ./configure --prefix=/usr/local/mysql --enable-assembler \
       --with-mysqld-ldflags=-all-static

</pre>

<p>On most systems this will give you a fast and stable binary.</p>

<p>If you run into problems, <strong>please always use
<code>mysqlbug</code></strong> when posting questions to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>. Even
if the problem isn't a bug, <code>mysqlbug</code> gathers system
information that will help others solve your problem. By not using
<code>mysqlbug</code>, you lessen the likelihood of getting a
solution to your problem! You will find <code>mysqlbug</code> in
the <tt>`scripts'</tt> directory after you unpack the distribution.
See section <a href="manual.html#Bug_reports">1.6.1.3 How to Report
Bugs or Problems</a>.</p>

<h3><a id="Quick_install" name="Quick_install"
href="manual_toc.html#Quick_install">2.3.1 Quick Installation
Overview</a></h3>

<p>The basic commands you must execute to install a MySQL source
distribution are:</p>

<pre>
shell&gt; groupadd mysql
shell&gt; useradd -g mysql mysql
shell&gt; gunzip &lt; mysql-VERSION.tar.gz | tar -xvf -
shell&gt; cd mysql-VERSION
shell&gt; ./configure --prefix=/usr/local/mysql
shell&gt; make
shell&gt; make install
shell&gt; scripts/mysql_install_db
shell&gt; chown -R root  /usr/local/mysql
shell&gt; chown -R mysql /usr/local/mysql/var
shell&gt; chgrp -R mysql /usr/local/mysql
shell&gt; cp support-files/my-medium.cnf /etc/my.cnf
shell&gt; /usr/local/mysql/bin/safe_mysqld --user=mysql &amp;
or
shell&gt; /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;
if you are running MySQL 4.x.
</pre>

<p>If you want to have support for InnoDB tables, you should edit
the <code>/etc/my.cnf</code> file and remove the <code>#</code>
character before the parameter that starts with
<code>innodb_...</code>. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>, and section <a href="manual.html#InnoDB_start">7.5.2
InnoDB Startup Options</a>.</p>

<p>If you start from a source RPM, do the following:</p>

<pre>
shell&gt; rpm --rebuild --clean MySQL-VERSION.src.rpm
</pre>

<p>This will make a binary RPM that you can install.</p>

<p>You can add new users using the
<code>bin/mysql_setpermission</code> script if you install the
<code>DBI</code> and <code>Msql-Mysql-modules</code> Perl
modules.</p>

<p>A more detailed description follows.</p>

<p>To install a source distribution, follow these steps, then
proceed to section <a href="manual.html#Post-installation">2.4
Post-installation Setup and Testing</a>, for post-installation
initialisation and testing:</p>

<ol>
<li>Pick the directory under which you want to unpack the
distribution, and move into it.</li>

<li>Obtain a distribution file from one of the sites listed in
section <a href="manual.html#Getting_MySQL">2.2.1 How to Get
MySQL</a>.</li>

<li>If you are interested in using Berkeley DB tables with MySQL,
you will need to obtain a patched version of the Berkeley DB source
code. Please read the chapter on Berkeley DB tables before
proceeding. See section <a href="manual.html#BDB">7.6
<code>BDB</code> or <code>BerkeleyDB</code> Tables</a>. MySQL
source distributions are provided as compressed <code>tar</code>
archives and have names like <tt>`mysql-VERSION.tar.gz'</tt>, where
<code>VERSION</code> is a number like 4.0.9-gamma.</li>

<li>Add a user and group for <code>mysqld</code> to run as: 

<pre>
shell&gt; groupadd mysql
shell&gt; useradd -g mysql mysql
</pre>

These commands add the <code>mysql</code> group and the
<code>mysql</code> user. The syntax for <code>useradd</code> and
<code>groupadd</code> may differ slightly on different versions of
Unix. They may also be called <code>adduser</code> and
<code>addgroup</code>. You may wish to call the user and group
something else instead of <code>mysql</code>.</li>

<li>Unpack the distribution into the current directory: 

<pre>
shell&gt; gunzip &lt; /path/to/mysql-VERSION.tar.gz | tar xvf -
</pre>

This command creates a directory named
<tt>`mysql-VERSION'</tt>.</li>

<li>Change into the top-level directory of the unpacked
distribution: 

<pre>
shell&gt; cd mysql-VERSION
</pre>

Note that currently you must configure and build MySQL from this
top-level directory. You cannot build it in a different
directory.</li>

<li>Configure the release and compile everything: 

<pre>
shell&gt; ./configure --prefix=/usr/local/mysql
shell&gt; make
</pre>

When you run <code>configure</code>, you might want to specify some
options. Run <code>./configure --help</code> for a list of options.
section <a href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>, discusses some of the more
useful options. If <code>configure</code> fails, and you are going
to send mail to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a> to
ask for assistance, please include any lines from
<tt>`config.log'</tt> that you think can help solve the problem.
Also include the last couple of lines of output from
<code>configure</code> if <code>configure</code> aborts. Post the
bug report using the <code>mysqlbug</code> script. See section <a
href="manual.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a>. If the compile fails, see section <a
href="manual.html#Compilation_problems">2.3.5 Problems
Compiling?</a>, for help with a number of common problems.</li>

<li>Install everything: 

<pre>
shell&gt; make install
</pre>

You might need to run this command as <code>root</code>.</li>

<li>Create the MySQL grant tables (necessary only if you haven't
installed MySQL before): 

<pre>
shell&gt; scripts/mysql_install_db
</pre>

Note that MySQL versions older than Version 3.22.10 started the
MySQL server when you run <code>mysql_install_db</code>. This is no
longer true!</li>

<li>Change ownership of binaries to <code>root</code> and ownership
of the data directory to the user that you will run
<code>mysqld</code> as: 

<pre>
shell&gt; chown -R root  /usr/local/mysql
shell&gt; chown -R mysql /usr/local/mysql/var
shell&gt; chgrp -R mysql /usr/local/mysql
</pre>

The first command changes the <code>owner</code> attribute of the
files to the <code>root</code> user, the second one changes the
<code>owner</code> attribute of the data directory to the
<code>mysql</code> user, and the third one changes the
<code>group</code> attribute to the <code>mysql</code> group.</li>

<li>If you want to install support for the Perl
<code>DBI</code>/<code>DBD</code> interface, see section <a
href="manual.html#Perl_support">2.7 Perl Installation
Comments</a>.</li>

<li>If you would like MySQL to start automatically when you boot
your machine, you can copy <code>support-files/mysql.server</code>
to the location where your system has its startup files. More
information can be found in the
<code>support-files/mysql.server</code> script itself and in
section <a href="manual.html#Automatic_start">2.4.3 Starting and
Stopping MySQL Automatically</a>.</li>
</ol>

<p>After everything has been installed, you should initialise and
test your distribution:</p>

<pre>
shell&gt; /usr/local/mysql/bin/safe_mysqld --user=mysql &amp;
</pre>

<p>If that command fails immediately with <code>mysqld daemon
ended</code>, you can find some information in the file
<tt>`mysql-data-directory/'hostname'.err'</tt>. The likely reason
is that you already have another <code>mysqld</code> server
running. See section <a href="manual.html#Multiple_servers">4.1.4
Running Multiple MySQL Servers on the Same Machine</a>.</p>

<p>Now proceed to section <a
href="manual.html#Post-installation">2.4 Post-installation Setup
and Testing</a>.</p>

<h3><a id="Applying_patches" name="Applying_patches"
href="manual_toc.html#Applying_patches">2.3.2 Applying
Patches</a></h3>

<p><a id="IDX210" name="IDX210"></a> <a id="IDX211"
name="IDX211"></a></p>

<p>Sometimes patches appear on the mailing list or are placed in
the patches area of the MySQL web site (<a
href="http://www.mysql.com/downloads/patches.html">http://www.mysql.com/downloads/patches.html</a>).</p>

<p>To apply a patch from the mailing list, save the message in
which the patch appears in a file, change into the top-level
directory of your MySQL source tree, and run these commands:</p>

<pre>
shell&gt; patch -p1 &lt; patch-file-name
shell&gt; rm config.cache
shell&gt; make clean
</pre>

<p>Patches from the FTP site are distributed as plain text files or
as files compressed with <code>gzip</code>. Apply a plain patch as
shown previously for mailing list patches. To apply a compressed
patch, change into the top-level directory of your MySQL source
tree and run these commands:</p>

<pre>
shell&gt; gunzip &lt; patch-file-name.gz | patch -p1
shell&gt; rm config.cache
shell&gt; make clean
</pre>

<p>After applying a patch, follow the instructions for a normal
source install, beginning with the <code>./configure</code> step.
After running the <code>make install</code> step, restart your
MySQL server.</p>

<p>You may need to bring down any currently running server before
you run <code>make install</code>. (Use <code>mysqladmin
shutdown</code> to do this.) Some systems do not allow you to
install a new version of a program if it replaces the version that
is currently executing.</p>

<h3><a id="configure_options" name="configure_options"
href="manual_toc.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a></h3>

<p><a id="IDX212" name="IDX212"></a> <a id="IDX213"
name="IDX213"></a> <a id="IDX214" name="IDX214"></a> <a id="IDX215"
name="IDX215"></a> <a id="IDX216" name="IDX216"></a> <a id="IDX217"
name="IDX217"></a></p>

<p>The <code>configure</code> script gives you a great deal of
control over how you configure your MySQL distribution. Typically
you do this using options on the <code>configure</code>
command-line. You can also affect <code>configure</code> using
certain environment variables. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>. For a list of options supported by
<code>configure</code>, run this command:</p>

<pre>
shell&gt; ./configure --help
</pre>

<p>Some of the more commonly-used <code>configure</code> options
are described here:</p>

<ul>
<li>To compile just the MySQL client libraries and client programs
and not the server, use the <code>--without-server</code> option: 

<pre>
shell&gt; ./configure --without-server
</pre>

If you don't have a C++ compiler, <code>mysql</code> will not
compile (it is the one client program that requires C++). In this
case, you can remove the code in <code>configure</code> that tests
for the C++ compiler and then run <code>./configure</code> with the
<code>--without-server</code> option. The compile step will still
try to build <code>mysql</code>, but you can ignore any warnings
about <tt>`mysql.cc'</tt>. (If <code>make</code> stops, try
<code>make -k</code> to tell it to continue with the rest of the
build even if errors occur.)</li>

<li>If you want to get an embedded MySQL library
(<code>libmysqld.a</code>) you should use the
<code>--with-embedded-server</code> option.</li>

<li>If you don't want your log files and database directories
located under <tt>`/usr/local/var'</tt>, use a
<code>configure</code> command, something like one of these: 

<pre>
shell&gt; ./configure --prefix=/usr/local/mysql
shell&gt; ./configure --prefix=/usr/local \
           --localstatedir=/usr/local/mysql/data
</pre>

The first command changes the installation prefix so that
everything is installed under <tt>`/usr/local/mysql'</tt> rather
than the default of <tt>`/usr/local'</tt>. The second command
preserves the default installation prefix, but overrides the
default location for database directories (normally
<tt>`/usr/local/var'</tt>) and changes it to
<code>/usr/local/mysql/data</code>. After you have compiled MySQL,
you can change these options with option files. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. <a id="IDX218" name="IDX218"></a> <a id="IDX219"
name="IDX219"></a> <a id="IDX220" name="IDX220"></a></li>

<li>If you are using Unix and you want the MySQL socket located
somewhere other than the default location (normally in the
directory <tt>`/tmp'</tt> or <tt>`/var/run'</tt>) use a
<code>configure</code> command like this: 

<pre>
shell&gt; ./configure --with-unix-socket-path=/usr/local/mysql/tmp/mysql.sock
</pre>

Note that the given file must be an absolute pathname! You can also
later change the location <tt>`mysql.sock'</tt> by using the MySQL
option files. See section <a
href="manual.html#Problems_with_mysql.sock">A.4.5 How to Protect or
Change the MySQL Socket File <tt>`/tmp/mysql.sock'</tt></a>. <a
id="IDX221" name="IDX221"></a> <a id="IDX222"
name="IDX222"></a></li>

<li>If you want to compile statically linked programs (for example,
to make a binary distribution, to get more speed, or to work around
problems with some RedHat Linux distributions), run
<code>configure</code> like this: 

<pre>
shell&gt; ./configure --with-client-ldflags=-all-static \
           --with-mysqld-ldflags=-all-static
</pre>

<a id="IDX223" name="IDX223"></a> <a id="IDX224" name="IDX224"></a>
<a id="IDX225" name="IDX225"></a> <a id="IDX226" name="IDX226"></a>
<a id="IDX227" name="IDX227"></a> <a id="IDX228" name="IDX228"></a>
<a id="IDX229" name="IDX229"></a></li>

<li>If you are using <code>gcc</code> and don't have
<code>libg++</code> or <code>libstdc++</code> installed, you can
tell <code>configure</code> to use <code>gcc</code> as your C++
compiler: 

<pre>
shell&gt; CC=gcc CXX=gcc ./configure
</pre>

When you use <code>gcc</code> as your C++ compiler, it will not
attempt to link in <code>libg++</code> or <code>libstdc++</code>.
This may be a good idea to do even if you have the above libraries
installed, as some versions of these libraries have caused strange
problems for MySQL users in the past. Here are some common
environment variables to set depending on the compiler you are
using: <a id="IDX230" name="IDX230"></a> <a id="IDX231"
name="IDX231"></a> 

<table border="1" width="100%">
<tr>
<td><strong>Compiler</strong></td>
<td><strong>Recommended options</strong></td>
</tr>

<tr>
<td>gcc 2.7.2.1</td>
<td>CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors"</td>
</tr>

<tr>
<td>egcs 1.0.3a</td>
<td>CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors
-fno-exceptions -fno-rtti"</td>
</tr>

<tr>
<td>gcc 2.95.2</td>
<td>CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3 -mpentiumpro \
-felide-constructors -fno-exceptions -fno-rtti"</td>
</tr>

<tr>
<td>pgcc 2.90.29 or newer</td>
<td>CFLAGS="-O3 -mpentiumpro -mstack-align-double" CXX=gcc \
CXXFLAGS="-O3 -mpentiumpro -mstack-align-double
-felide-constructors \ -fno-exceptions -fno-rtti"</td>
</tr>
</table>

In most cases you can get a reasonably optimal MySQL binary by
using the options from the preceding table and adding the following
options to the configure line: 

<pre>
--prefix=/usr/local/mysql --enable-assembler \
--with-mysqld-ldflags=-all-static
</pre>

The full configure line would, in other words, be something like
the following for all recent gcc versions: 

<pre>
CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3 -mpentiumpro \
-felide-constructors -fno-exceptions -fno-rtti" ./configure \
--prefix=/usr/local/mysql --enable-assembler \
--with-mysqld-ldflags=-all-static
</pre>

The binaries we provide on the MySQL web site at <a
href="http://www.mysql.com/">http://www.mysql.com/</a> are all
compiled with full optimisation and should be perfect for most
users. See section <a href="manual.html#MySQL_binaries">2.2.6 MySQL
Binaries Compiled by MySQL AB</a>. There are some things you can
tweak to make an even faster binary, but this is only for advanced
users. See section <a
href="manual.html#Compile_and_link_options">5.5.3 How Compiling and
Linking Affects the Speed of MySQL</a>. If the build fails and
produces errors about your compiler or linker not being able to
create the shared library <tt>`libmysqlclient.so.#'</tt>
(<samp>`#'</samp> is a version number), you can work around this
problem by giving the <code>--disable-shared</code> option to
<code>configure</code>. In this case, <code>configure</code> will
not build a shared <tt>`libmysqlclient.so.#'</tt> library. <a
id="IDX232" name="IDX232"></a> <a id="IDX233"
name="IDX233"></a></li>

<li>You can configure MySQL not to use <code>DEFAULT</code> column
values for non-<code>NULL</code> columns (that is, columns that are
not allowed to be <code>NULL</code>). This causes
<code>INSERT</code> statements to generate an error unless you
explicitly specify values for all columns that require a
non-<code>NULL</code> value. To suppress use of default values, run
<code>configure</code> like this: <a id="IDX234" name="IDX234"></a>
<a id="IDX235" name="IDX235"></a> 

<pre>
shell&gt; CXXFLAGS=-DDONT_USE_DEFAULT_FIELDS ./configure
</pre>

<a id="IDX236" name="IDX236"></a> <a id="IDX237" name="IDX237"></a>
<a id="IDX238" name="IDX238"></a></li>

<li>By default, MySQL uses the ISO-8859-1 (Latin1) character set.
To change the default set, use the <code>--with-charset</code>
option: 

<pre>
shell&gt; ./configure --with-charset=CHARSET
</pre>

<code>CHARSET</code> may be one of <code>big5</code>,
<code>cp1251</code>, <code>cp1257</code>, <code>czech</code>,
<code>danish</code>, <code>dec8</code>, <code>dos</code>,
<code>euc_kr</code>, <code>gb2312</code>, <code>gbk</code>,
<code>german1</code>, <code>hebrew</code>, <code>hp8</code>,
<code>hungarian</code>, <code>koi8_ru</code>,
<code>koi8_ukr</code>, <code>latin1</code>, <code>latin2</code>,
<code>sjis</code>, <code>swe7</code>, <code>tis620</code>,
<code>ujis</code>, <code>usa7</code>, or <code>win1251ukr</code>.
See section <a href="manual.html#Character_sets">4.6.1 The
Character Set Used for Data and Sorting</a>. If you want to convert
characters between the server and the client, you should take a
look at the <code>SET CHARACTER SET</code> command. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code> Syntax</a>. <a
id="IDX239" name="IDX239"></a> <strong>Warning</strong>: If you
change character sets after having created any tables, you will
have to run <code>myisamchk -r -q
--set-character-set=charset</code> on every table. Your indexes may
be sorted incorrectly otherwise. (This can happen if you install
MySQL, create some tables, then reconfigure MySQL to use a
different character set and reinstall it.) With the option
<code>--with-extra-charsets=LIST</code> you can define which
additional character sets should be compiled into the server. Here
<code>LIST</code> is either a list of character sets separated with
spaces, <code>complex</code> to include all characters that can't
be dynamically loaded, or <code>all</code> to include all character
sets into the binaries.</li>

<li>To configure MySQL with debugging code, use the
<code>--with-debug</code> option: 

<pre>
shell&gt; ./configure --with-debug
</pre>

This causes a safe memory allocator to be included that can find
some errors and that provides output about what is happening. See
section <a href="manual.html#Debugging_server">E.1 Debugging a
MySQL server</a>.</li>

<li>If your client programs are using threads, you need to also
compile a thread-safe version of the MySQL client library with the
<code>--enable-thread-safe-client</code> configure options. This
will create a <code>libmysqlclient_r</code> library with which you
should link your threaded applications. See section <a
href="manual.html#Threaded_clients">8.4.8 How to Make a Threaded
Client</a>.</li>

<li>Options that pertain to particular systems can be found in the
system-specific section of this manual. See section <a
href="manual.html#Operating_System_Specific_Notes">2.6 Operating
System Specific Notes</a>.</li>
</ul>

<h3><a id="Installing_source_tree" name="Installing_source_tree"
href="manual_toc.html#Installing_source_tree">2.3.4 Installing from
the Development Source Tree</a></h3>

<p><a id="IDX240" name="IDX240"></a> <a id="IDX241"
name="IDX241"></a> <a id="IDX242" name="IDX242"></a></p>

<p><strong>Caution</strong>: You should read this section only if
you are interested in helping us test our new code. If you just
want to get MySQL up and running on your system, you should use a
standard release distribution (either a source or binary
distribution will do).</p>

<p>To obtain our most recent development source tree, use these
instructions:</p>

<ol>
<li>Download <code>BitKeeper</code> from <a
href="http://www.bitmover.com/cgi-bin/download.cgi">http://www.bitmover.com/cgi-bin/download.cgi</a>.
You will need <code>Bitkeeper</code> 3.0 or newer to access our
repository.</li>

<li>Follow the instructions to install it.</li>

<li>After <code>BitKeeper</code> is installed, first go to the
directory you want to work from, and then use one of the following
commands to clone the MySQL version branch of your choice: To clone
the 3.23 branch, use this command: 

<pre>
shell&gt; bk clone bk://mysql.bkbits.net/mysql-3.23 mysql-3.23
</pre>

To clone the 4.0 branch, use this command: 

<pre>
shell&gt; bk clone bk://mysql.bkbits.net/mysql-4.0 mysql-4.0
</pre>

To clone the 4.1 branch, use this command: 

<pre>
shell&gt; bk clone bk://mysql.bkbits.net/mysql-4.1 mysql-4.1
</pre>

In the preceding examples the source tree will be set up in the
<tt>`mysql-3.23/'</tt>, <tt>`mysql-4.0/'</tt>, or
<tt>`mysql-4.1/'</tt> subdirectory of your current directory. If
you are behind a firewall and can only initiate HTTP connections,
you can also use <code>BitKeeper</code> via HTTP. If you are
required to use a proxy server, simply set the environment variable
<code>http_proxy</code> to point to your proxy: 

<pre>
shell&gt; export http_proxy="http://your.proxy.server:8080/"
</pre>

Now, simply replace the <code>bk://</code> with
<code>http://</code> when doing a clone. Example: 

<pre>
shell&gt; bk clone http://mysql.bkbits.net/mysql-4.1 mysql-4.1
</pre>

The initial download of the source tree may take a while, depending
on the speed of your connection - please be patient.</li>

<li>You will need GNU <code>make</code>, <code>autoconf 2.53 (or
newer)</code>, <code>automake 1.5</code>, <code>libtool 1.4</code>,
and <code>m4</code> to run the next set of commands. Note that
<code>automake 1.7 or newer</code> doesn't yet work. If you are
using trying to configure MySQL 4.1 you will also need <code>bison
1.75</code>. Older versions of <code>bison</code> may report this
error: <code>sql_yacc.yy:#####: fatal error: maximum table size
(32767) exceeded</code>. Note: the maximum table size is not
actually exceeded, the error is caused by bugs in these earlier
<code>bison</code> versions. The typical command to do in a shell
is: 

<pre>
cd mysql-4.0
bk -r get -Sq
aclocal; autoheader; autoconf; automake
(cd innobase ; aclocal; autoheader; autoconf; automake) # for InnoDB
(cd bdb/dist ; sh s_all ) # for Berkeley DB
./configure  # Add your favorite options here
make
</pre>

If you get some strange error during this stage, check that you
really have <code>libtool</code> installed! A collection of our
standard configure scripts is located in the <tt>`BUILD/'</tt>
subdirectory. If you are lazy, you can use
<tt>`BUILD/compile-pentium-debug'</tt>. To compile on a different
architecture, modify the script by removing flags that are
Pentium-specific.</li>

<li>When the build is done, run <code>make install</code>. Be
careful with this on a production machine; the command may
overwrite your live release installation. If you have another
installation of MySQL, we recommand that you run
<code>./configure</code> with different values for the
<code>prefix</code>, <code>with-tcp-port</code>, and
<code>unix-socket-path</code> options than those used for your
production server.</li>

<li>Play hard with your new installation and try to make the new
features crash. Start by running <code>make test</code>. See
section <a href="manual.html#MySQL_test_suite">9.1.2 MySQL Test
Suite</a>.</li>

<li>If you have gotten to the <code>make</code> stage and the
distribution does not compile, please report it to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a>. If you
have installed the latest versions of the required GNU tools, and
they crash trying to process our configuration files, please report
that also. However, if you execute <code>aclocal</code> and get a
<code>command not found</code> error or a similar problem, do not
report it. Instead, make sure all the necessary tools are installed
and that your <code>PATH</code> variable is set correctly so that
your shell can find them.</li>

<li>After the initial <code>bk clone</code> operation to get the
source tree, you should run <code>bk pull</code> periodically to
get the updates.</li>

<li>You can examine the change history for the tree with all the
diffs by using <code>bk sccstool</code>. If you see some funny
diffs or code that you have a question about, do not hesitate to
send e-mail to <a
href="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.
Also, if you think you have a better idea on how to do something,
send an e-mail to the same address with a patch. <code>bk
diffs</code> will produce a patch for you after you have made
changes to the source. If you do not have the time to code your
idea, just send a description.</li>

<li><code>BitKeeper</code> has a nice help utility that you can
access via <code>bk helptool</code>.</li>

<li>Please note that any commits (<code>bk ci</code> or <code>bk
citool</code>) will trigger the posting of a message with the
changeset to our internals mailing list, as well as the usual
openlogging.org submission with just the changeset comments.
Generally, you wouldn't need to use commit (since the public tree
will not allow <code>bk push</code>), but rather use the <code>bk
diffs</code> method described previously.</li>
</ol>

<p>You can also browse changesets, comments and sourcecode online
by browsing to e.g. <a
href="http://mysql.bkbits.net:8080/mysql-4.1">http://mysql.bkbits.net:8080/mysql-4.1</a>
For MySQL 4.1.</p>

<p>The manual is in a separate tree which can be cloned with:</p>

<pre>
shell&gt; bk clone bk://mysql.bkbits.net/mysqldoc mysqldoc
</pre>

<h3><a id="Compilation_problems" name="Compilation_problems"
href="manual_toc.html#Compilation_problems">2.3.5 Problems
Compiling?</a></h3>

<p><a id="IDX243" name="IDX243"></a> <a id="IDX244"
name="IDX244"></a> <a id="IDX245" name="IDX245"></a> <a id="IDX246"
name="IDX246"></a> <a id="IDX247" name="IDX247"></a></p>

<p>All MySQL programs compile cleanly for us with no warnings on
Solaris or Linux using <code>gcc</code>. On other systems, warnings
may occur due to differences in system include files. See section
<a href="manual.html#MIT-pthreads">2.3.6 MIT-pthreads Notes</a> for
warnings that may occur when using MIT-pthreads. For other
problems, check the following list.</p>

<p>The solution to many problems involves reconfiguring. If you do
need to reconfigure, take note of the following:</p>

<p><a id="IDX248" name="IDX248"></a> <a id="IDX249"
name="IDX249"></a> <a id="IDX250" name="IDX250"></a> <a id="IDX251"
name="IDX251"></a></p>

<ul>
<li>If <code>configure</code> is run after it already has been run,
it may use information that was gathered during its previous
invocation. This information is stored in <tt>`config.cache'</tt>.
When <code>configure</code> starts up, it looks for that file and
reads its contents if it exists, on the assumption that the
information is still correct. That assumption is invalid when you
reconfigure.</li>

<li>Each time you run <code>configure</code>, you must run
<code>make</code> again to recompile. However, you may want to
remove old object files from previous builds first because they
were compiled using different configuration options.</li>
</ul>

<p>To prevent old configuration information or object files from
being used, run these commands before rerunning
<code>configure</code>:</p>

<pre>
shell&gt; rm config.cache
shell&gt; make clean
</pre>

<p>Alternatively, you can run <code>make distclean</code>.</p>

<p>The following list describes some of the problems when compiling
MySQL that have been found to occur most often:</p>

<ul>
<li><a id="IDX252" name="IDX252"></a> <a id="IDX253"
name="IDX253"></a> <a id="IDX254" name="IDX254"></a> <a id="IDX255"
name="IDX255"></a> <a id="IDX256" name="IDX256"></a> <a id="IDX257"
name="IDX257"></a> If you get errors when compiling
<tt>`sql_yacc.cc'</tt>, such as the ones shown here, you have
probably run out of memory or swap space: 

<pre>
Internal compiler error: program cc1plus got fatal signal 11
  or
Out of virtual memory
  or
Virtual memory exhausted
</pre>

The problem is that <code>gcc</code> requires huge amounts of
memory to compile <tt>`sql_yacc.cc'</tt> with inline functions. Try
running <code>configure</code> with the
<code>--with-low-memory</code> option: 

<pre>
shell&gt; ./configure --with-low-memory
</pre>

This option causes <code>-fno-inline</code> to be added to the
compile line if you are using <code>gcc</code> and <code>-O0</code>
if you are using something else. You should try the
<code>--with-low-memory</code> option even if you have so much
memory and swap space that you think you can't possibly have run
out. This problem has been observed to occur even on systems with
generous hardware configurations, and the
<code>--with-low-memory</code> option usually fixes it.</li>

<li>By default, <code>configure</code> picks <code>c++</code> as
the compiler name and GNU <code>c++</code> links with
<code>-lg++</code>. If you are using <code>gcc</code>, that
behaviour can cause problems during configuration such as this: <a
id="IDX258" name="IDX258"></a> 

<pre>
configure: error: installation or configuration problem:
C++ compiler cannot create executables.
</pre>

<a id="IDX259" name="IDX259"></a> <a id="IDX260" name="IDX260"></a>
You might also observe problems during compilation related to
<code>g++</code>, <code>libg++</code>, or <code>libstdc++</code>.
One cause of these problems is that you may not have
<code>g++</code>, or you may have <code>g++</code> but not
<code>libg++</code>, or <code>libstdc++</code>. Take a look at the
<tt>`config.log'</tt> file. It should contain the exact reason why
your c++ compiler didn't work! To work around these problems, you
can use <code>gcc</code> as your C++ compiler. Try setting the
environment variable <code>CXX</code> to <code>"gcc -O3"</code>.
For example: <a id="IDX261" name="IDX261"></a> <a id="IDX262"
name="IDX262"></a> 

<pre>
shell&gt; CXX="gcc -O3" ./configure
</pre>

This works because <code>gcc</code> compiles C++ sources as well as
<code>g++</code> does, but does not link in <code>libg++</code> or
<code>libstdc++</code> by default. Another way to fix these
problems, of course, is to install <code>g++</code>,
<code>libg++</code>, and <code>libstdc++</code>. We would however
like to recommend you to not use <code>libg++</code> or
<code>libstdc++</code> with MySQL as this will only increase the
binary size of mysqld without giving you any benefits. Some
versions of these libraries have also caused strange problems for
MySQL users in the past.</li>

<li>If your compile fails with errors, such as any of the
following, you must upgrade your version of <code>make</code> to
GNU <code>make</code>: 

<pre>
making all in mit-pthreads
make: Fatal error in reader: Makefile, line 18:
Badly formed macro assignment
  or
make: file `Makefile' line 18: Must be a separator (:
  or
pthread.h: No such file or directory
</pre>

<a id="IDX263" name="IDX263"></a> <a id="IDX264" name="IDX264"></a>
<a id="IDX265" name="IDX265"></a> <a id="IDX266" name="IDX266"></a>
Solaris and FreeBSD are known to have troublesome <code>make</code>
programs. GNU <code>make</code> Version 3.75 is known to work. <a
id="IDX267" name="IDX267"></a> <a id="IDX268" name="IDX268"></a> <a
id="IDX269" name="IDX269"></a> <a id="IDX270" name="IDX270"></a> <a
id="IDX271" name="IDX271"></a> <a id="IDX272" name="IDX272"></a> <a
id="IDX273" name="IDX273"></a> <a id="IDX274"
name="IDX274"></a></li>

<li>If you want to define flags to be used by your C or C++
compilers, do so by adding the flags to the <code>CFLAGS</code> and
<code>CXXFLAGS</code> environment variables. You can also specify
the compiler names this way using <code>CC</code> and
<code>CXX</code>. For example: 

<pre>
shell&gt; CC=gcc
shell&gt; CFLAGS=-O3
shell&gt; CXX=gcc
shell&gt; CXXFLAGS=-O3
shell&gt; export CC CFLAGS CXX CXXFLAGS
</pre>

See section <a href="manual.html#MySQL_binaries">2.2.6 MySQL
Binaries Compiled by MySQL AB</a>, for a list of flag definitions
that have been found to be useful on various systems.</li>

<li>If you get an error message like this, you need to upgrade your
<code>gcc</code> compiler: 

<pre>
client/libmysql.c:273: parse error before `__attribute__'
</pre>

<code>gcc</code> 2.8.1 is known to work, but we recommend using
<code>gcc</code> 2.95.2 or <code>egcs</code> 1.0.3a instead.</li>

<li>If you get errors such as those shown here when compiling
<code>mysqld</code>, <code>configure</code> didn't correctly detect
the type of the last argument to <code>accept()</code>,
<code>getsockname()</code>, or <code>getpeername()</code>: 

<pre>
cxx: Error: mysqld.cc, line 645: In this statement, the referenced
     type of the pointer value "&amp;length" is "unsigned long", which
     is not compatible with "int".
new_sock = accept(sock, (struct sockaddr *)&amp;cAddr, &amp;length);
</pre>

To fix this, edit the <tt>`config.h'</tt> file (which is generated
by <code>configure</code>). Look for these lines: 

<pre>
/* Define as the base type of the last arg to accept */
#define SOCKET_SIZE_TYPE XXX
</pre>

Change <code>XXX</code> to <code>size_t</code> or <code>int</code>,
depending on your operating system. (Note that you will have to do
this each time you run <code>configure</code> because
<code>configure</code> regenerates <tt>`config.h'</tt>.)</li>

<li>The <tt>`sql_yacc.cc'</tt> file is generated from
<tt>`sql_yacc.yy'</tt>. Normally the build process doesn't need to
create <tt>`sql_yacc.cc'</tt>, because MySQL comes with an already
generated copy. However, if you do need to re-create it, you might
encounter this error: 

<pre>
"sql_yacc.yy", line xxx fatal: default action causes potential...
</pre>

This is a sign that your version of <code>yacc</code> is deficient.
You probably need to install <code>bison</code> (the GNU version of
<code>yacc</code>) and use that instead.</li>

<li>If you need to debug <code>mysqld</code> or a MySQL client, run
<code>configure</code> with the <code>--with-debug</code> option,
then recompile and link your clients with the new client library.
See section <a href="manual.html#Debugging_client">E.2 Debugging a
MySQL client</a>.</li>
</ul>

<h3><a id="MIT-pthreads" name="MIT-pthreads"
href="manual_toc.html#MIT-pthreads">2.3.6 MIT-pthreads
Notes</a></h3>

<p><a id="IDX275" name="IDX275"></a> <a id="IDX276"
name="IDX276"></a></p>

<p>This section describes some of the issues involved in using
MIT-pthreads.</p>

<p>Note that on Linux you should <strong>not</strong> use
MIT-pthreads but install LinuxThreads! See section <a
href="manual.html#Linux">2.6.1 Linux Notes (All Linux
Versions)</a>.</p>

<p>If your system does not provide native thread support, you will
need to build MySQL using the MIT-pthreads package. This includes
older FreeBSD systems, SunOS 4.x, Solaris 2.4 and earlier, and some
others. See section <a href="manual.html#Which_OS">2.2.2 Operating
Systems Supported by MySQL</a>.</p>

<p>Note, that beginning with MySQL 4.0.2 MIT-pthreads are no longer
part of the source distribution! If you require this package, you
need to download it separately from
http://www.mysql.com/Downloads/Contrib/pthreads-1_60_beta6-mysql.tar.gz</p>

<p>After downloading, extract this source archive into the top
level of the MySQL source directory. It will create a new
subdirectory <code>mit-pthreads</code>.</p>

<ul>
<li>On most systems, you can force MIT-pthreads to be used by
running <code>configure</code> with the
<code>--with-mit-threads</code> option: 

<pre>
shell&gt; ./configure --with-mit-threads
</pre>

Building in a non-source directory is not supported when using
MIT-pthreads because we want to minimise our changes to this
code.</li>

<li>The checks that determine whether to use MIT-pthreads occur
only during the part of the configuration process that deals with
the server code. If you have configured the distribution using
<code>--without-server</code> to build only the client code,
clients will not know whether MIT-pthreads is being used and will
use Unix socket connections by default. Because Unix sockets do not
work under MIT-pthreads on some platforms, this means you will need
to use <code>-h</code> or <code>--host</code> when you run client
programs.</li>

<li>When MySQL is compiled using MIT-pthreads, system locking is
disabled by default for performance reasons. You can tell the
server to use system locking with the
<code>--external-locking</code> option. This is only needed if you
want to be able to run two MySQL servers against the same data
files (not recommended).</li>

<li>Sometimes the pthread <code>bind()</code> command fails to bind
to a socket without any error message (at least on Solaris). The
result is that all connections to the server fail. For example: 

<pre>
shell&gt; mysqladmin version
mysqladmin: connect to server at '' failed;
error: 'Can't connect to mysql server on localhost (146)'
</pre>

The solution to this is to kill the <code>mysqld</code> server and
restart it. This has only happened to us when we have forced the
server down and done a restart immediately.</li>

<li>With MIT-pthreads, the <code>sleep()</code> system call isn't
interruptible with <code>SIGINT</code> (break). This is only
noticeable when you run <code>mysqladmin --sleep</code>. You must
wait for the <code>sleep()</code> call to terminate before the
interrupt is served and the process stops.</li>

<li>When linking, you may receive warning messages like these (at
least on Solaris); they can be ignored: 

<pre>
ld: warning: symbol `_iob' has differing sizes:
    (file /my/local/pthreads/lib/libpthread.a(findfp.o) value=0x4;
file /usr/lib/libc.so value=0x140);
    /my/local/pthreads/lib/libpthread.a(findfp.o) definition taken
ld: warning: symbol `__iob' has differing sizes:
    (file /my/local/pthreads/lib/libpthread.a(findfp.o) value=0x4;
file /usr/lib/libc.so value=0x140);
    /my/local/pthreads/lib/libpthread.a(findfp.o) definition taken
</pre>
</li>

<li>Some other warnings also can be ignored: 

<pre>
implicit declaration of function `int strtoll(...)'
implicit declaration of function `int strtoul(...)'
</pre>
</li>

<li>We haven't gotten <code>readline</code> to work with
MIT-pthreads. (This isn't needed, but may be interesting for
someone.)</li>
</ul>

<h3><a id="Windows_source_build" name="Windows_source_build"
href="manual_toc.html#Windows_source_build">2.3.7 Windows Source
Distribution</a></h3>

<p>You will need the following:</p>

<ul>
<li>VC++ 6.0 compiler (updated with 4 or 5 SP and Pre-processor
package) The Pre-processor package is necessary for the macro
assembler. More details at: <a
href="http://msdn.microsoft.com/vstudio/sp/vs6sp5/faq.asp">http://msdn.microsoft.com/vstudio/sp/vs6sp5/faq.asp</a>.</li>

<li>The MySQL source distribution for Windows, which can be
downloaded from <a
href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a>.</li>
</ul>

<p>Building MySQL</p>

<ol>
<li>Create a work directory (e.g., workdir).</li>

<li>Unpack the source distribution in the aforementioned
directory.</li>

<li>Start the VC++ 6.0 compiler.</li>

<li>In the <code>File</code> menu, select <code>Open
Workspace</code>.</li>

<li>Open the <tt>`mysql.dsw'</tt> workspace you find on the work
directory.</li>

<li>From the <code>Build</code> menu, select the <code>Set Active
Configuration</code> menu.</li>

<li>Click over the screen selecting <code>mysqld - Win32
Debug</code> and click OK.</li>

<li>Press <code>F7</code> to begin the build of the debug server,
libs, and some client applications.</li>

<li>When the compilation finishes, copy the libs and the
executables to a separate directory.</li>

<li>Compile the release versions that you want, in the same
way.</li>

<li>Create the directory for the MySQL stuff: e.g.,
<tt>`c:\mysql'</tt></li>

<li>From the workdir directory copy for the c:\mysql directory the
following directories: 

<ul>
<li>Data</li>

<li>Docs</li>

<li>Share</li>
</ul>
</li>

<li>Create the directory <tt>`c:\mysql\bin'</tt> and copy all the
servers and clients that you compiled previously.</li>

<li>If you want, also create the <tt>`lib'</tt> directory and copy
the libs that you compiled previously.</li>

<li>Do a clean using Visual Studio.</li>
</ol>

<p>Set up and start the server in the same way as for the binary
Windows distribution. See section <a
href="manual.html#Windows_prepare_environment">2.1.2.2 Preparing
the Windows MySQL Environment</a>.</p>

<h2><a id="Post-installation" name="Post-installation"
href="manual_toc.html#Post-installation">2.4 Post-installation
Setup and Testing</a></h2>

<p><a id="IDX277" name="IDX277"></a> <a id="IDX278"
name="IDX278"></a> <a id="IDX279" name="IDX279"></a></p>

<p>Once you've installed MySQL (from either a binary or source
distribution), you need to initialise the grant tables, start the
server, and make sure that the server works okay. You may also wish
to arrange for the server to be started and stopped automatically
when your system starts up and shuts down.</p>

<p>Normally you install the grant tables and start the server like
this for installation from a source distribution: <a id="IDX280"
name="IDX280"></a> <a id="IDX281" name="IDX281"></a></p>

<pre>
shell&gt; ./scripts/mysql_install_db
shell&gt; cd mysql_installation_directory
shell&gt; ./bin/safe_mysqld --user=mysql &amp;
</pre>

<p>For a binary distribution (not RPM or pkg packages), do
this:</p>

<pre>
shell&gt; cd mysql_installation_directory
shell&gt; ./scripts/mysql_install_db
shell&gt; ./bin/safe_mysqld --user=mysql &amp;
or
shell&gt; ./bin/mysqld_safe --user=mysql &amp;
if you are running MySQL 4.x.
</pre>

<p>This creates the <code>mysql</code> database which will hold all
database privileges, the <code>test</code> database which you can
use to test MySQL, and also privilege entries for the user that run
<code>mysql_install_db</code> and a <code>root</code> user (without
any passwords). This also starts the <code>mysqld</code>
server.</p>

<p><code>mysql_install_db</code> will not overwrite any old
privilege tables, so it should be safe to run in any circumstances.
If you don't want to have the <code>test</code> database you can
remove it with <code>mysqladmin -u root drop test</code>.</p>

<p>Testing is most easily done from the top-level directory of the
MySQL distribution. For a binary distribution, this is your
installation directory (typically something like
<tt>`/usr/local/mysql'</tt>). For a source distribution, this is
the main directory of your MySQL source tree. <a id="IDX282"
name="IDX282"></a></p>

<p>In the commands shown in this section and in the following
subsections, <code>BINDIR</code> is the path to the location in
which programs like <code>mysqladmin</code> and
<code>safe_mysqld</code> are installed. For a binary distribution,
this is the <tt>`bin'</tt> directory within the distribution. For a
source distribution, <code>BINDIR</code> is probably
<tt>`/usr/local/bin'</tt>, unless you specified an installation
directory other than <tt>`/usr/local'</tt> when you ran
<code>configure</code>. <code>EXECDIR</code> is the location in
which the <code>mysqld</code> server is installed. For a binary
distribution, this is the same as <code>BINDIR</code>. For a source
distribution, <code>EXECDIR</code> is probably
<tt>`/usr/local/libexec'</tt>.</p>

<p>Testing is described in detail: <a id="IDX283"
name="IDX283"></a></p>

<ol>
<li>If necessary, start the <code>mysqld</code> server and set up
the initial MySQL grant tables containing the privileges that
determine how users are allowed to connect to the server. This is
normally done with the <code>mysql_install_db</code> script: 

<pre>
shell&gt; scripts/mysql_install_db
</pre>

Typically, <code>mysql_install_db</code> needs to be run only the
first time you install MySQL. Therefore, if you are upgrading an
existing installation, you can skip this step. (However,
<code>mysql_install_db</code> is quite safe to use and will not
update any tables that already exist, so if you are unsure of what
to do, you can always run <code>mysql_install_db</code>.)
<code>mysql_install_db</code> creates six tables
(<code>user</code>, <code>db</code>, <code>host</code>,
<code>tables_priv</code>, <code>columns_priv</code>, and
<code>func</code>) in the <code>mysql</code> database. A
description of the initial privileges is given in section <a
href="manual.html#Default_privileges">4.3.4 Setting Up the Initial
MySQL Privileges</a>. Briefly, these privileges allow the MySQL
<code>root</code> user to do anything, and allow anybody to create
or use databases with a name of <code>test</code> or starting with
<code>test_</code>. If you don't set up the grant tables, the
following error will appear in the log file when you start the
server: <a id="IDX284" name="IDX284"></a> 

<pre>
mysqld: Can't find file: 'host.frm'
</pre>

This may also happen with a binary MySQL distribution if you don't
start MySQL by executing exactly <code>./bin/safe_mysqld</code>!
See section <a href="manual.html#safe_mysqld">4.7.2
<code>safe_mysqld</code>, The Wrapper Around
<code>mysqld</code></a>. You might need to run
<code>mysql_install_db</code> as <code>root</code>. However, if you
prefer, you can run the MySQL server as an unprivileged
(non-<code>root</code>) user, provided that the user can read and
write files in the database directory. Instructions for running
MySQL as an unprivileged user are given in section <a
href="manual.html#Changing_MySQL_user">A.3.2 How to Run MySQL As a
Normal User</a>. If you have problems with
<code>mysql_install_db</code>, see section <a
href="manual.html#mysql_install_db">2.4.1 Problems Running
<code>mysql_install_db</code></a>. There are some alternatives to
running the <code>mysql_install_db</code> script as it is provided
in the MySQL distribution: 

<ul>
<li>You may want to edit <code>mysql_install_db</code> before
running it, to change the initial privileges that are installed
into the grant tables. This is useful if you want to install MySQL
on a lot of machines with the same privileges. In this case you
probably should need only to add a few extra <code>INSERT</code>
statements to the <code>mysql.user</code> and <code>mysql.db</code>
tables!</li>

<li>If you want to change things in the grant tables after
installing them, you can run <code>mysql_install_db</code>, then
use <code>mysql -u root mysql</code> to connect to the grant tables
as the MySQL <code>root</code> user and issue SQL statements to
modify the grant tables directly.</li>

<li>It is possible to re-create the grant tables completely after
they have already been created. You might want to do this if you've
already installed the tables but then want to re-create them after
editing <code>mysql_install_db</code>.</li>
</ul>

For more information about these alternatives, see section <a
href="manual.html#Default_privileges">4.3.4 Setting Up the Initial
MySQL Privileges</a>.</li>

<li>Start the MySQL server like this: 

<pre>
shell&gt; cd mysql_installation_directory
shell&gt; bin/safe_mysqld &amp;
</pre>

If you have problems starting the server, see section <a
href="manual.html#Starting_server">2.4.2 Problems Starting the
MySQL Server</a>.</li>

<li>Use <code>mysqladmin</code> to verify that the server is
running. The following commands provide a simple test to check that
the server is up and responding to connections: 

<pre>
shell&gt; BINDIR/mysqladmin version
shell&gt; BINDIR/mysqladmin variables
</pre>

The output from <code>mysqladmin version</code> varies slightly
depending on your platform and version of MySQL, but should be
similar to that shown here: 

<pre>
shell&gt; BINDIR/mysqladmin version
mysqladmin  Ver 8.14 Distrib 3.23.32, for linux on i586
Copyright (C) 2000 MySQL AB &amp; MySQL Finland AB &amp; TCX DataKonsult AB
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL license.

Server version          3.23.32-debug
Protocol version        10
Connection              Localhost via Unix socket
TCP port                3306
UNIX socket             /tmp/mysql.sock
Uptime:                 16 sec

Threads: 1  Questions: 9  Slow queries: 0
Opens: 7  Flush tables: 2  Open tables: 0
Queries per second avg: 0.000
Memory in use: 132K  Max memory used: 16773K
</pre>

To get a feeling for what else you can do with
<code>BINDIR/mysqladmin</code>, invoke it with the
<code>--help</code> option.</li>

<li>Verify that you can shut down the server: <a id="IDX285"
name="IDX285"></a> <a id="IDX286" name="IDX286"></a> 

<pre>
shell&gt; BINDIR/mysqladmin -u root shutdown
</pre>
</li>

<li>Verify that you can restart the server. Do this using
<code>safe_mysqld</code> or by invoking <code>mysqld</code>
directly. For example: <a id="IDX287" name="IDX287"></a> <a
id="IDX288" name="IDX288"></a> 

<pre>
shell&gt; BINDIR/safe_mysqld --log &amp;
</pre>

If <code>safe_mysqld</code> fails, try running it from the MySQL
installation directory (if you are not already there). If that
doesn't work, see section <a
href="manual.html#Starting_server">2.4.2 Problems Starting the
MySQL Server</a>.</li>

<li>Run some simple tests to verify that the server is working. The
output should be similar to what is shown here: 

<pre>
shell&gt; BINDIR/mysqlshow
+-----------+
| Databases |
+-----------+
| mysql     |
+-----------+

shell&gt; BINDIR/mysqlshow mysql
Database: mysql
+--------------+
|    Tables    |
+--------------+
| columns_priv |
| db           |
| func         |
| host         |
| tables_priv  |
| user         |
+--------------+

shell&gt; BINDIR/mysql -e "SELECT host,db,user FROM db" mysql
+------+--------+------+
| host | db     | user |
+------+--------+------+
| %    | test   |      |
| %    | test_% |      |
+------+--------+------+
</pre>

There is also a benchmark suite in the <tt>`sql-bench'</tt>
directory (under the MySQL installation directory) that you can use
to compare how MySQL performs on different platforms. The
<tt>`sql-bench/Results'</tt> directory contains the results from
many runs against different databases and platforms. To run all
tests, execute these commands: 

<pre>
shell&gt; cd sql-bench
shell&gt; run-all-tests
</pre>

If you don't have the <tt>`sql-bench'</tt> directory, you are
probably using an RPM for a binary distribution. (Source
distribution RPMs include the benchmark directory.) In this case,
you must first install the benchmark suite before you can use it.
Beginning with MySQL Version 3.22, there are benchmark RPM files
named <tt>`mysql-bench-VERSION-i386.rpm'</tt> that contain
benchmark code and data. If you have a source distribution, you can
also run the tests in the <tt>`tests'</tt> subdirectory. For
example, to run <tt>`auto_increment.tst'</tt>, do this: 

<pre>
shell&gt; BINDIR/mysql -vvf test &lt; ./tests/auto_increment.tst
</pre>

The expected results are shown in the
<tt>`./tests/auto_increment.res'</tt> file.</li>
</ol>

<h3><a id="mysql_install_db" name="mysql_install_db"
href="manual_toc.html#mysql_install_db">2.4.1 Problems Running
<code>mysql_install_db</code></a></h3>

<p><a id="IDX289" name="IDX289"></a> <a id="IDX290"
name="IDX290"></a></p>

<p>The purpose of the <code>mysql_install_db</code> script is to
generate new MySQL privilege tables. It will not affect any other
data! It will also not do anything if you already have MySQL
privilege tables installed!</p>

<p>If you want to re-create your privilege tables, you should take
down the <code>mysqld</code> server, if it's running, and then do
something like:</p>

<pre>
mv mysql-data-directory/mysql mysql-data-directory/mysql-old
mysql_install_db
</pre>

<p>This section lists problems you might encounter when you run
<code>mysql_install_db</code>:</p>

<dl compact="compact">
<dt><strong><code>mysql_install_db</code> doesn't install the grant
tables</strong></dt>

<dd>You may find that <code>mysql_install_db</code> fails to
install the grant tables and terminates after displaying the
following messages: 

<pre>
starting mysqld daemon with databases from XXXXXX
mysql daemon ended
</pre>

In this case, you should examine the log file very carefully! The
log should be located in the directory <tt>`XXXXXX'</tt> named by
the error message, and should indicate why <code>mysqld</code>
didn't start. If you don't understand what happened, include the
log when you post a bug report using <code>mysqlbug</code>! See
section <a href="manual.html#Bug_reports">1.6.1.3 How to Report
Bugs or Problems</a>.</dd>

<dt><strong>There is already a <code>mysqld</code> daemon
running</strong></dt>

<dd>In this case, you probably don't have to run
<code>mysql_install_db</code> at all. You have to run
<code>mysql_install_db</code> only once, when you install MySQL the
first time.</dd>

<dt><strong>Installing a second <code>mysqld</code> daemon doesn't
work when one daemon is running</strong></dt>

<dd>This can happen when you already have an existing MySQL
installation, but want to put a new installation in a different
place (for example, for testing, or perhaps you simply want to run
two installations at the same time). Generally the problem that
occurs when you try to run the second server is that it tries to
use the same socket and port as the old one. In this case you will
get the error message: <code>Can't start server: Bind on TCP/IP
port: Address already in use</code> or <code>Can't start server:
Bind on unix socket...</code>. See section <a
href="manual.html#Installing_many_servers">4.1.3 Installing Many
Servers on the Same Machine</a>.</dd>

<dt><strong>You don't have write access to
<tt>`/tmp'</tt></strong></dt>

<dd><a id="IDX291" name="IDX291"></a> <a id="IDX292"
name="IDX292"></a> <a id="IDX293" name="IDX293"></a> If you don't
have write access to create a socket file at the default place (in
<tt>`/tmp'</tt>) or permission to create temporary files in
<tt>`/tmp,'</tt> you will get an error when running
<code>mysql_install_db</code> or when starting or using
<code>mysqld</code>. You can specify a different socket and
temporary directory as follows: <a id="IDX294" name="IDX294"></a>
<a id="IDX295" name="IDX295"></a> <a id="IDX296" name="IDX296"></a>
<a id="IDX297" name="IDX297"></a> 

<pre>
shell&gt; TMPDIR=/some_tmp_dir/
shell&gt; MYSQL_UNIX_PORT=/some_tmp_dir/mysqld.sock
shell&gt; export TMPDIR MYSQL_UNIX_PORT
</pre>

See section <a href="manual.html#Problems_with_mysql.sock">A.4.5
How to Protect or Change the MySQL Socket File
<tt>`/tmp/mysql.sock'</tt></a>. <tt>`some_tmp_dir'</tt> should be
the path to some directory for which you have write permission. See
section <a href="manual.html#Environment_variables">F Environment
Variables</a>. After this you should be able to run
<code>mysql_install_db</code> and start the server with these
commands: 

<pre>
shell&gt; scripts/mysql_install_db
shell&gt; BINDIR/safe_mysqld &amp;
</pre>
</dd>

<dt><strong><code>mysqld</code> crashes immediately</strong></dt>

<dd>If you are running RedHat Version 5.0 with a version of
<code>glibc</code> older than 2.0.7-5, you should make sure you
have installed all <code>glibc</code> patches! There is a lot of
information about this in the MySQL mail archives. Links to the
mail archives are available online at <a
href="http://lists.mysql.com/">http://lists.mysql.com/</a>. Also,
see section <a href="manual.html#Linux">2.6.1 Linux Notes (All
Linux Versions)</a>. You can also start <code>mysqld</code>
manually using the <code>--skip-grant-tables</code> option and add
the privilege information yourself using <code>mysql</code>: 

<pre>
shell&gt; BINDIR/safe_mysqld --skip-grant-tables &amp;
shell&gt; BINDIR/mysql -u root mysql
</pre>

From <code>mysql</code>, manually execute the SQL commands in
<code>mysql_install_db</code>. Make sure you run <code>mysqladmin
flush-privileges</code> or <code>mysqladmin reload</code> afterward
to tell the server to reload the grant tables.</dd>
</dl>

<h3><a id="Starting_server" name="Starting_server"
href="manual_toc.html#Starting_server">2.4.2 Problems Starting the
MySQL Server</a></h3>

<p><a id="IDX298" name="IDX298"></a> <a id="IDX299"
name="IDX299"></a></p>

<p>If you are going to use tables that support transactions
(InnoDB, BDB), you should first create a <tt>`my.cnf'</tt> file and
set startup options for the table types you plan to use. See
section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</p>

<p>Generally, you start the <code>mysqld</code> server in one of
these ways:</p>

<ul>
<li>By invoking <code>mysql.server</code>. This script is used
primarily at system startup and shutdown, and is described more
fully in section <a href="manual.html#Automatic_start">2.4.3
Starting and Stopping MySQL Automatically</a>.</li>

<li>By invoking <code>safe_mysqld</code>, which tries to determine
the proper options for <code>mysqld</code> and then runs it with
those options. See section <a href="manual.html#safe_mysqld">4.7.2
<code>safe_mysqld</code>, The Wrapper Around
<code>mysqld</code></a>.</li>

<li>For Windows NT/2000/XP, please see section <a
href="manual.html#NT_start">2.6.2.2 Starting MySQL on Windows NT,
2000 or XP</a>.</li>

<li>By invoking <code>mysqld</code> directly.</li>
</ul>

<p>When the <code>mysqld</code> daemon starts up, it changes the
directory to the data directory. This is where it expects to write
log files and the pid (process ID) file, and where it expects to
find databases.</p>

<p>The data directory location is hardwired in when the
distribution is compiled. However, if <code>mysqld</code> expects
to find the data directory somewhere other than where it really is
on your system, it will not work properly. If you have problems
with incorrect paths, you can find out what options
<code>mysqld</code> allows and what the default path settings are
by invoking <code>mysqld</code> with the <code>--help</code>
option. You can override the defaults by specifying the correct
pathnames as command-line arguments to <code>mysqld</code>. (These
options can be used with <code>safe_mysqld</code> as well.)</p>

<p>Normally you should need to tell <code>mysqld</code> only the
base directory under which MySQL is installed. You can do this with
the <code>--basedir</code> option. You can also use
<code>--help</code> to check the effect of changing path options
(note that <code>--help</code> <strong>must</strong> be the final
option of the <code>mysqld</code> command). For example:</p>

<pre>
shell&gt; EXECDIR/mysqld --basedir=/usr/local --help
</pre>

<p>Once you determine the path settings you want, start the server
without the <code>--help</code> option.</p>

<p>Whichever method you use to start the server, if it fails to
start up correctly, check the log file to see if you can find out
why. Log files are located in the data directory (typically
<tt>`/usr/local/mysql/data'</tt> for a binary distribution,
<tt>`/usr/local/var'</tt> for a source distribution, and
<tt>`\mysql\data\mysql.err'</tt> on Windows). Look in the data
directory for files with names of the form <tt>`host_name.err'</tt>
and <tt>`host_name.log'</tt> where <code>host_name</code> is the
name of your server host. Then check the last few lines of these
files:</p>

<pre>
shell&gt; tail host_name.err
shell&gt; tail host_name.log
</pre>

<p>Look for something like the following in the log file:</p>

<pre>
000729 14:50:10  bdb:  Recovery function for LSN 1 27595 failed
000729 14:50:10  bdb:  warning: ./test/t1.db: No such file or directory
000729 14:50:10  Can't init databases
</pre>

<p>This means that you didn't start <code>mysqld</code> with
<code>--bdb-no-recover</code> and Berkeley DB found something wrong
with its log files when it tried to recover your databases. To be
able to continue, you should move away the old Berkeley DB log file
from the database directory to some other place, where you can
later examine it. The log files are named
<tt>`log.0000000001'</tt>, where the number will increase over
time.</p>

<p>If you are running <code>mysqld</code> with BDB table support
and <code>mysqld</code> core dumps at start this could be because
of some problems with the BDB recover log. In this case you can try
starting <code>mysqld</code> with <code>--bdb-no-recover</code>. If
this helps, then you should remove all <tt>`log.*'</tt> files from
the data directory and try starting <code>mysqld</code> again.</p>

<p>If you get the following error, it means that some other program
(or another <code>mysqld</code> server) is already using the TCP/IP
port or socket <code>mysqld</code> is trying to use:</p>

<pre>
Can't start server: Bind on TCP/IP port: Address already in use
  or
Can't start server : Bind on unix socket...
</pre>

<p>Use <code>ps</code> to make sure that you don't have another
<code>mysqld</code> server running. If you can't find another
server running, you can try to execute the command <code>telnet
your-host-name tcp-ip-port-number</code> and press Enter a couple
of times. If you don't get an error message like <code>telnet:
Unable to connect to remote host: Connection refused</code>,
something is using the TCP/IP port <code>mysqld</code> is trying to
use. See section <a href="manual.html#mysql_install_db">2.4.1
Problems Running <code>mysql_install_db</code></a> and section <a
href="manual.html#Multiple_servers">4.1.4 Running Multiple MySQL
Servers on the Same Machine</a>.</p>

<p>If <code>mysqld</code> is currently running, you can find out
what path settings it is using by executing this command:</p>

<pre>
shell&gt; mysqladmin variables
</pre>

<p>or</p>

<pre>
shell&gt; mysqladmin -h 'your-host-name' variables
</pre>

<p>If you get <code>Errcode 13</code>, which means <code>Permission
denied</code>, when starting <code>mysqld</code> this means that
you didn't have the right to read/create files in the MySQL
database or log directory. In this case you should either start
<code>mysqld</code> as the root user or change the permissions for
the involved files and directories so that you have the right to
use them.</p>

<p>If <code>safe_mysqld</code> starts the server but you can't
connect to it, you should make sure you have an entry in
<tt>`/etc/hosts'</tt> that looks like this:</p>

<pre>
127.0.0.1       localhost
</pre>

<p>This problem occurs only on systems that don't have a working
thread library and for which MySQL must be configured to use
MIT-pthreads.</p>

<p>If you can't get <code>mysqld</code> to start you can try to
make a trace file to find the problem. See section <a
href="manual.html#Making_trace_files">E.1.2 Creating Trace
Files</a>.</p>

<p>If you are using InnoDB tables, refer to the InnoDB-specific
startup options. See section <a
href="manual.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a>.</p>

<p>If you are using BDB (Berkeley DB) tables, you should
familiarise yourself with the different BDB-specific startup
options. See section <a href="manual.html#BDB_start">7.6.3
<code>BDB</code> startup options</a>.</p>

<h3><a id="Automatic_start" name="Automatic_start"
href="manual_toc.html#Automatic_start">2.4.3 Starting and Stopping
MySQL Automatically</a></h3>

<p><a id="IDX300" name="IDX300"></a> <a id="IDX301"
name="IDX301"></a> <a id="IDX302" name="IDX302"></a></p>

<p>The <code>mysql.server</code> and <code>safe_mysqld</code>
scripts can be used to start the server automatically at system
startup time. <code>mysql.server</code> can also be used to stop
the server.</p>

<p>The <code>mysql.server</code> script can be used to start or
stop the server by invoking it with <code>start</code> or
<code>stop</code> arguments:</p>

<pre>
shell&gt; mysql.server start
shell&gt; mysql.server stop
</pre>

<p><code>mysql.server</code> can be found in the
<tt>`share/mysql'</tt> directory under the MySQL installation
directory or in the <tt>`support-files'</tt> directory of the MySQL
source tree.</p>

<p>Before <code>mysql.server</code> starts the server, it changes
the directory to the MySQL installation directory, then invokes
<code>safe_mysqld</code>. You might need to edit
<code>mysql.server</code> if you have a binary distribution that
you've installed in a non-standard location. Modify it to
<code>cd</code> into the proper directory before it runs
<code>safe_mysqld</code>. If you want the server to run as some
specific user, add an appropriate <code>user</code> line to the
<tt>`/etc/my.cnf'</tt> file, as shown later in this section.</p>

<p><code>mysql.server stop</code> brings down the server by sending
a signal to it. You can also take down the server manually by
executing <code>mysqladmin shutdown</code>.</p>

<p>You need to add these start and stop commands to the appropriate
places in your <tt>`/etc/rc*'</tt> files when you want to start up
MySQL automatically on your server.</p>

<p>On most current Linux distributions, it is sufficient to copy
the file <code>mysql.server</code> into the <tt>`/etc/init.d'</tt>
directory (or <tt>`/etc/rc.d/init.d'</tt> on older Red Hat
systems). Afterwards, run the following command to enable the
startup of MySQL on system bootup:</p>

<pre>
shell&gt; chkconfig --add mysql.server
</pre>

<p>As an alternative to the above, some operating systems also use
<tt>`/etc/rc.local'</tt> or <tt>`/etc/init.d/boot.local'</tt> to
start additional services on bootup. To start up MySQL using this
method, you could append something like the following to it:</p>

<pre>
/bin/sh -c 'cd /usr/local/mysql ; ./bin/safe_mysqld --user=mysql &amp;'
</pre>

<p><a id="IDX303" name="IDX303"></a> You can also add options for
<code>mysql.server</code> in a global <tt>`/etc/my.cnf'</tt> file.
A typical <tt>`/etc/my.cnf'</tt> file might look like this:</p>

<pre>
[mysqld]
datadir=/usr/local/mysql/var
socket=/var/tmp/mysql.sock
port=3306
user=mysql

[mysql_server]
basedir=/usr/local/mysql
</pre>

<p>The <code>mysql.server</code> script understands the following
options: <code>datadir</code>, <code>basedir</code>, and
<code>pid-file</code>.</p>

<p>The following table shows which option groups each of the
startup scripts read from option files:</p>

<table border="1" width="100%">
<tr>
<td><strong>Script</strong></td>
<td><strong>Option groups</strong></td>
</tr>

<tr>
<td><code>mysqld</code></td>
<td><code>mysqld</code> and <code>server</code></td>
</tr>

<tr>
<td><code>mysql.server</code></td>
<td><code>mysql.server</code>, <code>mysqld</code>, and
<code>server</code></td>
</tr>

<tr>
<td><code>safe_mysqld</code></td>
<td><code>mysql.server</code>, <code>mysqld</code>, and
<code>server</code></td>
</tr>
</table>

<p>See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</p>

<h2><a id="Upgrade" name="Upgrade"
href="manual_toc.html#Upgrade">2.5 Upgrading/Downgrading
MySQL</a></h2>

<p><a id="IDX304" name="IDX304"></a> <a id="IDX305"
name="IDX305"></a></p>

<p>You can always move the MySQL form and datafiles between
different versions on the same architecture as long as you have the
same base version of MySQL. The current base version is 3. If you
change the character set when running MySQL (which may also change
the sort order), you must run <code>myisamchk -r -q
--set-character-set=charset</code> on all tables. Otherwise, your
indexes may not be ordered correctly.</p>

<p>If you are afraid of new versions, you can always rename your
old <code>mysqld</code> to something like
<code>mysqld-old-version-number</code>. If your new
<code>mysqld</code> then does something unexpected, you can simply
shut it down and restart with your old <code>mysqld</code>!</p>

<p>When you do an upgrade you should also back up your old
databases, of course.</p>

<p>If after an upgrade, you experience problems with recompiled
client programs, like <code>Commands out of sync</code> or
unexpected core dumps, you probably have used an old header or
library file when compiling your programs. In this case you should
check the date for your <tt>`mysql.h'</tt> file and
<tt>`libmysqlclient.a'</tt> library to verify that they are from
the new MySQL distribution. If not, please recompile your
programs!</p>

<p>If you get some problems that the new <code>mysqld</code> server
doesn't want to start or that you can't connect without a password,
check that you don't have some old <tt>`my.cnf'</tt> file from your
old installation! You can check this with: <code>program-name
--print-defaults</code>. If this outputs anything other than the
program name, you have an active <tt>`my.cnf'</tt> file that will
affect things!</p>

<p>It is a good idea to rebuild and reinstall the
<code>Msql-Mysql-modules</code> distribution whenever you install a
new release of MySQL, particularly if you notice symptoms such as
all your <code>DBI</code> scripts dumping core after you upgrade
MySQL.</p>

<p><a id="IDX306" name="IDX306"></a> <a id="IDX307"
name="IDX307"></a></p>

<h3><a id="Upgrading-from-4.0" name="Upgrading-from-4.0"
href="manual_toc.html#Upgrading-from-4.0">2.5.1 Upgrading From
Version 4.0 to Version 4.1</a></h3>

<p>In general what you have to do when upgrading to 4.1 from an
earlier MySQL version:</p>

<ul>
<li>Run the <code>mysql_fix_privilege_tables</code> to get the new
password field that is needed for secure handling of
passwords.</li>
</ul>

<p>The following is a more complete lists tell what you have to
watch out for when upgrading to version 4.1;</p>

<ul>
<li>Functions that return a DATE, DATETIME or TIME result is now
fixed up when returned to the client. 

<pre>
mysql&gt; SELECT cast("2001-1-1" as DATE)
    -&gt; '2001-01-01'
</pre>
</li>

<li>All column and tables now have a character set, which shows up
in <code>SHOW CREATE TABLE</code> and <code>mysqldump</code>.
(MySQL 4.0.6 and above can read the new dump files, but not
previous MySQL versions).</li>

<li>Timestamp is now returned as string of type <code>'YYYY-MM-DD
HH:MM:DD'</code>. If you want to have this as a number you should
add +0 to the timestamp column. Different timestamp lengths are not
supported.</li>
</ul>

<p><a id="IDX308" name="IDX308"></a> <a id="IDX309"
name="IDX309"></a></p>

<h3><a id="Upgrading-from-3.23" name="Upgrading-from-3.23"
href="manual_toc.html#Upgrading-from-3.23">2.5.2 Upgrading From
Version 3.23 to Version 4.0</a></h3>

<p>In general what you have to do when upgrading to 4.0 from an
earlier MySQL version:</p>

<ul>
<li>Run the <code>mysql_fix_privilege_tables</code> to add new
privileges and features to the MySQL privilege tables.</li>

<li>Edit any MySQL startup scripts or configure files to not use
any of the deprecated options listed below.</li>

<li>Convert your old ISAM files to MyISAM files with the command:
<code>mysql_convert_table_format database</code>. Note that this
should only be run if all tables in the given database is ISAM or
MyISAM tables. If this is not the case you should run <code>ALTER
TABLE table_name TYPE=MyISAM</code> on all ISAM tables.</li>

<li>Ensure that you don't have any MySQL clients that uses shared
libraries (like the perl Msql-Mysql-modules). If you have, you
should recompile them as structures used in
<tt>`libmysqlclient.so'</tt> have changed.</li>
</ul>

<p>MySQL 4.0 will work even if you don't do the above, but you will
not be able to use the new security privileges that MySQL 4.0 and
you may run into problems when upgrading later to MySQL 4.1 or
newer. The ISAM file format still works in MySQL 4.0 but it's
deprecated and will be disabled in MySQL 5.0.</p>

<p>Old clients should work with a Version 4.0 server without any
problems.</p>

<p>Even if you do the above, you can still downgrade to MySQL
3.23.52 or newer if you run into problems with the MySQL 4.0
series. In this case you have to do a <code>mysqldump</code> of any
tables using a full-text index and restore these in 3.23 (because
4.0 uses a new format for full-text index).</p>

<p>The following is a more complete lists tell what you have to
watch out for when upgrading to version 4.0;</p>

<ul>
<li>MySQL 4.0 has a lot of new privileges in the
<code>mysql.user</code> table. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>. To get these new privileges to
work, one must run the <code>mysql_fix_privilege_tables</code>
script. Until this script is run all users have the <code>SHOW
DATABASES</code>, <code>CREATE TEMPORARY TABLES</code>, and
<code>LOCK TABLES</code> privileges. <code>SUPER</code> and
<code>EXECUTE</code> privileges take their value from
<code>PROCESS</code>. <code>REPLICATION SLAVE</code> and
<code>REPLICATION CLIENT</code> take their values from
<code>FILE</code>. If you have any scripts that creates new users,
you may want to change them to use the new privileges. If you are
not using <code>GRANT</code> commands in the scripts, this is a
good time to change your scripts. In version 4.0.2 the option
<code>--safe-show-database</code> is deprecated (and no longer does
anything). See section <a
href="manual.html#Privileges_options">4.2.3 Startup Options for
<code>mysqld</code> Concerning Security</a>. If you get access
denied errors for new users in version 4.0.2, you should check if
you need some of the new grants that you didn't need before. In
particular, you will need <code>REPLICATION SLAVE</code> (instead
of <code>FILE</code>) for new slaves.</li>

<li>The startup parameters
<code>myisam_max_extra_sort_file_size</code> and
<code>myisam_max_extra_sort_file_size</code> are now given in bytes
(was megabytes before 4.0.3). External system locking of
MyISAM/ISAM files is now turned off by default. One can turn this
on by doing <code>--external-locking</code>. (For most users this
is never needed).</li>

<li>The following startup variables/options have been renamed: 

<table border="1" width="100%">
<tr>
<td><strong>From</strong></td>
<td><strong>to</strong>.</td>
</tr>

<tr>
<td><code>myisam_bulk_insert_tree_size</code></td>
<td><code>bulk_insert_buffer_size</code></td>
</tr>

<tr>
<td><code>query_cache_startup_type</code></td>
<td><code>query_cache_type</code></td>
</tr>

<tr>
<td><code>record_buffer</code></td>
<td><code>read_buffer_size</code></td>
</tr>

<tr>
<td><code>record_rnd_buffer</code></td>
<td><code>read_rnd_buffer_size</code></td>
</tr>

<tr>
<td><code>sort_buffer</code></td>
<td><code>sort_buffer_size</code></td>
</tr>

<tr>
<td><code>warnings</code></td>
<td><code>log-warnings</code></td>
</tr>
</table>

The startup options <code>record_buffer</code>,
<code>sort_buffer</code> and <code>warnings</code> will still work
in MySQL 4.0 but are deprecated.</li>

<li>The following SQL variables have changed name. 

<table border="1" width="100%">
<tr>
<td><strong>From</strong></td>
<td><strong>To</strong>.</td>
</tr>

<tr>
<td><code>SQL_BIG_TABLES</code></td>
<td><code>BIG_TABLES</code></td>
</tr>

<tr>
<td><code>SQL_LOW_PRIORITY_UPDATES</code></td>
<td><code>LOW_PRIORITY_UPDATES</code></td>
</tr>

<tr>
<td><code>SQL_MAX_JOIN_SIZE</code></td>
<td><code>MAX_JOIN_SIZE</code></td>
</tr>

<tr>
<td><code>SQL_QUERY_CACHE_TYPE</code></td>
<td><code>QUERY_CACHE_TYPE</code></td>
</tr>
</table>

The old names still work in MySQL 4.0 but are deprecated.</li>

<li>You have to use <code>SET GLOBAL
SQL_SLAVE_SKIP_COUNTER=#</code> instead of <code>SET
SQL_SLAVE_SKIP_COUNTER=#</code>.</li>

<li>Renamed mysqld startup options <code>--skip-locking</code> to
<code>--skip-external-locking</code> and
<code>--enable-locking</code> to
<code>--external-locking</code>.</li>

<li><code>SHOW MASTER STATUS</code> now returns an empty set if
binary log is not enabled.</li>

<li><code>SHOW SLAVE STATUS</code> now returns an empty set if
slave is not initialised.</li>

<li>mysqld now has the option <code>--temp-pool</code> enabled by
default as this gives better performance with some OS (Most notable
Linux).</li>

<li><code>DOUBLE</code> and <code>FLOAT</code> columns now honour
the <code>UNSIGNED</code> flag on storage (before,
<code>UNSIGNED</code> was ignored for these columns).</li>

<li><code>ORDER BY column DESC</code> now always sorts
<code>NULL</code> values first; in 3.23 this was not always
consistent.</li>

<li><code>SHOW INDEX</code> has 2 columns more (<code>Null</code>
and <code>Index_type</code>) than it had in 3.23.</li>

<li><code>CHECK</code>, <code>SIGNED</code>, <code>LOCALTIME</code>
and <code>LOCALTIMESTAMP</code> are now reserved words.</li>

<li>The result of all bitwise operators <code>|</code>,
<code>&amp;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>,
and <code>~</code> is now unsigned. This may cause problems if you
are using them in a context where you want a signed result. See
section <a href="manual.html#Cast_Functions">6.3.5 Cast
Functions</a>.</li>

<li><strong>Note</strong>: when you use subtraction between integer
values where one is of type <code>UNSIGNED</code>, the result will
be unsigned! In other words, before upgrading to MySQL 4.0, you
should check your application for cases where you are subtracting a
value from an unsigned entity and want a negative answer or
subtracting an unsigned value from an integer column. You can
disable this behaviour by using the
<code>--sql-mode=NO_UNSIGNED_SUBTRACTION</code> option when
starting <code>mysqld</code>. See section <a
href="manual.html#Cast_Functions">6.3.5 Cast Functions</a>.</li>

<li>To use <code>MATCH ... AGAINST (... IN BOOLEAN MODE)</code>
with your tables, you need to rebuild them with <code>REPAIR TABLE
table_name USE_FRM</code>.</li>

<li><code>LOCATE()</code> and <code>INSTR()</code> are
case-sensitive if one of the arguments is a binary string.
Otherwise they are case-insensitive.</li>

<li><code>STRCMP()</code> now uses the current character set when
doing comparisons, which means that the default comparison
behaviour now is case-insensitive.</li>

<li><code>HEX(string)</code> now returns the characters in string
converted to hexadecimal. If you want to convert a number to
hexadecimal, you should ensure that you call <code>HEX()</code>
with a numeric argument.</li>

<li>In 3.23, <code>INSERT INTO ... SELECT</code> always had
<code>IGNORE</code> enabled. In 4.0.1, MySQL will stop (and
possibly roll back) in case of an error if you don't specify
<code>IGNORE</code>.</li>

<li><tt>`safe_mysqld'</tt> is renamed to <tt>`mysqld_safe'</tt>.
For some time we will in our binary distributions include
<code>safe_mysqld</code> as a symlink to
<code>mysqld_safe</code>.</li>

<li>The old C API functions <code>mysql_drop_db</code>,
<code>mysql_create_db</code>, and <code>mysql_connect</code> are
not supported anymore, unless you compile MySQL with
<code>CFLAGS=-DUSE_OLD_FUNCTIONS</code>. Instead of doing this, it
is preferable to change the client to use the new 4.0 API.</li>

<li>In the <code>MYSQL_FIELD</code> structure, <code>length</code>
and <code>max_length</code> have changed from <code>unsigned
int</code> to <code>unsigned long</code>. This should not cause any
problems, except that they may generate warning messages when used
as arguments in the <code>printf()</code> class of functions.</li>

<li>You should use <code>TRUNCATE TABLE</code> when you want to
delete all rows from a table and you don't care how many rows were
deleted. (Because <code>TRUNCATE TABLE</code> is faster than
<code>DELETE FROM table_name</code>).</li>

<li>You will get an error if you have an active <code>LOCK
TABLES</code> or transaction when trying to execute <code>TRUNCATE
TABLE</code> or <code>DROP DATABASE</code>.</li>

<li>You should use integers to store values in BIGINT columns
(instead of using strings, as you did in MySQL 3.23). Using strings
will still work, but using integers is more efficient.</li>

<li>Format of <code>SHOW OPEN TABLE</code> has changed.</li>

<li>Multi-threaded clients should use
<code>mysql_thread_init()</code> and
<code>mysql_thread_end()</code>. See section <a
href="manual.html#Threaded_clients">8.4.8 How to Make a Threaded
Client</a>.</li>

<li>If you want to recompile the Perl DBD::mysql module, you must
get Msql-Mysql-modules version 1.2218 or newer because the older
DBD modules used the deprecated <code>drop_db()</code> call.</li>

<li><code>RAND(seed)</code> returns a different random number
series in 4.0 than in 3.23; this was done to further differentiate
<code>RAND(seed)</code> and <code>RAND(seed+1)</code>.</li>

<li>The default type returned by <code>IFNULL(A,B)</code> is now
set to be the more 'general' of the types of <code>A</code> and
<code>B</code>. (The order is <code>STRING</code>,
<code>REAL</code> or <code>INTEGER</code>).</li>
</ul>

<h3><a id="Upgrading-from-3.22" name="Upgrading-from-3.22"
href="manual_toc.html#Upgrading-from-3.22">2.5.3 Upgrading From
Version 3.22 to Version 3.23</a></h3>

<p><a id="IDX310" name="IDX310"></a> <a id="IDX311"
name="IDX311"></a></p>

<p>MySQL Version 3.23 supports tables of the new
<code>MyISAM</code> type and the old <code>ISAM</code> type. You
don't have to convert your old tables to use these with Version
3.23. By default, all new tables will be created with type
<code>MyISAM</code> (unless you start <code>mysqld</code> with the
<code>--default-table-type=isam</code> option). You can change an
<code>ISAM</code> table to a <code>MyISAM</code> table with
<code>ALTER TABLE table_name TYPE=MyISAM</code> or the Perl script
<code>mysql_convert_table_format</code>.</p>

<p>Version 3.22 and 3.21 clients will work without any problems
with a Version 3.23 server.</p>

<p>The following list tells what you have to watch out for when
upgrading to Version 3.23:</p>

<ul>
<li>All tables that use the <code>tis620</code> character set must
be fixed with <code>myisamchk -r</code> or <code>REPAIR
TABLE</code>.</li>

<li>If you do a <code>DROP DATABASE</code> on a symbolic linked
database, both the link and the original database are deleted.
(This didn't happen in 3.22 because configure didn't detect the
<code>readlink</code> system call.)</li>

<li><code>OPTIMIZE TABLE</code> now works only for
<code>MyISAM</code> tables. For other table types, you can use
<code>ALTER TABLE</code> to optimise the table. During
<code>OPTIMIZE TABLE</code> the table is now locked from other
threads.</li>

<li>The MySQL client <code>mysql</code> is now by default started
with the option <code>--no-named-commands (-g)</code>. This option
can be disabled with <code>--enable-named-commands (-G)</code>.
This may cause incompatibility problems in some cases—for example,
in SQL scripts that use named commands without a semicolon! Long
format commands still work from the first line.</li>

<li>Date functions that work on parts of dates (like
<code>MONTH()</code>) will now return 0 for <code>0000-00-00</code>
dates. (MySQL 3.22 returned <code>NULL</code>.)</li>

<li>If you are using the <code>german</code> character sort order,
you must repair all your tables with <code>isamchk -r</code>, as we
have made some changes in the sort order!</li>

<li>The default return type of <code>IF</code> will now depend on
both arguments and not only the first argument.</li>

<li><code>AUTO_INCREMENT</code> will not work with negative
numbers. The reason for this is that negative numbers caused
problems when wrapping from -1 to 0. <code>AUTO_INCREMENT</code>
for MyISAM tables is now handled at a lower level and is much
faster than before. For MyISAM tables old numbers are also not
reused anymore, even if you delete some rows from the table.</li>

<li><code>CASE</code>, <code>DELAYED</code>, <code>ELSE</code>,
<code>END</code>, <code>FULLTEXT</code>, <code>INNER</code>,
<code>RIGHT</code>, <code>THEN</code>, and <code>WHEN</code> are
now reserved words.</li>

<li><code>FLOAT(X)</code> is now a true floating-point type and not
a value with a fixed number of decimals.</li>

<li>When declaring <code>DECIMAL(length,dec)</code> the length
argument no longer includes a place for the sign or the decimal
point.</li>

<li>A <code>TIME</code> string must now be of one of the following
formats: <code>[[[DAYS] [H]H:]MM:]SS[.fraction]</code> or
<code>[[[[[H]H]H]H]MM]SS[.fraction]</code>.</li>

<li><code>LIKE</code> now compares strings using the same character
comparison rules as <code>=</code>. If you require the old
behaviour, you can compile MySQL with the
<code>CXXFLAGS=-DLIKE_CMP_TOUPPER</code> flag.</li>

<li><code>REGEXP</code> is now case-insensitive for normal (not
binary) strings.</li>

<li>When you check/repair tables you should use <code>CHECK
TABLE</code> or <code>myisamchk</code> for <code>MyISAM</code>
tables (<tt>`.MYI'</tt>) and <code>isamchk</code> for ISAM
(<tt>`.ISM'</tt>) tables.</li>

<li>If you want your <code>mysqldump</code> files to be compatible
between MySQL Version 3.22 and Version 3.23, you should not use the
<code>--opt</code> or <code>--all</code> option to
<code>mysqldump</code>.</li>

<li>Check all your calls to <code>DATE_FORMAT()</code> to make sure
there is a <samp>`%'</samp> before each format character. (MySQL
Version 3.22 and later already allowed this syntax.)</li>

<li><code>mysql_fetch_fields_direct</code> is now a function (it
was a macro) and it returns a pointer to a <code>MYSQL_FIELD</code>
instead of a <code>MYSQL_FIELD</code>.</li>

<li><code>mysql_num_fields()</code> can no longer be used on a
<code>MYSQL*</code> object (it's now a function that takes
<code>MYSQL_RES*</code> as an argument, so you should use
<code>mysql_field_count()</code> instead).</li>

<li>In MySQL Version 3.22, the output of <code>SELECT DISTINCT
...</code> was almost always sorted. In Version 3.23, you must use
<code>GROUP BY</code> or <code>ORDER BY</code> to obtain sorted
output.</li>

<li><code>SUM()</code> now returns <code>NULL</code>, instead of 0,
if there are no matching rows. This is according to ANSI SQL.</li>

<li>An <code>AND</code> or <code>OR</code> with <code>NULL</code>
values will now return <code>NULL</code> instead of 0. This mostly
affects queries that use <code>NOT</code> on an <code>AND/OR</code>
expression as <code>NOT NULL</code> = <code>NULL</code>.
<code>LPAD()</code> and <code>RPAD()</code> will shorten the result
string if it's longer than the length argument.</li>
</ul>

<h3><a id="Upgrading-from-3.21" name="Upgrading-from-3.21"
href="manual_toc.html#Upgrading-from-3.21">2.5.4 Upgrading from
Version 3.21 to Version 3.22</a></h3>

<p><a id="IDX312" name="IDX312"></a> <a id="IDX313"
name="IDX313"></a></p>

<p>Nothing that affects compatibility has changed between versions
3.21 and 3.22. The only pitfall is that new tables that are created
with <code>DATE</code> type columns will use the new way to store
the date. You can't access these new fields from an old version of
<code>mysqld</code>.</p>

<p>After installing MySQL Version 3.22, you should start the new
server and then run the <code>mysql_fix_privilege_tables</code>
script. This will add the new privileges that you need to use the
<code>GRANT</code> command. If you forget this, you will get
<code>Access denied</code> when you try to use <code>ALTER
TABLE</code>, <code>CREATE INDEX</code>, or <code>DROP
INDEX</code>. If your MySQL root user requires a password, you
should give this as an argument to
<code>mysql_fix_privilege_tables</code>.</p>

<p>The C API interface to <code>mysql_real_connect()</code> has
changed. If you have an old client program that calls this
function, you must place a <code>0</code> for the new
<code>db</code> argument (or recode the client to send the
<code>db</code> element for faster connections). You must also call
<code>mysql_init()</code> before calling
<code>mysql_real_connect()</code>! This change was done to allow
the new <code>mysql_options()</code> function to save options in
the <code>MYSQL</code> handler structure.</p>

<p>The <code>mysqld</code> variable <code>key_buffer</code> has
changed names to <code>key_buffer_size</code>, but you can still
use the old name in your startup files.</p>

<h3><a id="Upgrading-from-3.20" name="Upgrading-from-3.20"
href="manual_toc.html#Upgrading-from-3.20">2.5.5 Upgrading from
Version 3.20 to Version 3.21</a></h3>

<p><a id="IDX314" name="IDX314"></a></p>

<p>If you are running a version older than Version 3.20.28 and want
to switch to Version 3.21, you need to do the following:</p>

<p>You can start the <code>mysqld</code> Version 3.21 server with
<code>safe_mysqld --old-protocol</code> to use it with clients from
a Version 3.20 distribution. In this case, the new client function
<code>mysql_errno()</code> will not return any server error, only
<code>CR_UNKNOWN_ERROR</code> (but it works for client errors), and
the server uses the old <code>password()</code> checking rather
than the new one.</p>

<p>If you are <strong>not</strong> using the
<code>--old-protocol</code> option to <code>mysqld</code>, you will
need to make the following changes:</p>

<ul>
<li>All client code must be recompiled. If you are using ODBC, you
must get the new <code>MyODBC</code> 2.x driver.</li>

<li>The script <code>scripts/add_long_password</code> must be run
to convert the <code>Password</code> field in the
<code>mysql.user</code> table to <code>CHAR(16)</code>.</li>

<li>All passwords must be reassigned in the <code>mysql.user</code>
table (to get 62-bit rather than 31-bit passwords).</li>

<li>The table format hasn't changed, so you don't have to convert
any tables.</li>
</ul>

<p>MySQL Version 3.20.28 and above can handle the new
<code>user</code> table format without affecting clients. If you
have a MySQL version earlier than Version 3.20.28, passwords will
no longer work with it if you convert the <code>user</code> table.
So to be safe, you should first upgrade to at least Version 3.20.28
and then upgrade to Version 3.21.</p>

<p><a id="IDX315" name="IDX315"></a> The new client code works with
a 3.20.x <code>mysqld</code> server, so if you experience problems
with 3.21.x, you can use the old 3.20.x server without having to
recompile the clients again.</p>

<p>If you are not using the <code>--old-protocol</code> option to
<code>mysqld</code>, old clients will issue the error message:</p>

<pre>
ERROR: Protocol mismatch. Server Version = 10 Client Version = 9
</pre>

<p>The new Perl <code>DBI</code>/<code>DBD</code> interface also
supports the old <code>mysqlperl</code> interface. The only change
you have to make if you use <code>mysqlperl</code> is to change the
arguments to the <code>connect()</code> function. The new arguments
are: <code>host</code>, <code>database</code>, <code>user</code>,
and <code>password</code> (the <code>user</code> and
<code>password</code> arguments have changed places). See section
<a href="manual.html#Perl_DBI_Class">8.2.2 The <code>DBI</code>
Interface</a>.</p>

<p>The following changes may affect queries in old
applications:</p>

<ul>
<li><code>HAVING</code> must now be specified before any
<code>ORDER BY</code> clause.</li>

<li>The parameters to <code>LOCATE()</code> have been swapped.</li>

<li>There are some new reserved words. The most notable are
<code>DATE</code>, <code>TIME</code>, and
<code>TIMESTAMP</code>.</li>
</ul>

<h3><a id="Upgrading-to-arch" name="Upgrading-to-arch"
href="manual_toc.html#Upgrading-to-arch">2.5.6 Upgrading to Another
Architecture</a></h3>

<p><a id="IDX316" name="IDX316"></a></p>

<p>If you are using MySQL Version 3.23, you can copy the
<tt>`.frm'</tt>, <tt>`.MYI'</tt>, and <tt>`.MYD'</tt> files between
different architectures that support the same floating-point
format. (MySQL takes care of any byte-swapping issues.)</p>

<p>The MySQL <code>ISAM</code> data and index files
(<tt>`.ISD'</tt> and <tt>`*.ISM'</tt>, respectively) are
architecture-dependent and in some cases OS-dependent. If you want
to move your applications to another machine that has a different
architecture or OS than your current machine, you should not try to
move a database by simply copying the files to the other machine.
Use <code>mysqldump</code> instead.</p>

<p>By default, <code>mysqldump</code> will create a file full of
SQL statements. You can then transfer the file to the other machine
and feed it as input to the <code>mysql</code> client.</p>

<p>Try <code>mysqldump --help</code> to see what options are
available. If you are moving the data to a newer version of MySQL,
you should use <code>mysqldump --opt</code> with the newer version
to get a fast, compact dump.</p>

<p>The easiest (although not the fastest) way to move a database
between two machines is to run the following commands on the
machine on which the database is located:</p>

<pre>
shell&gt; mysqladmin -h 'other hostname' create db_name
shell&gt; mysqldump --opt db_name \
        | mysql -h 'other hostname' db_name
</pre>

<p>If you want to copy a database from a remote machine over a slow
network, you can use:</p>

<pre>
shell&gt; mysqladmin create db_name
shell&gt; mysqldump -h 'other hostname' --opt --compress db_name \
        | mysql db_name
</pre>

<p>You can also store the result in a file, then transfer the file
to the target machine and load the file into the database there.
For example, you can dump a database to a file on the source
machine like this:</p>

<pre>
shell&gt; mysqldump --quick db_name | gzip &gt; db_name.contents.gz
</pre>

<p>(The file created in this example is compressed.) Transfer the
file containing the database contents to the target machine and run
these commands there:</p>

<pre>
shell&gt; mysqladmin create db_name
shell&gt; gunzip &lt; db_name.contents.gz | mysql db_name
</pre>

<p><a id="IDX317" name="IDX317"></a> <a id="IDX318"
name="IDX318"></a> You can also use <code>mysqldump</code> and
<code>mysqlimport</code> to accomplish the database transfer. For
big tables, this is much faster than simply using
<code>mysqldump</code>. In the following commands,
<code>DUMPDIR</code> represents the full pathname of the directory
you use to store the output from <code>mysqldump</code>.</p>

<p>First, create the directory for the output files and dump the
database:</p>

<pre>
shell&gt; mkdir DUMPDIR
shell&gt; mysqldump --tab=DUMPDIR db_name
</pre>

<p>Then transfer the files in the <code>DUMPDIR</code> directory to
some corresponding directory on the target machine and load the
files into MySQL there:</p>

<pre>
shell&gt; mysqladmin create db_name           # create database
shell&gt; cat DUMPDIR/*.sql | mysql db_name   # create tables in database
shell&gt; mysqlimport db_name DUMPDIR/*.txt   # load data into tables
</pre>

<p>Also, don't forget to copy the <code>mysql</code> database
because that's where the grant tables (<code>user</code>,
<code>db</code>, <code>host</code>) are stored. You may have to run
commands as the MySQL <code>root</code> user on the new machine
until you have the <code>mysql</code> database in place.</p>

<p>After you import the <code>mysql</code> database on the new
machine, execute <code>mysqladmin flush-privileges</code> so that
the server reloads the grant table information.</p>

<h2><a id="Operating_System_Specific_Notes"
name="Operating_System_Specific_Notes"
href="manual_toc.html#Operating_System_Specific_Notes">2.6
Operating System Specific Notes</a></h2>

<h3><a id="Linux" name="Linux" href="manual_toc.html#Linux">2.6.1
Linux Notes (All Linux Versions)</a></h3>

<p>The following notes regarding <code>glibc</code> apply only to
the situation when you build MySQL yourself. If you are running
Linux on an x86 machine, in most cases it is much better for you to
just use our binary. We link our binaries against the best patched
version of <code>glibc</code> we can come up with and with the best
compiler options, in an attempt to make it suitable for a high-load
server. So if you read the following text, and are in doubt about
what you should do, try our binary first to see if it meets your
needs, and worry about your own build only after you have
discovered that our binary is not good enough. In that case, we
would appreciate a note about it, so we can build a better binary
next time. For a typical user, even for setups with a lot of
concurrent connections and/or tables exceeding the 2G limit, our
binary in most cases is the best choice.</p>

<p>MySQL uses LinuxThreads on Linux. If you are using an old Linux
version that doesn't have <code>glibc2</code>, you must install
LinuxThreads before trying to compile MySQL. You can get
LinuxThreads at <a
href="http://www.mysql.com/downloads/os-linux.html">http://www.mysql.com/downloads/os-linux.html</a>.</p>

<p><strong>Note</strong>: we have seen some strange problems with
Linux 2.2.14 and MySQL on SMP systems. If you have a SMP system, we
recommend you upgrade to Linux 2.4 as soon as possible! Your system
will be faster and more stable by doing this!</p>

<p>Note that <code>glibc</code> versions before and including
Version 2.1.1 have a fatal bug in
<code>pthread_mutex_timedwait</code> handling, which is used when
you do <code>INSERT DELAYED</code>. We recommend that you not use
<code>INSERT DELAYED</code> before upgrading glibc.</p>

<p>If you plan to have 1000+ concurrent connections, you will need
to make some changes to LinuxThreads, recompile it, and relink
MySQL against the new <tt>`libpthread.a'</tt>. Increase
<code>PTHREAD_THREADS_MAX</code> in
<tt>`sysdeps/unix/sysv/linux/bits/local_lim.h'</tt> to 4096 and
decrease <code>STACK_SIZE</code> in
<tt>`linuxthreads/internals.h'</tt> to 256 KB. The paths are
relative to the root of <code>glibc</code> Note that MySQL will not
be stable with around 600-1000 connections if
<code>STACK_SIZE</code> is the default of 2 MB.</p>

<p>If MySQL can't open enough files, or connections, it may be that
you haven't configured Linux to handle enough files.</p>

<p>In Linux 2.2 and onward, you can check the number of allocated
file handles by doing:</p>

<pre>
cat /proc/sys/fs/file-max
cat /proc/sys/fs/dquot-max
cat /proc/sys/fs/super-max
</pre>

<p>If you have more than 16 MB of memory, you should add something
like the following to your init scripts (e.g.
<tt>`/etc/init.d/boot.local'</tt> on SuSE Linux):</p>

<pre>
echo 65536 &gt; /proc/sys/fs/file-max
echo 8192 &gt; /proc/sys/fs/dquot-max
echo 1024 &gt; /proc/sys/fs/super-max
</pre>

<p>You can also run the preceding commands from the command-line as
root, but these settings will be lost the next time your computer
reboots.</p>

<p>Alternatively, you can set these parameters on bootup by using
the <code>sysctl</code> tool, which is used by many Linux
distributions (SuSE has added it as well, beginning with SuSE Linux
8.0). Just put the following values into a file named
<tt>`/etc/sysctl.conf'</tt>:</p>

<pre>
# Increase some values for MySQL
fs.file-max = 65536
fs.dquot-max = 8192
fs.super-max = 1024
</pre>

<p>You should also add the following to <tt>`/etc/my.cnf'</tt>:</p>

<pre>
[safe_mysqld]
open-files-limit=8192
</pre>

<p>This should allow MySQL to create up to 8192 connections +
files.</p>

<p>The <code>STACK_SIZE</code> constant in LinuxThreads controls
the spacing of thread stacks in the address space. It needs to be
large enough so that there will be plenty of room for the stack of
each individual thread, but small enough to keep the stack of some
threads from running into the global <code>mysqld</code> data.
Unfortunately, the Linux implementation of <code>mmap()</code>, as
we have experimentally discovered, will successfully unmap an
already mapped region if you ask it to map out an address already
in use, zeroing out the data on the entire page, instead of
returning an error. So, the safety of <code>mysqld</code> or any
other threaded application depends on the "gentleman" behaviour of
the code that creates threads. The user must take measures to make
sure the number of running threads at any time is sufficiently low
for thread stacks to stay away from the global heap. With
<code>mysqld</code>, you should enforce this "gentleman" behaviour
by setting a reasonable value for the <code>max_connections</code>
variable.</p>

<p>If you build MySQL yourself and do not want to mess with
patching LinuxThreads, you should set <code>max_connections</code>
to a value no higher than 500. It should be even less if you have a
large key buffer, large heap tables, or some other things that make
<code>mysqld</code> allocate a lot of memory, or if you are running
a 2.2 kernel with a 2G patch. If you are using our binary or RPM
version 3.23.25 or later, you can safely set
<code>max_connections</code> at 1500, assuming no large key buffer
or heap tables with lots of data. The more you reduce
<code>STACK_SIZE</code> in LinuxThreads the more threads you can
safely create. We recommend the values between 128K and 256K.</p>

<p>If you use a lot of concurrent connections, you may suffer from
a "feature" in the 2.2 kernel that penalises a process for forking
or cloning a child in an attempt to prevent a fork bomb attack.
This will cause MySQL not to scale well as you increase the number
of concurrent clients. On single-CPU systems, we have seen this
manifested in a very slow thread creation, which means it may take
a long time to connect to MySQL (as long as 1 minute), and it may
take just as long to shut it down. On multiple-CPU systems, we have
observed a gradual drop in query speed as the number of clients
increases. In the process of trying to find a solution, we have
received a kernel patch from one of our users, who claimed it made
a lot of difference for his site. The patch is available at <a
href="http://www.mysql.com/Downloads/Patches/linux-fork.patch">http://www.mysql.com/Downloads/Patches/linux-fork.patch</a>.
We have now done rather extensive testing of this patch on both
development and production systems. It has significantly improved
<code>MySQL</code> performance without causing any problems and we
now recommend it to our users who are still running high-load
servers on 2.2 kernels. This issue has been fixed in the 2.4
kernel, so if you are not satisfied with the current performance of
your system, rather than patching your 2.2 kernel, it might be
easier to just upgrade to 2.4, which will also give you a nice SMP
boost in addition to fixing this fairness bug.</p>

<p>We have tested MySQL on the 2.4 kernel on a 2-CPU machine and
found MySQL scales <strong>much</strong> better—there was virtually
no slowdown on queries throughput all the way up to 1000 clients,
and the MySQL scaling factor (computed as the ratio of maximum
throughput to the throughput with one client) was 180%. We have
observed similar results on a 4-CPU system—virtually no slowdown as
the number of clients was increased up to 1000, and 300% scaling
factor. So for a high-load SMP server we would definitely recommend
the 2.4 kernel at this point. We have discovered that it is
essential to run <code>mysqld</code> process with the highest
possible priority on the 2.4 kernel to achieve maximum performance.
This can be done by adding <code>renice -20 $$</code> command to
<code>safe_mysqld</code>. In our testing on a 4-CPU machine,
increasing the priority gave 60% increase in throughput with 400
clients.</p>

<p>We are currently also trying to collect more info on how well
<code>MySQL</code> performs on 2.4 kernel on 4-way and 8-way
systems. If you have access such a system and have done some
benchmarks, please send a mail to <a
href="mailto:docs@mysql.com">docs@mysql.com</a> with the results -
we will include them in the manual.</p>

<p>There is another issue that greatly hurts MySQL performance,
especially on SMP systems. The implementation of mutex in
LinuxThreads in <code>glibc-2.1</code> is very bad for programs
with many threads that only hold the mutex for a short time. On an
SMP system, ironic as it is, if you link MySQL against unmodified
<code>LinuxThreads</code>, removing processors from the machine
improves MySQL performance in many cases. We have made a patch
available for <code>glibc 2.1.3</code> to correct this behaviour
(<a
href="http://www.mysql.com/Downloads/Linux/linuxthreads-2.1-patch">http://www.mysql.com/Downloads/Linux/linuxthreads-2.1-patch</a>).</p>

<p>With <code>glibc-2.2.2</code> MySQL version 3.23.36 will use the
adaptive mutex, which is much better than even the patched one in
<code>glibc-2.1.3</code>. Be warned, however, that under some
conditions, the current mutex code in <code>glibc-2.2.2</code>
overspins, which hurts MySQL performance. The chance of this
condition can be reduced by renicing <code>mysqld</code> process to
the highest priority. We have also been able to correct the
overspin behaviour with a patch, available at <a
href="http://www.mysql.com/Downloads/Linux/linuxthreads-2.2.2.patch">
http://www.mysql.com/Downloads/Linux/linuxthreads-2.2.2.patch</a>.
It combines the correction of overspin, maximum number of threads,
and stack spacing all in one. You will need to apply it in the
<code>linuxthreads</code> directory with <code>patch -p0
&lt;/tmp/linuxthreads-2.2.2.patch</code>. We hope it will be
included in some form in to the future releases of
<code>glibc-2.2</code>. In any case, if you link against
<code>glibc-2.2.2</code> you still need to correct
<code>STACK_SIZE</code> and <code>PTHREAD_THREADS_MAX</code>. We
hope that the defaults will be corrected to some more acceptable
values for high-load MySQL setup in the future, so that your own
build can be reduced to <code>./configure; make; make
install</code>.</p>

<p>We recommend that you use the above patches to build a special
static version of <code>libpthread.a</code> and use it only for
statically linking against <code>MySQL</code>. We know that the
patches are safe for <code>MySQL</code> and significantly improve
its performance, but we cannot say anything about other
applications. If you link other applications against the patched
version of the library, or build a patched shared version and
install it on your system, you are doing it at your own risk with
regard to other applications that depend on
<code>LinuxThreads</code>.</p>

<p>If you experience any strange problems during the installation
of MySQL, or with some common utilties hanging, it is very likely
that they are either library or compiler related. If this is the
case, using our binary will resolve them.</p>

<p>One known problem with the binary distribution is that with
older Linux systems that use <code>libc</code> (like RedHat 4.x or
Slackware), you will get some non-fatal problems with hostname
resolution. See section <a
href="manual.html#Binary_notes-Linux">2.6.1.1 Linux Notes for
Binary Distributions</a>.</p>

<p>When using LinuxThreads you will see a minimum of three
processes running. These are in fact threads. There will be one
thread for the LinuxThreads manager, one thread to handle
connections, and one thread to handle alarms and signals.</p>

<p>Note that the Linux kernel and the LinuxThread library can by
default only have 1024 threads. This means that you can only have
up to 1021 connections to MySQL on an unpatched system. The page <a
href="http://www.volano.com/linuxnotes.html">http://www.volano.com/linuxnotes.html</a>
contains information how to go around this limit.</p>

<p>If you see a dead <code>mysqld</code> daemon process with
<code>ps</code>, this usually means that you have found a bug in
MySQL or you have a corrupted table. See section <a
href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</p>

<p>To get a core dump on Linux if <code>mysqld</code> dies with a
<code>SIGSEGV</code> signal, you can start <code>mysqld</code> with
the <code>--core-file</code> option. Note that you also probably
need to raise the <code>core file size</code> by adding
<code>ulimit -c 1000000</code> to <code>safe_mysqld</code> or
starting <code>safe_mysqld</code> with
<code>--core-file-size=1000000</code>. See section <a
href="manual.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>, The
Wrapper Around <code>mysqld</code></a>.</p>

<p>If you are linking your own MySQL client and get the error:</p>

<pre>
ld.so.1: ./my: fatal: libmysqlclient.so.4:
open failed: No such file or directory
</pre>

<p>When executing them, the problem can be avoided by one of the
following methods:</p>

<ul>
<li>Link the client with the following flag (instead of
<code>-Lpath</code>):
<code>-Wl,r/path-libmysqlclient.so</code>.</li>

<li>Copy <code>libmysqclient.so</code> to <tt>`/usr/lib'</tt>. <a
id="IDX319" name="IDX319"></a> <a id="IDX320"
name="IDX320"></a></li>

<li>Add the pathname of the directory where
<tt>`libmysqlclient.so'</tt> is located to the
<code>LD_RUN_PATH</code> environment variable before running your
client.</li>
</ul>

<p>If you are using the Fujitsu compiler <code>(fcc / FCC)</code>
you will have some problems compiling MySQL because the Linux
header files are very <code>gcc</code> oriented.</p>

<p>The following <code>configure</code> line should work with
<code>fcc/FCC</code>:</p>

<pre>
CC=fcc CFLAGS="-O -K fast -K lib -K omitfp -Kpreex -D_GNU_SOURCE \
-DCONST=const -DNO_STRTOLL_PROTO" CXX=FCC CXXFLAGS="-O -K fast -K lib \
-K omitfp -K preex --no_exceptions --no_rtti -D_GNU_SOURCE -DCONST=const \
-Dalloca=__builtin_alloca -DNO_STRTOLL_PROTO \
'-D_EXTERN_INLINE=static __inline'" ./configure --prefix=/usr/local/mysql \
--enable-assembler --with-mysqld-ldflags=-all-static --disable-shared \
--with-low-memory
</pre>

<h4><a id="Binary_notes-Linux" name="Binary_notes-Linux"
href="manual_toc.html#Binary_notes-Linux">2.6.1.1 Linux Notes for
Binary Distributions</a></h4>

<p><a id="IDX321" name="IDX321"></a> <a id="IDX322"
name="IDX322"></a></p>

<p>MySQL needs at least Linux Version 2.0.</p>

<p><strong>Warning</strong>: We have reports from some MySQL users
that they have got serious stability problems with MySQL with Linux
kernel 2.2.14. If you are using this kernel you should upgrade to
2.2.19 (or newer) or to a 2.4 kernel. If you have a multi-cpu box,
then you should seriously consider using 2.4 as this will give you
a significant speed boost.</p>

<p>The binary release is linked with <code>-static</code>, which
means you do not normally need to worry about which version of the
system libraries you have. You need not install LinuxThreads,
either. A program linked with <code>-static</code> is slightly
bigger than a dynamically linked program but also slightly faster
(3-5%). One problem, however, is that you can't use user-definable
functions (UDFs) with a statically linked program. If you are going
to write or use UDF functions (this is something only for C or C++
programmers), you must compile MySQL yourself, using dynamic
linking.</p>

<p>If you are using a <code>libc</code>-based system (instead of a
<code>glibc2</code> system), you will probably get some problems
with hostname resolving and <code>getpwnam()</code> with the binary
release. (This is because <code>glibc</code> unfortunately depends
on some external libraries to resolve hostnames and
<code>getpwent()</code>, even when compiled with
<code>-static</code>). In this case you probably get the following
error message when you run <code>mysql_install_db</code>:</p>

<pre>
Sorry, the host 'xxxx' could not be looked up
</pre>

<p>or the following error when you try to run <code>mysqld</code>
with the <code>--user</code> option:</p>

<pre>
getpwnam: No such file or directory
</pre>

<p>You can solve this problem in one of the following ways:</p>

<ul>
<li>Get a MySQL source distribution (an RPM or the
<code>tar.gz</code> distribution) and install this instead.</li>

<li>Execute <code>mysql_install_db --force</code>; this will not
execute the <code>resolveip</code> test in
<code>mysql_install_db</code>. The downside is that you can't use
host names in the grant tables; you must use IP numbers instead
(except for <code>localhost</code>). If you are using an old MySQL
release that doesn't support <code>--force</code>, you have to
remove the <code>resolveip</code> test in
<code>mysql_install</code> with an editor.</li>

<li>Start <code>mysqld</code> with <code>su</code> instead of using
<code>--user</code>.</li>
</ul>

<p>The Linux-Intel binary and RPM releases of MySQL are configured
for the highest possible speed. We are always trying to use the
fastest stable compiler available.</p>

<p>MySQL Perl support requires Version Perl 5.004_03 or newer.</p>

<p>On some Linux 2.2 versions, you may get the error <code>Resource
temporarily unavailable</code> when you do a lot of new connections
to a <code>mysqld</code> server over TCP/IP.</p>

<p>The problem is that Linux has a delay between when you close a
TCP/IP socket and until this is actually freed by the system. As
there is only room for a finite number of TCP/IP slots, you will
get the above error if you try to do too many new TCP/IP
connections during a small time, like when you run the MySQL
<tt>`test-connect'</tt> benchmark over TCP/IP.</p>

<p>We have mailed about this problem a couple of times to different
Linux mailing lists but have never been able to resolve this
properly.</p>

<p>The only known 'fix' to this problem is to use persistent
connections in your clients or use sockets, if you are running the
database server and clients on the same machine. We hope that the
<code>Linux 2.4</code> kernel will fix this problem in the
future.</p>

<h4><a id="Linux-x86" name="Linux-x86"
href="manual_toc.html#Linux-x86">2.6.1.2 Linux x86 Notes</a></h4>

<p>MySQL requires <code>libc</code> Version 5.4.12 or newer. It's
known to work with <code>libc</code> 5.4.46. <code>glibc</code>
Version 2.0.6 and later should also work. There have been some
problems with the <code>glibc</code> RPMs from RedHat, so if you
have problems, check whether there are any updates! The
<code>glibc</code> 2.0.7-19 and 2.0.7-29 RPMs are known to
work.</p>

<p>If you are using Red Hat 8.0 or a new glibc 2.2.x library you
should start mysqld with the option
<code>--thread-stack=192K</code>. If you don't do it mysqld will
die in <code>gethostbyaddr()</code> because the new glibc library
requires &gt; 128K memory on stack for this call. This stack size
is now the default on MySQL 4.0.10 and above.</p>

<p>If you are using gcc 3.0 and above to compile MySQL, you must
install the <code>libstdc++v3</code> library before compiling
MySQL; if you don't do this you will get an error about a missing
<code>__cxa_pure_virtual</code> symbol during linking!</p>

<p>On some older Linux distributions, <code>configure</code> may
produce an error like this:</p>

<pre>
Syntax error in sched.h. Change _P to __P in the /usr/include/sched.h file.
See the Installation chapter in the Reference Manual.
</pre>

<p>Just do what the error message says and add an extra underscore
to the <code>_P</code> macro that has only one underscore, then try
again.</p>

<p>You may get some warnings when compiling; those shown here can
be ignored:</p>

<pre>
mysqld.cc -o objs-thread/mysqld.o
mysqld.cc: In function `void init_signals()':
mysqld.cc:315: warning: assignment of negative value `-1' to
`long unsigned int'
mysqld.cc: In function `void * signal_hand(void *)':
mysqld.cc:346: warning: assignment of negative value `-1' to
`long unsigned int'
</pre>

<p><code>mysql.server</code> can be found in the
<tt>`share/mysql'</tt> directory under the MySQL installation
directory or in the <tt>`support-files'</tt> directory of the MySQL
source tree.</p>

<p>If <code>mysqld</code> always core dumps when it starts up, the
problem may be that you have an old <tt>`/lib/libc.a'</tt>. Try
renaming it, then remove <tt>`sql/mysqld'</tt> and do a new
<code>make install</code> and try again. This problem has been
reported on some Slackware installations.</p>

<p>If you get the following error when linking <code>mysqld</code>,
it means that your <tt>`libg++.a'</tt> is not installed
correctly:</p>

<pre>
/usr/lib/libc.a(putc.o): In function `_IO_putc':
putc.o(.text+0x0): multiple definition of `_IO_putc'
</pre>

<p>You can avoid using <tt>`libg++.a'</tt> by running
<code>configure</code> like this:</p>

<pre>
shell&gt; CXX=gcc ./configure
</pre>

<h4><a id="Linux-SPARC" name="Linux-SPARC"
href="manual_toc.html#Linux-SPARC">2.6.1.3 Linux SPARC
Notes</a></h4>

<p>In some implementations, <code>readdir_r()</code> is broken. The
symptom is that <code>SHOW DATABASES</code> always returns an empty
set. This can be fixed by removing <code>HAVE_READDIR_R</code> from
<tt>`config.h'</tt> after configuring and before compiling.</p>

<p>Some problems will require patching your Linux installation. The
patch can be found at <a
href="http://www.mysql.com/Downloads/patches/Linux-sparc-2.0.30.diff">
http://www.mysql.com/Downloads/patches/Linux-sparc-2.0.30.diff</a>.
This patch is against the Linux distribution
<tt>`sparclinux-2.0.30.tar.gz'</tt> that is available at
<code>vger.rutgers.edu</code> (a version of Linux that was never
merged with the official 2.0.30). You must also install
LinuxThreads Version 0.6 or newer.</p>

<h4><a id="Linux-Alpha" name="Linux-Alpha"
href="manual_toc.html#Linux-Alpha">2.6.1.4 Linux Alpha
Notes</a></h4>

<p>MySQL Version 3.23.12 is the first MySQL version that is tested
on Linux-Alpha. If you plan to use MySQL on Linux-Alpha, you should
ensure that you have this version or newer.</p>

<p>We have tested MySQL on Alpha with our benchmarks and test
suite, and it appears to work nicely.</p>

<p>We currently build the MySQL binary packages on SuSE Linux 7.0
for AXP, kernel 2.4.4-SMP, Compaq C compiler (V6.2-505) and Compaq
C++ compiler (V6.3-006) on a Compaq DS20 machine with an Alpha EV6
processor.</p>

<p>You can find the above compilers at <a
href="http://www.support.compaq.com/alpha-tools/">http://www.support.compaq.com/alpha-tools/</a>).
By using these compilers, instead of gcc, we get about 9-14% better
performance with MySQL.</p>

<p>Note that until MySQL version 3.23.52 and 4.0.2 we optimised the
binary for the current CPU only (by using the <code>-fast</code>
compile option); this meant that you could only use our binaries if
you had an Alpha EV6 processor.</p>

<p>Starting with all following releases we added the <code>-arch
generic</code> flag to our compile options, which makes sure the
binary runs on all Alpha processors. We also compile statically to
avoid library problems.</p>

<pre>
CC=ccc CFLAGS="-fast -arch generic" CXX=cxx \
CXXFLAGS="-fast -arch generic -noexceptions -nortti" \
./configure --prefix=/usr/local/mysql --disable-shared \
--with-extra-charsets=complex --enable-thread-safe-client \
--with-mysqld-ldflags=-non_shared --with-client-ldflags=-non_shared
</pre>

<p>If you want to use egcs the following configure line worked for
us:</p>

<pre>
CFLAGS="-O3 -fomit-frame-pointer" CXX=gcc \
CXXFLAGS="-O3 -fomit-frame-pointer -felide-constructors \
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
--disable-shared
</pre>

<p>Some known problems when running MySQL on Linux-Alpha:</p>

<ul>
<li>Debugging threaded applications like MySQL will not work with
<code>gdb 4.18</code>. You should download and use gdb 5.1
instead!</li>

<li>If you try linking <code>mysqld</code> statically when using
<code>gcc</code>, the resulting image will core dump at start. In
other words, <strong>don't</strong> use
<code>--with-mysqld-ldflags=-all-static</code> with
<code>gcc</code>.</li>
</ul>

<h4><a id="Linux-PowerPC" name="Linux-PowerPC"
href="manual_toc.html#Linux-PowerPC">2.6.1.5 Linux PowerPC
Notes</a></h4>

<p>MySQL should work on MkLinux with the newest <code>glibc</code>
package (tested with <code>glibc</code> 2.0.7).</p>

<h4><a id="Linux-MIPS" name="Linux-MIPS"
href="manual_toc.html#Linux-MIPS">2.6.1.6 Linux MIPS Notes</a></h4>

<p>To get MySQL to work on Qube2, (Linux Mips), you need the newest
<code>glibc</code> libraries (<code>glibc-2.0.7-29C2</code> is
known to work). You must also use the <code>egcs</code> C++
compiler (<code>egcs-1.0.2-9</code>, <code>gcc 2.95.2</code> or
newer).</p>

<h4><a id="Linux-IA64" name="Linux-IA64"
href="manual_toc.html#Linux-IA64">2.6.1.7 Linux IA64 Notes</a></h4>

<p>To get MySQL to compile on Linux IA64, we use the following
compile line: Using <code>gcc-2.96</code>:</p>

<pre>
CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc \
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors \
-fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
"--with-comment=Official MySQL binary" --with-extra-charsets=complex
</pre>

<p>On IA64 the MySQL client binaries are using shared libraries.
This means that if you install our binary distribution in some
other place than <tt>`/usr/local/mysql'</tt> you need to either
modify <tt>`/etc/ld.so.conf'</tt> or add the path to the directory
where you have <tt>`libmysqlclient.so'</tt> to the
<code>LD_LIBRARY_PATH</code> environment variable.</p>

<p>See section <a href="manual.html#Link_errors">A.3.1 Problems
When Linking with the MySQL Client Library</a>.</p>

<h3><a id="Windows" name="Windows"
href="manual_toc.html#Windows">2.6.2 Windows Notes</a></h3>

<p>This section describes using MySQL on Windows. This information
is also provided in the <tt>`README'</tt> file that comes with the
MySQL Windows distribution. See section <a
href="manual.html#Windows_installation">2.1.2 Installing MySQL on
Windows</a>.</p>

<h4><a id="Win95_start" name="Win95_start"
href="manual_toc.html#Win95_start">2.6.2.1 Starting MySQL on
Windows 95, 98 or Me</a></h4>

<p>MySQL uses TCP/IP to connect a client to a server. (This will
allow any machine on your network to connect to your MySQL server.)
Because of this, you must install TCP/IP on your machine before
starting MySQL. You can find TCP/IP on your Windows CD-ROM.</p>

<p>Note that if you are using an old Windows 95 release (for
example OSR2), it's likely that you have an old Winsock package;
MySQL requires Winsock 2! You can get the newest Winsock from <a
href="http://www.microsoft.com/">http://www.microsoft.com/</a>.
Windows 98 has the new Winsock 2 library, so the above doesn't
apply there.</p>

<p>To start the <code>mysqld</code> server, you should start an
MS-DOS window and type:</p>

<pre>
C:\&gt; C:\mysql\bin\mysqld
</pre>

<p>This will start <code>mysqld</code> in the background without a
window.</p>

<p>You can kill the MySQL server by executing:</p>

<pre>
C:\&gt; C:\mysql\bin\mysqladmin -u root shutdown
</pre>

<p>This calls the MySQL administation utility as user `root', which
is the default Administrator in the MySQL grant system. Please note
that the MySQL grant system is wholly independent from any login
users under Windows.</p>

<p>Note that Windows 95/98/Me don't support creation of named
pipes. So on those platforms, you can only use named pipes to
connect to a remote MySQL server running on a Windows NT/2000/XP
server host. (The MySQL server must also support named pipes, of
course. For example, using <code>mysqld-opt</code> under NT/2000/XP
will not allow named pipe connections. You should use either
<code>mysqld-nt</code> or <code>mysqld-max-nt</code>.)</p>

<p>If <code>mysqld</code> doesn't start, please check the
<tt>`\mysql\data\mysql.err'</tt> file to see if the server wrote
any message there to indicate the cause of the problem. You can
also try to start the server with <code>mysqld --standalone</code>;
in this case, you may get some useful information on the screen
that may help solve the problem.</p>

<p>The last option is to start <code>mysqld</code> with
<code>--standalone --debug</code>. In this case <code>mysqld</code>
will write a log file <tt>`C:\mysqld.trace'</tt> that should
contain the reason why <code>mysqld</code> doesn't start. See
section <a href="manual.html#Making_trace_files">E.1.2 Creating
Trace Files</a>.</p>

<p>Use <code>mysqld --help</code> to display all the options that
<code>mysqld</code> understands!</p>

<h4><a id="NT_start" name="NT_start"
href="manual_toc.html#NT_start">2.6.2.2 Starting MySQL on Windows
NT, 2000 or XP</a></h4>

<p>To get MySQL to work with TCP/IP on Windows NT 4, you must
install service pack 3 (or newer)!</p>

<p>Normally you should install MySQL as a service on Windows
NT/2000/XP. In case the server was already running, first stop it
using the following command:</p>

<pre>
C:\mysql\bin&gt; mysqladmin -u root shutdown
</pre>

<p>This calls the MySQL administation utility as user
`<code>root</code>', which is the default
<code>Administrator</code> in the MySQL grant system. Please note
that the MySQL grant system is wholly independent from any login
users under Windows.</p>

<p>Now install the server service:</p>

<pre>
C:\mysql\bin&gt; mysqld-max-nt --install
</pre>

<p>If any options are required, they must be specified as
``<code>Start parameters</code>'' in the Windows
<code>Services</code> utility before you start the MySQL
service.</p>

<p>The <code>Services</code> utility (<code>Windows Service Control
Manager</code>) can be found in the <code>Windows Control
Panel</code> (under <code>Administrative Tools</code> on Windows
2000). It is advisable to close the Services utility while
performing the <code>--install</code> or <code>--remove</code>
operations, this prevents some odd errors.</p>

<p>For information about which server binary to run, see section <a
href="manual.html#Windows_prepare_environment">2.1.2.2 Preparing
the Windows MySQL Environment</a>.</p>

<p>Please note that from MySQL version 3.23.44, you have the choice
of set up the service as <code>Manual</code> instead (if you don't
wish the service to be started automatically during the boot
process):</p>

<pre>
C:\mysql\bin&gt; mysqld-max-nt --install-manual
</pre>

<p>The service is installed with the name <code>MySQL</code>. Once
installed, it can be immediately started from the
<code>Services</code> utility, or by using the command <code>NET
START MySQL</code>.</p>

<p>Once running, <code>mysqld-max-nt</code> can be stopped using
<code>mysqladmin</code>, from the Services utility, or by using the
command <code>NET STOP MySQL</code>.</p>

<p>When running as a service, the operating system will
automatically stop the MySQL service on computer shutdown. In MySQL
versions &lt; 3.23.47, Windows only waited for a few seconds for
the shutdown to complete, and killed the database server process if
the time limit was exceeded (potentially causing problems). For
instance, at the next startup the <code>InnoDB</code> storage
engine had to do crash recovery. Starting from MySQL version
3.23.48, the Windows will wait longer for the MySQL server shutdown
to complete. If you notice this is not enough for your intallation,
it is safest to run the MySQL server not as a service, but from the
Command prompt, and shut it down with <code>mysqladmin
shutdown</code>.</p>

<p>There is a problem that Windows NT (but not Windows 2000/XP) by
default only waits 20 seconds for a service to shut down, and after
that kills the service process. You can increase this default by
opening the Registry Editor <tt>`\winnt\system32\regedt32.exe'</tt>
and editing the value of <code>WaitToKillServiceTimeout</code> at
<tt>`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control'</tt> in
the Registry tree. Specify the new larger value in milliseconds,
for example 120000 to have Windows NT wait upto 120 seconds.</p>

<p>Please note that when run as a service,
<code>mysqld-max-nt</code> has no access to a console and so no
messages can be seen. Errors can be checked in
<tt>`c:\mysql\data\mysql.err'</tt>.</p>

<p>If you have problems installing <code>mysqld-max-nt</code> as a
service, try starting it with the full path:</p>

<pre>
C:\&gt; C:\mysql\bin\mysqld-max-nt --install
</pre>

<p>If this doesn't work, you can get <code>mysqld-max-nt</code> to
start properly by fixing the path in the registry!</p>

<p>If you don't want to start <code>mysqld-max-nt</code> as a
service, you can start it as follows:</p>

<pre>
C:\&gt; C:\mysql\bin\mysqld-max-nt --standalone
</pre>

<p>or</p>

<pre>
C:\&gt; C:\mysql\bin\mysqld --standalone --debug
</pre>

<p>The last method gives you a debug trace in
<tt>`C:\mysqld.trace'</tt>. See section <a
href="manual.html#Making_trace_files">E.1.2 Creating Trace
Files</a>.</p>

<h4><a id="Windows_running" name="Windows_running"
href="manual_toc.html#Windows_running">2.6.2.3 Running MySQL on
Windows</a></h4>

<p><a id="IDX323" name="IDX323"></a> <a id="IDX324"
name="IDX324"></a></p>

<p>MySQL supports TCP/IP on all Windows platforms and named pipes
on NT/2000/XP. The default is to use named pipes for local
connections on NT/2000/XP and TCP/IP for all other cases if the
client has TCP/IP installed. The host name specifies which protocol
is used:</p>

<table border="1" width="100%">
<tr>
<td><strong>Host name</strong></td>
<td><strong>Protocol</strong></td>
</tr>

<tr>
<td>NULL (none)</td>
<td>On NT/2000/XP, try named pipes first; if that doesn't work, use
TCP/IP. On 9x/Me, TCP/IP is used.</td>
</tr>

<tr>
<td>.</td>
<td>Named pipes</td>
</tr>

<tr>
<td>localhost</td>
<td>TCP/IP to current host</td>
</tr>

<tr>
<td>hostname</td>
<td>TCP/IP</td>
</tr>
</table>

<p>You can force a MySQL client to use named pipes by specifying
the <code>--pipe</code> option or by specifying <code>.</code> as
the host name. Use the <code>--socket</code> option to specify the
name of the pipe.</p>

<p>Note that starting from 3.23.50, named pipes are only enabled if
mysqld is started with <code>--enable-named-pipe</code>. This is
because some users have experienced problems shutting down the
MySQL server when one uses named pipes.</p>

<p>You can test whether MySQL is working by executing the following
commands:</p>

<pre>
C:\&gt; C:\mysql\bin\mysqlshow
C:\&gt; C:\mysql\bin\mysqlshow -u root mysql
C:\&gt; C:\mysql\bin\mysqladmin version status proc
C:\&gt; C:\mysql\bin\mysql test
</pre>

<p>If <code>mysqld</code> is slow to answer to connections on
Windows 9x/Me, there is probably a problem with your DNS. In this
case, start <code>mysqld</code> with
<code>--skip-name-resolve</code> and use only
<code>localhost</code> and IP numbers in the MySQL grant tables.
You can also avoid DNS when connecting to a <code>mysqld-nt</code>
MySQL server running on NT/2000/XP by using the <code>--pipe</code>
argument to specify use of named pipes. This works for most MySQL
clients.</p>

<p>There are two versions of the MySQL command-line tool:</p>

<table border="1" width="100%">
<tr>
<td><strong>Binary</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>mysql</code></td>
<td>Compiled on native Windows, which offers very limited text
editing capabilities.</td>
</tr>

<tr>
<td><code>mysqlc</code></td>
<td>Compiled with the Cygnus GNU compiler and libraries, which
offers <code>readline</code> editing.</td>
</tr>
</table>

<br />
<br />
 

<p>If you want to use <code>mysqlc.exe</code>, you must copy
<tt>`C:\mysql\lib\cygwinb19.dll'</tt> to your Windows system
directory (<tt>`\windows\system'</tt> or similar place).</p>

<p>The default privileges on Windows give all local users full
privileges to all databases without specifying a password. To make
MySQL more secure, you should set a password for all users and
remove the row in the <code>mysql.user</code> table that has
<code>Host='localhost'</code> and <code>User=''</code>.</p>

<p>You should also add a password for the <code>root</code> user.
The following example starts by removing the anonymous user that
has all privileges, then sets a <code>root</code> user
password:</p>

<pre>
C:\&gt; C:\mysql\bin\mysql mysql
mysql&gt; DELETE FROM user WHERE Host='localhost' AND User='';
mysql&gt; QUIT
C:\&gt; C:\mysql\bin\mysqladmin reload
C:\&gt; C:\mysql\bin\mysqladmin -u root password your_password
</pre>

<p>After you've set the password, if you want to take down the
<code>mysqld</code> server, you can do so using this command:</p>

<pre>
C:\&gt; mysqladmin --user=root --password=your_password shutdown
</pre>

<p>If you are using the old shareware version of MySQL Version 3.21
under Windows, the above command will fail with an error:
<code>parse error near 'SET password'</code>. The solution for this
is to download and upgrade to the latest MySQL version, which is
now freely available.</p>

<p>With the current MySQL versions you can easily add new users and
change privileges with <code>GRANT</code> and <code>REVOKE</code>
commands. See section <a href="manual.html#GRANT">4.3.1
<code>GRANT</code> and <code>REVOKE</code> Syntax</a>.</p>

<h4><a id="Windows_and_SSH" name="Windows_and_SSH"
href="manual_toc.html#Windows_and_SSH">2.6.2.4 Connecting to a
Remote MySQL from Windows with SSH</a></h4>

<p><a id="IDX325" name="IDX325"></a> <a id="IDX326"
name="IDX326"></a></p>

<p>Here is a note about how to connect to get a secure connection
to remote MySQL server with SSH (by David Carlson <a
href="mailto:dcarlson@mplcomm.com">dcarlson@mplcomm.com</a>):</p>

<ul>
<li>Install an SSH client on your Windows machine. As a user, the
best non-free one I've found is from <code>SecureCRT</code> from <a
href="http://www.vandyke.com/">http://www.vandyke.com/</a>. Another
option is <code>f-secure</code> from <a
href="http://www.f-secure.com/">http://www.f-secure.com/</a>. You
can also find some free ones on <code>Google</code> at <a
href="http://directory.google.com/Top/Computers/Security/Products_and_Tools/Cryptography/SSH/Clients/Windows/">
http://directory.google.com/Top/Computers/Security/Products_and_Tools/Cryptography/SSH/Clients/Windows/</a>.</li>

<li>Start your Windows SSH client. Set <code>Host_Name =
yourmysqlserver_URL_or_IP</code>. Set
<code>userid=your_userid</code> to log in to your server (probably
not the same as your MySQL login/password.</li>

<li>Set up port forwarding. Either do a remote forward (Set
<code>local_port: 3306</code>, <code>remote_host:
yourmysqlservername_or_ip</code>, <code>remote_port: 3306</code> )
or a local forward (Set <code>port: 3306</code>, <code>host:
localhost</code>, <code>remote port: 3306</code>).</li>

<li>Save everything, otherwise you'll have to redo it the next
time.</li>

<li>Log in to your server with SSH session you just created.</li>

<li>On your Windows machine, start some ODBC application (such as
Access).</li>

<li>Create a new file in Windows and link to MySQL using the ODBC
driver the same way you normally do, except type in
<code>localhost</code> for the MySQL host server—not
<code>yourmysqlservername</code>.</li>
</ul>

<p>You should now have an ODBC connection to MySQL, encrypted using
SSH.</p>

<h4><a id="Windows_symbolic_links" name="Windows_symbolic_links"
href="manual_toc.html#Windows_symbolic_links">2.6.2.5 Splitting
Data Across Different Disks on Windows</a></h4>

<p><a id="IDX327" name="IDX327"></a> <a id="IDX328"
name="IDX328"></a> <a id="IDX329" name="IDX329"></a></p>

<p>Beginning with MySQL Version 3.23.16, the
<code>mysqld-max</code> and <code>mysql-max-nt</code> servers in
the MySQL distribution are compiled with the
<code>-DUSE_SYMDIR</code> option. This allows you to put a database
on different disk by adding a symbolic link to it (in a manner
similar to the way that symbolic links work on Unix).</p>

<p>On Windows, you make a symbolic link to a database by creating a
file that contains the path to the destination directory and saving
this in the <tt>`mysql_data'</tt> directory under the filename
<tt>`database.sym'</tt>. Note that the symbolic link will be used
only if the directory <tt>`mysql_data_dir\database'</tt> doesn't
exist.</p>

<p>For example, if the MySQL data directory is
<tt>`C:\mysql\data'</tt> and you want to have database
<code>foo</code> located at <tt>`D:\data\foo'</tt>, you should
create the file <tt>`C:\mysql\data\foo.sym'</tt> that contains the
text <code>D:\data\foo\</code>. After that, all tables created in
the database <code>foo</code> will be created in
<tt>`D:\data\foo'</tt>.</p>

<p>Note that because of the speed penalty you get when opening
every table, we have not enabled this by default even if you have
compiled MySQL with support for this. To enable symlinks you should
put in your <tt>`my.cnf'</tt> or <tt>`my.ini'</tt> file the
following entry:</p>

<pre>
[mysqld]
use-symbolic-links
</pre>

<p>In MySQL 4.0 we will enable symlinks by default. Then you should
instead use the <code>skip-symlink</code> option if you want to
disable this.</p>

<h4><a id="Windows_client_compiling"
name="Windows_client_compiling"
href="manual_toc.html#Windows_client_compiling">2.6.2.6 Compiling
MySQL Clients on Windows</a></h4>

<p><a id="IDX330" name="IDX330"></a> <a id="IDX331"
name="IDX331"></a></p>

<p>In your source files, you should include <tt>`windows.h'</tt>
before you include <tt>`mysql.h'</tt>:</p>

<pre>
#if defined(_WIN32) || defined(_WIN64)
#include &lt;windows.h&gt;
#endif
#include &lt;mysql.h&gt;
</pre>

<p>You can either link your code with the dynamic
<tt>`libmysql.lib'</tt> library, which is just a wrapper to load in
<tt>`libmysql.dll'</tt> on demand, or link with the static
<tt>`mysqlclient.lib'</tt> library.</p>

<p>Note that as the mysqlclient libraries are compiled as threaded
libraries, you should also compile your code to be
multi-threaded!</p>

<h4><a id="Windows_vs_Unix" name="Windows_vs_Unix"
href="manual_toc.html#Windows_vs_Unix">2.6.2.7 MySQL-Windows
Compared to Unix MySQL</a></h4>

<p><a id="IDX332" name="IDX332"></a> <a id="IDX333"
name="IDX333"></a></p>

<p>MySQL-Windows has by now proven itself to be very stable. This
version of MySQL has the same features as the corresponding Unix
version with the following exceptions:</p>

<dl compact="compact">
<dt><strong>Windows 95 and threads</strong></dt>

<dd>Windows 95 leaks about 200 bytes of main memory for each thread
creation. Each connection in MySQL creates a new thread, so you
shouldn't run <code>mysqld</code> for an extended time on Windows
95 if your server handles many connections! Other versions of
Windows don't suffer from this bug.</dd>

<dt><strong>Concurrent reads</strong></dt>

<dd>MySQL depends on the <code>pread()</code> and
<code>pwrite()</code> calls to be able to mix <code>INSERT</code>
and <code>SELECT</code>. Currently we use mutexes to emulate
<code>pread()</code>/<code>pwrite()</code>. We will, in the long
run, replace the file level interface with a virtual interface so
that we can use the
<code>readfile()</code>/<code>writefile()</code> interface on
NT/2000/XP to get more speed. The current implementation limits the
number of open files MySQL can use to 1024, which means that you
will not be able to run as many concurrent threads on NT/2000/XP as
on Unix.</dd>

<dt><strong>Blocking read</strong></dt>

<dd>MySQL uses a blocking read for each connection. This means
that: 

<ul>
<li>A connection will not be disconnected automatically after 8
hours, as happens with the Unix version of MySQL.</li>

<li>If a connection hangs, it's impossible to break it without
killing MySQL.</li>

<li><code>mysqladmin kill</code> will not work on a sleeping
connection.</li>

<li><code>mysqladmin shutdown</code> can't abort as long as there
are sleeping connections.</li>
</ul>

We plan to fix this problem when our Windows developers have
figured out a nice workaround.</dd>

<dt><strong><code>DROP DATABASE</code></strong></dt>

<dd>You can't drop a database that is in use by some thread.</dd>

<dt><strong>Killing MySQL from the task manager</strong></dt>

<dd>You can't kill MySQL from the task manager or with the shutdown
utility in Windows 95. You must take it down with <code>mysqladmin
shutdown</code>.</dd>

<dt><strong>Case-insensitive names</strong></dt>

<dd>Filenames are case-insensitive on Windows, so database and
table names are also case-insensitive in MySQL for Windows. The
only restriction is that database and table names must be specified
using the same case throughout a given statement. See section <a
href="manual.html#Name_case_sensitivity">6.1.3 Case Sensitivity in
Names</a>.</dd>

<dt><strong>The <samp>`\'</samp> directory character</strong></dt>

<dd>Pathname components in Windows 95 are separated by the
<samp>`\'</samp> character, which is also the escape character in
MySQL. If you are using <code>LOAD DATA INFILE</code> or
<code>SELECT ... INTO OUTFILE</code>, you must double the
<samp>`\'</samp> character: 

<pre>
mysql&gt; LOAD DATA INFILE "C:\\tmp\\skr.txt" INTO TABLE skr;
mysql&gt; SELECT * INTO OUTFILE 'C:\\tmp\\skr.txt' FROM skr;
</pre>

Alternatively, use Unix style filenames with <samp>`/'</samp>
characters: 

<pre>
mysql&gt; LOAD DATA INFILE "C:/tmp/skr.txt" INTO TABLE skr;
mysql&gt; SELECT * INTO OUTFILE 'C:/tmp/skr.txt' FROM skr;
</pre>
</dd>

<dt><strong><code>Can't open named pipe</code> error</strong></dt>

<dd>If you use a MySQL 3.22 version on NT with the newest
mysql-clients you will get the following error: 

<pre>
error 2017: can't open named pipe to host: . pipe...
</pre>

<a id="IDX334" name="IDX334"></a> This is because the release
version of MySQL uses named pipes on NT by default. You can avoid
this error by using the <code>--host=localhost</code> option to the
new MySQL clients or create an option file <tt>`C:\my.cnf'</tt>
that contains the following information: 

<pre>
[client]
host = localhost
</pre>

Starting from 3.23.50, named pipes are only enabled if
<code>mysqld</code> is started with
<code>--enable-named-pipe</code>.</dd>

<dt><strong><code>Access denied for user</code> error</strong></dt>

<dd>If you get the error <code>Access denied for user:
'some-user@unknown' to database 'mysql'</code> when accessing a
MySQL server on the same machine, this means that MySQL can't
resolve your host name properly. To fix this, you should create a
file <tt>`\windows\hosts'</tt> with the following information: 

<pre>
127.0.0.1       localhost
</pre>
</dd>

<dt><strong><code>ALTER TABLE</code></strong></dt>

<dd>While you are executing an <code>ALTER TABLE</code> statement,
the table is locked from usage by other threads. This has to do
with the fact that on Windows, you can't delete a file that is in
use by another threads. (In the future, we may find some way to
work around this problem.)</dd>

<dd><code>DROP TABLE</code> on a table that is in use by a
<code>MERGE</code> table will not work on Windows because the
<code>MERGE</code> handler does the table mapping hidden from the
upper layer of MySQL. Because Windows doesn't allow you to drop
files that are open, you first must flush all <code>MERGE</code>
tables (with <code>FLUSH TABLES</code>) or drop the
<code>MERGE</code> table before dropping the table. We will fix
this at the same time we introduce <code>VIEW</code>s.</dd>

<dd><code>DATA DIRECTORY</code> and <code>INDEX DIRECTORY</code>
directives in <code>CREATE TABLE</code> is ignored on Windows,
because Windows doesn't support symbolic links.</dd>
</dl>

<p>Here are some open issues for anyone who might want to help us
with the Windows release:</p>

<p><a id="IDX335" name="IDX335"></a></p>

<ul>
<li>Make a single-user <code>MYSQL.DLL</code> server. This should
include everything in a standard MySQL server, except thread
creation. This will make MySQL much easier to use in applications
that don't need a true client/server and don't need to access the
server from other hosts.</li>

<li>Add some nice start and shutdown icons to the MySQL
installation.</li>

<li>When registering <code>mysqld</code> as a service with
<code>--install</code> (on NT) it would be nice if you could also
add default options on the command-line. For the moment, the
workaround is to list the parameters in the <tt>`C:\my.cnf'</tt>
file instead.</li>

<li>It would be really nice to be able to kill <code>mysqld</code>
from the task manager. For the moment, you must use
<code>mysqladmin shutdown</code>.</li>

<li>Port <code>readline</code> to Windows for use in the
<code>mysql</code> command-line tool.</li>

<li>GUI versions of the standard MySQL clients (<code>mysql</code>,
<code>mysqlshow</code>, <code>mysqladmin</code>, and
<code>mysqldump</code>) would be nice.</li>

<li>It would be nice if the socket read and write functions in
<tt>`net.c'</tt> were interruptible. This would make it possible to
kill open threads with <code>mysqladmin kill</code> on
Windows.</li>

<li><code>mysqld</code> always starts in the "C" locale and not in
the default locale. We would like to have <code>mysqld</code> use
the current locale for the sort order.</li>

<li>Add macros to use the faster thread-safe increment/decrement
methods provided by Windows.</li>
</ul>

<p>Other Windows-specific issues are described in the
<tt>`README'</tt> file that comes with the MySQL-Windows
distribution.</p>

<h3><a id="Solaris" name="Solaris"
href="manual_toc.html#Solaris">2.6.3 Solaris Notes</a></h3>

<p><a id="IDX336" name="IDX336"></a> <a id="IDX337"
name="IDX337"></a> <a id="IDX338" name="IDX338"></a> <a id="IDX339"
name="IDX339"></a> <a id="IDX340" name="IDX340"></a></p>

<p>On Solaris, you may run into trouble even before you get the
MySQL distribution unpacked! Solaris <code>tar</code> can't handle
long file names, so you may see an error like this when you unpack
MySQL:</p>

<pre>
x mysql-3.22.12-beta/bench/Results/ATIS-mysql_odbc-NT_4.0-cmp-db2,\
informix,ms-sql,mysql,oracle,solid,sybase, 0 bytes, 0 tape blocks
tar: directory checksum error
</pre>

<p>In this case, you must use GNU <code>tar</code>
(<code>gtar</code>) to unpack the distribution. You can find a
precompiled copy for Solaris at <a
href="http://www.mysql.com/downloads/os-solaris.html">http://www.mysql.com/downloads/os-solaris.html</a>.</p>

<p>Sun native threads work only on Solaris 2.5 and higher. For
Version 2.4 and earlier, MySQL will automatically use MIT-pthreads.
See section <a href="manual.html#MIT-pthreads">2.3.6 MIT-pthreads
Notes</a>.</p>

<p>If you get the following error from configure:</p>

<pre>
checking for restartable system calls... configure: error can not run test
programs while cross compiling
</pre>

<p>This means that you have something wrong with your compiler
installation! In this case you should upgrade your compiler to a
newer version. You may also be able to solve this problem by
inserting the following row into the <tt>`config.cache'</tt>
file:</p>

<pre>
ac_cv_sys_restartable_syscalls=${ac_cv_sys_restartable_syscalls='no'}
</pre>

<p>If you are using Solaris on a SPARC, the recommended compiler is
<code>gcc</code> 2.95.2. You can find this at <a
href="http://gcc.gnu.org/">http://gcc.gnu.org/</a>. Note that
<code>egcs</code> 1.1.1 and <code>gcc</code> 2.8.1 don't work
reliably on SPARC!</p>

<p>The recommended <code>configure</code> line when using
<code>gcc</code> 2.95.2 is:</p>

<pre>
CC=gcc CFLAGS="-O3" \
CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti" \
./configure --prefix=/usr/local/mysql --with-low-memory --enable-assembler
</pre>

<p>If you have an UltraSPARC, you can get 4% more performance by
adding "-mcpu=v8 -Wa,-xarch=v8plusa" to CFLAGS and CXXFLAGS.</p>

<p>If you have Sun's Forte 5.0 (or newer) compiler, you can run
<code>configure</code> like this:</p>

<pre>
CC=cc CFLAGS="-Xa -fast -native -xstrconst -mt" \
CXX=CC CXXFLAGS="-noex -mt" \
./configure --prefix=/usr/local/mysql --enable-assembler
</pre>

<p>You can create a 64 bit binary with:</p>

<pre>
CC=cc CFLAGS="-Xa -fast -native -xstrconst -mt -xarch=v9" \
CXX=CC CXXFLAGS="-noex -mt -xarch=v9" ASFLAGS="-xarch=v9" \
./configure --prefix=/usr/local/mysql --enable-assembler
</pre>

<p>In the MySQL benchmarks, we got a 4% speedup on an UltraSPARC
when using Forte 5.0 in 32 bit mode compared to using gcc 3.2 with
-mcpu flags.</p>

<p>If you create a 64 bit binary, it's 4 % slower than the 32 bit
binary, but mysqld can instead handle more treads and memory.</p>

<p>If you get a problem with <code>fdatasync</code> or
<code>sched_yield</code>, you can fix this by adding
<code>LIBS=-lrt</code> to the configure line</p>

<p>The following paragraph is only relevant for older compilers
than WorkShop 5.3:</p>

<p>You may also have to edit the <code>configure</code> script to
change this line:</p>

<pre>
#if !defined(__STDC__) || __STDC__ != 1
</pre>

<p>to this:</p>

<pre>
#if !defined(__STDC__)
</pre>

<p>If you turn on <code>__STDC__</code> with the <code>-Xc</code>
option, the Sun compiler can't compile with the Solaris
<tt>`pthread.h'</tt> header file. This is a Sun bug (broken
compiler or broken include file).</p>

<p>If <code>mysqld</code> issues the error message shown here when
you run it, you have tried to compile MySQL with the Sun compiler
without enabling the multi-thread option (<code>-mt</code>):</p>

<pre>
libc internal error: _rmutex_unlock: rmutex not held
</pre>

<p>Add <code>-mt</code> to <code>CFLAGS</code> and
<code>CXXFLAGS</code> and try again.</p>

<p>If you are using the SFW version of gcc (which comes with
Solaris 8), you must add <tt>`/opt/sfw/lib'</tt> to the environment
variable <code>LD_LIBRARY_PATH</code> before running configure.</p>

<p>If you are using the gcc available from
<code>sunfreeware.com</code>, you may have many problems. You
should recompile gcc and GNU binutils on the machine you will be
running them from to avoid any problems.</p>

<p>If you get the following error when compiling MySQL with
<code>gcc</code>, it means that your <code>gcc</code> is not
configured for your version of Solaris:</p>

<pre>
shell&gt; gcc -O3 -g -O2 -DDBUG_OFF  -o thr_alarm ...
./thr_alarm.c: In function `signal_hand':
./thr_alarm.c:556: too many arguments to function `sigwait'
</pre>

<p>The proper thing to do in this case is to get the newest version
of <code>gcc</code> and compile it with your current
<code>gcc</code> compiler! At least for Solaris 2.5, almost all
binary versions of <code>gcc</code> have old, unusable include
files that will break all programs that use threads (and possibly
other programs)!</p>

<p>Solaris doesn't provide static versions of all system libraries
(<code>libpthreads</code> and <code>libdl</code>), so you can't
compile MySQL with <code>--static</code>. If you try to do so, you
will get the error:</p>

<pre>
ld: fatal: library -ldl: not found

or

undefined reference to `dlopen'

or

cannot find -lrt
</pre>

<p>If too many processes try to connect very rapidly to
<code>mysqld</code>, you will see this error in the MySQL log:</p>

<pre>
Error in accept: Protocol error
</pre>

<p>You might try starting the server with the <code>--set-variable
back_log=50</code> option as a workaround for this. Please note
that <code>--set-variable</code> is deprecated since MySQL 4.0,
just use <code>--back_log=50</code> on its own. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</p>

<p>If you are linking your own MySQL client, you might get the
following error when you try to execute it:</p>

<pre>
ld.so.1: ./my: fatal: libmysqlclient.so.#:
open failed: No such file or directory
</pre>

<p>The problem can be avoided by one of the following methods:</p>

<ul>
<li>Link the client with the following flag (instead of
<code>-Lpath</code>):
<code>-Wl,r/full-path-to-libmysqlclient.so</code>.</li>

<li>Copy <tt>`libmysqclient.so'</tt> to <tt>`/usr/lib'</tt>. <a
id="IDX341" name="IDX341"></a> <a id="IDX342"
name="IDX342"></a></li>

<li>Add the pathname of the directory where
<tt>`libmysqlclient.so'</tt> is located to the
<code>LD_RUN_PATH</code> environment variable before running your
client.</li>
</ul>

<p>If you have problems with configure trying to link with
<code>-lz</code> and you don't have <code>zlib</code> installed,
you have two options:</p>

<ul>
<li>If you want to be able to use the compressed communication
protocol, you need to get and install zlib from ftp.gnu.org.</li>

<li>Configure with <code>--with-named-z-libs=no</code>.</li>
</ul>

<p>If you are using gcc and have problems with loading
<code>UDF</code> functions into MySQL, try adding
<code>-lgcc</code> to the link line for the <code>UDF</code>
function.</p>

<p>If you would like MySQL to start automatically, you can copy
<tt>`support-files/mysql.server'</tt> to <tt>`/etc/init.d'</tt> and
create a symbolic link to it named
<tt>`/etc/rc3.d/S99mysql.server'</tt>.</p>

<p>As Solaris doesn't support core files for <code>setuid()</code>
applications, you can't get a core file from <code>mysqld</code> if
you are using the <code>--user</code> option.</p>

<h4><a id="Solaris_2.7" name="Solaris_2.7"
href="manual_toc.html#Solaris_2.7">2.6.3.1 Solaris 2.7/2.8
Notes</a></h4>

<p>You can normally use a Solaris 2.6 binary on Solaris 2.7 and
2.8. Most of the Solaris 2.6 issues also apply for Solaris 2.7 and
2.8.</p>

<p>Note that MySQL Version 3.23.4 and above should be able to
autodetect new versions of Solaris and enable workarounds for the
following problems!</p>

<p>Solaris 2.7 / 2.8 has some bugs in the include files. You may
see the following error when you use <code>gcc</code>:</p>

<pre>
/usr/include/widec.h:42: warning: `getwc' redefined
/usr/include/wchar.h:326: warning: this is the location of the previous
definition
</pre>

<p>If this occurs, you can do the following to fix the problem:</p>

<p>Copy <code>/usr/include/widec.h</code> to
<code>.../lib/gcc-lib/os/gcc-version/include</code> and change line
41 from:</p>

<pre>
#if     !defined(lint) &amp;&amp; !defined(__lint)

to

#if     !defined(lint) &amp;&amp; !defined(__lint) &amp;&amp; !defined(getwc)
</pre>

<p>Alternatively, you can edit <tt>`/usr/include/widec.h'</tt>
directly. Either way, after you make the fix, you should remove
<tt>`config.cache'</tt> and run <code>configure</code> again!</p>

<p>If you get errors like this when you run <code>make</code>, it's
because <code>configure</code> didn't detect the
<tt>`curses.h'</tt> file (probably because of the error in
<tt>`/usr/include/widec.h'</tt>):</p>

<pre>
In file included from mysql.cc:50:
/usr/include/term.h:1060: syntax error before `,'
/usr/include/term.h:1081: syntax error before `;'
</pre>

<p>The solution to this is to do one of the following:</p>

<ul>
<li>Configure with <code>CFLAGS=-DHAVE_CURSES_H
CXXFLAGS=-DHAVE_CURSES_H ./configure</code>.</li>

<li>Edit <tt>`/usr/include/widec.h'</tt> as indicted above and
rerun configure.</li>

<li>Remove the <code>#define HAVE_TERM</code> line from
<tt>`config.h'</tt> file and run <code>make</code> again.</li>
</ul>

<p>If you get a problem that your linker can't find
<code>-lz</code> when linking your client program, the problem is
probably that your <tt>`libz.so'</tt> file is installed in
<tt>`/usr/local/lib'</tt>. You can fix this by one of the following
methods:</p>

<ul>
<li>Add <tt>`/usr/local/lib'</tt> to
<code>LD_LIBRARY_PATH</code>.</li>

<li>Add a link to <tt>`libz.so'</tt> from <tt>`/lib'</tt>.</li>

<li>If you are using Solaris 8, you can install the optional zlib
from your Solaris 8 CD distribution.</li>

<li>Configure MySQL with the <code>--with-named-z-libs=no</code>
option.</li>
</ul>

<h4><a id="Solaris_x86" name="Solaris_x86"
href="manual_toc.html#Solaris_x86">2.6.3.2 Solaris x86
Notes</a></h4>

<p>On Solaris 2.8 on x86, <code>mysqld</code> will core dump if you
run 'strip' in.</p>

<p>If you are using <code>gcc</code> or <code>egcs</code> on
Solaris x86 and you experience problems with core dumps under load,
you should use the following <code>configure</code> command:</p>

<pre>
CC=gcc CFLAGS="-O3 -fomit-frame-pointer -DHAVE_CURSES_H" \
CXX=gcc \
CXXFLAGS="-O3 -fomit-frame-pointer -felide-constructors -fno-exceptions \
-fno-rtti -DHAVE_CURSES_H" \
./configure --prefix=/usr/local/mysql
</pre>

<p>This will avoid problems with the <code>libstdc++</code> library
and with C++ exceptions.</p>

<p>If this doesn't help, you should compile a debug version and run
it with a trace file or under <code>gdb</code>. See section <a
href="manual.html#Using_gdb_on_mysqld">E.1.3 Debugging mysqld under
gdb</a>.</p>

<h3><a id="BSD_Notes" name="BSD_Notes"
href="manual_toc.html#BSD_Notes">2.6.4 BSD Notes</a></h3>

<p>This section provides information for the various BSD flavours,
as well as specific versions within those.</p>

<h4><a id="FreeBSD" name="FreeBSD"
href="manual_toc.html#FreeBSD">2.6.4.1 FreeBSD Notes</a></h4>

<p>FreeBSD 3.x is recommended for running MySQL since the thread
package is much more integrated.</p>

<p>The easiest and therefore the preferred way to install is to use
the mysql-server and mysql-client ports available on <a
href="http://www.freebsd.org/">http://www.freebsd.org/</a>.</p>

<p>Using these gives you:</p>

<ul>
<li>A working MySQL with all optimisations known to work on your
version of FreeBSD enabled.</li>

<li>Automatic configuration and build.</li>

<li>Startup scripts installed in /usr/local/etc/rc.d.</li>

<li>Ability to see which files that are installed with pkg_info -L.
And to remove them all with pkg_delete if you no longer want MySQL
on that machine.</li>
</ul>

<p>It is recommended you use MIT-pthreads on FreeBSD 2.x and native
threads on Versions 3 and up. It is possible to run with native
threads on some late 2.2.x versions but you may encounter problems
shutting down <code>mysqld</code>.</p>

<p>The MySQL <tt>`Makefile'</tt>s require GNU make
(<code>gmake</code>) to work. If you want to compile MySQL you need
to install GNU <code>make</code> first.</p>

<p>Be sure to have your name resolver setup correct. Otherwise, you
may experience resolver delays or failures when connecting to
<code>mysqld</code>.</p>

<p>Make sure that the <code>localhost</code> entry in the
<tt>`/etc/hosts'</tt> file is correct (otherwise, you will have
problems connecting to the database). The <tt>`/etc/hosts'</tt>
file should start with a line:</p>

<pre>
127.0.0.1       localhost localhost.your.domain
</pre>

<p>The recommended way to compile and install MySQL on FreeBSD with
gcc (2.95.2 and up) is:</p>

<pre>
CC=gcc CFLAGS="-O2 -fno-strength-reduce" \
CXX=gcc CXXFLAGS="-O2 -fno-rtti -fno-exceptions -felide-constructors \
-fno-strength-reduce" \
./configure --prefix=/usr/local/mysql --enable-assembler
gmake
gmake install
./scripts/mysql_install_db
cd /usr/local/mysql
./bin/mysqld_safe &amp;
</pre>

<p>If you notice that <code>configure</code> will use MIT-pthreads,
you should read the MIT-pthreads notes. See section <a
href="manual.html#MIT-pthreads">2.3.6 MIT-pthreads Notes</a>.</p>

<p>If you get an error from <code>make install</code> that it can't
find <tt>`/usr/include/pthreads'</tt>, <code>configure</code>
didn't detect that you need MIT-pthreads. This is fixed by
executing these commands:</p>

<pre>
shell&gt; rm config.cache
shell&gt; ./configure --with-mit-threads
</pre>

<p>FreeBSD is also known to have a very low default file handle
limit. See section <a
href="manual.html#Not_enough_file_handles">A.2.16 File Not
Found</a>. Uncomment the ulimit -n section in safe_mysqld or raise
the limits for the <code>mysqld</code> user in /etc/login.conf (and
rebuild it with cap_mkdb /etc/login.conf). Also be sure you set the
appropriate class for this user in the password file if you are not
using the default (use: chpass mysqld-user-name). See section <a
href="manual.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>, The
Wrapper Around <code>mysqld</code></a>.</p>

<p>If you have a lot of memory you should consider rebuilding the
kernel to allow MySQL to take more than 512M of RAM. Take a look at
<code>option MAXDSIZ</code> in the LINT config file for more
info.</p>

<p>If you get problems with the current date in MySQL, setting the
<code>TZ</code> variable will probably help. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</p>

<p>To get a secure and stable system you should only use FreeBSD
kernels that are marked <code>-RELEASE</code>.</p>

<h4><a id="NetBSD" name="NetBSD"
href="manual_toc.html#NetBSD">2.6.4.2 NetBSD notes</a></h4>

<p>To compile on NetBSD you need GNU <code>make</code>. Otherwise,
the compile will crash when <code>make</code> tries to run
<code>lint</code> on C++ files.</p>

<h4><a id="OpenBSD" name="OpenBSD"
href="manual_toc.html#OpenBSD">2.6.4.3 OpenBSD 2.5 Notes</a></h4>

<p>On OpenBSD Version 2.5, you can compile MySQL with native
threads with the following options:</p>

<pre>
CFLAGS=-pthread CXXFLAGS=-pthread ./configure --with-mit-threads=no
</pre>

<h4><a id="OpenBSD_2.8" name="OpenBSD_2.8"
href="manual_toc.html#OpenBSD_2.8">2.6.4.4 OpenBSD 2.8
Notes</a></h4>

<p>Our users have reported that OpenBSD 2.8 has a threading bug
which causes problems with MySQL. The OpenBSD Developers have fixed
the problem, but as of January 25th, 2001, it's only available in
the ``-current'' branch. The symptoms of this threading bug are:
slow response, high load, high CPU usage, and crashes.</p>

<p>If you get an error like <code>Error in accept:: Bad file
descriptor</code> or error 9 when trying to open tables or
directories, the problem is probably that you haven't allocated
enough file descriptors for MySQL.</p>

<p>In this case try starting <code>safe_mysqld</code> as root with
the following options:</p>

<p><code>--user=mysql --open-files-limit=2048</code></p>

<h4><a id="BSDI" name="BSDI" href="manual_toc.html#BSDI">2.6.4.5
BSD/OS Version 2.x Notes</a></h4>

<p>If you get the following error when compiling MySQL, your
<code>ulimit</code> value for virtual memory is too low:</p>

<pre>
item_func.h: In method `Item_func_ge::Item_func_ge(const Item_func_ge &amp;)':
item_func.h:28: virtual memory exhausted
make[2]: *** [item_func.o] Error 1
</pre>

<p>Try using <code>ulimit -v 80000</code> and run <code>make</code>
again. If this doesn't work and you are using <code>bash</code>,
try switching to <code>csh</code> or <code>sh</code>; some BSDI
users have reported problems with <code>bash</code> and
<code>ulimit</code>.</p>

<p>If you are using <code>gcc</code>, you may also use have to use
the <code>--with-low-memory</code> flag for <code>configure</code>
to be able to compile <tt>`sql_yacc.cc'</tt>.</p>

<p>If you get problems with the current date in MySQL, setting the
<code>TZ</code> variable will probably help. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</p>

<h4><a id="BSDI3" name="BSDI3" href="manual_toc.html#BSDI3">2.6.4.6
BSD/OS Version 3.x Notes</a></h4>

<p>Upgrade to BSD/OS Version 3.1. If that is not possible, install
BSDIpatch M300-038.</p>

<p>Use the following command when configuring MySQL:</p>

<pre>
shell&gt; env CXX=shlicc++ CC=shlicc2 \
       ./configure \
           --prefix=/usr/local/mysql \
           --localstatedir=/var/mysql \
           --without-perl \
           --with-unix-socket-path=/var/mysql/mysql.sock
</pre>

<p>The following is also known to work:</p>

<pre>
shell&gt; env CC=gcc CXX=gcc CXXFLAGS=-O3 \
       ./configure \
           --prefix=/usr/local/mysql \
           --with-unix-socket-path=/var/mysql/mysql.sock
</pre>

<p>You can change the directory locations if you wish, or just use
the defaults by not specifying any locations.</p>

<p>If you have problems with performance under heavy load, try
using the <code>--skip-thread-priority</code> option to
<code>mysqld</code>! This will run all threads with the same
priority; on BSDI Version 3.1, this gives better performance (at
least until BSDI fixes their thread scheduler).</p>

<p>If you get the error <code>virtual memory exhausted</code> while
compiling, you should try using <code>ulimit -v 80000</code> and
run <code>make</code> again. If this doesn't work and you are using
<code>bash</code>, try switching to <code>csh</code> or
<code>sh</code>; some BSDI users have reported problems with
<code>bash</code> and <code>ulimit</code>.</p>

<h4><a id="BSDI4" name="BSDI4" href="manual_toc.html#BSDI4">2.6.4.7
BSD/OS Version 4.x Notes</a></h4>

<p>BSDI Version 4.x has some thread-related bugs. If you want to
use MySQL on this, you should install all thread-related patches.
At least M400-023 should be installed.</p>

<p>On some BSDI Version 4.x systems, you may get problems with
shared libraries. The symptom is that you can't execute any client
programs, for example, <code>mysqladmin</code>. In this case you
need to reconfigure not to use shared libraries with the
<code>--disable-shared</code> option to configure.</p>

<p>Some customers have had problems on BSDI 4.0.1 that the
<code>mysqld</code> binary after a while can't open tables. This is
because some library/system related bug causes <code>mysqld</code>
to change current directory without asking for this!</p>

<p>The fix is to either upgrade to 3.23.34 or after running
<code>configure</code> remove the line <code>#define
HAVE_REALPATH</code> from <code>config.h</code> before running
make.</p>

<p>Note that the above means that you can't symbolic link a
database directories to another database directory or symbolic link
a table to another database on BSDI! (Making a symbolic link to
another disk is okay).</p>

<h3><a id="Mac_OS_X" name="Mac_OS_X"
href="manual_toc.html#Mac_OS_X">2.6.5 Mac OS X Notes</a></h3>

<h4><a id="Mac_OS_X_Public_Beta" name="Mac_OS_X_Public_Beta"
href="manual_toc.html#Mac_OS_X_Public_Beta">2.6.5.1 Mac OS X Public
Beta</a></h4>

<p>MySQL should work without any problems on Mac OS X Public Beta
(Darwin). You don't need the pthread patches for this OS!</p>

<h4><a id="Mac_OS_X_Server" name="Mac_OS_X_Server"
href="manual_toc.html#Mac_OS_X_Server">2.6.5.2 Mac OS X
Server</a></h4>

<p>Before trying to configure MySQL on Mac OS X server you must
first install the pthread package from <a
href="http://www.prnet.de/RegEx/mysql.html">http://www.prnet.de/RegEx/mysql.html</a>.</p>

<p>Our binary for Mac OS X is compiled on Rhapsody 5.5 with the
following configure line:</p>

<pre>
CC=gcc CFLAGS="-O2 -fomit-frame-pointer" CXX=gcc CXXFLAGS="-O2 \
-fomit-frame-pointer" ./configure --prefix=/usr/local/mysql \
"--with-comment=Official MySQL binary" --with-extra-charsets=complex \
--disable-shared
</pre>

<p>You might want to also add aliases to your shell's resource file
to access <code>mysql</code> and <code>mysqladmin</code> from the
command-line:</p>

<pre>
alias mysql '/usr/local/mysql/bin/mysql'
alias mysqladmin '/usr/local/mysql/bin/mysqladmin'
</pre>

<h3><a id="Other_Unix_Notes" name="Other_Unix_Notes"
href="manual_toc.html#Other_Unix_Notes">2.6.6 Other Unix
Notes</a></h3>

<h4><a id="Binary_notes-HP-UX" name="Binary_notes-HP-UX"
href="manual_toc.html#Binary_notes-HP-UX">2.6.6.1 HP-UX Notes for
Binary Distributions</a></h4>

<p><a id="IDX343" name="IDX343"></a> <a id="IDX344"
name="IDX344"></a></p>

<p>Some of the binary distributions of MySQL for HP-UX is
distributed as an HP depot file and as a tar file. To use the depot
file you must be running at least HP-UX 10.x to have access to HP's
software depot tools.</p>

<p>The HP version of MySQL was compiled on an HP 9000/8xx server
under HP-UX 10.20, and uses MIT-pthreads. It is known to work well
under this configuration. MySQL Version 3.22.26 and newer can also
be built with HP's native thread package.</p>

<p>Other configurations that may work:</p>

<ul>
<li>HP 9000/7xx running HP-UX 10.20+</li>

<li>HP 9000/8xx running HP-UX 10.30</li>
</ul>

<p>The following configurations almost definitely won't work:</p>

<ul>
<li>HP 9000/7xx or 8xx running HP-UX 10.x where x &lt; 2</li>

<li>HP 9000/7xx or 8xx running HP-UX 9.x</li>
</ul>

<p>To install the distribution, use one of the commands here, where
<code>/path/to/depot</code> is the full pathname of the depot
file:</p>

<ul>
<li>To install everything, including the server, client and
development tools: 

<pre>
shell&gt; /usr/sbin/swinstall -s /path/to/depot mysql.full
</pre>
</li>

<li>To install only the server: 

<pre>
shell&gt; /usr/sbin/swinstall -s /path/to/depot mysql.server
</pre>
</li>

<li>To install only the client package: 

<pre>
shell&gt; /usr/sbin/swinstall -s /path/to/depot mysql.client
</pre>
</li>

<li>To install only the development tools: 

<pre>
shell&gt; /usr/sbin/swinstall -s /path/to/depot mysql.developer
</pre>
</li>
</ul>

<p>The depot places binaries and libraries in <tt>`/opt/mysql'</tt>
and data in <tt>`/var/opt/mysql'</tt>. The depot also creates the
appropriate entries in <tt>`/etc/init.d'</tt> and
<tt>`/etc/rc2.d'</tt> to start the server automatically at boot
time. Obviously, this entails being <code>root</code> to
install.</p>

<p>To install the HP-UX tar.gz distribution, you must have a copy
of GNU <code>tar</code>.</p>

<h4><a id="HP-UX_10.20" name="HP-UX_10.20"
href="manual_toc.html#HP-UX_10.20">2.6.6.2 HP-UX Version 10.20
Notes</a></h4>

<p>There are a couple of small problems when compiling MySQL on
HP-UX. We recommend that you use <code>gcc</code> instead of the
HP-UX native compiler, because <code>gcc</code> produces better
code!</p>

<p>We recommend using gcc 2.95 on HP-UX. Don't use high
optimisation flags (like -O6) as this may not be safe on HP-UX.</p>

<p>The following configure line should work with gcc 2.95:</p>

<pre>
CFLAGS="-I/opt/dce/include -fpic" \
CXXFLAGS="-I/opt/dce/include -felide-constructors -fno-exceptions \
-fno-rtti" CXX=gcc ./configure --with-pthread \
--with-named-thread-libs='-ldce' --prefix=/usr/local/mysql --disable-shared
</pre>

<p>The following configure line should work with gcc 3.1:</p>

<pre>
CFLAGS="-DHPUX -I/opt/dce/include -O3 -fPIC" CXX=gcc \
CXXFLAGS="-DHPUX -I/opt/dce/include -felide-constructors -fno-exceptions \
-fno-rtti -O3 -fPIC" ./configure --prefix=/usr/local/mysql \
--with-extra-charsets=complex --enable-thread-safe-client \
--enable-local-infile  --with-pthread \
--with-named-thread-libs=-ldce --with-lib-ccflags=-fPIC
--disable-shared
</pre>

<h4><a id="HP-UX_11.x" name="HP-UX_11.x"
href="manual_toc.html#HP-UX_11.x">2.6.6.3 HP-UX Version 11.x
Notes</a></h4>

<p>For HP-UX Version 11.x we recommend MySQL Version 3.23.15 or
later.</p>

<p>Because of some critical bugs in the standard HP-UX libraries,
you should install the following patches before trying to run MySQL
on HP-UX 11.0:</p>

<pre>
PHKL_22840 Streams cumulative
PHNE_22397 ARPA cumulative
</pre>

<p>This will solve the problem of getting <code>EWOULDBLOCK</code>
from <code>recv()</code> and <code>EBADF</code> from
<code>accept()</code> in threaded applications.</p>

<p>If you are using <code>gcc</code> 2.95.1 on an unpatched HP-UX
11.x system, you will get the error:</p>

<pre>
In file included from /usr/include/unistd.h:11,
                 from ../include/global.h:125,
                 from mysql_priv.h:15,
                 from item.cc:19:
/usr/include/sys/unistd.h:184: declaration of C function ...
/usr/include/sys/pthread.h:440: previous declaration ...
In file included from item.h:306,
                 from mysql_priv.h:158,
                 from item.cc:19:
</pre>

<p>The problem is that HP-UX doesn't define
<code>pthreads_atfork()</code> consistently. It has conflicting
prototypes in <tt>`/usr/include/sys/unistd.h'</tt>:184 and
<tt>`/usr/include/sys/pthread.h'</tt>:440 (details below).</p>

<p>One solution is to copy <tt>`/usr/include/sys/unistd.h'</tt>
into <tt>`mysql/include'</tt> and edit <tt>`unistd.h'</tt> and
change it to match the definition in <tt>`pthread.h'</tt>. Here's
the diff:</p>

<pre>
183,184c183,184
&lt;      extern int pthread_atfork(void (*prepare)(), void (*parent)(),
&lt;                                                void (*child)());
---
&gt;      extern int pthread_atfork(void (*prepare)(void), void (*parent)(void),
&gt;                                                void (*child)(void));
</pre>

<p>After this, the following configure line should work:</p>

<pre>
CFLAGS="-fomit-frame-pointer -O3 -fpic" CXX=gcc \
CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti -O3" \
./configure --prefix=/usr/local/mysql --disable-shared
</pre>

<p>If you are using MySQL 4.0.5 with the HP-UX compiler you can
use: (tested with cc B.11.11.04):</p>

<pre>
CC=cc CXX=aCC CFLAGS=+DD64 CXXFLAGS=+DD64 ./configure --with-extra-character-set=complex
</pre>

<p>You can ignore any errors of the following type:</p>

<pre>
aCC: warning 901: unknown option: `-3': use +help for online documentation
</pre>

<p>If you get the following error from <code>configure</code></p>

<pre>
checking for cc option to accept ANSI C... no
configure: error: MySQL requires a ANSI C compiler (and a C++ compiler).
Try gcc. See the Installation chapter in the Reference Manual.
</pre>

<p>Check that you don't have the path to the K&amp;R compiler
before the path to the HP-UX C and C++ compiler.</p>

<p>Another reason for not beeing able to compile is that you didn't
define the <code>+DD64</code> flags above.</p>

<h4><a id="IBM-AIX" name="IBM-AIX"
href="manual_toc.html#IBM-AIX">2.6.6.4 IBM-AIX notes</a></h4>

<p><a id="IDX345" name="IDX345"></a></p>

<p>Automatic detection of <code>xlC</code> is missing from
Autoconf, so a <code>configure</code> command something like this
is needed when compiling MySQL (This example uses the IBM
compiler):</p>

<pre>
export CC="xlc_r -ma -O3 -qstrict -qoptimize=3 -qmaxmem=8192 "
export CXX="xlC_r -ma -O3 -qstrict -qoptimize=3 -qmaxmem=8192"
export CFLAGS="-I /usr/local/include"
export LDFLAGS="-L /usr/local/lib"
export CPPFLAGS=$CFLAGS
export CXXFLAGS=$CFLAGS

./configure --prefix=/usr/local \
        --localstatedir=/var/mysql \
        --sysconfdir=/etc/mysql \
        --sbindir='/usr/local/bin' \
        --libexecdir='/usr/local/bin' \
        --enable-thread-safe-client \
        --enable-large-files
</pre>

<p>Above are the options used to compile the MySQL distribution
that can be found at <a
href="http://www-frec.bull.com/">http://www-frec.bull.com/</a>.</p>

<p>If you change the <code>-O3</code> to <code>-O2</code> in the
above configure line, you must also remove the
<code>-qstrict</code> option (this is a limitation in the IBM C
compiler).</p>

<p>If you are using <code>gcc</code> or <code>egcs</code> to
compile MySQL, you <strong>must</strong> use the
<code>-fno-exceptions</code> flag, as the exception handling in
<code>gcc</code>/<code>egcs</code> is not thread-safe! (This is
tested with <code>egcs</code> 1.1.) There are also some known
problems with IBM's assembler, which may cause it to generate bad
code when used with gcc.</p>

<p>We recommend the following <code>configure</code> line with
<code>egcs</code> and <code>gcc 2.95</code> on AIX:</p>

<pre>
CC="gcc -pipe -mcpu=power -Wa,-many" \
CXX="gcc -pipe -mcpu=power -Wa,-many" \
CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti" \
./configure --prefix=/usr/local/mysql --with-low-memory
</pre>

<p>The <code>-Wa,-many</code> is necessary for the compile to be
successful. IBM is aware of this problem but is in to hurry to fix
it because of the workaround available. We don't know if the
<code>-fno-exceptions</code> is required with <code>gcc
2.95</code>, but as MySQL doesn't use exceptions and the above
option generates faster code, we recommend that you should always
use this option with <code>egcs / gcc</code>.</p>

<p>If you get a problem with assembler code try changing the
-mcpu=xxx to match your CPU. Typically power2, power, or powerpc
may need to be used, alternatively you might need to use 604 or
604e. I'm not positive but I would think using "power" would likely
be safe most of the time, even on a power2 machine.</p>

<p>If you don't know what your CPU is then do a "uname -m", this
will give you back a string that looks like "000514676700", with a
format of xxyyyyyymmss where xx and ss are always 0's, yyyyyy is a
unique system id and mm is the id of the CPU Planar. A chart of
these values can be found at <a
href="http://publib.boulder.ibm.com/doc_link/en_US/a_doc_lib/cmds/aixcmds5/uname.htm">
http://publib.boulder.ibm.com/doc_link/en_US/a_doc_lib/cmds/aixcmds5/uname.htm</a>.
This will give you a machine type and a machine model you can use
to determine what type of CPU you have.</p>

<p>If you have problems with signals (MySQL dies unexpectedly under
high load) you may have found an OS bug with threads and signals.
In this case you can tell MySQL not to use signals by configuring
with:</p>

<pre>
shell&gt; CFLAGS=-DDONT_USE_THR_ALARM CXX=gcc \
       CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti \
       -DDONT_USE_THR_ALARM" \
       ./configure --prefix=/usr/local/mysql --with-debug --with-low-memory
</pre>

<p>This doesn't affect the performance of MySQL, but has the side
effect that you can't kill clients that are ``sleeping'' on a
connection with <code>mysqladmin kill</code> or <code>mysqladmin
shutdown</code>. Instead, the client will die when it issues its
next command.</p>

<p>On some versions of AIX, linking with <code>libbind.a</code>
makes <code>getservbyname</code> core dump. This is an AIX bug and
should be reported to IBM.</p>

<p>For AIX 4.2.1 and gcc you have to do the following changes.</p>

<p>After configuring, edit <tt>`config.h'</tt> and
<tt>`include/my_config.h'</tt> and change the line that says</p>

<pre>
#define HAVE_SNPRINTF 1
</pre>

<p>to</p>

<pre>
#undef HAVE_SNPRINTF
</pre>

<p>And finally, in <tt>`mysqld.cc'</tt> you need to add a prototype
for initgoups.</p>

<pre>
#ifdef _AIX41
extern "C" int initgroups(const char *,int);
#endif
</pre>

<p>If you need to allocate a lot of memory to the mysqld process,
it's not enough to just set 'ulimit -d unlimited'. You may also
have to set in <code>mysqld_safe</code> something like:</p>

<pre>
export LDR_CNTRL='MAXDATA=0x80000000'
</pre>

<p>You can find more about using a lot of memory at: <a
href="http://publib16.boulder.ibm.com/pseries/en_US/aixprggd/genprogc/lrg_prg_support.htm">
http://publib16.boulder.ibm.com/pseries/en_US/aixprggd/genprogc/lrg_prg_support.htm</a>.</p>

<h4><a id="SunOS" name="SunOS" href="manual_toc.html#SunOS">2.6.6.5
SunOS 4 Notes</a></h4>

<p>On SunOS 4, MIT-pthreads is needed to compile MySQL, which in
turn means you will need GNU <code>make</code>.</p>

<p>Some SunOS 4 systems have problems with dynamic libraries and
<code>libtool</code>. You can use the following
<code>configure</code> line to avoid this problem:</p>

<pre>
shell&gt; ./configure --disable-shared --with-mysqld-ldflags=-all-static
</pre>

<p>When compiling <code>readline</code>, you may get warnings about
duplicate defines. These may be ignored.</p>

<p>When compiling <code>mysqld</code>, there will be some
<code>implicit declaration of function</code> warnings. These may
be ignored.</p>

<h4><a id="Alpha-DEC-UNIX" name="Alpha-DEC-UNIX"
href="manual_toc.html#Alpha-DEC-UNIX">2.6.6.6 Alpha-DEC-UNIX Notes
(Tru64)</a></h4>

<p>If you are using egcs 1.1.2 on Digital Unix, you should upgrade
to gcc 2.95.2, as egcs on DEC has some serious bugs!</p>

<p>When compiling threaded programs under Digital Unix, the
documentation recommends using the <code>-pthread</code> option for
<code>cc</code> and <code>cxx</code> and the libraries <code>-lmach
-lexc</code> (in addition to <code>-lpthread</code>). You should
run <code>configure</code> something like this:</p>

<pre>
CC="cc -pthread" CXX="cxx -pthread -O" \
./configure --with-named-thread-libs="-lpthread -lmach -lexc -lc"
</pre>

<p>When compiling <code>mysqld</code>, you may see a couple of
warnings like this:</p>

<pre>
mysqld.cc: In function void handle_connections()':
mysqld.cc:626: passing long unsigned int *' as argument 3 of
accept(int,sockadddr *, int *)'
</pre>

<p>You can safely ignore these warnings. They occur because
<code>configure</code> can detect only errors, not warnings.</p>

<p>If you start the server directly from the command-line, you may
have problems with it dying when you log out. (When you log out,
your outstanding processes receive a <code>SIGHUP</code> signal.)
If so, try starting the server like this:</p>

<pre>
shell&gt; nohup mysqld [options] &amp;
</pre>

<p><code>nohup</code> causes the command following it to ignore any
<code>SIGHUP</code> signal sent from the terminal. Alternatively,
start the server by running <code>safe_mysqld</code>, which invokes
<code>mysqld</code> using <code>nohup</code> for you. See section
<a href="manual.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>,
The Wrapper Around <code>mysqld</code></a>.</p>

<p>If you get a problem when compiling mysys/get_opt.c, just remove
the line #define _NO_PROTO from the start of that file!</p>

<p>If you are using Compac's CC compiler, the following configure
line should work:</p>

<pre>
CC="cc -pthread"
CFLAGS="-O4 -ansi_alias -ansi_args -fast -inline speed all -arch host"
CXX="cxx -pthread"
CXXFLAGS="-O4 -ansi_alias -ansi_args -fast -inline speed all -arch host \
-noexceptions -nortti"
export CC CFLAGS CXX CXXFLAGS
./configure \
--prefix=/usr/local/mysql \
--with-low-memory \
--enable-large-files \
--enable-shared=yes \
--with-named-thread-libs="-lpthread -lmach -lexc -lc"
gnumake
</pre>

<p>If you get a problem with libtool, when compiling with shared
libraries as above, when linking <code>mysql</code>, you should be
able to get around this by issuing:</p>

<pre>
cd mysql
/bin/sh ../libtool --mode=link cxx -pthread  -O3 -DDBUG_OFF \
-O4 -ansi_alias -ansi_args -fast -inline speed \
-speculate all \ -arch host  -DUNDEF_HAVE_GETHOSTBYNAME_R \
-o mysql  mysql.o readline.o sql_string.o completion_hash.o \
../readline/libreadline.a -lcurses \
../libmysql/.libs/libmysqlclient.so  -lm
cd ..
gnumake
gnumake install
scripts/mysql_install_db
</pre>

<h4><a id="Alpha-DEC-OSF1" name="Alpha-DEC-OSF1"
href="manual_toc.html#Alpha-DEC-OSF1">2.6.6.7 Alpha-DEC-OSF/1
Notes</a></h4>

<p>If you have problems compiling and have DEC <code>CC</code> and
<code>gcc</code> installed, try running <code>configure</code> like
this:</p>

<pre>
CC=cc CFLAGS=-O CXX=gcc CXXFLAGS=-O3 \
./configure --prefix=/usr/local/mysql
</pre>

<p>If you get problems with the <tt>`c_asm.h'</tt> file, you can
create and use a 'dummy' <tt>`c_asm.h'</tt> file with:</p>

<pre>
touch include/c_asm.h
CC=gcc CFLAGS=-I./include \
CXX=gcc CXXFLAGS=-O3 \
./configure --prefix=/usr/local/mysql
</pre>

<p>Note that the following problems with the <code>ld</code>
program can be fixed by downloading the latest DEC (Compaq) patch
kit from: <a
href="http://ftp.support.compaq.com/public/unix/">http://ftp.support.compaq.com/public/unix/</a>.</p>

<p>On OSF/1 V4.0D and compiler "DEC C V5.6-071 on Digital Unix V4.0
(Rev. 878)" the compiler had some strange behaviour (undefined
<code>asm</code> symbols). <code>/bin/ld</code> also appears to be
broken (problems with <code>_exit undefined</code> errors occuring
while linking <code>mysqld</code>). On this system, we have managed
to compile MySQL with the following <code>configure</code> line,
after replacing <code>/bin/ld</code> with the version from OSF
4.0C:</p>

<pre>
CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure --prefix=/usr/local/mysql
</pre>

<p>With the Digital compiler "C++ V6.1-029", the following should
work:</p>

<pre>
CC=cc -pthread
CFLAGS=-O4 -ansi_alias -ansi_args -fast -inline speed -speculate all \
       -arch host
CXX=cxx -pthread
CXXFLAGS=-O4 -ansi_alias -ansi_args -fast -inline speed -speculate all \
          -arch host -noexceptions -nortti
export CC CFLAGS CXX CXXFLAGS
./configure --prefix=/usr/mysql/mysql --with-mysqld-ldflags=-all-static \
            --disable-shared --with-named-thread-libs="-lmach -lexc -lc"
</pre>

<p>In some versions of OSF/1, the <code>alloca()</code> function is
broken. Fix this by removing the line in <tt>`config.h'</tt> that
defines <code>'HAVE_ALLOCA'</code>.</p>

<p>The <code>alloca()</code> function also may have an incorrect
prototype in <code>/usr/include/alloca.h</code>. This warning
resulting from this can be ignored.</p>

<p><code>configure</code> will use the following thread libraries
automatically: <code>--with-named-thread-libs="-lpthread -lmach
-lexc -lc"</code>.</p>

<p>When using <code>gcc</code>, you can also try running
<code>configure</code> like this:</p>

<pre>
shell&gt; CFLAGS=-D_PTHREAD_USE_D4 CXX=gcc CXXFLAGS=-O3 ./configure ...
</pre>

<p>If you have problems with signals (MySQL dies unexpectedly under
high load), you may have found an OS bug with threads and signals.
In this case you can tell MySQL not to use signals by configuring
with:</p>

<pre>
shell&gt; CFLAGS=-DDONT_USE_THR_ALARM \
       CXXFLAGS=-DDONT_USE_THR_ALARM \
       ./configure ...
</pre>

<p>This doesn't affect the performance of MySQL, but has the side
effect that you can't kill clients that are ``sleeping'' on a
connection with <code>mysqladmin kill</code> or <code>mysqladmin
shutdown</code>. Instead, the client will die when it issues its
next command.</p>

<p>With <code>gcc</code> 2.95.2, you will probably run into the
following compile error:</p>

<pre>
sql_acl.cc:1456: Internal compiler error in `scan_region', at except.c:2566
Please submit a full bug report.
</pre>

<p>To fix this you should change to the <code>sql</code> directory
and do a ``cut and paste'' of the last <code>gcc</code> line, but
change <code>-O3</code> to <code>-O0</code> (or add
<code>-O0</code> immediately after <code>gcc</code> if you don't
have any <code>-O</code> option on your compile line). After this
is done you can just change back to the top-level directly and run
<code>make</code> again.</p>

<h4><a id="SGI-Irix" name="SGI-Irix"
href="manual_toc.html#SGI-Irix">2.6.6.8 SGI Irix Notes</a></h4>

<p>If you are using Irix Version 6.5.3 or newer <code>mysqld</code>
will only be able to create threads if you run it as a user with
<code>CAP_SCHED_MGT</code> privileges (like <code>root</code>) or
give the <code>mysqld</code> server this privilege with the
following shell command:</p>

<pre>
shell&gt; chcap "CAP_SCHED_MGT+epi" /opt/mysql/libexec/mysqld
</pre>

<p>You may have to undefine some things in <tt>`config.h'</tt>
after running <code>configure</code> and before compiling.</p>

<p>In some Irix implementations, the <code>alloca()</code> function
is broken. If the <code>mysqld</code> server dies on some
<code>SELECT</code> statements, remove the lines from
<tt>`config.h'</tt> that define <code>HAVE_ALLOC</code> and
<code>HAVE_ALLOCA_H</code>. If <code>mysqladmin create</code>
doesn't work, remove the line from <tt>`config.h'</tt> that defines
<code>HAVE_READDIR_R</code>. You may have to remove the
<code>HAVE_TERM_H</code> line as well.</p>

<p>SGI recommends that you install all of the patches on this page
as a set: <a
href="http://support.sgi.com/surfzone/patches/patchset/6.2_indigo.rps.html">
http://support.sgi.com/surfzone/patches/patchset/6.2_indigo.rps.html</a></p>

<p>At the very minimum, you should install the latest kernel
rollup, the latest <code>rld</code> rollup, and the latest
<code>libc</code> rollup.</p>

<p>You definitely need all the POSIX patches on this page, for
pthreads support:</p>

<p><a
href="http://support.sgi.com/surfzone/patches/patchset/6.2_posix.rps.html">
http://support.sgi.com/surfzone/patches/patchset/6.2_posix.rps.html</a></p>

<p>If you get the something like the following error when compiling
<tt>`mysql.cc'</tt>:</p>

<pre>
"/usr/include/curses.h", line 82: error(1084): invalid combination of type
</pre>

<p>Type the following in the top-level directory of your MySQL
source tree:</p>

<pre>
shell&gt; extra/replace bool curses_bool &lt; /usr/include/curses.h \
&gt; include/curses.h
shell&gt; make
</pre>

<p>There have also been reports of scheduling problems. If only one
thread is running, things go slow. Avoid this by starting another
client. This may lead to a 2-to-10-fold increase in execution speed
thereafter for the other thread. This is a poorly understood
problem with Irix threads; you may have to improvise to find
solutions until this can be fixed.</p>

<p>If you are compiling with <code>gcc</code>, you can use the
following <code>configure</code> command:</p>

<pre>
CC=gcc CXX=gcc CXXFLAGS=-O3 \
./configure --prefix=/usr/local/mysql --enable-thread-safe-client \
--with-named-thread-libs=-lpthread
</pre>

<p>On Irix 6.5.11 with native Irix C and C++ compilers ver.
7.3.1.2, the following is reported to work</p>

<pre>
CC=cc CXX=CC CFLAGS='-O3 -n32 -TARG:platform=IP22 -I/usr/local/include \
-L/usr/local/lib' CXXFLAGS='-O3 -n32 -TARG:platform=IP22 \
-I/usr/local/include -L/usr/local/lib' ./configure \
--prefix=/usr/local/mysql --with-innodb --with-berkeley-db \
--with-libwrap=/usr/local \
--with-named-curses-libs=/usr/local/lib/libncurses.a
</pre>

<h4><a id="Caldera" name="Caldera"
href="manual_toc.html#Caldera">2.6.6.9 Caldera (SCO) Notes</a></h4>

<p>The current port is tested only on a ``sco3.2v5.0.4'' and
``sco3.2v5.0.5'' system. There has also been a lot of progress on a
port to ``sco 3.2v4.2''.</p>

<p>For the moment the recommended compiler on OpenServer is gcc
2.95.2. With this you should be able to compile MySQL with
just:</p>

<pre>
CC=gcc CXX=gcc ./configure ... (options)
</pre>

<ol>
<li>For OpenServer 5.0.X you need to use gcc-2.95.2p1 or newer from
the Skunkware. <a
href="http://www.caldera.com/skunkware/">http://www.caldera.com/skunkware/</a>
and choose browser OpenServer packages or by ftp to
ftp2.caldera.com in the pub/skunkware/osr5/devtools/gcc
directory.</li>

<li>You need the port of GCC 2.5.x for this product and the
Development system. They are required on this version of Caldera
(SCO) Unix. You cannot just use the GCC Dev system.</li>

<li>You should get the FSU Pthreads package and install it first.
This can be found at <a
href="http://www.cs.wustl.edu/~schmidt/ACE_wrappers/FSU-threads.tar.gz">
http://www.cs.wustl.edu/~schmidt/ACE_wrappers/FSU-threads.tar.gz</a>.
You can also get a precompiled package from <a
href="http://www.mysql.com/Downloads/SCO/FSU-threads-3.5c.tar.gz">http://www.mysql.com/Downloads/SCO/FSU-threads-3.5c.tar.gz</a>.</li>

<li>FSU Pthreads can be compiled with Caldera (SCO) Unix 4.2 with
tcpip. Or OpenServer 3.0 or Open Desktop 3.0 (OS 3.0 ODT 3.0), with
the Caldera (SCO) Development System installed using a good port of
GCC 2.5.x ODT or OS 3.0 you will need a good port of GCC 2.5.x
There are a lot of problems without a good port. The port for this
product requires the SCO Unix Development system. Without it, you
are missing the libraries and the linker that is needed.</li>

<li>To build FSU Pthreads on your system, do the following: 

<ol>
<li>Run <code>./configure</code> in the <tt>`threads/src'</tt>
directory and select the SCO OpenServer option. This command copies
<tt>`Makefile.SCO5'</tt> to <tt>`Makefile'</tt>.</li>

<li>Run <code>make</code>.</li>

<li>To install in the default <tt>`/usr/include'</tt> directory,
login as root, then <code>cd</code> to the <tt>`thread/src'</tt>
directory, and run <code>make install</code>.</li>
</ol>
</li>

<li>Remember to use GNU <code>make</code> when making MySQL.</li>

<li>If you don't start <code>safe_mysqld</code> as root, you
probably will get only the default 110 open files per process.
<code>mysqld</code> will write a note about this in the log
file.</li>

<li>With SCO 3.2V5.0.5, you should use FSU Pthreads version 3.5c or
newer. You should also use gcc 2.95.2 or newer! The following
<code>configure</code> command should work: 

<pre>
shell&gt; ./configure --prefix=/usr/local/mysql --disable-shared
</pre>
</li>

<li>With SCO 3.2V4.2, you should use FSU Pthreads version 3.5c or
newer. The following <code>configure</code> command should work: 

<pre>
shell&gt; CFLAGS="-D_XOPEN_XPG4" CXX=gcc CXXFLAGS="-D_XOPEN_XPG4" \
       ./configure \
           --prefix=/usr/local/mysql \
           --with-named-thread-libs="-lgthreads -lsocket -lgen -lgthreads" \
           --with-named-curses-libs="-lcurses"
</pre>

You may get some problems with some include files. In this case,
you can find new SCO-specific include files at <a
href="http://www.mysql.com/Downloads/SCO/SCO-3.2v4.2-includes.tar.gz">
http://www.mysql.com/Downloads/SCO/SCO-3.2v4.2-includes.tar.gz</a>.
You should unpack this file in the <tt>`include'</tt> directory of
your MySQL source tree.</li>
</ol>

<p>Caldera (SCO) development notes:</p>

<ul>
<li>MySQL should automatically detect FSU Pthreads and link
<code>mysqld</code> with <code>-lgthreads -lsocket
-lgthreads</code>.</li>

<li>The Caldera (SCO) development libraries are re-entrant in FSU
Pthreads. Caldera claim sthat its libraries' functions are
re-entrant, so they must be reentrant with FSU Pthreads. FSU
Pthreads on OpenServer tries to use the SCO scheme to make
re-entrant libraries.</li>

<li>FSU Pthreads (at least the version at <a
href="http://www.mysql.com/">http://www.mysql.com/</a>) comes
linked with GNU <code>malloc</code>. If you encounter problems with
memory usage, make sure that <tt>`gmalloc.o'</tt> is included in
<tt>`libgthreads.a'</tt> and <tt>`libgthreads.so'</tt>.</li>

<li>In FSU Pthreads, the following system calls are pthreads-aware:
<code>read()</code>, <code>write()</code>, <code>getmsg()</code>,
<code>connect()</code>, <code>accept()</code>,
<code>select()</code>, and <code>wait()</code>.</li>

<li>The CSSA-2001-SCO.35.2 (the patch is listed in custom as
erg711905-dscr_remap security patch (version 2.0.0) breaks FSU
threads and makes mysqld unstable. You have to remove this one if
you want to run mysqld on an OpenServer 5.0.6 machine.</li>
</ul>

<p>If you want to install DBI on Caldera (SCO), you have to edit
the <tt>`Makefile'</tt> in DBI-xxx and each subdirectory.</p>

<p>Note that the following assumes gcc 2.95.2 or newer:</p>

<pre>
OLD:                                  NEW:
CC = cc                               CC = gcc
CCCDLFLAGS = -KPIC -W1,-Bexport       CCCDLFLAGS = -fpic
CCDLFLAGS = -wl,-Bexport              CCDLFLAGS =

LD = ld                               LD = gcc -G -fpic
LDDLFLAGS = -G -L/usr/local/lib       LDDLFLAGS = -L/usr/local/lib
LDFLAGS = -belf -L/usr/local/lib      LDFLAGS = -L/usr/local/lib

LD = ld                               LD = gcc -G -fpic
OPTIMISE = -Od                        OPTIMISE = -O1

OLD:
CCCFLAGS = -belf -dy -w0 -U M_XENIX -DPERL_SCO5 -I/usr/local/include

NEW:
CCFLAGS = -U M_XENIX -DPERL_SCO5 -I/usr/local/include
</pre>

<p>This is because the Perl dynaloader will not load the
<code>DBI</code> modules if they were compiled with
<code>icc</code> or <code>cc</code>.</p>

<p>Perl works best when compiled with <code>cc</code>.</p>

<h4><a id="Caldera_Unixware" name="Caldera_Unixware"
href="manual_toc.html#Caldera_Unixware">2.6.6.10 Caldera (SCO)
Unixware Version 7.0 Notes</a></h4>

<p>You must use a version of MySQL at least as recent as Version
3.22.13 because that version fixes some portability problems under
Unixware.</p>

<p>We have been able to compile MySQL with the following
<code>configure</code> command on Unixware Version 7.0.1:</p>

<pre>
CC=cc CXX=CC ./configure --prefix=/usr/local/mysql
</pre>

<p>If you want to use <code>gcc</code>, you must use
<code>gcc</code> 2.95.2 or newer.</p>

<p>Caldera provides libsocket.so.2 at <a
href="ftp://stage.caldera.com/pub/security/tools">ftp://stage.caldera.com/pub/security/tools</a>
for pre-OSR506 security fixes. Also, the telnetd fix at
ftp://stage.caldera.com/pub/security/openserver/CSSA-2001-SCO.10/
as both libsocket.so.2 and libresolv.so.1 with instructions for
installing on pre-OSR506 systems.</p>

<p>It's probably a good idea to install the above patches before
trying to compile/use MySQL.</p>

<h3><a id="OS_2" name="OS_2" href="manual_toc.html#OS_2">2.6.7 OS/2
Notes</a></h3>

<p>MySQL uses quite a few open files. Because of this, you should
add something like the following to your <tt>`CONFIG.SYS'</tt>
file:</p>

<pre>
SET EMXOPT=-c -n -h1024
</pre>

<p>If you don't do this, you will probably run into the following
error:</p>

<pre>
File 'xxxx' not found (Errcode: 24)
</pre>

<p>When using MySQL with OS/2 Warp 3, FixPack 29 or above is
required. With OS/2 Warp 4, FixPack 4 or above is required. This is
a requirement of the Pthreads library. MySQL must be installed in a
partition that supports long filenames such as HPFS, FAT32,
etc.</p>

<p>The <tt>`INSTALL.CMD'</tt> script must be run from OS/2's own
<tt>`CMD.EXE'</tt> and may not work with replacement shells such as
<tt>`4OS2.EXE'</tt>.</p>

<p>The <tt>`scripts/mysql-install-db'</tt> script has been renamed.
It is now called <tt>`install.cmd'</tt> and is a REXX script, which
will set up the default MySQL security settings and create the
WorkPlace Shell icons for MySQL.</p>

<p>Dynamic module support is compiled in but not fully tested.
Dynamic modules should be compiled using the Pthreads run-time
library.</p>

<pre>
gcc -Zdll -Zmt -Zcrtdll=pthrdrtl -I../include -I../regex -I.. \
    -o example udf_example.cc -L../lib -lmysqlclient udf_example.def
mv example.dll example.udf
</pre>

<p><strong>Note</strong>: Due to limitations in OS/2, UDF module
name stems must not exceed 8 characters. Modules are stored in the
<tt>`/mysql2/udf'</tt> directory; the <code>safe-mysqld.cmd</code>
script will put this directory in the <code>BEGINLIBPATH</code>
environment variable. When using UDF modules, specified extensions
are ignored—it is assumed to be <tt>`.udf'</tt>. For example, in
Unix, the shared module might be named <tt>`example.so'</tt> and
you would load a function from it like this:</p>

<pre>
mysql&gt; CREATE FUNCTION metaphon RETURNS STRING SONAME "example.so";
</pre>

<p>Is OS/2, the module would be named <tt>`example.udf'</tt>, but
you would not specify the module extension:</p>

<pre>
mysql&gt; CREATE FUNCTION metaphon RETURNS STRING SONAME "example";
</pre>

<h3><a id="BeOS" name="BeOS" href="manual_toc.html#BeOS">2.6.8 BeOS
Notes</a></h3>

<p>We are really interested in getting MySQL to work on BeOS, but
unfortunately we don't have any person who knows BeOS or has time
to do a port.</p>

<p>We are interested in finding someone to do a port, and we will
help them with any technical questions they may have while doing
the port.</p>

<p>We have previously talked with some BeOS developers that have
said that MySQL is 80% ported to BeOS, but we haven't heard from
them in a while.</p>

<h3><a id="Novell_Netware" name="Novell_Netware"
href="manual_toc.html#Novell_Netware">2.6.9 Novell NetWare
Notes</a></h3>

<p>We are really interested in getting MySQL to work on NetWare,
but unfortunately we don't have any person who knows NetWare or has
time to do a port.</p>

<p>We are interested in finding someone to do a port, and we will
help them with any technical questions they may have while doing
the port.</p>

<h2><a id="Perl_support" name="Perl_support"
href="manual_toc.html#Perl_support">2.7 Perl Installation
Comments</a></h2>

<p><a id="IDX346" name="IDX346"></a> <a id="IDX347"
name="IDX347"></a></p>

<h3><a id="Perl_installation" name="Perl_installation"
href="manual_toc.html#Perl_installation">2.7.1 Installing Perl on
Unix</a></h3>

<p>Perl support for MySQL is provided by means of the
<code>DBI</code>/<code>DBD</code> client interface. See section <a
href="manual.html#Perl">8.2 MySQL Perl API</a>. The Perl
<code>DBD</code>/<code>DBI</code> client code requires Perl Version
5.004 or later. The interface <strong>will not work</strong> if you
have an older version of Perl.</p>

<p>MySQL Perl support also requires that you've installed MySQL
client programming support. If you installed MySQL from RPM files,
client programs are in the client RPM, but client programming
support is in the developer RPM. Make sure you've installed the
latter RPM.</p>

<p>As of Version 3.22.8, Perl support is distributed separately
from the main MySQL distribution. If you want to install Perl
support, the files you will need can be obtained from <a
href="http://www.mysql.com/downloads/api-dbi.html">http://www.mysql.com/downloads/api-dbi.html</a>.</p>

<p>The Perl distributions are provided as compressed
<code>tar</code> archives and have names like
<tt>`MODULE-VERSION.tar.gz'</tt>, where <code>MODULE</code> is the
module name and <code>VERSION</code> is the version number. You
should get the <code>Data-Dumper</code>, <code>DBI</code>, and
<code>Msql-Mysql-modules</code> distributions and install them in
that order. The installation procedure is shown here. The example
shown is for the <code>Data-Dumper</code> module, but the procedure
is the same for all three distributions:</p>

<ol>
<li>Unpack the distribution into the current directory: 

<pre>
shell&gt; gunzip &lt; Data-Dumper-VERSION.tar.gz | tar xvf -
</pre>

This command creates a directory named
<tt>`Data-Dumper-VERSION'</tt>.</li>

<li>Change into the top-level directory of the unpacked
distribution: 

<pre>
shell&gt; cd Data-Dumper-VERSION
</pre>
</li>

<li>Build the distribution and compile everything: 

<pre>
shell&gt; perl Makefile.PL
shell&gt; make
shell&gt; make test
shell&gt; make install
</pre>
</li>
</ol>

<p>The <code>make test</code> command is important because it
verifies that the module is working. Note that when you run that
command during the <code>Msql-Mysql-modules</code> installation to
exercise the interface code, the MySQL server must be running or
the test will fail.</p>

<p>It is a good idea to rebuild and reinstall the
<code>Msql-Mysql-modules</code> distribution whenever you install a
new release of MySQL, particularly if you notice symptoms such as
all your <code>DBI</code> scripts dumping core after you upgrade
MySQL.</p>

<p>If you don't have the right to install Perl modules in the
system directory or if you to install local Perl modules, the
following reference may help you:</p>

<pre>
<a
href="http://www.iserver.com/support/contrib/perl5/modules.html">http://www.iserver.com/support/contrib/perl5/modules.html</a>
</pre>

<p>Look under the heading <code>Installing New Modules that Require
Locally Installed Modules</code>.</p>

<h3><a id="ActiveState_Perl" name="ActiveState_Perl"
href="manual_toc.html#ActiveState_Perl">2.7.2 Installing
ActiveState Perl on Windows</a></h3>

<p><a id="IDX348" name="IDX348"></a> <a id="IDX349"
name="IDX349"></a> <a id="IDX350" name="IDX350"></a></p>

<p>To install the MySQL <code>DBD</code> module with ActiveState
Perl on Windows, you should do the following:</p>

<ul>
<li>Get ActiveState Perl from <a
href="http://www.activestate.com/Products/ActivePerl/">http://www.activestate.com/Products/ActivePerl/</a>
and install it.</li>

<li>Open a DOS shell.</li>

<li>If required, set the HTTP_proxy variable. For example, you
might try: 

<pre>
set HTTP_proxy=my.proxy.com:3128
</pre>
</li>

<li>Start the PPM program: 

<pre>
C:\&gt; c:\perl\bin\ppm.pl
</pre>
</li>

<li>If you have not already done so, install <code>DBI</code>: 

<pre>
ppm&gt; install DBI
</pre>
</li>

<li>If this succeeds, run the following command: 

<pre>
install \
ftp://ftp.de.uu.net/pub/CPAN/authors/id/JWIED/DBD-mysql-1.2212.x86.ppd
</pre>
</li>
</ul>

<p>The above should work at least with ActiveState Perl Version
5.6.</p>

<p>If you can't get the above to work, you should instead install
the <code>MyODBC</code> driver and connect to MySQL server through
ODBC:</p>

<pre>
use DBI;
$dbh= DBI-&gt;connect("DBI:ODBC:$dsn","$user","$password") ||
  die "Got error $DBI::errstr when connecting to $dsn\n";
</pre>

<h3><a id="Windows_Perl" name="Windows_Perl"
href="manual_toc.html#Windows_Perl">2.7.3 Installing the MySQL Perl
Distribution on Windows</a></h3>

<p>The MySQL Perl distribution contains <code>DBI</code>,
<code>DBD:MySQL</code> and <code>DBD:ODBC</code>.</p>

<ul>
<li>Get the Perl distribution for Windows from <a
href="http://www.mysql.com/downloads/os-win32.html">http://www.mysql.com/downloads/os-win32.html</a>.</li>

<li>Unzip the distribution in <code>C:</code> so that you get a
<tt>`C:\PERL'</tt> directory.</li>

<li>Add the directory <tt>`C:\PERL\BIN'</tt> to your path.</li>

<li>Add the directory <tt>`C:\PERL\BIN\MSWIN32-x86-thread'</tt> or
<tt>`C:\PERL\BIN\MSWIN32-x86'</tt> to your path.</li>

<li>Test that <code>perl</code> works by executing <code>perl
-v</code> in a DOS shell.</li>
</ul>

<h3><a id="Perl_support_problems" name="Perl_support_problems"
href="manual_toc.html#Perl_support_problems">2.7.4 Problems Using
the Perl <code>DBI</code>/<code>DBD</code> Interface</a></h3>

<p><a id="IDX351" name="IDX351"></a> <a id="IDX352"
name="IDX352"></a></p>

<p>If Perl reports that it can't find the
<tt>`../mysql/mysql.so'</tt> module, then the problem is probably
that Perl can't locate the shared library
<tt>`libmysqlclient.so'</tt>.</p>

<p>You can fix this by any of the following methods:</p>

<ul>
<li>Compile the <code>Msql-Mysql-modules</code> distribution with
<code>perl Makefile.PL -static -config</code> rather than
<code>perl Makefile.PL</code>.</li>

<li>Copy <tt>`libmysqlclient.so'</tt> to the directory where your
other shared libraries are located (probably <tt>`/usr/lib'</tt> or
<tt>`/lib'</tt>).</li>

<li>On Linux you can add the pathname of the directory where
<tt>`libmysqlclient.so'</tt> is located to the
<tt>`/etc/ld.so.conf'</tt> file. <a id="IDX353" name="IDX353"></a>
<a id="IDX354" name="IDX354"></a></li>

<li>Add the pathname of the directory where
<tt>`libmysqlclient.so'</tt> is located to the
<code>LD_RUN_PATH</code> environment variable.</li>
</ul>

<p>If you get the following errors from <code>DBD-mysql</code>, you
are probably using <code>gcc</code> (or using an old binary
compiled with <code>gcc</code>):</p>

<pre>
/usr/bin/perl: can't resolve symbol '__moddi3'
/usr/bin/perl: can't resolve symbol '__divdi3'
</pre>

<p>Add <code>-L/usr/lib/gcc-lib/... -lgcc</code> to the link
command when the <tt>`mysql.so'</tt> library gets built (check the
output from <code>make</code> for <tt>`mysql.so'</tt> when you
compile the Perl client). The <code>-L</code> option should specify
the pathname of the directory where <tt>`libgcc.a'</tt> is located
on your system.</p>

<p>Another cause of this problem may be that Perl and MySQL aren't
both compiled with <code>gcc</code>. In this case, you can solve
the mismatch by compiling both with <code>gcc</code>.</p>

<p>If you get the following error from
<code>Msql-Mysql-modules</code> when you run the tests:</p>

<pre>
t/00base............install_driver(mysql) failed:
Can't load '../blib/arch/auto/DBD/mysql/mysql.so' for module DBD::mysql:
../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol:
uncompress at /usr/lib/perl5/5.00503/i586-linux/DynaLoader.pm line 169.
</pre>

<p>it means that you need to include the compression library, -lz,
to the link line. This can be doing the following change in the
file <tt>`lib/DBD/mysql/Install.pm'</tt>:</p>

<pre>
$sysliblist .= " -lm";

to

$sysliblist .= " -lm -lz";
</pre>

<p>After this, you <strong>must</strong> run 'make realclean' and
then proceed with the installation from the beginning.</p>

<p>If you want to use the Perl module on a system that doesn't
support dynamic linking (like Caldera/SCO) you can generate a
static version of Perl that includes <code>DBI</code> and
<code>DBD-mysql</code>. The way this works is that you generate a
version of Perl with the <code>DBI</code> code linked in and
install it on top of your current Perl. Then you use that to build
a version of Perl that additionally has the <code>DBD</code> code
linked in, and install that.</p>

<p>On Caldera (SCO), you must have the following environment
variables set:</p>

<pre>
shell&gt; LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/progressive/lib
or
shell&gt; LD_LIBRARY_PATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
/usr/progressive/lib:/usr/skunk/lib
shell&gt; LIBPATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
/usr/progressive/lib:/usr/skunk/lib
shell&gt; MANPATH=scohelp:/usr/man:/usr/local1/man:/usr/local/man:\
/usr/skunk/man:
</pre>

<p>First, create a Perl that includes a statically linked
<code>DBI</code> by running these commands in the directory where
your <code>DBI</code> distribution is located:</p>

<pre>
shell&gt; perl Makefile.PL -static -config
shell&gt; make
shell&gt; make install
shell&gt; make perl
</pre>

<p>Then you must install the new Perl. The output of <code>make
perl</code> will indicate the exact <code>make</code> command you
will need to execute to perform the installation. On Caldera (SCO),
this is <code>make -f Makefile.aperl inst_perl
MAP_TARGET=perl</code>.</p>

<p>Next, use the just-created Perl to create another Perl that also
includes a statically-linked <code>DBD::mysql</code> by running
these commands in the directory where your
<code>Msql-Mysql-modules</code> distribution is located:</p>

<pre>
shell&gt; perl Makefile.PL -static -config
shell&gt; make
shell&gt; make install
shell&gt; make perl
</pre>

<p>Finally, you should install this new Perl. Again, the output of
<code>make perl</code> indicates the command to use.</p>

<h1><a id="Tutorial" name="Tutorial"
href="manual_toc.html#Tutorial">3 Tutorial Introduction</a></h1>

<p><a id="IDX355" name="IDX355"></a> <a id="IDX356"
name="IDX356"></a> <a id="IDX357" name="IDX357"></a> <a id="IDX358"
name="IDX358"></a></p>

<p>This chapter provides a tutorial introduction to MySQL by
showing how to use the <code>mysql</code> client program to create
and use a simple database. <code>mysql</code> (sometimes referred
to as the ``terminal monitor'' or just ``monitor'') is an
interactive program that allows you to connect to a MySQL server,
run queries, and view the results. <code>mysql</code> may also be
used in batch mode: you place your queries in a file beforehand,
then tell <code>mysql</code> to execute the contents of the file.
Both ways of using <code>mysql</code> are covered here.</p>

<p>To see a list of options provided by <code>mysql</code>, invoke
it with the <code>--help</code> option:</p>

<pre>
shell&gt; mysql --help
</pre>

<p>This chapter assumes that <code>mysql</code> is installed on
your machine and that a MySQL server is available to which you can
connect. If this is not true, contact your MySQL administrator. (If
<strong>you</strong> are the administrator, you will need to
consult other sections of this manual.)</p>

<p>This chapter describes the entire process of setting up and
using a database. If you are interested only in accessing an
already-existing database, you may want to skip over the sections
that describe how to create the database and the tables it
contains.</p>

<p>Because this chapter is tutorial in nature, many details are
necessarily left out. Consult the relevant sections of the manual
for more information on the topics covered here.</p>

<h2><a id="Connecting-disconnecting"
name="Connecting-disconnecting"
href="manual_toc.html#Connecting-disconnecting">3.1 Connecting to
and Disconnecting from the Server</a></h2>

<p><a id="IDX359" name="IDX359"></a> <a id="IDX360"
name="IDX360"></a> <a id="IDX361" name="IDX361"></a> <a id="IDX362"
name="IDX362"></a></p>

<p>To connect to the server, you'll usually need to provide a MySQL
user name when you invoke <code>mysql</code> and, most likely, a
password. If the server runs on a machine other than the one where
you log in, you'll also need to specify a hostname. Contact your
administrator to find out what connection parameters you should use
to connect (that is, what host, user name, and password to use).
Once you know the proper parameters, you should be able to connect
like this:</p>

<pre>
shell&gt; mysql -h host -u user -p
Enter password: ********
</pre>

<p>The <code>********</code> represents your password; enter it
when <code>mysql</code> displays the <code>Enter password:</code>
prompt.</p>

<p>If that works, you should see some introductory information
followed by a <code>mysql&gt;</code> prompt:</p>

<pre>
shell&gt; mysql -h host -u user -p
Enter password: ********
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 459 to server version: 3.22.20a-log

Type 'help' for help.

mysql&gt;
</pre>

<p>The prompt tells you that <code>mysql</code> is ready for you to
enter commands.</p>

<p>Some MySQL installations allow users to connect as the anonymous
(unnamed) user to the server running on the local host. If this is
the case on your machine, you should be able to connect to that
server by invoking <code>mysql</code> without any options:</p>

<pre>
shell&gt; mysql
</pre>

<p>After you have connected successfully, you can disconnect any
time by typing <code>QUIT</code> at the <code>mysql&gt;</code>
prompt:</p>

<pre>
mysql&gt; QUIT
Bye
</pre>

<p>You can also disconnect by pressing Control-D.</p>

<p>Most examples in the following sections assume you are connected
to the server. They indicate this by the <code>mysql&gt;</code>
prompt.</p>

<h2><a id="Entering_queries" name="Entering_queries"
href="manual_toc.html#Entering_queries">3.2 Entering
Queries</a></h2>

<p><a id="IDX363" name="IDX363"></a> <a id="IDX364"
name="IDX364"></a> <a id="IDX365" name="IDX365"></a></p>

<p>Make sure you are connected to the server, as discussed in the
previous section. Doing so will not in itself select any database
to work with, but that's okay. At this point, it's more important
to find out a little about how to issue queries than to jump right
in creating tables, loading data into them, and retrieving data
from them. This section describes the basic principles of entering
commands, using several queries you can try out to familiarise
yourself with how <code>mysql</code> works.</p>

<p>Here's a simple command that asks the server to tell you its
version number and the current date. Type it in as shown here
following the <code>mysql&gt;</code> prompt and press Enter:</p>

<pre>
mysql&gt; SELECT VERSION(), CURRENT_DATE;
+--------------+--------------+
| VERSION()    | CURRENT_DATE |
+--------------+--------------+
| 3.22.20a-log | 1999-03-19   |
+--------------+--------------+
1 row in set (0.01 sec)
mysql&gt;
</pre>

<p>This query illustrates several things about
<code>mysql</code>:</p>

<ul>
<li>A command normally consists of a SQL statement followed by a
semicolon. (There are some exceptions where a semicolon is not
needed. <code>QUIT</code>, mentioned earlier, is one of them. We'll
get to others later.)</li>

<li>When you issue a command, <code>mysql</code> sends it to the
server for execution and displays the results, then prints another
<code>mysql&gt;</code> to indicate that it is ready for another
command.</li>

<li><code>mysql</code> displays query output as a table (rows and
columns). The first row contains labels for the columns. The rows
following are the query results. Normally, column labels are the
names of the columns you fetch from database tables. If you're
retrieving the value of an expression rather than a table column
(as in the example just shown), <code>mysql</code> labels the
column using the expression itself.</li>

<li><code>mysql</code> shows how many rows were returned and how
long the query took to execute, which gives you a rough idea of
server performance. These values are imprecise because they
represent wall clock time (not CPU or machine time), and because
they are affected by factors such as server load and network
latency. (For brevity, the ``rows in set'' line is not shown in the
remaining examples in this chapter.)</li>
</ul>

<p>Keywords may be entered in any lettercase. The following queries
are equivalent:</p>

<pre>
mysql&gt; SELECT VERSION(), CURRENT_DATE;
mysql&gt; select version(), current_date;
mysql&gt; SeLeCt vErSiOn(), current_DATE;
</pre>

<p>Here's another query. It demonstrates that you can use
<code>mysql</code> as a simple calculator:</p>

<pre>
mysql&gt; SELECT SIN(PI()/4), (4+1)*5;
+-------------+---------+
| SIN(PI()/4) | (4+1)*5 |
+-------------+---------+
|    0.707107 |      25 |
+-------------+---------+
</pre>

<p>The commands shown thus far have been relatively short,
single-line statements. You can even enter multiple statements on a
single line. Just end each one with a semicolon:</p>

<pre>
mysql&gt; SELECT VERSION(); SELECT NOW();
+--------------+
| VERSION()    |
+--------------+
| 3.22.20a-log |
+--------------+

+---------------------+
| NOW()               |
+---------------------+
| 1999-03-19 00:15:33 |
+---------------------+
</pre>

<p>A command need not be given all on a single line, so lengthy
commands that require several lines are not a problem.
<code>mysql</code> determines where your statement ends by looking
for the terminating semicolon, not by looking for the end of the
input line. (In other words, <code>mysql</code> accepts free-format
input: it collects input lines but does not execute them until it
sees the semicolon.)</p>

<p>Here's a simple multiple-line statement:</p>

<pre>
mysql&gt; SELECT
    -&gt; USER()
    -&gt; ,
    -&gt; CURRENT_DATE;
+--------------------+--------------+
| USER()             | CURRENT_DATE |
+--------------------+--------------+
| joesmith@localhost | 1999-03-18   |
+--------------------+--------------+
</pre>

<p>In this example, notice how the prompt changes from
<code>mysql&gt;</code> to <code>-&gt;</code> after you enter the
first line of a multiple-line query. This is how <code>mysql</code>
indicates that it hasn't seen a complete statement and is waiting
for the rest. The prompt is your friend, because it provides
valuable feedback. If you use that feedback, you will always be
aware of what <code>mysql</code> is waiting for.</p>

<p>If you decide you don't want to execute a command that you are
in the process of entering, cancel it by typing
<code>\c</code>:</p>

<pre>
mysql&gt; SELECT
    -&gt; USER()
    -&gt; \c
mysql&gt;
</pre>

<p>Here, too, notice the prompt. It switches back to
<code>mysql&gt;</code> after you type <code>\c</code>, providing
feedback to indicate that <code>mysql</code> is ready for a new
command.</p>

<p>The following table shows each of the prompts you may see and
summarises what they mean about the state that <code>mysql</code>
is in:</p>

<p><a id="IDX366" name="IDX366"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Prompt</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>mysql&gt;</code></td>
<td>Ready for new command.</td>
</tr>

<tr>
<td><code>-&gt;</code></td>
<td>Waiting for next line of multiple-line command.</td>
</tr>

<tr>
<td><code>'&gt;</code></td>
<td>Waiting for next line, collecting a string that begins with a
single quote (<samp>`''</samp>).</td>
</tr>

<tr>
<td><code>"&gt;</code></td>
<td>Waiting for next line, collecting a string that begins with a
double quote (<samp>`"'</samp>).</td>
</tr>
</table>

<br />
<br />
 

<p>Multiple-line statements commonly occur by accident when you
intend to issue a command on a single line, but forget the
terminating semicolon. In this case, <code>mysql</code> waits for
more input:</p>

<pre>
mysql&gt; SELECT USER()
    -&gt;
</pre>

<p>If this happens to you (you think you've entered a statement but
the only response is a <code>-&gt;</code> prompt), most likely
<code>mysql</code> is waiting for the semicolon. If you don't
notice what the prompt is telling you, you might sit there for a
while before realising what you need to do. Enter a semicolon to
complete the statement, and <code>mysql</code> will execute it:</p>

<pre>
mysql&gt; SELECT USER()
    -&gt; ;
+--------------------+
| USER()             |
+--------------------+
| joesmith@localhost |
+--------------------+
</pre>

<p>The <code>'&gt;</code> and <code>"&gt;</code> prompts occur
during string collection. In MySQL, you can write strings
surrounded by either <samp>`''</samp> or <samp>`"'</samp>
characters (for example, <code>'hello'</code> or
<code>"goodbye"</code>), and <code>mysql</code> lets you enter
strings that span multiple lines. When you see a <code>'&gt;</code>
or <code>"&gt;</code> prompt, it means that you've entered a line
containing a string that begins with a <samp>`''</samp> or
<samp>`"'</samp> quote character, but have not yet entered the
matching quote that terminates the string. That's fine if you
really are entering a multiple-line string, but how likely is that?
Not very. More often, the <code>'&gt;</code> and <code>"&gt;</code>
prompts indicate that you've inadvertantly left out a quote
character. For example:</p>

<pre>
mysql&gt; SELECT * FROM my_table WHERE name = "Smith AND age &lt; 30;
    "&gt;
</pre>

<p>If you enter this <code>SELECT</code> statement, then press
Enter and wait for the result, nothing will happen. Instead of
wondering why this query takes so long, notice the clue provided by
the <code>"&gt;</code> prompt. It tells you that <code>mysql</code>
expects to see the rest of an unterminated string. (Do you see the
error in the statement? The string <code>"Smith</code> is missing
the second quote.)</p>

<p>At this point, what do you do? The simplest thing is to cancel
the command. However, you cannot just type <code>\c</code> in this
case, because <code>mysql</code> interprets it as part of the
string that it is collecting! Instead, enter the closing quote
character (so <code>mysql</code> knows you've finished the string),
then type <code>\c</code>:</p>

<pre>
mysql&gt; SELECT * FROM my_table WHERE name = "Smith AND age &lt; 30;
    "&gt; "\c
mysql&gt;
</pre>

<p>The prompt changes back to <code>mysql&gt;</code>, indicating
that <code>mysql</code> is ready for a new command.</p>

<p>It's important to know what the <code>'&gt;</code> and
<code>"&gt;</code> prompts signify, because if you mistakenly enter
an unterminated string, any further lines you type will appear to
be ignored by <code>mysql</code>—including a line containing
<code>QUIT</code>! This can be quite confusing, especially if you
don't know that you need to supply the terminating quote before you
can cancel the current command.</p>

<h2><a id="Database_use" name="Database_use"
href="manual_toc.html#Database_use">3.3 Creating and Using a
Database</a></h2>

<p><a id="IDX367" name="IDX367"></a> <a id="IDX368"
name="IDX368"></a> <a id="IDX369" name="IDX369"></a></p>

<p>Now that you know how to enter commands, it's time to access a
database.</p>

<p>Suppose you have several pets in your home (your menagerie) and
you'd like to keep track of various types of information about
them. You can do so by creating tables to hold your data and
loading them with the desired information. Then you can answer
different sorts of questions about your animals by retrieving data
from the tables. This section shows you how to:</p>

<ul>
<li>Create a database</li>

<li>Create a table</li>

<li>Load data into the table</li>

<li>Retrieve data from the table in various ways</li>

<li>Use multiple tables</li>
</ul>

<p>The menagerie database will be simple (deliberately), but it is
not difficult to think of real-world situations in which a similar
type of database might be used. For example, a database like this
could be used by a farmer to keep track of livestock, or by a
veterinarian to keep track of patient records. A menagerie
distribution containing some of the queries and sample data used in
the following sections can be obtained from the MySQL web site.
It's available in either compressed <code>tar</code> format (<a
href="http://www.mysql.com/Downloads/Contrib/Examples/menagerie.tar.gz">
http://www.mysql.com/Downloads/Contrib/Examples/menagerie.tar.gz</a>)
or Zip format (<a
href="http://www.mysql.com/Downloads/Contrib/Examples/menagerie.zip">
http://www.mysql.com/Downloads/Contrib/Examples/menagerie.zip</a>).</p>

<p>Use the <code>SHOW</code> statement to find out what databases
currently exist on the server:</p>

<pre>
mysql&gt; SHOW DATABASES;
+----------+
| Database |
+----------+
| mysql    |
| test     |
| tmp      |
+----------+
</pre>

<p>The list of databases is probably different on your machine, but
the <code>mysql</code> and <code>test</code> databases are likely
to be among them. The <code>mysql</code> database is required
because it describes user access privileges. The <code>test</code>
database is often provided as a workspace for users to try things
out.</p>

<p>Note that you may not see all databases if you don't have the
<code>SHOW DATABASES</code> privilege. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</p>

<p>If the <code>test</code> database exists, try to access it:</p>

<pre>
mysql&gt; USE test
Database changed
</pre>

<p>Note that <code>USE</code>, like <code>QUIT</code>, does not
require a semicolon. (You can terminate such statements with a
semicolon if you like; it does no harm.) The <code>USE</code>
statement is special in another way, too: it must be given on a
single line.</p>

<p>You can use the <code>test</code> database (if you have access
to it) for the examples that follow, but anything you create in
that database can be removed by anyone else with access to it. For
this reason, you should probably ask your MySQL administrator for
permission to use a database of your own. Suppose you want to call
yours <code>menagerie</code>. The administrator needs to execute a
command like this:</p>

<pre>
mysql&gt; GRANT ALL ON menagerie.* TO your_mysql_name;
</pre>

<p>where <code>your_mysql_name</code> is the MySQL user name
assigned to you.</p>

<h3><a id="Creating_database" name="Creating_database"
href="manual_toc.html#Creating_database">3.3.1 Creating and
Selecting a Database</a></h3>

<p><a id="IDX370" name="IDX370"></a> <a id="IDX371"
name="IDX371"></a></p>

<p>If the administrator creates your database for you when setting
up your permissions, you can begin using it. Otherwise, you need to
create it yourself:</p>

<pre>
mysql&gt; CREATE DATABASE menagerie;
</pre>

<p>Under Unix, database names are case-sensitive (unlike SQL
keywords), so you must always refer to your database as
<code>menagerie</code>, not as <code>Menagerie</code>,
<code>MENAGERIE</code>, or some other variant. This is also true
for table names. (Under Windows, this restriction does not apply,
although you must refer to databases and tables using the same
lettercase throughout a given query.)</p>

<p>Creating a database does not select it for use; you must do that
explicitly. To make <code>menagerie</code> the current database,
use this command:</p>

<pre>
mysql&gt; USE menagerie
Database changed
</pre>

<p>Your database needs to be created only once, but you must select
it for use each time you begin a <code>mysql</code> session. You
can do this by issuing a <code>USE</code> statement as shown above.
Alternatively, you can select the database on the command-line when
you invoke <code>mysql</code>. Just specify its name after any
connection parameters that you might need to provide. For
example:</p>

<pre>
shell&gt; mysql -h host -u user -p menagerie
Enter password: ********
</pre>

<p>Note that <code>menagerie</code> is not your password on the
command just shown. If you want to supply your password on the
command-line after the <code>-p</code> option, you must do so with
no intervening space (for example, as <code>-pmypassword</code>,
not as <code>-p mypassword</code>). However, putting your password
on the command-line is not recommended, because doing so exposes it
to snooping by other users logged in on your machine.</p>

<h3><a id="Creating_tables" name="Creating_tables"
href="manual_toc.html#Creating_tables">3.3.2 Creating a
Table</a></h3>

<p><a id="IDX372" name="IDX372"></a> <a id="IDX373"
name="IDX373"></a></p>

<p>Creating the database is the easy part, but at this point it's
empty, as <code>SHOW TABLES</code> will tell you:</p>

<pre>
mysql&gt; SHOW TABLES;
Empty set (0.00 sec)
</pre>

<p>The harder part is deciding what the structure of your database
should be: what tables you will need and what columns will be in
each of them.</p>

<p>You'll want a table that contains a record for each of your
pets. This can be called the <code>pet</code> table, and it should
contain, as a bare minimum, each animal's name. Because the name by
itself is not very interesting, the table should contain other
information. For example, if more than one person in your family
keeps pets, you might want to list each animal's owner. You might
also want to record some basic descriptive information such as
species and sex.</p>

<p>How about age? That might be of interest, but it's not a good
thing to store in a database. Age changes as time passes, which
means you'd have to update your records often. Instead, it's better
to store a fixed value such as date of birth. Then, whenever you
need age, you can calculate it as the difference between the
current date and the birth date. MySQL provides functions for doing
date arithmetic, so this is not difficult. Storing birth date
rather than age has other advantages, too:</p>

<ul>
<li>You can use the database for tasks such as generating reminders
for upcoming pet birthdays. (If you think this type of query is
somewhat silly, note that it is the same question you might ask in
the context of a business database to identify clients to whom
you'll soon need to send out birthday greetings, for that
computer-assisted personal touch.)</li>

<li>You can calculate age in relation to dates other than the
current date. For example, if you store death date in the database,
you can easily calculate how old a pet was when it died.</li>
</ul>

<p>You can probably think of other types of information that would
be useful in the <code>pet</code> table, but the ones identified so
far are sufficient for now: name, owner, species, sex, birth, and
death.</p>

<p>Use a <code>CREATE TABLE</code> statement to specify the layout
of your table:</p>

<pre>
mysql&gt; CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
    -&gt; species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
</pre>

<p><code>VARCHAR</code> is a good choice for the <code>name</code>,
<code>owner</code>, and <code>species</code> columns because the
column values will vary in length. The lengths of those columns
need not all be the same, and need not be <code>20</code>. You can
pick any length from <code>1</code> to <code>255</code>, whatever
seems most reasonable to you. (If you make a poor choice and it
turns out later that you need a longer field, MySQL provides an
<code>ALTER TABLE</code> statement.)</p>

<p>Several types of values can be chosen to represent sex in animal
records, such as <code>"m"</code> and <code>"f"</code>, or perhaps
<code>"male"</code> and <code>"female"</code>. It's simplest to use
the single characters <code>"m"</code> and <code>"f"</code>.</p>

<p>The use of the <code>DATE</code> data type for the
<code>birth</code> and <code>death</code> columns is a fairly
obvious choice.</p>

<p>Now that you have created a table, <code>SHOW TABLES</code>
should produce some output:</p>

<pre>
mysql&gt; SHOW TABLES;
+---------------------+
| Tables in menagerie |
+---------------------+
| pet                 |
+---------------------+
</pre>

<p>To verify that your table was created the way you expected, use
a <code>DESCRIBE</code> statement:</p>

<pre>
mysql&gt; DESCRIBE pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
</pre>

<p>You can use <code>DESCRIBE</code> any time, for example, if you
forget the names of the columns in your table or what types they
are.</p>

<h3><a id="Loading_tables" name="Loading_tables"
href="manual_toc.html#Loading_tables">3.3.3 Loading Data into a
Table</a></h3>

<p><a id="IDX374" name="IDX374"></a> <a id="IDX375"
name="IDX375"></a> <a id="IDX376" name="IDX376"></a></p>

<p>After creating your table, you need to populate it. The
<code>LOAD DATA</code> and <code>INSERT</code> statements are
useful for this.</p>

<p>Suppose your pet records can be described as shown here.
(Observe that MySQL expects dates in <code>'YYYY-MM-DD'</code>
format; this may be different from what you are used to.)</p>

<table border="1" width="100%">
<tr>
<td><strong>name</strong></td>
<td><strong>owner</strong></td>
<td><strong>species</strong></td>
<td><strong>sex</strong></td>
<td><strong>birth</strong></td>
<td><strong>death</strong></td>
</tr>

<tr>
<td>Fluffy</td>
<td>Harold</td>
<td>cat</td>
<td>f</td>
<td>1993-02-04</td>
<td></td>
</tr>

<tr>
<td>Claws</td>
<td>Gwen</td>
<td>cat</td>
<td>m</td>
<td>1994-03-17</td>
<td></td>
</tr>

<tr>
<td>Buffy</td>
<td>Harold</td>
<td>dog</td>
<td>f</td>
<td>1989-05-13</td>
<td></td>
</tr>

<tr>
<td>Fang</td>
<td>Benny</td>
<td>dog</td>
<td>m</td>
<td>1990-08-27</td>
<td></td>
</tr>

<tr>
<td>Bowser</td>
<td>Diane</td>
<td>dog</td>
<td>m</td>
<td>1998-08-31</td>
<td>1995-07-29</td>
</tr>

<tr>
<td>Chirpy</td>
<td>Gwen</td>
<td>bird</td>
<td>f</td>
<td>1998-09-11</td>
<td></td>
</tr>

<tr>
<td>Whistler</td>
<td>Gwen</td>
<td>bird</td>
<td></td>
<td>1997-12-09</td>
<td></td>
</tr>

<tr>
<td>Slim</td>
<td>Benny</td>
<td>snake</td>
<td>m</td>
<td>1996-04-29</td>
<td></td>
</tr>
</table>

<p>Because you are beginning with an empty table, an easy way to
populate it is to create a text file containing a row for each of
your animals, then load the contents of the file into the table
with a single statement.</p>

<p>You could create a text file <tt>`pet.txt'</tt> containing one
record per line, with values separated by tabs, and given in the
order in which the columns were listed in the <code>CREATE
TABLE</code> statement. For missing values (such as unknown sexes
or death dates for animals that are still living), you can use
<code>NULL</code> values. To represent these in your text file, use
<code>\N</code>. For example, the record for Whistler the bird
would look like this (where the whitespace between values is a
single tab character):</p>

<table border="1" width="100%">
<tr>
<td><strong>name</strong></td>
<td><strong>owner</strong></td>
<td><strong>species</strong></td>
<td><strong>sex</strong></td>
<td><strong>birth</strong></td>
<td><strong>death</strong></td>
</tr>

<tr>
<td><code>Whistler</code></td>
<td><code>Gwen</code></td>
<td><code>bird</code></td>
<td><code>\N</code></td>
<td><code>1997-12-09</code></td>
<td><code>\N</code></td>
</tr>
</table>

<p>To load the text file <tt>`pet.txt'</tt> into the
<code>pet</code> table, use this command:</p>

<pre>
mysql&gt; LOAD DATA LOCAL INFILE "pet.txt" INTO TABLE pet;
</pre>

<p>You can specify the column value separator and end of line
marker explicitly in the <code>LOAD DATA</code> statement if you
wish, but the defaults are tab and linefeed. These are sufficient
for the statement to read the file <tt>`pet.txt'</tt> properly.</p>

<p>When you want to add new records one at a time, the
<code>INSERT</code> statement is useful. In its simplest form, you
supply values for each column, in the order in which the columns
were listed in the <code>CREATE TABLE</code> statement. Suppose
Diane gets a new hamster named Puffball. You could add a new record
using an <code>INSERT</code> statement like this:</p>

<pre>
mysql&gt; INSERT INTO pet
    -&gt; VALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL);
</pre>

<p>Note that string and date values are specified as quoted strings
here. Also, with <code>INSERT</code>, you can insert
<code>NULL</code> directly to represent a missing value. You do not
use <code>\N</code> like you do with <code>LOAD DATA</code>.</p>

<p>From this example, you should be able to see that there would be
a lot more typing involved to load your records initially using
several <code>INSERT</code> statements rather than a single
<code>LOAD DATA</code> statement.</p>

<h3><a id="Retrieving_data" name="Retrieving_data"
href="manual_toc.html#Retrieving_data">3.3.4 Retrieving Information
from a Table</a></h3>

<p><a id="IDX377" name="IDX377"></a> <a id="IDX378"
name="IDX378"></a> <a id="IDX379" name="IDX379"></a> <a id="IDX380"
name="IDX380"></a></p>

<p>The <code>SELECT</code> statement is used to pull information
from a table. The general form of the statement is:</p>

<pre>
SELECT what_to_select
FROM which_table
WHERE conditions_to_satisfy
</pre>

<p><code>what_to_select</code> indicates what you want to see. This
can be a list of columns, or <code>*</code> to indicate ``all
columns.'' <code>which_table</code> indicates the table from which
you want to retrieve data. The <code>WHERE</code> clause is
optional. If it's present, <code>conditions_to_satisfy</code>
specifies conditions that rows must satisfy to qualify for
retrieval.</p>

<h4><a id="Selecting_all" name="Selecting_all"
href="manual_toc.html#Selecting_all">3.3.4.1 Selecting All
Data</a></h4>

<p>The simplest form of <code>SELECT</code> retrieves everything
from a table:</p>

<pre>
mysql&gt; SELECT * FROM pet;
+----------+--------+---------+------+------------+------------+
| name     | owner  | species | sex  | birth      | death      |
+----------+--------+---------+------+------------+------------+
| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |
| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |
| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |
| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |
| Bowser   | Diane  | dog     | m    | 1998-08-31 | 1995-07-29 |
| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |
| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |
| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |
| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |
+----------+--------+---------+------+------------+------------+
</pre>

<p>This form of <code>SELECT</code> is useful if you want to review
your entire table, for instance, after you've just loaded it with
your initial dataset. As it happens, the output just shown reveals
an error in your datafile: Bowser appears to have been born after
he died! Consulting your original pedigree papers, you find that
the correct birth year is 1989, not 1998.</p>

<p>There are least a couple of ways to fix this:</p>

<ul>
<li>Edit the file <tt>`pet.txt'</tt> to correct the error, then
empty the table and reload it using <code>DELETE</code> and
<code>LOAD DATA</code>: 

<pre>
mysql&gt; SET AUTOCOMMIT=1;  # Used for quick re-create of the table
mysql&gt; DELETE FROM pet;
mysql&gt; LOAD DATA LOCAL INFILE "pet.txt" INTO TABLE pet;
</pre>

However, if you do this, you must also re-enter the record for
Puffball.</li>

<li>Fix only the erroneous record with an <code>UPDATE</code>
statement: 

<pre>
mysql&gt; UPDATE pet SET birth = "1989-08-31" WHERE name = "Bowser";
</pre>
</li>
</ul>

<p>As shown above, it is easy to retrieve an entire table. But
typically you don't want to do that, particularly when the table
becomes large. Instead, you're usually more interested in answering
a particular question, in which case you specify some constraints
on the information you want. Let's look at some selection queries
in terms of questions about your pets that they answer.</p>

<h4><a id="Selecting_rows" name="Selecting_rows"
href="manual_toc.html#Selecting_rows">3.3.4.2 Selecting Particular
Rows</a></h4>

<p><a id="IDX381" name="IDX381"></a> <a id="IDX382"
name="IDX382"></a></p>

<p>You can select only particular rows from your table. For
example, if you want to verify the change that you made to Bowser's
birth date, select Bowser's record like this:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name = "Bowser";
+--------+-------+---------+------+------------+------------+
| name   | owner | species | sex  | birth      | death      |
+--------+-------+---------+------+------------+------------+
| Bowser | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |
+--------+-------+---------+------+------------+------------+
</pre>

<p>The output confirms that the year is correctly recorded now as
1989, not 1998.</p>

<p>String comparisons are normally case-insensitive, so you can
specify the name as <code>"bowser"</code>, <code>"BOWSER"</code>,
etc. The query result will be the same.</p>

<p>You can specify conditions on any column, not just
<code>name</code>. For example, if you want to know which animals
were born after 1998, test the <code>birth</code> column:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE birth &gt;= "1998-1-1";
+----------+-------+---------+------+------------+-------+
| name     | owner | species | sex  | birth      | death |
+----------+-------+---------+------+------------+-------+
| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |
| Puffball | Diane | hamster | f    | 1999-03-30 | NULL  |
+----------+-------+---------+------+------------+-------+
</pre>

<p>You can combine conditions, for example, to locate female
dogs:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE species = "dog" AND sex = "f";
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
</pre>

<p>The preceding query uses the <code>AND</code> logical operator.
There is also an <code>OR</code> operator:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE species = "snake" OR species = "bird";
+----------+-------+---------+------+------------+-------+
| name     | owner | species | sex  | birth      | death |
+----------+-------+---------+------+------------+-------+
| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL  |
| Slim     | Benny | snake   | m    | 1996-04-29 | NULL  |
+----------+-------+---------+------+------------+-------+
</pre>

<p><code>AND</code> and <code>OR</code> may be intermixed. If you
do that, it's a good idea to use parentheses to indicate how
conditions should be grouped:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE (species = "cat" AND sex = "m")
    -&gt; OR (species = "dog" AND sex = "f");
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
</pre>

<h4><a id="Selecting_columns" name="Selecting_columns"
href="manual_toc.html#Selecting_columns">3.3.4.3 Selecting
Particular Columns</a></h4>

<p><a id="IDX383" name="IDX383"></a> <a id="IDX384"
name="IDX384"></a></p>

<p>If you don't want to see entire rows from your table, just name
the columns in which you're interested, separated by commas. For
example, if you want to know when your animals were born, select
the <code>name</code> and <code>birth</code> columns:</p>

<pre>
mysql&gt; SELECT name, birth FROM pet;
+----------+------------+
| name     | birth      |
+----------+------------+
| Fluffy   | 1993-02-04 |
| Claws    | 1994-03-17 |
| Buffy    | 1989-05-13 |
| Fang     | 1990-08-27 |
| Bowser   | 1989-08-31 |
| Chirpy   | 1998-09-11 |
| Whistler | 1997-12-09 |
| Slim     | 1996-04-29 |
| Puffball | 1999-03-30 |
+----------+------------+
</pre>

<p>To find out who owns pets, use this query:</p>

<pre>
mysql&gt; SELECT owner FROM pet;
+--------+
| owner  |
+--------+
| Harold |
| Gwen   |
| Harold |
| Benny  |
| Diane  |
| Gwen   |
| Gwen   |
| Benny  |
| Diane  |
+--------+
</pre>

<p><a id="IDX385" name="IDX385"></a> However, notice that the query
simply retrieves the <code>owner</code> field from each record, and
some of them appear more than once. To minimise the output,
retrieve each unique output record just once by adding the keyword
<code>DISTINCT</code>:</p>

<pre>
mysql&gt; SELECT DISTINCT owner FROM pet;
+--------+
| owner  |
+--------+
| Benny  |
| Diane  |
| Gwen   |
| Harold |
+--------+
</pre>

<p>You can use a <code>WHERE</code> clause to combine row selection
with column selection. For example, to get birth dates for dogs and
cats only, use this query:</p>

<pre>
mysql&gt; SELECT name, species, birth FROM pet
    -&gt; WHERE species = "dog" OR species = "cat";
+--------+---------+------------+
| name   | species | birth      |
+--------+---------+------------+
| Fluffy | cat     | 1993-02-04 |
| Claws  | cat     | 1994-03-17 |
| Buffy  | dog     | 1989-05-13 |
| Fang   | dog     | 1990-08-27 |
| Bowser | dog     | 1989-08-31 |
+--------+---------+------------+
</pre>

<h4><a id="Sorting_rows" name="Sorting_rows"
href="manual_toc.html#Sorting_rows">3.3.4.4 Sorting Rows</a></h4>

<p><a id="IDX386" name="IDX386"></a> <a id="IDX387"
name="IDX387"></a> <a id="IDX388" name="IDX388"></a> <a id="IDX389"
name="IDX389"></a></p>

<p>You may have noticed in the preceding examples that the result
rows are displayed in no particular order. However, it's often
easier to examine query output when the rows are sorted in some
meaningful way. To sort a result, use an <code>ORDER BY</code>
clause.</p>

<p>Here are animal birthdays, sorted by date:</p>

<pre>
mysql&gt; SELECT name, birth FROM pet ORDER BY birth;
+----------+------------+
| name     | birth      |
+----------+------------+
| Buffy    | 1989-05-13 |
| Bowser   | 1989-08-31 |
| Fang     | 1990-08-27 |
| Fluffy   | 1993-02-04 |
| Claws    | 1994-03-17 |
| Slim     | 1996-04-29 |
| Whistler | 1997-12-09 |
| Chirpy   | 1998-09-11 |
| Puffball | 1999-03-30 |
+----------+------------+
</pre>

<p>On character type columns, sorting—like all other comparison
operations—is normally performed in a case-insensitive fashion.
This means that the order will be undefined for columns that are
identical except for their case. You can force a case-sensitive
sort by using the BINARY cast: <code>ORDER BY
BINARY(field)</code>.</p>

<p>To sort in reverse order, add the <code>DESC</code> (descending)
keyword to the name of the column you are sorting by:</p>

<pre>
mysql&gt; SELECT name, birth FROM pet ORDER BY birth DESC;
+----------+------------+
| name     | birth      |
+----------+------------+
| Puffball | 1999-03-30 |
| Chirpy   | 1998-09-11 |
| Whistler | 1997-12-09 |
| Slim     | 1996-04-29 |
| Claws    | 1994-03-17 |
| Fluffy   | 1993-02-04 |
| Fang     | 1990-08-27 |
| Bowser   | 1989-08-31 |
| Buffy    | 1989-05-13 |
+----------+------------+
</pre>

<p>You can sort on multiple columns. For example, to sort by type
of animal, then by birth date within animal type with youngest
animals first, use the following query:</p>

<pre>
mysql&gt; SELECT name, species, birth FROM pet ORDER BY species, birth DESC;
+----------+---------+------------+
| name     | species | birth      |
+----------+---------+------------+
| Chirpy   | bird    | 1998-09-11 |
| Whistler | bird    | 1997-12-09 |
| Claws    | cat     | 1994-03-17 |
| Fluffy   | cat     | 1993-02-04 |
| Fang     | dog     | 1990-08-27 |
| Bowser   | dog     | 1989-08-31 |
| Buffy    | dog     | 1989-05-13 |
| Puffball | hamster | 1999-03-30 |
| Slim     | snake   | 1996-04-29 |
+----------+---------+------------+
</pre>

<p>Note that the <code>DESC</code> keyword applies only to the
column name immediately preceding it (<code>birth</code>);
<code>species</code> values are still sorted in ascending
order.</p>

<h4><a id="Date_calculations" name="Date_calculations"
href="manual_toc.html#Date_calculations">3.3.4.5 Date
Calculations</a></h4>

<p><a id="IDX390" name="IDX390"></a> <a id="IDX391"
name="IDX391"></a> <a id="IDX392" name="IDX392"></a> <a id="IDX393"
name="IDX393"></a></p>

<p>MySQL provides several functions that you can use to perform
calculations on dates, for example, to calculate ages or extract
parts of dates.</p>

<p>To determine how many years old each of your pets is, compute
the difference in the year part of the current date and the birth
date, then subtract one if the current date occurs earlier in the
calendar year than the birth date. The following query shows, for
each pet, the birth date, the current date, and the age in
years.</p>

<pre>
mysql&gt; SELECT name, birth, CURRENT_DATE,
    -&gt; (YEAR(CURRENT_DATE)-YEAR(birth))
    -&gt; - (RIGHT(CURRENT_DATE,5)&lt;RIGHT(birth,5))
    -&gt; AS age
    -&gt; FROM pet;
+----------+------------+--------------+------+
| name     | birth      | CURRENT_DATE | age  |
+----------+------------+--------------+------+
| Fluffy   | 1993-02-04 | 2001-08-29   |    8 |
| Claws    | 1994-03-17 | 2001-08-29   |    7 |
| Buffy    | 1989-05-13 | 2001-08-29   |   12 |
| Fang     | 1990-08-27 | 2001-08-29   |   11 |
| Bowser   | 1989-08-31 | 2001-08-29   |   11 |
| Chirpy   | 1998-09-11 | 2001-08-29   |    2 |
| Whistler | 1997-12-09 | 2001-08-29   |    3 |
| Slim     | 1996-04-29 | 2001-08-29   |    5 |
| Puffball | 1999-03-30 | 2001-08-29   |    2 |
+----------+------------+--------------+------+
</pre>

<p>Here, <code>YEAR()</code> pulls out the year part of a date and
<code>RIGHT()</code> pulls off the rightmost five characters that
represent the <code>MM-DD</code> (calendar year) part of the date.
The part of the expression that compares the <code>MM-DD</code>
values evaluates to 1 or 0, which adjusts the year difference down
a year if <code>CURRENT_DATE</code> occurs earlier in the year than
<code>birth</code>. The full expression is somewhat ungainly, so an
alias (<code>age</code>) is used to make the output column label
more meaningful.</p>

<p>The query works, but the result could be scanned more easily if
the rows were presented in some order. This can be done by adding
an <code>ORDER BY name</code> clause to sort the output by
name:</p>

<pre>
mysql&gt; SELECT name, birth, CURRENT_DATE,
    -&gt; (YEAR(CURRENT_DATE)-YEAR(birth))
    -&gt; - (RIGHT(CURRENT_DATE,5)&lt;RIGHT(birth,5))
    -&gt; AS age
    -&gt; FROM pet ORDER BY name;
+----------+------------+--------------+------+
| name     | birth      | CURRENT_DATE | age  |
+----------+------------+--------------+------+
| Bowser   | 1989-08-31 | 2001-08-29   |   11 |
| Buffy    | 1989-05-13 | 2001-08-29   |   12 |
| Chirpy   | 1998-09-11 | 2001-08-29   |    2 |
| Claws    | 1994-03-17 | 2001-08-29   |    7 |
| Fang     | 1990-08-27 | 2001-08-29   |   11 |
| Fluffy   | 1993-02-04 | 2001-08-29   |    8 |
| Puffball | 1999-03-30 | 2001-08-29   |    2 |
| Slim     | 1996-04-29 | 2001-08-29   |    5 |
| Whistler | 1997-12-09 | 2001-08-29   |    3 |
+----------+------------+--------------+------+
</pre>

<p>To sort the output by <code>age</code> rather than
<code>name</code>, just use a different <code>ORDER BY</code>
clause:</p>

<pre>
mysql&gt; SELECT name, birth, CURRENT_DATE,
    -&gt; (YEAR(CURRENT_DATE)-YEAR(birth))
    -&gt; - (RIGHT(CURRENT_DATE,5)&lt;RIGHT(birth,5))
    -&gt; AS age
    -&gt; FROM pet ORDER BY age;
+----------+------------+--------------+------+
| name     | birth      | CURRENT_DATE | age  |
+----------+------------+--------------+------+
| Chirpy   | 1998-09-11 | 2001-08-29   |    2 |
| Puffball | 1999-03-30 | 2001-08-29   |    2 |
| Whistler | 1997-12-09 | 2001-08-29   |    3 |
| Slim     | 1996-04-29 | 2001-08-29   |    5 |
| Claws    | 1994-03-17 | 2001-08-29   |    7 |
| Fluffy   | 1993-02-04 | 2001-08-29   |    8 |
| Fang     | 1990-08-27 | 2001-08-29   |   11 |
| Bowser   | 1989-08-31 | 2001-08-29   |   11 |
| Buffy    | 1989-05-13 | 2001-08-29   |   12 |
+----------+------------+--------------+------+
</pre>

<p>A similar query can be used to determine age at death for
animals that have died. You determine which animals these are by
checking whether the <code>death</code> value is <code>NULL</code>.
Then, for those with non-<code>NULL</code> values, compute the
difference between the <code>death</code> and <code>birth</code>
values:</p>

<pre>
mysql&gt; SELECT name, birth, death,
    -&gt; (YEAR(death)-YEAR(birth)) - (RIGHT(death,5)&lt;RIGHT(birth,5))
    -&gt; AS age
    -&gt; FROM pet WHERE death IS NOT NULL ORDER BY age;
+--------+------------+------------+------+
| name   | birth      | death      | age  |
+--------+------------+------------+------+
| Bowser | 1989-08-31 | 1995-07-29 |    5 |
+--------+------------+------------+------+
</pre>

<p>The query uses <code>death IS NOT NULL</code> rather than
<code>death &lt;&gt; NULL</code> because <code>NULL</code> is a
special value. This is explained later. See section <a
href="manual.html#Working_with_NULL">3.3.4.6 Working with
<code>NULL</code> Values</a>.</p>

<p>What if you want to know which animals have birthdays next
month? For this type of calculation, year and day are irrelevant;
you simply want to extract the month part of the <code>birth</code>
column. MySQL provides several date-part extraction functions, such
as <code>YEAR()</code>, <code>MONTH()</code>, and
<code>DAYOFMONTH()</code>. <code>MONTH()</code> is the appropriate
function here. To see how it works, run a simple query that
displays the value of both <code>birth</code> and
<code>MONTH(birth)</code>:</p>

<pre>
mysql&gt; SELECT name, birth, MONTH(birth) FROM pet;
+----------+------------+--------------+
| name     | birth      | MONTH(birth) |
+----------+------------+--------------+
| Fluffy   | 1993-02-04 |            2 |
| Claws    | 1994-03-17 |            3 |
| Buffy    | 1989-05-13 |            5 |
| Fang     | 1990-08-27 |            8 |
| Bowser   | 1989-08-31 |            8 |
| Chirpy   | 1998-09-11 |            9 |
| Whistler | 1997-12-09 |           12 |
| Slim     | 1996-04-29 |            4 |
| Puffball | 1999-03-30 |            3 |
+----------+------------+--------------+
</pre>

<p>Finding animals with birthdays in the upcoming month is easy,
too. Suppose the current month is April. Then the month value is
<code>4</code> and you look for animals born in May (month 5) like
this:</p>

<pre>
mysql&gt; SELECT name, birth FROM pet WHERE MONTH(birth) = 5;
+-------+------------+
| name  | birth      |
+-------+------------+
| Buffy | 1989-05-13 |
+-------+------------+
</pre>

<p>There is a small complication if the current month is December,
of course. You don't just add one to the month number
(<code>12</code>) and look for animals born in month 13, because
there is no such month. Instead, you look for animals born in
January (month 1).</p>

<p>You can even write the query so that it works no matter what the
current month is. That way you don't have to use a particular month
number in the query. <code>DATE_ADD()</code> allows you to add a
time interval to a given date. If you add a month to the value of
<code>NOW()</code>, then extract the month part with
<code>MONTH()</code>, the result produces the month in which to
look for birthdays:</p>

<pre>
mysql&gt; SELECT name, birth FROM pet
    -&gt; WHERE MONTH(birth) = MONTH(DATE_ADD(NOW(), INTERVAL 1 MONTH));
</pre>

<p>A different way to accomplish the same task is to add
<code>1</code> to get the next month after the current one (after
using the modulo function (<code>MOD</code>) to wrap around the
month value to <code>0</code> if it is currently
<code>12</code>):</p>

<pre>
mysql&gt; SELECT name, birth FROM pet
    -&gt; WHERE MONTH(birth) = MOD(MONTH(NOW()), 12) + 1;
</pre>

<p>Note that <code>MONTH</code> returns a number between 1 and 12.
And <code>MOD(something,12)</code> returns a number between 0 and
11. So the addition has to be after the <code>MOD()</code>,
otherwise we would go from November (11) to January (1).</p>

<h4><a id="Working_with_NULL" name="Working_with_NULL"
href="manual_toc.html#Working_with_NULL">3.3.4.6 Working with
<code>NULL</code> Values</a></h4>

<p><a id="IDX394" name="IDX394"></a> <a id="IDX395"
name="IDX395"></a></p>

<p>The <code>NULL</code> value can be surprising until you get used
to it. Conceptually, <code>NULL</code> means missing value or
unknown value and it is treated somewhat differently than other
values. To test for <code>NULL</code>, you cannot use the
arithmetic comparison operators such as <code>=</code>,
<code>&lt;</code>, or <code>&lt;&gt;</code>. To demonstrate this
for yourself, try the following query:</p>

<pre>
mysql&gt; SELECT 1 = NULL, 1 &lt;&gt; NULL, 1 &lt; NULL, 1 &gt; NULL;
+----------+-----------+----------+----------+
| 1 = NULL | 1 &lt;&gt; NULL | 1 &lt; NULL | 1 &gt; NULL |
+----------+-----------+----------+----------+
|     NULL |      NULL |     NULL |     NULL |
+----------+-----------+----------+----------+
</pre>

<p>Clearly you get no meaningful results from these comparisons.
Use the <code>IS NULL</code> and <code>IS NOT NULL</code> operators
instead:</p>

<pre>
mysql&gt; SELECT 1 IS NULL, 1 IS NOT NULL;
+-----------+---------------+
| 1 IS NULL | 1 IS NOT NULL |
+-----------+---------------+
|         0 |             1 |
+-----------+---------------+
</pre>

<p>Note that in MySQL, 0 or <code>NULL</code> means false and
anything else means true. The default truth value from a boolean
operation is 1.</p>

<p>This special treatment of <code>NULL</code> is why, in the
previous section, it was necessary to determine which animals are
no longer alive using <code>death IS NOT NULL</code> instead of
<code>death &lt;&gt; NULL</code>.</p>

<p>Two <code>NULL</code> values are regarded as equal in a
<code>GROUP BY</code>.</p>

<p>When doing an <code>ORDER BY</code>, <code>NULL</code> values
are presented first. In versions prior to 4.0.2, if you sort in
descending order using <code>DESC</code>, <code>NULL</code> values
are presented last.</p>

<h4><a id="Pattern_matching" name="Pattern_matching"
href="manual_toc.html#Pattern_matching">3.3.4.7 Pattern
Matching</a></h4>

<p><a id="IDX396" name="IDX396"></a> <a id="IDX397"
name="IDX397"></a> <a id="IDX398" name="IDX398"></a></p>

<p>MySQL provides standard SQL pattern matching as well as a form
of pattern matching based on extended regular expressions similar
to those used by Unix utilities such as <code>vi</code>,
<code>grep</code>, and <code>sed</code>.</p>

<p>SQL pattern matching allows you to use <samp>`_'</samp> to match
any single character and <samp>`%'</samp> to match an arbitrary
number of characters (including zero characters). In MySQL, SQL
patterns are case-insensitive by default. Some examples are shown
here. Note that you do not use <code>=</code> or
<code>&lt;&gt;</code> when you use SQL patterns; use the
<code>LIKE</code> or <code>NOT LIKE</code> comparison operators
instead.</p>

<p>To find names beginning with <samp>`b'</samp>:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name LIKE "b%";
+--------+--------+---------+------+------------+------------+
| name   | owner  | species | sex  | birth      | death      |
+--------+--------+---------+------+------------+------------+
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |
| Bowser | Diane  | dog     | m    | 1989-08-31 | 1995-07-29 |
+--------+--------+---------+------+------------+------------+
</pre>

<p>To find names ending with <samp>`fy'</samp>:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name LIKE "%fy";
+--------+--------+---------+------+------------+-------+
| name   | owner  | species | sex  | birth      | death |
+--------+--------+---------+------+------------+-------+
| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |
+--------+--------+---------+------+------------+-------+
</pre>

<p>To find names containing a <samp>`w'</samp>:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name LIKE "%w%";
+----------+-------+---------+------+------------+------------+
| name     | owner | species | sex  | birth      | death      |
+----------+-------+---------+------+------------+------------+
| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |
| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |
+----------+-------+---------+------+------------+------------+
</pre>

<p>To find names containing exactly five characters, use the
<samp>`_'</samp> pattern character:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name LIKE "_____";
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
</pre>

<p>The other type of pattern matching provided by MySQL uses
extended regular expressions. When you test for a match for this
type of pattern, use the <code>REGEXP</code> and <code>NOT
REGEXP</code> operators (or <code>RLIKE</code> and <code>NOT
RLIKE</code>, which are synonyms).</p>

<p>Some characteristics of extended regular expressions are:</p>

<ul>
<li><samp>`.'</samp> matches any single character.</li>

<li>A character class <samp>`[...]'</samp> matches any character
within the brackets. For example, <samp>`[abc]'</samp> matches
<samp>`a'</samp>, <samp>`b'</samp>, or <samp>`c'</samp>. To name a
range of characters, use a dash. <samp>`[a-z]'</samp> matches any
lowercase letter, whereas <samp>`[0-9]'</samp> matches any
digit.</li>

<li><samp>`*'</samp> matches zero or more instances of the thing
preceding it. For example, <samp>`x*'</samp> matches any number of
<samp>`x'</samp> characters, <samp>`[0-9]*'</samp> matches any
number of digits, and <samp>`.*'</samp> matches any number of
anything.</li>

<li>The pattern matches if it occurs anywhere in the value being
tested. (SQL patterns match only if they match the entire
value.)</li>

<li>To anchor a pattern so that it must match the beginning or end
of the value being tested, use <samp>`^'</samp> at the beginning or
<samp>`$'</samp> at the end of the pattern.</li>
</ul>

<p>To demonstrate how extended regular expressions work, the
<code>LIKE</code> queries shown previously are rewritten here to
use <code>REGEXP</code>.</p>

<p>To find names beginning with <samp>`b'</samp>, use
<samp>`^'</samp> to match the beginning of the name:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "^b";
+--------+--------+---------+------+------------+------------+
| name   | owner  | species | sex  | birth      | death      |
+--------+--------+---------+------+------------+------------+
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |
| Bowser | Diane  | dog     | m    | 1989-08-31 | 1995-07-29 |
+--------+--------+---------+------+------------+------------+
</pre>

<p>Prior to MySQL Version 3.23.4, <code>REGEXP</code> is
case-sensitive, and the previous query will return no rows. To
match either lowercase or uppercase <samp>`b'</samp>, use this
query instead:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "^[bB]";
</pre>

<p>From MySQL 3.23.4 on, to force a <code>REGEXP</code> comparison
to be case-sensitive, use the <code>BINARY</code> keyword to make
one of the strings a binary string. This query will match only
lowercase <samp>`b'</samp> at the beginning of a name:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP BINARY "^b";
</pre>

<p>To find names ending with <samp>`fy'</samp>, use
<samp>`$'</samp> to match the end of the name:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "fy$";
+--------+--------+---------+------+------------+-------+
| name   | owner  | species | sex  | birth      | death |
+--------+--------+---------+------+------------+-------+
| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |
| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |
+--------+--------+---------+------+------------+-------+
</pre>

<p>To find names containing a lowercase or uppercase
<samp>`w'</samp>, use this query:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "w";
+----------+-------+---------+------+------------+------------+
| name     | owner | species | sex  | birth      | death      |
+----------+-------+---------+------+------------+------------+
| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |
| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |
| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |
+----------+-------+---------+------+------------+------------+
</pre>

<p>Because a regular expression pattern matches if it occurs
anywhere in the value, it is not necessary in the previous query to
put a wildcard on either side of the pattern to get it to match the
entire value like it would be if you used a SQL pattern.</p>

<p>To find names containing exactly five characters, use
<samp>`^'</samp> and <samp>`$'</samp> to match the beginning and
end of the name, and five instances of <samp>`.'</samp> in
between:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "^.....$";
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
</pre>

<p>You could also write the previous query using the
<samp>`{n}'</samp> ``repeat-<code>n</code>-times'' operator:</p>

<pre>
mysql&gt; SELECT * FROM pet WHERE name REGEXP "^.{5}$";
+-------+--------+---------+------+------------+-------+
| name  | owner  | species | sex  | birth      | death |
+-------+--------+---------+------+------------+-------+
| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |
| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |
+-------+--------+---------+------+------------+-------+
</pre>

<h4><a id="Counting_rows" name="Counting_rows"
href="manual_toc.html#Counting_rows">3.3.4.8 Counting Rows</a></h4>

<p><a id="IDX399" name="IDX399"></a> <a id="IDX400"
name="IDX400"></a> <a id="IDX401" name="IDX401"></a></p>

<p>Databases are often used to answer the question, ``How often
does a certain type of data occur in a table?'' For example, you
might want to know how many pets you have, or how many pets each
owner has, or you might want to perform various kinds of censuses
on your animals.</p>

<p>Counting the total number of animals you have is the same
question as ``How many rows are in the <code>pet</code> table?''
because there is one record per pet. The <code>COUNT()</code>
function counts the number of non-<code>NULL</code> results, so the
query to count your animals looks like this:</p>

<pre>
mysql&gt; SELECT COUNT(*) FROM pet;
+----------+
| COUNT(*) |
+----------+
|        9 |
+----------+
</pre>

<p>Earlier, you retrieved the names of the people who owned pets.
You can use <code>COUNT()</code> if you want to find out how many
pets each owner has:</p>

<pre>
mysql&gt; SELECT owner, COUNT(*) FROM pet GROUP BY owner;
+--------+----------+
| owner  | COUNT(*) |
+--------+----------+
| Benny  |        2 |
| Diane  |        2 |
| Gwen   |        3 |
| Harold |        2 |
+--------+----------+
</pre>

<p>Note the use of <code>GROUP BY</code> to group together all
records for each <code>owner</code>. Without it, all you get is an
error message:</p>

<pre>
mysql&gt; SELECT owner, COUNT(owner) FROM pet;
ERROR 1140 at line 1: Mixing of GROUP columns (MIN(),MAX(),COUNT()...)
with no GROUP columns is illegal if there is no GROUP BY clause
</pre>

<p><code>COUNT()</code> and <code>GROUP BY</code> are useful for
characterising your data in various ways. The following examples
show different ways to perform animal census operations.</p>

<p>Number of animals per species:</p>

<pre>
mysql&gt; SELECT species, COUNT(*) FROM pet GROUP BY species;
+---------+----------+
| species | COUNT(*) |
+---------+----------+
| bird    |        2 |
| cat     |        2 |
| dog     |        3 |
| hamster |        1 |
| snake   |        1 |
+---------+----------+
</pre>

<p>Number of animals per sex:</p>

<pre>
mysql&gt; SELECT sex, COUNT(*) FROM pet GROUP BY sex;
+------+----------+
| sex  | COUNT(*) |
+------+----------+
| NULL |        1 |
| f    |        4 |
| m    |        4 |
+------+----------+
</pre>

<p>(In this output, <code>NULL</code> indicates sex unknown.)</p>

<p>Number of animals per combination of species and sex:</p>

<pre>
mysql&gt; SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| bird    | NULL |        1 |
| bird    | f    |        1 |
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
| hamster | f    |        1 |
| snake   | m    |        1 |
+---------+------+----------+
</pre>

<p>You need not retrieve an entire table when you use
<code>COUNT()</code>. For example, the previous query, when
performed just on dogs and cats, looks like this:</p>

<pre>
mysql&gt; SELECT species, sex, COUNT(*) FROM pet
    -&gt; WHERE species = "dog" OR species = "cat"
    -&gt; GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
+---------+------+----------+
</pre>

<p>Or, if you wanted the number of animals per sex only for
known-sex animals:</p>

<pre>
mysql&gt; SELECT species, sex, COUNT(*) FROM pet
    -&gt; WHERE sex IS NOT NULL
    -&gt; GROUP BY species, sex;
+---------+------+----------+
| species | sex  | COUNT(*) |
+---------+------+----------+
| bird    | f    |        1 |
| cat     | f    |        1 |
| cat     | m    |        1 |
| dog     | f    |        1 |
| dog     | m    |        2 |
| hamster | f    |        1 |
| snake   | m    |        1 |
+---------+------+----------+
</pre>

<h4><a id="Multiple_tables" name="Multiple_tables"
href="manual_toc.html#Multiple_tables">3.3.4.9 Using More Than one
Table</a></h4>

<p><a id="IDX402" name="IDX402"></a></p>

<p>The <code>pet</code> table keeps track of which pets you have.
If you want to record other information about them, such as events
in their lives like visits to the vet or when litters are born, you
need another table. What should this table look like? It needs:</p>

<ul>
<li>To contain the pet name so you know which animal each event
pertains to.</li>

<li>A date so you know when the event occurred.</li>

<li>A field to describe the event.</li>

<li>An event type field, if you want to be able to categorise
events.</li>
</ul>

<p>Given these considerations, the <code>CREATE TABLE</code>
statement for the <code>event</code> table might look like
this:</p>

<pre>
mysql&gt; CREATE TABLE event (name VARCHAR(20), date DATE,
    -&gt; type VARCHAR(15), remark VARCHAR(255));
</pre>

<p>As with the <code>pet</code> table, it's easiest to load the
initial records by creating a tab-delimited text file containing
the information:</p>

<table border="1" width="100%">
<tr>
<td><strong>name</strong></td>
<td><strong>date</strong></td>
<td><strong>type</strong></td>
<td><strong>remark</strong></td>
</tr>

<tr>
<td>Fluffy</td>
<td>1995-05-15</td>
<td>litter</td>
<td>4 kittens, 3 female, 1 male</td>
</tr>

<tr>
<td>Buffy</td>
<td>1993-06-23</td>
<td>litter</td>
<td>5 puppies, 2 female, 3 male</td>
</tr>

<tr>
<td>Buffy</td>
<td>1994-06-19</td>
<td>litter</td>
<td>3 puppies, 3 female</td>
</tr>

<tr>
<td>Chirpy</td>
<td>1999-03-21</td>
<td>vet</td>
<td>needed beak straightened</td>
</tr>

<tr>
<td>Slim</td>
<td>1997-08-03</td>
<td>vet</td>
<td>broken rib</td>
</tr>

<tr>
<td>Bowser</td>
<td>1991-10-12</td>
<td>kennel</td>
<td></td>
</tr>

<tr>
<td>Fang</td>
<td>1991-10-12</td>
<td>kennel</td>
<td></td>
</tr>

<tr>
<td>Fang</td>
<td>1998-08-28</td>
<td>birthday</td>
<td>Gave him a new chew toy</td>
</tr>

<tr>
<td>Claws</td>
<td>1998-03-17</td>
<td>birthday</td>
<td>Gave him a new flea collar</td>
</tr>

<tr>
<td>Whistler</td>
<td>1998-12-09</td>
<td>birthday</td>
<td>First birthday</td>
</tr>
</table>

<p>Load the records like this:</p>

<pre>
mysql&gt; LOAD DATA LOCAL INFILE "event.txt" INTO TABLE event;
</pre>

<p>Based on what you've learned from the queries you've run on the
<code>pet</code> table, you should be able to perform retrievals on
the records in the <code>event</code> table; the principles are the
same. But when is the <code>event</code> table by itself
insufficient to answer questions you might ask?</p>

<p>Suppose you want to find out the ages of each pet when they had
their litters. The <code>event</code> table indicates when this
occurred, but to calculate the age of the mother, you need her
birth date. Because that is stored in the <code>pet</code> table,
you need both tables for the query:</p>

<pre>
mysql&gt; SELECT pet.name,
    -&gt; (TO_DAYS(date) - TO_DAYS(birth))/365 AS age,
    -&gt; remark
    -&gt; FROM pet, event
    -&gt; WHERE pet.name = event.name AND type = "litter";
+--------+------+-----------------------------+
| name   | age  | remark                      |
+--------+------+-----------------------------+
| Fluffy | 2.27 | 4 kittens, 3 female, 1 male |
| Buffy  | 4.12 | 5 puppies, 2 female, 3 male |
| Buffy  | 5.10 | 3 puppies, 3 female         |
+--------+------+-----------------------------+
</pre>

<p>There are several things to note about this query:</p>

<ul>
<li>The <code>FROM</code> clause lists two tables because the query
needs to pull information from both of them.</li>

<li>When combining (joining) information from multiple tables, you
need to specify how records in one table can be matched to records
in the other. This is easy because they both have a
<code>name</code> column. The query uses <code>WHERE</code> clause
to match up records in the two tables based on the
<code>name</code> values.</li>

<li>Because the <code>name</code> column occurs in both tables, you
must be specific about which table you mean when referring to the
column. This is done by prepending the table name to the column
name.</li>
</ul>

<p>You need not have two different tables to perform a join.
Sometimes it is useful to join a table to itself, if you want to
compare records in a table to other records in that same table. For
example, to find breeding pairs among your pets, you can join the
<code>pet</code> table with itself to pair up males and females of
like species:</p>

<pre>
mysql&gt; SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species
    -&gt; FROM pet AS p1, pet AS p2
    -&gt; WHERE p1.species = p2.species AND p1.sex = "f" AND p2.sex = "m";
+--------+------+--------+------+---------+
| name   | sex  | name   | sex  | species |
+--------+------+--------+------+---------+
| Fluffy | f    | Claws  | m    | cat     |
| Buffy  | f    | Fang   | m    | dog     |
| Buffy  | f    | Bowser | m    | dog     |
+--------+------+--------+------+---------+
</pre>

<p>In this query, we specify aliases for the table name in order to
refer to the columns and keep straight which instance of the table
each column reference is associated with.</p>

<h2><a id="Getting_information" name="Getting_information"
href="manual_toc.html#Getting_information">3.4 Getting Information
About Databases and Tables</a></h2>

<p><a id="IDX403" name="IDX403"></a> <a id="IDX404"
name="IDX404"></a> <a id="IDX405" name="IDX405"></a></p>

<p>What if you forget the name of a database or table, or what the
structure of a given table is (for example, what its columns are
called)? MySQL addresses this problem through several statements
that provide information about the databases and tables it
supports.</p>

<p>You have already seen <code>SHOW DATABASES</code>, which lists
the databases managed by the server. To find out which database is
currently selected, use the <code>DATABASE()</code> function:</p>

<pre>
mysql&gt; SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| menagerie  |
+------------+
</pre>

<p>If you haven't selected any database yet, the result is
blank.</p>

<p>To find out what tables the current database contains (for
example, when you're not sure about the name of a table), use this
command:</p>

<pre>
mysql&gt; SHOW TABLES;
+---------------------+
| Tables in menagerie |
+---------------------+
| event               |
| pet                 |
+---------------------+
</pre>

<p>If you want to find out about the structure of a table, the
<code>DESCRIBE</code> command is useful; it displays information
about each of a table's columns:</p>

<pre>
mysql&gt; DESCRIBE pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
</pre>

<p><code>Field</code> indicates the column name, <code>Type</code>
is the data type for the column, <code>NULL</code> indicates
whether the column can contain <code>NULL</code> values,
<code>Key</code> indicates whether the column is indexed, and
<code>Default</code> specifies the column's default value.</p>

<p>If you have indexes on a table, <code>SHOW INDEX FROM
tbl_name</code> produces information about them.</p>

<h2><a id="Examples" name="Examples"
href="manual_toc.html#Examples">3.5 Examples of Common
Queries</a></h2>

<p><a id="IDX406" name="IDX406"></a> <a id="IDX407"
name="IDX407"></a></p>

<p>Here are examples of how to solve some common problems with
MySQL.</p>

<p>Some of the examples use the table <code>shop</code> to hold the
price of each article (item number) for certain traders (dealers).
Supposing that each trader has a single fixed price per article,
then (<code>article</code>, <code>dealer</code>) is a primary key
for the records.</p>

<p>Start the command-line tool <code>mysql</code> and select a
database:</p>

<pre>
mysql your-database-name
</pre>

<p>(In most MySQL installations, you can use the database-name
'test').</p>

<p>You can create the example table as:</p>

<pre>
CREATE TABLE shop (
 article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
 dealer  CHAR(20)                 DEFAULT ''     NOT NULL,
 price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL,
 PRIMARY KEY(article, dealer));

INSERT INTO shop VALUES
(1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),(3,'C',1.69),
(3,'D',1.25),(4,'D',19.95);
</pre>

<p>Okay, so the example data is:</p>

<pre>
mysql&gt; SELECT * FROM shop;

+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|    0001 | A      |  3.45 |
|    0001 | B      |  3.99 |
|    0002 | A      | 10.99 |
|    0003 | B      |  1.45 |
|    0003 | C      |  1.69 |
|    0003 | D      |  1.25 |
|    0004 | D      | 19.95 |
+---------+--------+-------+
</pre>

<h3><a id="example-Maximum-column" name="example-Maximum-column"
href="manual_toc.html#example-Maximum-column">3.5.1 The Maximum
Value for a Column</a></h3>

<p>``What's the highest item number?''</p>

<pre>
SELECT MAX(article) AS article FROM shop

+---------+
| article |
+---------+
|       4 |
+---------+
</pre>

<h3><a id="example-Maximum-row" name="example-Maximum-row"
href="manual_toc.html#example-Maximum-row">3.5.2 The Row Holding
the Maximum of a Certain Column</a></h3>

<p>``Find number, dealer, and price of the most expensive
article.''</p>

<p>In ANSI SQL this is easily done with a subquery:</p>

<pre>
SELECT article, dealer, price
FROM   shop
WHERE  price=(SELECT MAX(price) FROM shop)
</pre>

<p>In MySQL (which does not yet have subselects), just do it in two
steps:</p>

<ol>
<li>Get the maximum price value from the table with a
<code>SELECT</code> statement.</li>

<li>Using this value compile the actual query: 

<pre>
SELECT article, dealer, price
FROM   shop
WHERE  price=19.95
</pre>
</li>
</ol>

<p>Another solution is to sort all rows descending by price and
only get the first row using the MySQL-specific <code>LIMIT</code>
clause:</p>

<pre>
SELECT article, dealer, price
FROM   shop
ORDER BY price DESC
LIMIT 1
</pre>

<p><strong>NOTE</strong>: If there are several most expensive
articles (for example, each 19.95) the <code>LIMIT</code> solution
shows only one of them!</p>

<h3><a id="example-Maximum-column-group"
name="example-Maximum-column-group"
href="manual_toc.html#example-Maximum-column-group">3.5.3 Maximum
of Column per Group</a></h3>

<p>``What's the highest price per article?''</p>

<pre>
SELECT article, MAX(price) AS price
FROM   shop
GROUP BY article

+---------+-------+
| article | price |
+---------+-------+
|    0001 |  3.99 |
|    0002 | 10.99 |
|    0003 |  1.69 |
|    0004 | 19.95 |
+---------+-------+
</pre>

<h3><a id="example-Maximum-column-group-row"
name="example-Maximum-column-group-row"
href="manual_toc.html#example-Maximum-column-group-row">3.5.4 The
Rows Holding the Group-wise Maximum of a Certain Field</a></h3>

<p>``For each article, find the dealer(s) with the most expensive
price.''</p>

<p>In ANSI SQL, I'd do it with a subquery like this:</p>

<pre>
SELECT article, dealer, price
FROM   shop s1
WHERE  price=(SELECT MAX(s2.price)
              FROM shop s2
              WHERE s1.article = s2.article);
</pre>

<p>In MySQL it's best do it in several steps:</p>

<ol>
<li>Get the list of (article,maxprice).</li>

<li>For each article get the corresponding rows that have the
stored maximum price.</li>
</ol>

<p>This can easily be done with a temporary table:</p>

<pre>
CREATE TEMPORARY TABLE tmp (
        article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
        price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL);

LOCK TABLES shop read;

INSERT INTO tmp SELECT article, MAX(price) FROM shop GROUP BY article;

SELECT shop.article, dealer, shop.price FROM shop, tmp
WHERE shop.article=tmp.article AND shop.price=tmp.price;

UNLOCK TABLES;

DROP TABLE tmp;
</pre>

<p>If you don't use a <code>TEMPORARY</code> table, you must also
lock the 'tmp' table.</p>

<p>``Can it be done with a single query?''</p>

<p>Yes, but only by using a quite inefficient trick that I call the
``MAX-CONCAT trick'':</p>

<pre>
SELECT article,
       SUBSTRING( MAX( CONCAT(LPAD(price,6,'0'),dealer) ), 7) AS dealer,
  0.00+LEFT(      MAX( CONCAT(LPAD(price,6,'0'),dealer) ), 6) AS price
FROM   shop
GROUP BY article;

+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|    0001 | B      |  3.99 |
|    0002 | A      | 10.99 |
|    0003 | C      |  1.69 |
|    0004 | D      | 19.95 |
+---------+--------+-------+
</pre>

<p>The last example can, of course, be made a bit more efficient by
doing the splitting of the concatenated column in the client.</p>

<h3><a id="example-user-variables" name="example-user-variables"
href="manual_toc.html#example-user-variables">3.5.5 Using user
variables</a></h3>

<p>You can use MySQL user variables to remember results without
having to store them in temporary variables in the client. See
section <a href="manual.html#Variables">6.1.4 User
Variables</a>.</p>

<p>For example, to find the articles with the highest and lowest
price you can do:</p>

<pre>
mysql&gt; SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;
mysql&gt; SELECT * FROM shop WHERE price=@min_price OR price=@max_price;
+---------+--------+-------+
| article | dealer | price |
+---------+--------+-------+
|    0003 | D      |  1.25 |
|    0004 | D      | 19.95 |
+---------+--------+-------+
</pre>

<h3><a id="example-Foreign_keys" name="example-Foreign_keys"
href="manual_toc.html#example-Foreign_keys">3.5.6 Using Foreign
Keys</a></h3>

<p><a id="IDX408" name="IDX408"></a> <a id="IDX409"
name="IDX409"></a></p>

<p>In MySQL 3.23.44 and up, <code>InnoDB</code> tables supports
checking of foreign key constraints. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>. See
also section <a href="manual.html#ANSI_diff_Foreign_Keys">1.7.4.5
Foreign Keys</a>.</p>

<p>You don't actually need foreign keys to join 2 tables. The only
thing MySQL currently doesn't do (in table types other than
<code>InnoDB</code>), is <code>CHECK</code> to make sure that the
keys you use really exist in the table(s) you're referencing and it
doesn't automatically delete rows from a table with a foreign key
definition. If you use your keys like normal, it'll work just
fine:</p>

<pre>
CREATE TABLE person (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    name CHAR(60) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE shirt (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    style ENUM('t-shirt', 'polo', 'dress') NOT NULL,
    color ENUM('red', 'blue', 'orange', 'white', 'black') NOT NULL,
    owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),
    PRIMARY KEY (id)
);

INSERT INTO person VALUES (NULL, 'Antonio Paz');

INSERT INTO shirt VALUES
(NULL, 'polo', 'blue', LAST_INSERT_ID()),
(NULL, 'dress', 'white', LAST_INSERT_ID()),
(NULL, 't-shirt', 'blue', LAST_INSERT_ID());

INSERT INTO person VALUES (NULL, 'Lilliana Angelovska');

INSERT INTO shirt VALUES
(NULL, 'dress', 'orange', LAST_INSERT_ID()),
(NULL, 'polo', 'red', LAST_INSERT_ID()),
(NULL, 'dress', 'blue', LAST_INSERT_ID()),
(NULL, 't-shirt', 'white', LAST_INSERT_ID());

SELECT * FROM person;
+----+---------------------+
| id | name                |
+----+---------------------+
|  1 | Antonio Paz         |
|  2 | Lilliana Angelovska |
+----+---------------------+

SELECT * FROM shirt;
+----+---------+--------+-------+
| id | style   | color  | owner |
+----+---------+--------+-------+
|  1 | polo    | blue   |     1 |
|  2 | dress   | white  |     1 |
|  3 | t-shirt | blue   |     1 |
|  4 | dress   | orange |     2 |
|  5 | polo    | red    |     2 |
|  6 | dress   | blue   |     2 |
|  7 | t-shirt | white  |     2 |
+----+---------+--------+-------+

SELECT s.* FROM person p, shirt s
 WHERE p.name LIKE 'Lilliana%'
   AND s.owner = p.id
   AND s.color &lt;&gt; 'white';

+----+-------+--------+-------+
| id | style | color  | owner |
+----+-------+--------+-------+
|  4 | dress | orange |     2 |
|  5 | polo  | red    |     2 |
|  6 | dress | blue   |     2 |
+----+-------+--------+-------+
</pre>

<h3><a id="Searching_on_two_keys" name="Searching_on_two_keys"
href="manual_toc.html#Searching_on_two_keys">3.5.7 Searching on Two
Keys</a></h3>

<p><a id="IDX410" name="IDX410"></a> <a id="IDX411"
name="IDX411"></a> <a id="IDX412" name="IDX412"></a></p>

<p>MySQL doesn't yet optimise when you search on two different keys
combined with <code>OR</code> (searching on one key with different
<code>OR</code> parts is optimised quite well):</p>

<pre>
SELECT field1_index, field2_index FROM test_table WHERE field1_index = '1'
OR  field2_index = '1'
</pre>

<p>The reason is that we haven't yet had time to come up with an
efficient way to handle this in the general case. (The
<code>AND</code> handling is, in comparison, now completely general
and works very well.)</p>

<p>For the moment you can solve this very efficiently by using a
<code>TEMPORARY</code> table. This type of optimisation is also
very good if you are using very complicated queries where the SQL
server does the optimisations in the wrong order.</p>

<pre>
CREATE TEMPORARY TABLE tmp
SELECT field1_index, field2_index FROM test_table WHERE field1_index = '1';
INSERT INTO tmp
SELECT field1_index, field2_index FROM test_table WHERE field2_index = '1';
SELECT * from tmp;
DROP TABLE tmp;
</pre>

<p>The above way to solve this query is in effect a
<code>UNION</code> of two queries. See section <a
href="manual.html#UNION">6.4.1.2 <code>UNION</code> Syntax</a>.</p>

<h3><a id="Calculating_days" name="Calculating_days"
href="manual_toc.html#Calculating_days">3.5.8 Calculating Visits
Per Day</a></h3>

<p><a id="IDX413" name="IDX413"></a> <a id="IDX414"
name="IDX414"></a> <a id="IDX415" name="IDX415"></a> <a id="IDX416"
name="IDX416"></a></p>

<p>The following shows an idea of how you can use the bit group
functions to calculate the number of days per month a user has
visited a web page.</p>

<pre>
CREATE TABLE t1 (year YEAR(4), month INT(2) UNSIGNED ZEROFILL,
             day INT(2) UNSIGNED ZEROFILL);
INSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),
            (2000,2,23),(2000,2,23);
SELECT year,month,BIT_COUNT(BIT_OR(1&lt;&lt;day)) AS days FROM t1
       GROUP BY year,month;

Which returns:

+------+-------+------+
| year | month | days |
+------+-------+------+
| 2000 |    01 |    3 |
| 2000 |    02 |    2 |
+------+-------+------+
</pre>

<p>The above calculates how many different days was used for a
given year/month combination, with automatic removal of duplicate
entries.</p>

<h3><a id="example-AUTO_INCREMENT" name="example-AUTO_INCREMENT"
href="manual_toc.html#example-AUTO_INCREMENT">3.5.9 Using
<code>AUTO_INCREMENT</code></a></h3>

<p><a id="IDX417" name="IDX417"></a> The
<code>AUTO_INCREMENT</code> attribute can be used to generate a
unique identity for new rows:</p>

<pre>
CREATE TABLE animals (
             id MEDIUMINT NOT NULL AUTO_INCREMENT,
             name CHAR(30) NOT NULL,
             PRIMARY KEY (id)
             );
INSERT INTO animals (name) VALUES ("dog"),("cat"),("penguin"),
                                  ("lax"),("whale");
SELECT * FROM animals;

Which returns:

+----+---------+
| id | name    |
+----+---------+
|  1 | dog     |
|  2 | cat     |
|  3 | penguin |
|  4 | lax     |
|  5 | whale   |
+----+---------+
</pre>

<p>You can retrieve the used <code>AUTO_INCREMENT</code> key with
the <code>LAST_INSERT_ID()</code> SQL function or the
<code>mysql_insert_id()</code> API function. Note: for a multi-row
insert,
<code>LAST_INSERT_ID()</code>/<code>mysql_insert_id()</code> will
actually return the <code>AUTO_INCREMENT</code> key from the
<strong>first</strong> inserted row. This allows multi-row inserts
to be reproduced on other servers.</p>

<p>For MyISAM and BDB tables you can specify
<code>AUTO_INCREMENT</code> on secondary column in a multi-column
key. In this case the generated value for the autoincrement column
is calculated as <code>MAX(auto_increment_column)+1) WHERE
prefix=given-prefix</code>. This is useful when you want to put
data into ordered groups.</p>

<pre>
CREATE TABLE animals (
             grp ENUM('fish','mammal','bird') NOT NULL,
             id MEDIUMINT NOT NULL AUTO_INCREMENT,
             name CHAR(30) NOT NULL,
             PRIMARY KEY (grp,id)
             );
INSERT INTO animals (grp,name) VALUES("mammal","dog"),("mammal","cat"),
                  ("bird","penguin"),("fish","lax"),("mammal","whale");
SELECT * FROM animals ORDER BY grp,id;

Which returns:

+--------+----+---------+
| grp    | id | name    |
+--------+----+---------+
| fish   |  1 | lax     |
| mammal |  1 | dog     |
| mammal |  2 | cat     |
| mammal |  3 | whale   |
| bird   |  1 | penguin |
+--------+----+---------+
</pre>

<p>Note that in this case, the <code>AUTO_INCREMENT</code> value
will be reused if you delete the row with the biggest
<code>AUTO_INCREMENT</code> value in any group.</p>

<h2><a id="Batch_mode" name="Batch_mode"
href="manual_toc.html#Batch_mode">3.6 Using <code>mysql</code> in
Batch Mode</a></h2>

<p><a id="IDX418" name="IDX418"></a> <a id="IDX419"
name="IDX419"></a> <a id="IDX420" name="IDX420"></a> <a id="IDX421"
name="IDX421"></a> <a id="IDX422" name="IDX422"></a></p>

<p>In the previous sections, you used <code>mysql</code>
interactively to enter queries and view the results. You can also
run <code>mysql</code> in batch mode. To do this, put the commands
you want to run in a file, then tell <code>mysql</code> to read its
input from the file:</p>

<pre>
shell&gt; mysql &lt; batch-file
</pre>

<p>If you are running <code>mysql</code> under windows and have
some special characters in the file that causes problems, you can
do:</p>

<pre>
dos&gt; mysql -e "source batch-file"
</pre>

<p>If you need to specify connection parameters on the
command-line, the command might look like this:</p>

<pre>
shell&gt; mysql -h host -u user -p &lt; batch-file
Enter password: ********
</pre>

<p>When you use <code>mysql</code> this way, you are creating a
script file, then executing the script.</p>

<p>If you want the script to continue even if you have errors, you
should use the <code>--force</code> command-line option.</p>

<p>Why use a script? Here are a few reasons:</p>

<ul>
<li>If you run a query repeatedly (say, every day or every week),
making it a script allows you to avoid retyping it each time you
execute it.</li>

<li>You can generate new queries from existing ones that are
similar by copying and editing script files.</li>

<li>Batch mode can also be useful while you're developing a query,
particularly for multiple-line commands or multiple-statement
sequences of commands. If you make a mistake, you don't have to
retype everything. Just edit your script to correct the error, then
tell <code>mysql</code> to execute it again.</li>

<li>If you have a query that produces a lot of output, you can run
the output through a pager rather than watching it scroll off the
top of your screen: 

<pre>
shell&gt; mysql &lt; batch-file | more
</pre>
</li>

<li>You can catch the output in a file for further processing: 

<pre>
shell&gt; mysql &lt; batch-file &gt; mysql.out
</pre>
</li>

<li>You can distribute your script to other people so they can run
the commands, too.</li>

<li>Some situations do not allow for interactive use, for example,
when you run a query from a <code>cron</code> job. In this case,
you must use batch mode.</li>
</ul>

<p>The default output format is different (more concise) when you
run <code>mysql</code> in batch mode than when you use it
interactively. For example, the output of <code>SELECT DISTINCT
species FROM pet</code> looks like this when run interactively:</p>

<pre>
+---------+
| species |
+---------+
| bird    |
| cat     |
| dog     |
| hamster |
| snake   |
+---------+
</pre>

<p>But like this when run in batch mode:</p>

<pre>
species
bird
cat
dog
hamster
snake
</pre>

<p>If you want to get the interactive output format in batch mode,
use <code>mysql -t</code>. To echo to the output the commands that
are executed, use <code>mysql -vvv</code>.</p>

<p>You can also use scripts in the <code>mysql</code> command-line
prompt by using the <code>source</code> command:</p>

<pre>
mysql&gt; source filename;
</pre>

<h2><a id="Twin" name="Twin" href="manual_toc.html#Twin">3.7
Queries from Twin Project</a></h2>

<p><a id="IDX423" name="IDX423"></a> <a id="IDX424"
name="IDX424"></a></p>

<p>At Analytikerna and Lentus, we have been doing the systems and
field work for a big research project. This project is a
collaboration between the Institute of Environmental Medicine at
Karolinska Institutet Stockholm and the Section on Clinical
Research in Aging and Psychology at the University of Southern
California.</p>

<p>The project involves a screening part where all twins in Sweden
older than 65 years are interviewed by telephone. Twins who meet
certain criteria are passed on to the next stage. In this latter
stage, twins who want to participate are visited by a doctor/nurse
team. Some of the examinations include physical and
neuropsychological examination, laboratory testing, neuroimaging,
psychological status assessment, and family history collection. In
addition, data are collected on medical and environmental risk
factors.</p>

<p>More information about Twin studies can be found at: <a
href="http://www.imm.ki.se/TWIN/TWINUKW.HTM">http://www.imm.ki.se/TWIN/TWINUKW.HTM</a></p>

<p>The latter part of the project is administered with a web
interface written using Perl and MySQL.</p>

<p>Each night all data from the interviews are moved into a MySQL
database.</p>

<h3><a id="Twin_pool" name="Twin_pool"
href="manual_toc.html#Twin_pool">3.7.1 Find all Non-distributed
Twins</a></h3>

<p>The following query is used to determine who goes into the
second part of the project:</p>

<pre>
SELECT
        CONCAT(p1.id, p1.tvab) + 0 AS tvid,
        CONCAT(p1.christian_name, " ", p1.surname) AS Name,
        p1.postal_code AS Code,
        p1.city AS City,
        pg.abrev AS Area,
        IF(td.participation = "Aborted", "A", " ") AS A,
        p1.dead AS dead1,
        l.event AS event1,
        td.suspect AS tsuspect1,
        id.suspect AS isuspect1,
        td.severe AS tsevere1,
        id.severe AS isevere1,
        p2.dead AS dead2,
        l2.event AS event2,
        h2.nurse AS nurse2,
        h2.doctor AS doctor2,
        td2.suspect AS tsuspect2,
        id2.suspect AS isuspect2,
        td2.severe AS tsevere2,
        id2.severe AS isevere2,
        l.finish_date
FROM
        twin_project AS tp
        /* For Twin 1 */
        LEFT JOIN twin_data AS td ON tp.id = td.id
                  AND tp.tvab = td.tvab
        LEFT JOIN informant_data AS id ON tp.id = id.id
                  AND tp.tvab = id.tvab
        LEFT JOIN harmony AS h ON tp.id = h.id
                  AND tp.tvab = h.tvab
        LEFT JOIN lentus AS l ON tp.id = l.id
                  AND tp.tvab = l.tvab
        /* For Twin 2 */
        LEFT JOIN twin_data AS td2 ON p2.id = td2.id
                  AND p2.tvab = td2.tvab
        LEFT JOIN informant_data AS id2 ON p2.id = id2.id
                  AND p2.tvab = id2.tvab
        LEFT JOIN harmony AS h2 ON p2.id = h2.id
                  AND p2.tvab = h2.tvab
        LEFT JOIN lentus AS l2 ON p2.id = l2.id
                  AND p2.tvab = l2.tvab,
        person_data AS p1,
        person_data AS p2,
        postal_groups AS pg
WHERE
        /* p1 gets main twin and p2 gets his/her twin. */
        /* ptvab is a field inverted from tvab */
        p1.id = tp.id AND p1.tvab = tp.tvab AND
        p2.id = p1.id AND p2.ptvab = p1.tvab AND
        /* Just the sceening survey */
        tp.survey_no = 5 AND
        /* Skip if partner died before 65 but allow emigration (dead=9) */
        (p2.dead = 0 OR p2.dead = 9 OR
         (p2.dead = 1 AND
          (p2.death_date = 0 OR
           (((TO_DAYS(p2.death_date) - TO_DAYS(p2.birthday)) / 365)
            &gt;= 65))))
        AND
        (
        /* Twin is suspect */
        (td.future_contact = 'Yes' AND td.suspect = 2) OR
        /* Twin is suspect - Informant is Blessed */
        (td.future_contact = 'Yes' AND td.suspect = 1
                                   AND id.suspect = 1) OR
        /* No twin - Informant is Blessed */
        (ISNULL(td.suspect) AND id.suspect = 1
                            AND id.future_contact = 'Yes') OR
        /* Twin broken off - Informant is Blessed */
        (td.participation = 'Aborted'
         AND id.suspect = 1 AND id.future_contact = 'Yes') OR
        /* Twin broken off - No inform - Have partner */
        (td.participation = 'Aborted' AND ISNULL(id.suspect)
                                      AND p2.dead = 0))
        AND
        l.event = 'Finished'
        /* Get at area code */
        AND SUBSTRING(p1.postal_code, 1, 2) = pg.code
        /* Not already distributed */
        AND (h.nurse IS NULL OR h.nurse=00 OR h.doctor=00)
        /* Has not refused or been aborted */
        AND NOT (h.status = 'Refused' OR h.status = 'Aborted'
        OR h.status = 'Died' OR h.status = 'Other')
ORDER BY
        tvid;
</pre>

<p>Some explanations:</p>

<dl compact="compact">
<dt><code>CONCAT(p1.id, p1.tvab) + 0 AS tvid</code></dt>

<dd>We want to sort on the concatenated <code>id</code> and
<code>tvab</code> in numerical order. Adding <code>0</code> to the
result causes MySQL to treat the result as a number.</dd>

<dt>column <code>id</code></dt>

<dd>This identifies a pair of twins. It is a key in all
tables.</dd>

<dt>column <code>tvab</code></dt>

<dd>This identifies a twin in a pair. It has a value of
<code>1</code> or <code>2</code>.</dd>

<dt>column <code>ptvab</code></dt>

<dd>This is an inverse of <code>tvab</code>. When <code>tvab</code>
is <code>1</code> this is <code>2</code>, and vice versa. It exists
to save typing and to make it easier for MySQL to optimise the
query.</dd>
</dl>

<p>This query demonstrates, among other things, how to do lookups
on a table from the same table with a join (<code>p1</code> and
<code>p2</code>). In the example, this is used to check whether a
twin's partner died before the age of 65. If so, the row is not
returned.</p>

<p>All of the above exist in all tables with twin-related
information. We have a key on both <code>id,tvab</code> (all
tables), and <code>id,ptvab</code> (<code>person_data</code>) to
make queries faster.</p>

<p>On our production machine (A 200MHz UltraSPARC), this query
returns about 150-200 rows and takes less than one second.</p>

<p>The current number of records in the tables used above:</p>

<table border="1" width="100%">
<tr>
<td><strong>Table</strong></td>
<td><strong>Rows</strong></td>
</tr>

<tr>
<td><code>person_data</code></td>
<td>71074</td>
</tr>

<tr>
<td><code>lentus</code></td>
<td>5291</td>
</tr>

<tr>
<td><code>twin_project</code></td>
<td>5286</td>
</tr>

<tr>
<td><code>twin_data</code></td>
<td>2012</td>
</tr>

<tr>
<td><code>informant_data</code></td>
<td>663</td>
</tr>

<tr>
<td><code>harmony</code></td>
<td>381</td>
</tr>

<tr>
<td><code>postal_groups</code></td>
<td>100</td>
</tr>
</table>

<br />
<br />
 

<h3><a id="Twin_event" name="Twin_event"
href="manual_toc.html#Twin_event">3.7.2 Show a Table on Twin Pair
Status</a></h3>

<p>Each interview ends with a status code called
<code>event</code>. The query shown here is used to display a table
over all twin pairs combined by event. This indicates in how many
pairs both twins are finished, in how many pairs one twin is
finished and the other refused, and so on.</p>

<pre>
SELECT
        t1.event,
        t2.event,
        COUNT(*)
FROM
        lentus AS t1,
        lentus AS t2,
        twin_project AS tp
WHERE
        /* We are looking at one pair at a time */
        t1.id = tp.id
        AND t1.tvab=tp.tvab
        AND t1.id = t2.id
        /* Just the sceening survey */
        AND tp.survey_no = 5
        /* This makes each pair only appear once */
        AND t1.tvab='1' AND t2.tvab='2'
GROUP BY
        t1.event, t2.event;

</pre>

<h2><a id="Apache" name="Apache" href="manual_toc.html#Apache">3.8
Using MySQL with Apache</a></h2>

<p><a id="IDX425" name="IDX425"></a></p>

<p>There are programs that let you authenticate your users from a
MySQL database and also let you log your log files into a MySQL
table.</p>

<p>You can change the Apache logging format to be easily readable
by MySQL by putting the following into the Apache configuration
file:</p>

<pre>
LogFormat \
        "\"%h\",%{%Y%m%d%H%M%S}t,%&gt;s,\"%b\",\"%{Content-Type}o\",  \
        \"%U\",\"%{Referer}i\",\"%{User-Agent}i\""
</pre>

<p>In MySQL you can do something like this:</p>

<pre>
LOAD DATA INFILE '/local/access_log' INTO TABLE table_name
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '\\'
</pre>

<h1><a id="MySQL_Database_Administration"
name="MySQL_Database_Administration"
href="manual_toc.html#MySQL_Database_Administration">4 Database
Administration</a></h1>

<h2><a id="Configuring_MySQL" name="Configuring_MySQL"
href="manual_toc.html#Configuring_MySQL">4.1 Configuring
MySQL</a></h2>

<h3><a id="Command-line_options" name="Command-line_options"
href="manual_toc.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a></h3>

<p><a id="IDX426" name="IDX426"></a> <a id="IDX427"
name="IDX427"></a> <a id="IDX428" name="IDX428"></a></p>

<p>In most cases you should manage mysqld options through option
files. See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</p>

<p><code>mysqld</code> and <code>mysqld.server</code> reads options
from the <code>mysqld</code> and <code>server</code> groups.
<code>mysqld_safe</code> read options from the <code>mysqld</code>,
<code>server</code>, <code>mysqld_safe</code> and
<code>safe_mysqld</code> groups. An embedded MySQL server usually
reads options from the <code>server</code>, <code>embedded</code>
and <code>xxxxx_SERVER</code>, where <code>xxxxx</code> is the name
of the application.</p>

<p><code>mysqld</code> accepts the following command-line options.
For a full list execute <code>mysqld --help</code>.</p>

<dl compact="compact">
<dt><code>--ansi</code></dt>

<dd>Use ANSI SQL syntax instead of MySQL syntax. See section <a
href="manual.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a>.</dd>

<dt><code>-b, --basedir=path</code></dt>

<dd>Path to installation directory. All paths are usually resolved
relative to this.</dd>

<dt><code>--big-tables</code></dt>

<dd>Allow big result sets by saving all temporary sets on file. It
solves most 'table full' errors, but also slows down the queries
where in-memory tables would suffice. Since Version 3.23.2, MySQL
is able to solve it automatically by using memory for small
temporary tables and switching to disk tables where necessary.</dd>

<dt><code>--bind-address=IP</code></dt>

<dd>IP address to bind to.</dd>

<dt><code>--console</code></dt>

<dd>Write the error log messages to stderr/stdout even if
<code>--log-error</code> is specified. On windows mysqld will not
close the console screen if this option is used.</dd>

<dt><code>--character-sets-dir=path</code></dt>

<dd>Directory where character sets are. See section <a
href="manual.html#Character_sets">4.6.1 The Character Set Used for
Data and Sorting</a>.</dd>

<dt><code>--chroot=path</code></dt>

<dd>Put <code>mysqld</code> daemon in chroot environment at
startup. Recommended security measure since MySQL 4.0 (MySQL 3.23
is not able to provide 100% closed chroot jail). It somewhat limits
<code>LOAD DATA INFILE</code> and <code>SELECT ... INTO
OUTFILE</code> though.</dd>

<dt><code>--core-file</code></dt>

<dd>Write a core file if <code>mysqld</code> dies. For some systems
you must also specify <code>--core-file-size</code> to
<code>safe_mysqld</code>. See section <a
href="manual.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>, The
Wrapper Around <code>mysqld</code></a>. Note that on some systems,
like Solaris, you will not get a core file if you are also using
the <code>--user</code> option.</dd>

<dt><code>-h, --datadir=path</code></dt>

<dd>Path to the database root.</dd>

<dt><code>--debug[...]=</code></dt>

<dd>If MySQL is configured with <code>--with-debug</code>, you can
use this option to get a trace file of what <code>mysqld</code> is
doing. See section <a href="manual.html#Making_trace_files">E.1.2
Creating Trace Files</a>.</dd>

<dt><code>--default-character-set=charset</code></dt>

<dd>Set the default character set. See section <a
href="manual.html#Character_sets">4.6.1 The Character Set Used for
Data and Sorting</a>.</dd>

<dt><code>--default-table-type=type</code></dt>

<dd>Set the default table type for tables. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</dd>

<dt><code>--delay-key-write[= OFF | ON | ALL]</code></dt>

<dd>How MyISAM <code>DELAYED KEYS</code> should be used. See
section <a href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</dd>

<dt><code>--delay-key-write-for-all-tables; In MySQL 4.0.3 you
should use --delay-key-write=ALL instead.</code></dt>

<dd>Don't flush key buffers between writes for any
<code>MyISAM</code> table. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</dd>

<dt><code>--des-key-file=filename</code></dt>

<dd>Read the default keys used by <code>DES_ENCRYPT()</code> and
<code>DES_DECRYPT()</code> from this file.</dd>

<dt><code>--enable-external-locking (was
--enable-locking)</code></dt>

<dd>Enable system locking. Note that if you use this option on a
system on which <code>lockd</code> does not fully work (as on
Linux), you will easily get mysqld to deadlock.</dd>

<dt><code>--enable-named-pipe</code></dt>

<dd>Enable support for named pipes (only on NT/Win2000/XP).</dd>

<dt><code>-T, --exit-info</code></dt>

<dd>This is a bit mask of different flags one can use for debugging
the mysqld server; one should not use this option if one doesn't
know exactly what it does!</dd>

<dt><code>--flush</code></dt>

<dd>Flush all changes to disk after each SQL command. Normally
MySQL only does a write of all changes to disk after each SQL
command and lets the operating system handle the syncing to disk.
See section <a href="manual.html#Crashing">A.4.1 What To Do If
MySQL Keeps Crashing</a>.</dd>

<dt><code>-?, --help</code></dt>

<dd>Display short help and exit.</dd>

<dt><code>--init-file=file</code></dt>

<dd>Read SQL commands from this file at startup.</dd>

<dt><code>-L, --language=...</code></dt>

<dd>Client error messages in given language. May be given as a full
path. See section <a href="manual.html#Languages">4.6.2 Non-English
Error Messages</a>.</dd>

<dt><code>-l, --log[=file]</code></dt>

<dd>Log connections and queries to file. See section <a
href="manual.html#Query_log">4.9.2 The General Query Log</a>.</dd>

<dt><code>--log-bin=[file]</code></dt>

<dd>Log all queries that changes data to the file. Used for backup
and replication. See section <a href="manual.html#Binary_log">4.9.4
The Binary Update Log</a>.</dd>

<dt><code>--log-bin-index[=file]</code></dt>

<dd>Index file for binary log file names. See section <a
href="manual.html#Binary_log">4.9.4 The Binary Update Log</a>.</dd>

<dt><code>--log-error[=file]</code></dt>

<dd>Log errors and startup messages to this file. See section <a
href="manual.html#Error_log">4.9.1 The Error Log</a>.</dd>

<dt><code>--log-isam[=file]</code></dt>

<dd>Log all ISAM/MyISAM changes to file (only used when debugging
ISAM/MyISAM).</dd>

<dt><code>--log-slow-queries[=file]</code></dt>

<dd>Log all queries that have taken more than
<code>long_query_time</code> seconds to execute to file. See
section <a href="manual.html#Slow_query_log">4.9.5 The Slow Query
Log</a>.</dd>

<dt><code>--log-update[=file]</code></dt>

<dd>Log updates to <code>file.#</code> where <code>#</code> is a
unique number if not given. See section <a
href="manual.html#Update_log">4.9.3 The Update Log</a>.</dd>

<dt><code>--log-long-format</code></dt>

<dd>Log some extra information to update log. If you are using
<code>--log-slow-queries</code> then queries that are not using
indexes are logged to the slow query log.</dd>

<dt><code>--low-priority-updates</code></dt>

<dd>Table-modifying operations
(<code>INSERT</code>/<code>DELETE</code>/<code>UPDATE</code>) will
have lower priority than selects. It can also be done via
<code>{INSERT | REPLACE | UPDATE | DELETE} LOW_PRIORITY ...</code>
to lower the priority of only one query, or by <code>SET
LOW_PRIORITY_UPDATES=1</code> to change the priority in one thread.
See section <a href="manual.html#Table_locking">5.3.2 Table Locking
Issues</a>.</dd>

<dt><code>--memlock</code></dt>

<dd>Lock the <code>mysqld</code> process in memory. This works only
if your system supports the <code>mlockall()</code> system call
(like Solaris). This may help if you have a problem where the
operating system is causing <code>mysqld</code> to swap on
disk.</dd>

<dt><code>--myisam-recover [=option[,option...]]]</code></dt>

<dd>Option is any combination of <code>DEFAULT</code>,
<code>BACKUP</code>, <code>FORCE</code> or <code>QUICK</code>. You
can also set this explicitly to <code>""</code> if you want to
disable this option. If this option is used, <code>mysqld</code>
will on open check if the table is marked as crashed or if the
table wasn't closed properly. (The last option only works if you
are running with <code>--skip-external-locking</code>.) If this is
the case <code>mysqld</code> will run check on the table. If the
table was corrupted, <code>mysqld</code> will attempt to repair it.
The following options affects how the repair works. 

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>DEFAULT</td>
<td>The same as not giving any option to
<code>--myisam-recover</code>.</td>
</tr>

<tr>
<td>BACKUP</td>
<td>If the data table was changed during recover, save a backup of
the <tt>`table_name.MYD'</tt> datafile as
<tt>`table_name-datetime.BAK'</tt>.</td>
</tr>

<tr>
<td>FORCE</td>
<td>Run recover even if we will lose more than one row from the
.MYD file.</td>
</tr>

<tr>
<td>QUICK</td>
<td>Don't check the rows in the table if there aren't any delete
blocks.</td>
</tr>
</table>

Before a table is automatically repaired, MySQL will add a note
about this in the error log. If you want to be able to recover from
most things without user intervention, you should use the options
<code>BACKUP,FORCE</code>. This will force a repair of a table even
if some rows would be deleted, but it will keep the old datafile as
a backup so that you can later examine what happened.</dd>

<dt><code>--pid-file=path</code></dt>

<dd>Path to pid file used by <code>safe_mysqld</code>.</dd>

<dt><code>-P, --port=...</code></dt>

<dd>Port number to listen for TCP/IP connections.</dd>

<dt><code>-o, --old-protocol</code></dt>

<dd>Use the 3.20 protocol for compatibility with some very old
clients. See section <a
href="manual.html#Upgrading-from-3.20">2.5.5 Upgrading from Version
3.20 to Version 3.21</a>.</dd>

<dt><code>--one-thread</code></dt>

<dd>Only use one thread (for debugging under Linux). See section <a
href="manual.html#Debugging_server">E.1 Debugging a MySQL
server</a>.</dd>

<dt><code>-O, --set-variable var=option</code></dt>

<dd>Give a variable a value. <code>--help</code> lists variables.
You can find a full description for all variables in the <code>SHOW
VARIABLES</code> section in this manual. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. The tuning server parameters section includes
information of how to optimise these. Please note that
<code>--set-variable</code> is deprecated since MySQL 4.0, just use
<code>--var=option</code> on its own. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>. In MySQL 4.0.2 one can set a variable directly with
<code>--variable-name=option</code> and <code>set-variable</code>
is not anymore needed in option files. If you want to restrict the
maximum value a startup option can be set to with <code>SET</code>,
you can define this by using the
<code>--maximum-variable-name</code> command line option. See
section <a href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>. Note that when setting a variable to a value, MySQL may
automatically correct it to stay within a given range and also
adjusts the value a little to fix for the used algorithm.</dd>

<dt><code>--safe-mode</code></dt>

<dd>Skip some optimise stages.</dd>

<dt><code>--safe-show-database</code></dt>

<dd>With this option, the <code>SHOW DATABASES</code> command
returns only those databases for which the user has some kind of
privilege. From version 4.0.2 this option is deprecated and doesn't
do anything (the option is enabled by default) as we now have the
<code>SHOW DATABASES</code> privilege. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</dd>

<dt><code>--safe-user-create</code></dt>

<dd>If this is enabled, a user can't create new users with the
GRANT command, if the user doesn't have <code>INSERT</code>
privilege to the <code>mysql.user</code> table or any column in
this table.</dd>

<dt><code>--skip-bdb</code></dt>

<dd>Disable usage of BDB tables. This will save memory and may
speed up some things.</dd>

<dt><code>--skip-concurrent-insert</code></dt>

<dd>Turn off the ability to select and insert at the same time on
<code>MyISAM</code> tables. (This is only to be used if you think
you have found a bug in this feature.)</dd>

<dt><code>--skip-delay-key-write; In MySQL 4.0.3 you should use
--delay-key-write=OFF instead.</code></dt>

<dd>Ignore the <code>DELAY_KEY_WRITE</code> option for all tables.
See section <a href="manual.html#Server_parameters">5.5.2 Tuning
Server Parameters</a>.</dd>

<dt><code>--skip-grant-tables</code></dt>

<dd>This option causes the server not to use the privilege system
at all. This gives everyone <strong>full access</strong> to all
databases! (You can tell a running server to start using the grant
tables again by executing <code>mysqladmin flush-privileges</code>
or <code>mysqladmin reload</code>.)</dd>

<dt><code>--skip-host-cache</code></dt>

<dd>Never use host name cache for faster name-ip resolution, but
query DNS server on every connect instead. See section <a
href="manual.html#DNS">5.5.5 How MySQL uses DNS</a>.</dd>

<dt><code>--skip-innodb</code></dt>

<dd>Disable usage of Innodb tables. This will save memory and disk
space and speed up some things.</dd>

<dt><code>--skip-external-locking (was --skip-locking)</code></dt>

<dd>Don't use system locking. To use <code>isamchk</code> or
<code>myisamchk</code> you must shut down the server. See section
<a href="manual.html#Stability">1.2.3 How Stable Is MySQL?</a>.
Note that in MySQL Version 3.23 you can use <code>REPAIR</code> and
<code>CHECK</code> to repair/check <code>MyISAM</code> tables.</dd>

<dt><code>--skip-name-resolve</code></dt>

<dd>Hostnames are not resolved. All <code>Host</code> column values
in the grant tables must be IP numbers or <code>localhost</code>.
See section <a href="manual.html#DNS">5.5.5 How MySQL uses
DNS</a>.</dd>

<dt><code>--skip-networking</code></dt>

<dd>Don't listen for TCP/IP connections at all. All interaction
with <code>mysqld</code> must be made via Unix sockets. This option
is highly recommended for systems where only local requests are
allowed. See section <a href="manual.html#DNS">5.5.5 How MySQL uses
DNS</a>.</dd>

<dt><code>--skip-new</code></dt>

<dd>Don't use new, possible wrong routines.</dd>

<dt><code>--skip-symlink</code></dt>

<dd>Don't delete or rename files that a symlinked file in the data
directory points to.</dd>

<dt><code>--skip-safemalloc</code></dt>

<dd>If MySQL is configured with <code>--with-debug=full</code>, all
programs will check the memory for overruns for every memory
allocation and memory freeing. As this checking is very slow, you
can avoid this, when you don't need memory checking, by using this
option.</dd>

<dt><code>--skip-show-database</code></dt>

<dd>Don't allow <code>SHOW DATABASES</code> command, unless the
user has the <code>SHOW DATABASES</code> privilege. From version
4.0.2 you should no longer need this option, since access can now
be granted specifically with the <code>SHOW DATABASES</code>
privilege.</dd>

<dt><code>--skip-stack-trace</code></dt>

<dd>Don't write stack traces. This option is useful when you are
running <code>mysqld</code> under a debugger. On some systems you
also have to use this option to get a core file. See section <a
href="manual.html#Debugging_server">E.1 Debugging a MySQL
server</a>.</dd>

<dt><code>--skip-thread-priority</code></dt>

<dd>Disable using thread priorities for faster response time.</dd>

<dt><code>--socket=path</code></dt>

<dd>Socket file to use for local connections instead of default
<code>/tmp/mysql.sock</code>.</dd>

<dt><code>--sql-mode=option[,option[,option...]]</code></dt>

<dd>Option can be any combination of: <code>REAL_AS_FLOAT</code>,
<code>PIPES_AS_CONCAT</code>, <code>ANSI_QUOTES</code>,
<code>IGNORE_SPACE</code>, <code>SERIALIZE</code>,
<code>ONLY_FULL_GROUP_BY</code>. It can also be empty
(<code>""</code>) if you want to reset this. By specifying all of
the above options is same as using --ansi. With this option one can
turn on only needed SQL modes. See section <a
href="manual.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a>.</dd>

<dt><code>--temp-pool</code></dt>

<dd>Using this option will cause most temporary files created to
use a small set of names, rather than a unique name for each new
file. This is to work around a problem in the Linux kernel dealing
with creating a bunch of new files with different names. With the
old behaviour, Linux seems to 'leak' memory, as it's being
allocated to the directory entry cache instead of the disk
cache.</dd>

<dt><code>--transaction-isolation= { READ-UNCOMMITTED |
READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE }</code></dt>

<dd>Sets the default transaction isolation level. See section <a
href="manual.html#SET_TRANSACTION">6.7.3 <code>SET
TRANSACTION</code> Syntax</a>.</dd>

<dt><code>-t, --tmpdir=path</code></dt>

<dd>Path for temporary files. It may be useful if your default
<code>/tmp</code> directory resides on a partition too small to
hold temporary tables.</dd>

<dt><code>-u, --user= [user_name | userid]</code></dt>

<dd>Run <code>mysqld</code> daemon as user <code>user_name</code>
or <code>userid</code> (numeric). This option is
<strong>mandatory</strong> when starting <code>mysqld</code> as
root.</dd>

<dt><code>-V, --version</code></dt>

<dd>Output version information and exit.</dd>

<dt><code>-W, --log-warnings (Was --warnings)</code></dt>

<dd>Print out warnings like <code>Aborted connection...</code> to
the <tt>`.err'</tt> file. See section <a
href="manual.html#Communication_errors">A.2.9 Communication Errors
/ Aborted Connection</a>.</dd>
</dl>

<p>One can change most values for a running server with the
<code>SET</code> command. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<h3><a id="Option_files" name="Option_files"
href="manual_toc.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a></h3>

<p><a id="IDX429" name="IDX429"></a> <a id="IDX430"
name="IDX430"></a> <a id="IDX431" name="IDX431"></a> <a id="IDX432"
name="IDX432"></a></p>

<p>MySQL can, since Version 3.22, read default startup options for
the server and for clients from option files.</p>

<p>MySQL reads default options from the following files on
Unix:</p>

<p><a id="IDX433" name="IDX433"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Filename</strong></td>
<td><strong>Purpose</strong></td>
</tr>

<tr>
<td><code>/etc/my.cnf</code></td>
<td>Global options</td>
</tr>

<tr>
<td><code>DATADIR/my.cnf</code></td>
<td>Server-specific options</td>
</tr>

<tr>
<td><code>defaults-extra-file</code></td>
<td>The file specified with --defaults-extra-file=#</td>
</tr>

<tr>
<td><code>~/.my.cnf</code></td>
<td>User-specific options</td>
</tr>
</table>

<br />
<br />
 

<p><code>DATADIR</code> is the MySQL data directory (typically
<tt>`/usr/local/mysql/data'</tt> for a binary installation or
<tt>`/usr/local/var'</tt> for a source installation). Note that
this is the directory that was specified at configuration time, not
the one specified with <code>--datadir</code> when
<code>mysqld</code> starts up! (<code>--datadir</code> has no
effect on where the server looks for option files, because it looks
for them before it processes any command-line arguments.)</p>

<p>MySQL reads default options from the following files on
Windows:</p>

<table border="1" width="100%">
<tr>
<td><strong>Filename</strong></td>
<td><strong>Purpose</strong></td>
</tr>

<tr>
<td><code>windows-system-directory\my.ini</code></td>
<td>Global options</td>
</tr>

<tr>
<td><code>C:\my.cnf</code></td>
<td>Global options</td>
</tr>
</table>

<p>Note that on Windows, you should specify all paths with
<code>/</code> instead of <code>\</code>. If you use
<code>\</code>, you need to specify this twice, as <code>\</code>
is the escape character in MySQL.</p>

<p><a id="IDX434" name="IDX434"></a> MySQL tries to read option
files in the order listed above. If multiple option files exist, an
option specified in a file read later takes precedence over the
same option specified in a file read earlier. Options specified on
the command-line take precedence over options specified in any
option file. Some options can be specified using environment
variables. Options specified on the command-line or in option files
take precedence over environment variable values. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</p>

<p>The following programs support option files: <code>mysql</code>,
<code>mysqladmin</code>, <code>mysqld</code>,
<code>mysqld_safe</code>, <code>mysql.server</code>,
<code>mysqldump</code>, <code>mysqlimport</code>,
<code>mysqlshow</code>, <code>mysqlcheck</code>,
<code>myisamchk</code>, and <code>myisampack</code>.</p>

<p>Any long option that may be given on the command-line when
running a MySQL program can be given in an option file as well
(without the leading double dash). Run the program with
<code>--help</code> to get a list of available options.</p>

<p>An option file can contain lines of the following forms:</p>

<dl compact="compact">
<dt><code>#comment</code></dt>

<dd>Comment lines start with <samp>`#'</samp> or <samp>`;'</samp>.
Empty lines are ignored.</dd>

<dt><code>[group]</code></dt>

<dd><code>group</code> is the name of the program or group for
which you want to set options. After a group line, any
<code>option</code> or <code>set-variable</code> lines apply to the
named group until the end of the option file or another group line
is given.</dd>

<dt><code>option</code></dt>

<dd>This is equivalent to <code>--option</code> on the
command-line.</dd>

<dt><code>option=value</code></dt>

<dd>This is equivalent to <code>--option=value</code> on the
command-line.</dd>

<dt><code>set-variable = variable=value</code></dt>

<dd>This is equivalent to <code>--set-variable
variable=value</code> on the command-line. This syntax must be used
to set a <code>mysqld</code> variable. Please note that
<code>--set-variable</code> is deprecated since MySQL 4.0, just use
<code>--variable=value</code> on its own.</dd>
</dl>

<p>The <code>client</code> group allows you to specify options that
apply to all MySQL clients (not <code>mysqld</code>). This is the
perfect group to use to specify the password you use to connect to
the server. (But make sure the option file is readable and writable
only by yourself.)</p>

<p>Note that for options and values, all leading and trailing
blanks are automatically deleted. You may use the escape sequences
<samp>`\b'</samp>, <samp>`\t'</samp>, <samp>`\n'</samp>,
<samp>`\r'</samp>, <samp>`\\'</samp>, and <samp>`\s'</samp> in your
value string (<samp>`\s'</samp> == blank).</p>

<p>Here is a typical global option file:</p>

<pre>
[client]
port=3306
socket=/tmp/mysql.sock

[mysqld]
port=3306
socket=/tmp/mysql.sock
set-variable = key_buffer_size=16M
set-variable = max_allowed_packet=1M

[mysqldump]
quick
</pre>

<p>Here is typical user option file:</p>

<pre>
[client]
# The following password will be sent to all standard MySQL clients
password=my_password

[mysql]
no-auto-rehash
set-variable = connect_timeout=2

[mysqlhotcopy]
interactive-timeout

</pre>

<p><a id="IDX435" name="IDX435"></a> If you have a source
distribution, you will find sample configuration files named
<tt>`my-xxxx.cnf'</tt> in the <tt>`support-files'</tt> directory.
If you have a binary distribution, look in the
<tt>`DIR/support-files'</tt> directory, where <code>DIR</code> is
the pathname to the MySQL installation directory (typically
<tt>`/usr/local/mysql'</tt>). Currently there are sample
configuration files for small, medium, large, and very large
systems. You can copy <tt>`my-xxxx.cnf'</tt> to your home directory
(rename the copy to <tt>`.my.cnf'</tt>) to experiment with
this.</p>

<p>All MySQL clients that support option files support the
following options:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>--no-defaults</td>
<td>Don't read any option files.</td>
</tr>

<tr>
<td>--print-defaults</td>
<td>Print the program name and all options that it will get.</td>
</tr>

<tr>
<td>--defaults-file=full-path-to-default-file</td>
<td>Only use the given configuration file.</td>
</tr>

<tr>
<td>--defaults-extra-file=full-path-to-default-file</td>
<td>Read this configuration file after the global configuration
file but before the user configuration file.</td>
</tr>
</table>

<p>Note that the above options must be first on the command-line to
work! <code>--print-defaults</code> may however be used directly
after the <code>--defaults-xxx-file</code> commands.</p>

<p>Note for developers: Option file handling is implemented simply
by processing all matching options (that is, options in the
appropriate group) before any command-line arguments. This works
nicely for programs that use the last instance of an option that is
specified multiple times. If you have an old program that handles
multiply-specified options this way but doesn't read option files,
you need add only two lines to give it that capability. Check the
source code of any of the standard MySQL clients to see how to do
this.</p>

<p>In shell scripts you can use the <tt>`my_print_defaults'</tt>
command to parse the config files:</p>

<pre>
shell&gt; my_print_defaults client mysql
--port=3306
--socket=/tmp/mysql.sock
--no-auto-rehash
</pre>

<p>The above output contains all options for the groups 'client'
and 'mysql'.</p>

<h3><a id="Installing_many_servers" name="Installing_many_servers"
href="manual_toc.html#Installing_many_servers">4.1.3 Installing
Many Servers on the Same Machine</a></h3>

<p><a id="IDX436" name="IDX436"></a> <a id="IDX437"
name="IDX437"></a> <a id="IDX438" name="IDX438"></a></p>

<p>In some cases you may want to have many different
<code>mysqld</code> daemons (servers) running on the same machine.
You may for example want to run a new version of MySQL for testing
together with an old version that is in production. Another case is
when you want to give different users access to different
<code>mysqld</code> servers that they manage themselves.</p>

<p>One way to get a new server running is by starting it with a
different socket and port as follows:</p>

<p><a id="IDX439" name="IDX439"></a> <a id="IDX440"
name="IDX440"></a> <a id="IDX441" name="IDX441"></a> <a id="IDX442"
name="IDX442"></a></p>

<pre>
shell&gt; MYSQL_UNIX_PORT=/tmp/mysqld-new.sock
shell&gt; MYSQL_TCP_PORT=3307
shell&gt; export MYSQL_UNIX_PORT MYSQL_TCP_PORT
shell&gt; scripts/mysql_install_db
shell&gt; bin/safe_mysqld &amp;
</pre>

<p>The environment variables appendix includes a list of other
environment variables you can use to affect <code>mysqld</code>.
See section <a href="manual.html#Environment_variables">F
Environment Variables</a>.</p>

<p>The above is the quick and dirty way that one commonly uses for
testing. The nice thing with this is that all connections you do in
the above shell will automatically be directed to the new running
server!</p>

<p>If you need to do this more permanently, you should create an
option file for each server. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. In your startup script that is executed at boot time you
should specify for both servers:</p>

<p><code>safe_mysqld --defaults-file=path-to-option-file</code></p>

<p>At least the following options should be different per
server:</p>

<ul>
<li>port=#</li>

<li>socket=path</li>

<li>pid-file=path</li>
</ul>

<p>The following options should be different, if they are used:</p>

<ul>
<li>log=path</li>

<li>log-bin=path</li>

<li>log-update=path</li>

<li>log-isam=path</li>

<li>bdb-logdir=path</li>
</ul>

<p>If you want more performance, you can also specify the following
differently:</p>

<ul>
<li>tmpdir=path</li>

<li>bdb-tmpdir=path</li>
</ul>

<p>See section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>.</p>

<p>If you are installing binary MySQL versions (.tar files) and
start them with <code>./bin/safe_mysqld</code> then in most cases
the only option you need to add/change is the <code>socket</code>
and <code>port</code> argument to <code>safe_mysqld</code>.</p>

<p>See section <a href="manual.html#Multiple_servers">4.1.4 Running
Multiple MySQL Servers on the Same Machine</a>.</p>

<h3><a id="Multiple_servers" name="Multiple_servers"
href="manual_toc.html#Multiple_servers">4.1.4 Running Multiple
MySQL Servers on the Same Machine</a></h3>

<p><a id="IDX443" name="IDX443"></a> <a id="IDX444"
name="IDX444"></a> <a id="IDX445" name="IDX445"></a></p>

<p>There are circumstances when you might want to run multiple
servers on the same machine. For example, you might want to test a
new MySQL release while leaving your existing production setup
undisturbed. Or you might be an Internet service provider that
wants to provide independent MySQL installations for different
customers.</p>

<p>If you want to run multiple servers, the easiest way is to
compile the servers with different TCP/IP ports and socket files so
they are not both listening to the same TCP/IP port or socket file.
See section <a href="manual.html#mysqld_multi">4.7.3
<code>mysqld_multi</code>, A Program for Managing Multiple MySQL
Servers</a>.</p>

<p>Assume an existing server is configured for the default port
number and socket file. Then configure the new server with a
<code>configure</code> command something like this:</p>

<pre>
shell&gt; ./configure  --with-tcp-port=port_number \
             --with-unix-socket-path=file_name \
             --prefix=/usr/local/mysql-3.22.9
</pre>

<p>Here <code>port_number</code> and <code>file_name</code> should
be different from the default port number and socket file pathname,
and the <code>--prefix</code> value should specify an installation
directory different from the one under which the existing MySQL
installation is located.</p>

<p>You can check the socket used by any currently executing MySQL
server with this command:</p>

<pre>
shell&gt; mysqladmin -h hostname --port=port_number variables
</pre>

<p>Note that if you specify ``<code>localhost</code>'' as a
hostname, <code>mysqladmin</code> will default to using Unix
sockets instead of TCP/IP.</p>

<p>If you have a MySQL server running on the port you used, you
will get a list of some of the most important configurable
variables in MySQL, including the socket name.</p>

<p>You don't have to recompile a new MySQL server just to start
with a different port and socket. You can change the port and
socket to be used by specifying them at runtime as options to
<code>safe_mysqld</code>:</p>

<pre>
shell&gt; /path/to/safe_mysqld --socket=file_name --port=port_number
</pre>

<p><code>mysqld_multi</code> can also take <code>safe_mysqld</code>
(or <code>mysqld</code>) as an argument and pass the options from a
configuration file to <code>safe_mysqld</code> and further to
<code>mysqld</code>.</p>

<p>If you run the new server on the same database directory as
another server with logging enabled, you should also specify the
name of the log files to <code>safe_mysqld</code> with
<code>--log</code>, <code>--log-update</code>, or
<code>--log-slow-queries</code>. Otherwise, both servers may be
trying to write to the same log file.</p>

<p><strong>Warning</strong>: normally you should never have two
servers that update data in the same database! If your OS doesn't
support fault-free system locking, this may lead to unpleasant
surprises!</p>

<p>If you want to use another database directory for the second
server, you can use the <code>--datadir=path</code> option to
<code>safe_mysqld</code>.</p>

<p><strong>Note</strong> also that starting several MySQL servers
(<code>mysqlds</code>) in different machines and letting them
access one data directory over <code>NFS</code> is generally a
<strong>bad idea</strong>! The problem is that the <code>NFS</code>
will become the bottleneck with the speed. It is not meant for such
use. And last but not least, you would still have to come up with a
solution how to make sure that two or more <code>mysqlds</code> are
not interfering with each other. At the moment there is no platform
that would 100% reliable do the file locking (<code>lockd</code>
daemon usually) in every situation. Yet there would be one more
possible risk with <code>NFS</code>; it would make the work even
more complicated for <code>lockd</code> daemon to handle. So make
it easy for your self and forget about the idea. The working
solution is to have one computer with an operating system that
efficiently handles threads and have several CPUs in it.</p>

<p>When you want to connect to a MySQL server that is running with
a different port than the port that is compiled into your client,
you can use one of the following methods:</p>

<ul>
<li>Start the client with <code>--host 'hostname'
--port=port_number</code> to connect with TCP/IP, or <code>[--host
localhost] --socket=file_name</code> to connect via a Unix
socket.</li>

<li>In your C or Perl programs, you can give the port or socket
arguments when connecting to the MySQL server.</li>

<li>If your are using the Perl <code>DBD::mysql</code> module you
can read the options from the MySQL option files. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. 

<pre>
$dsn = "DBI:mysql:test;mysql_read_default_group=client;
        mysql_read_default_file=/usr/local/mysql/data/my.cnf"
$dbh = DBI-&gt;connect($dsn, $user, $password);
</pre>
</li>

<li><a id="IDX446" name="IDX446"></a> <a id="IDX447"
name="IDX447"></a> <a id="IDX448" name="IDX448"></a> <a id="IDX449"
name="IDX449"></a> Set the <code>MYSQL_UNIX_PORT</code> and
<code>MYSQL_TCP_PORT</code> environment variables to point to the
Unix socket and TCP/IP port before you start your clients. If you
normally use a specific socket or port, you should place commands
to set these environment variables in your <tt>`.login'</tt> file.
See section <a href="manual.html#Environment_variables">F
Environment Variables</a>.</li>

<li><a id="IDX450" name="IDX450"></a> Specify the default socket
and TCP/IP port in the <tt>`.my.cnf'</tt> file in your home
directory. See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</li>
</ul>

<h2><a id="Privilege_system" name="Privilege_system"
href="manual_toc.html#Privilege_system">4.2 General Security Issues
and the MySQL Access Privilege System</a></h2>

<p><a id="IDX451" name="IDX451"></a> <a id="IDX452"
name="IDX452"></a> <a id="IDX453" name="IDX453"></a> <a id="IDX454"
name="IDX454"></a> <a id="IDX455" name="IDX455"></a></p>

<p>MySQL has an advanced but non-standard security/privilege
system. This section describes how it works.</p>

<h3><a id="General_security" name="General_security"
href="manual_toc.html#General_security">4.2.1 General Security
Guidelines</a></h3>

<p>Anyone using MySQL on a computer connected to the Internet
should read this section to avoid the most common security
mistakes.</p>

<p>In discussing security, we emphasise the necessity of fully
protecting the entire server host (not simply the MySQL server)
against all types of applicable attacks: eavesdropping, altering,
playback, and denial of service. We do not cover all aspects of
availability and fault tolerance here.</p>

<p>MySQL uses security based on Access Control Lists (ACLs) for all
connections, queries, and other operations that a user may attempt
to perform. There is also some support for SSL-encrypted
connections between MySQL clients and servers. Many of the concepts
discussed here are not specific to MySQL at all; the same general
ideas apply to almost all applications.</p>

<p>When running MySQL, follow these guidelines whenever
possible:</p>

<ul>
<li><strong>Do not ever give anyone (except the mysql root user)
access to the <code>user</code> table in the <code>mysql</code>
database!</strong> This is critical. <strong>The encrypted password
is the real password in MySQL.</strong> Anyone who knows the
password which is listed in the <code>user</code> table and has
access to the host listed for the account <strong>can easily log in
as that user</strong>.</li>

<li>Learn the MySQL access privilege system. The <code>GRANT</code>
and <code>REVOKE</code> commands are used for controlling access to
MySQL. Do not grant any more privileges than necessary. Never grant
privileges to all hosts. Checklist: 

<ul>
<li>Try <code>mysql -u root</code>. If you are able to connect
successfully to the server without being asked for a password, you
have problems. Anyone can connect to your MySQL server as the MySQL
<code>root</code> user with full privileges! Review the MySQL
installation instructions, paying particular attention to the item
about setting a <code>root</code> password.</li>

<li>Use the command <code>SHOW GRANTS</code> and check to see who
has access to what. Remove those privileges that are not necessary
using the <code>REVOKE</code> command.</li>
</ul>
</li>

<li>Do not keep any plain-text passwords in your database. When
your computer becomes compromised, the intruder can take the full
list of passwords and use them. Instead use <code>MD5()</code>,
<code>SHA1()</code> or another one-way hashing function.</li>

<li>Do not choose passwords from dictionaries. There are special
programs to break them. Even passwords like ``xfish98'' are very
bad. Much better is ``duag98'' which contains the same word
``fish'' but typed one key to the left on a standard QWERTY
keyboard. Another method is to use ``Mhall'' which is taken from
the first characters of each word in the sentence ``Mary had a
little lamb.'' This is easy to remember and type, but difficult to
guess for someone who does not know it.</li>

<li>Invest in a firewall. This protects you from at least 50% of
all types of exploits in any software. Put MySQL behind the
firewall or in a demilitarised zone (DMZ). Checklist: 

<ul>
<li>Try to scan your ports from the Internet using a tool such as
<code>nmap</code>. MySQL uses port 3306 by default. This port
should be inaccessible from untrusted hosts. Another simple way to
check whether or not your MySQL port is open is to try the
following command from some remote machine, where
<code>server_host</code> is the hostname of your MySQL server: 

<pre>
shell&gt; telnet server_host 3306
</pre>

If you get a connection and some garbage characters, the port is
open, and should be closed on your firewall or router, unless you
really have a good reason to keep it open. If <code>telnet</code>
just hangs or the connection is refused, everything is OK; the port
is blocked.</li>
</ul>
</li>

<li>Do not trust any data entered by your users. They can try to
trick your code by entering special or escaped character sequences
in web forms, URLs, or whatever application you have built. Be sure
that your application remains secure if a user enters something
like ``<code>; DROP DATABASE mysql;</code>''. This is an extreme
example, but large security leaks and data loss may occur as a
result of hackers using similar techniques, if you do not prepare
for them. Also remember to check numeric data. A common mistake is
to protect only strings. Sometimes people think that if a database
contains only publicly available data that it need not be
protected. This is incorrect. At least denial-of-service type
attacks can be performed on such databases. The simplest way to
protect from this type of attack is to use apostrophes around the
numeric constants: <code>SELECT * FROM table WHERE ID='234'</code>
rather than <code>SELECT * FROM table WHERE ID=234</code>. MySQL
automatically converts this string to a number and strips all
non-numeric symbols from it. Checklist: 

<ul>
<li>All web applications: 

<ul>
<li>Try to enter <samp>`''</samp> and <samp>`"'</samp> in all your
web forms. If you get any kind of MySQL error, investigate the
problem right away.</li>

<li>Try to modify any dynamic URLs by adding <code>%22</code>
(<samp>`"'</samp>), <code>%23</code> (<samp>`#'</samp>), and
<code>%27</code> (<samp>`''</samp>) in the URL.</li>

<li>Try to modify datatypes in dynamic URLs from numeric ones to
character ones containing characters from previous examples. Your
application should be safe against this and similar attacks.</li>

<li>Try to enter characters, spaces, and special symbols instead of
numbers in numeric fields. Your application should remove them
before passing them to MySQL or your application should generate an
error. Passing unchecked values to MySQL is very dangerous!</li>

<li>Check data sizes before passing them to MySQL.</li>

<li>Consider having your application connect to the database using
a different user name than the one you use for administrative
purposes. Do not give your applications any more access privileges
than they need.</li>
</ul>
</li>

<li>Users of PHP: 

<ul>
<li>Check out the <code>addslashes()</code> function. As of PHP
4.0.3, a <code>mysql_escape_string()</code> function is available
that is based on the function of the same name in the MySQL C
API.</li>
</ul>
</li>

<li>Users of MySQL C API: 

<ul>
<li>Check out the <code>mysql_real_escape_string()</code> API
call.</li>
</ul>
</li>

<li>Users of MySQL++: 

<ul>
<li>Check out the <code>escape</code> and <code>quote</code>
modifiers for query streams.</li>
</ul>
</li>

<li>Users of Perl DBI: 

<ul>
<li>Check out the <code>quote()</code> method or use
placeholders.</li>
</ul>
</li>

<li>Users of Java JDBC: 

<ul>
<li>Use a <code>PreparedStatement</code> object and
placeholders.</li>
</ul>
</li>
</ul>
</li>

<li>Do not transmit plain (unencrypted) data over the Internet.
These data are accessible to everyone who has the time and ability
to intercept it and use it for their own purposes. Instead, use an
encrypted protocol such as SSL or SSH. MySQL supports internal SSL
connections as of Version 4.0.0. SSH port-forwarding can be used to
create an encrypted (and compressed) tunnel for the
communication.</li>

<li>Learn to use the <code>tcpdump</code> and <code>strings</code>
utilities. For most cases, you can check whether MySQL data streams
are unencrypted by issuing a command like the following: 

<pre>
shell&gt; tcpdump -l -i eth0 -w - src or dst port 3306 | strings
</pre>

(This works under Linux and should work with small modifications
under other systems.) Warning: If you do not see data this doesn't
always actually mean that it is encrypted. If you need high
security, you should consult with a security expert.</li>
</ul>

<h3><a id="Security" name="Security"
href="manual_toc.html#Security">4.2.2 How to Make MySQL Secure
Against Crackers</a></h3>

<p><a id="IDX456" name="IDX456"></a> <a id="IDX457"
name="IDX457"></a></p>

<p>When you connect to a MySQL server, you normally should use a
password. The password is not transmitted in clear text over the
connection, however the encryption algorithm is not very strong,
and with some effort a clever attacker can crack the password if he
is able to sniff the traffic between the client and the server. If
the connection between the client and the server goes through an
untrusted network, you should use an SSH tunnel to encrypt the
communication.</p>

<p>All other information is transferred as text that can be read by
anyone who is able to watch the connection. If you are concerned
about this, you can use the compressed protocol (in MySQL Version
3.22 and above) to make things much harder. To make things even
more secure you should use <code>ssh</code>. You can find an
<code>Open Source</code> <code>ssh</code> client at <a
href="http://www.openssh.org/">http://www.openssh.org/</a>, and a
commercial <code>ssh</code> client at <a
href="http://www.ssh.com/">http://www.ssh.com/</a>. With this, you
can get an encrypted TCP/IP connection between a MySQL server and a
MySQL client.</p>

<p>If you are using MySQL 4.0, you can also use internal OpenSSL
support. See section <a href="manual.html#Secure_connections">4.3.9
Using Secure Connections</a>.</p>

<p>To make a MySQL system secure, you should strongly consider the
following suggestions:</p>

<ul>
<li>Use passwords for all MySQL users. Remember that anyone can log
in as any other person as simply as <code>mysql -u other_user
db_name</code> if <code>other_user</code> has no password. It is
common behaviour with client/server applications that the client
may specify any user name. You can change the password of all users
by editing the <code>mysql_install_db</code> script before you run
it, or only the password for the MySQL <code>root</code> user like
this: 

<pre>
shell&gt; mysql -u root mysql
mysql&gt; UPDATE user SET Password=PASSWORD('new_password')
    -&gt;             WHERE user='root';
mysql&gt; FLUSH PRIVILEGES;
</pre>
</li>

<li>Don't run the MySQL daemon as the Unix <code>root</code> user.
This is very dangerous, because any user with the <code>FILE</code>
privilege will be able to create files as <code>root</code> (for
example, <code>~root/.bashrc</code>). To prevent this,
<code>mysqld</code> will refuse to run as <code>root</code> unless
it is specified directly using a <code>--user=root</code> option.
<code>mysqld</code> can be run as an ordinary unprivileged user
instead. You can also create a new Unix user <code>mysql</code> to
make everything even more secure. If you run <code>mysqld</code> as
another Unix user, you don't need to change the <code>root</code>
user name in the <code>user</code> table, because MySQL user names
have nothing to do with Unix user names. To start
<code>mysqld</code> as another Unix user, add a <code>user</code>
line that specifies the user name to the <code>[mysqld]</code>
group of the <tt>`/etc/my.cnf'</tt> option file or the
<tt>`my.cnf'</tt> option file in the server's data directory. For
example: 

<pre>
[mysqld]
user=mysql
</pre>

This will cause the server to start as the designated user whether
you start it manually or by using <code>safe_mysqld</code> or
<code>mysql.server</code>. For more details, see section <a
href="manual.html#Changing_MySQL_user">A.3.2 How to Run MySQL As a
Normal User</a>.</li>

<li>Don't support symlinks to tables (this can be disabled with the
<code>--skip-symlink</code> option). This is especially important
if you run <code>mysqld</code> as root as anyone that has write
access to the mysqld data directories could then delete any file in
the system! See section <a
href="manual.html#Symbolic_links_to_tables">5.6.1.2 Using Symbolic
Links for Tables</a>.</li>

<li>Check that the Unix user that <code>mysqld</code> runs as is
the only user with read/write privileges in the database
directories.</li>

<li>Don't give the <code>PROCESS</code> privilege to all users. The
output of <code>mysqladmin processlist</code> shows the text of the
currently executing queries, so any user who is allowed to execute
that command might be able to see if another user issues an
<code>UPDATE user SET password=PASSWORD('not_secure')</code> query.
<code>mysqld</code> reserves an extra connection for users who have
the <code>PROCESS</code> privilege, so that a MySQL
<code>root</code> user can log in and check things even if all
normal connections are in use.</li>

<li>Don't give the <code>FILE</code> privilege to all users. Any
user that has this privilege can write a file anywhere in the
filesystem with the privileges of the <code>mysqld</code> daemon!
To make this a bit safer, all files generated with <code>SELECT ...
INTO OUTFILE</code> are readable to everyone, and you cannot
overwrite existing files. <a id="IDX458" name="IDX458"></a> The
<code>FILE</code> privilege may also be used to read any file
accessible to the Unix user that the server runs as. This could be
abused, for example, by using <code>LOAD DATA</code> to load
<tt>`/etc/passwd'</tt> into a table, which can then be read with
<code>SELECT</code>.</li>

<li>If you don't trust your DNS, you should use IP numbers instead
of hostnames in the grant tables. In any case, you should be very
careful about creating grant table entries using hostname values
that contain wildcards!</li>

<li>If you want to restrict the number of connections for a single
user, you can do this by setting the
<code>max_user_connections</code> variable in
<code>mysqld</code>.</li>
</ul>

<h3><a id="Privileges_options" name="Privileges_options"
href="manual_toc.html#Privileges_options">4.2.3 Startup Options for
<code>mysqld</code> Concerning Security</a></h3>

<p>The following <code>mysqld</code> options affect security:</p>

<dl compact="compact">
<dt><code>--local-infile[=(0|1)]</code></dt>

<dd>If one uses <code>--local-infile=0</code> then one can't use
<code>LOAD DATA LOCAL INFILE</code>.</dd>

<dt><code>--safe-show-database</code></dt>

<dd>With this option, the <code>SHOW DATABASES</code> command
returns only those databases for which the user has some kind of
privilege. From version 4.0.2 this option is deprecated and doesn't
do anything (the option is enabled by default) as we now have the
<code>SHOW DATABASES</code> privilege. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</dd>

<dt><code>--safe-user-create</code></dt>

<dd>If this is enabled, an user can't create new users with the
<code>GRANT</code> command, if the user doesn't have the
<code>INSERT</code> privilege for the <code>mysql.user</code>
table. If you want to give a user access to just create new users
with those privileges that the user has right to grant, you should
give the user the following privilege: 

<pre>
mysql&gt; GRANT INSERT(user) ON mysql.user TO 'user'@'hostname';
</pre>

This will ensure that the user can't change any privilege columns
directly, but has to use the <code>GRANT</code> command to give
privileges to other users.</dd>

<dt><code>--skip-grant-tables</code></dt>

<dd>This option causes the server not to use the privilege system
at all. This gives everyone <strong>full access</strong> to all
databases! (You can tell a running server to start using the grant
tables again by executing <code>mysqladmin flush-privileges</code>
or <code>mysqladmin reload</code>.)</dd>

<dt><code>--skip-name-resolve</code></dt>

<dd>Hostnames are not resolved. All <code>Host</code> column values
in the grant tables must be IP numbers or
<code>localhost</code>.</dd>

<dt><code>--skip-networking</code></dt>

<dd>Don't allow TCP/IP connections over the network. All
connections to <code>mysqld</code> must be made via Unix sockets.
This option is unsuitable when using a MySQL version prior to
3.23.27 with the MIT-pthreads package, because Unix sockets were
not supported by MIT-pthreads at that time.</dd>

<dt><code>--skip-show-database</code></dt>

<dd>Don't allow <code>SHOW DATABASES</code> command, unless the
user has the <code>SHOW DATABASES</code> privilege. From version
4.0.2 you should no longer need this option, since access can now
be granted specifically with the <code>SHOW DATABASES</code>
privilege.</dd>
</dl>

<h3><a id="LOAD_DATA_LOCAL" name="LOAD_DATA_LOCAL"
href="manual_toc.html#LOAD_DATA_LOCAL">4.2.4 Security issues with
LOAD DATA LOCAL</a></h3>

<p>In MySQL 3.23.49 and MySQL 4.0.2, we added some new options to
deal with possible security issues when it comes to <code>LOAD DATA
LOCAL</code>.</p>

<p>There are two possible problems with supporting this
command:</p>

<p>As the reading of the file is initiated from the server, one
could theoretically create a patched MySQL server that could read
any file on the client machine that the current user has read
access to, when the client issues a query against the table.</p>

<p>In a web environment where the clients are connecting from a web
server, a user could use <code>LOAD DATA LOCAL</code> to read any
files that the web server process has read access to (assuming a
user could run any command against the SQL server).</p>

<p>There are two separate fixes for this:</p>

<p>If you don't configure MySQL with
<code>--enable-local-infile</code>, then <code>LOAD DATA
LOCAL</code> will be disabled by all clients, unless one calls
<code>mysql_options(... MYSQL_OPT_LOCAL_INFILE, 0)</code> in the
client. See section <a href="manual.html#mysql_options">8.4.3.159
<code>mysql_options()</code></a>.</p>

<p>For the <code>mysql</code> command-line client, <code>LOAD DATA
LOCAL</code> can be enabled by specifying the option
<code>--local-infile[=1]</code>, or disabled with
<code>--local-infile=0</code>.</p>

<p>By default, all MySQL clients and libraries are compiled with
<code>--enable-local-infile</code>, to be compatible with MySQL
3.23.48 and before.</p>

<p>One can disable all <code>LOAD DATA LOCAL</code> commands in the
MySQL server by starting <code>mysqld</code> with
<code>--local-infile=0</code>.</p>

<p>In the case that <code>LOAD DATA LOCAL INFILE</code> is disabled
in the server or the client, you will get the error message
(1148):</p>

<pre>
The used command is not allowed with this MySQL version
</pre>

<h3><a id="What_Privileges" name="What_Privileges"
href="manual_toc.html#What_Privileges">4.2.5 What the Privilege
System Does</a></h3>

<p><a id="IDX459" name="IDX459"></a> <a id="IDX460"
name="IDX460"></a> <a id="IDX461" name="IDX461"></a></p>

<p>The primary function of the MySQL privilege system is to
authenticate a user connecting from a given host, and to associate
that user with privileges on a database such as
<code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> and
<code>DELETE</code>.</p>

<p>Additional functionality includes the ability to have an
anonymous user and to grant privileges for MySQL-specific functions
such as <code>LOAD DATA INFILE</code> and administrative
operations.</p>

<h3><a id="Privileges" name="Privileges"
href="manual_toc.html#Privileges">4.2.6 How the Privilege System
Works</a></h3>

<p><a id="IDX462" name="IDX462"></a></p>

<p>The MySQL privilege system ensures that all users may do exactly
the things that they are supposed to be allowed to do. When you
connect to a MySQL server, your identity is determined by
<strong>the host from which you connect</strong> and <strong>the
user name you specify</strong>. The system grants privileges
according to your identity and <strong>what you want to
do</strong>.</p>

<p>MySQL considers both your hostname and user name in identifying
you because there is little reason to assume that a given user name
belongs to the same person everywhere on the Internet. For example,
the user <code>joe</code> who connects from <code>office.com</code>
need not be the same person as the user <code>joe</code> who
connects from <code>elsewhere.com</code>. MySQL handles this by
allowing you to distinguish users on different hosts that happen to
have the same name: you can grant <code>joe</code> one set of
privileges for connections from <code>office.com</code>, and a
different set of privileges for connections from
<code>elsewhere.com</code>.</p>

<p>MySQL access control involves two stages:</p>

<ul>
<li>Stage 1: The server checks whether you are even allowed to
connect.</li>

<li>Stage 2: Assuming you can connect, the server checks each
request you issue to see whether you have sufficient privileges to
perform it. For example, if you try to select rows from a table in
a database or drop a table from the database, the server makes sure
you have the <code>SELECT</code> privilege for the table or the
<code>DROP</code> privilege for the database.</li>
</ul>

<p>The server uses the <code>user</code>, <code>db</code>, and
<code>host</code> tables in the <code>mysql</code> database at both
stages of access control. The fields in these grant tables are
shown here:</p>

<table border="1" width="100%">
<tr>
<td><strong>Table name</strong></td>
<td><code>user</code></td>
<td><code>db</code></td>
<td><code>host</code></td>
</tr>

<tr>
<td><strong>Scope fields</strong></td>
<td><code>Host</code></td>
<td><code>Host</code></td>
<td><code>Host</code></td>
</tr>

<tr>
<td></td>
<td><code>User</code></td>
<td><code>Db</code></td>
<td><code>Db</code></td>
</tr>

<tr>
<td></td>
<td><code>Password</code></td>
<td><code>User</code></td>
<td></td>
</tr>

<tr>
<td><strong>Privilege fields</strong></td>
<td><code>Select_priv</code></td>
<td><code>Select_priv</code></td>
<td><code>Select_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Insert_priv</code></td>
<td><code>Insert_priv</code></td>
<td><code>Insert_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Update_priv</code></td>
<td><code>Update_priv</code></td>
<td><code>Update_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Delete_priv</code></td>
<td><code>Delete_priv</code></td>
<td><code>Delete_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Index_priv</code></td>
<td><code>Index_priv</code></td>
<td><code>Index_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Alter_priv</code></td>
<td><code>Alter_priv</code></td>
<td><code>Alter_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Create_priv</code></td>
<td><code>Create_priv</code></td>
<td><code>Create_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Drop_priv</code></td>
<td><code>Drop_priv</code></td>
<td><code>Drop_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Grant_priv</code></td>
<td><code>Grant_priv</code></td>
<td><code>Grant_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>References_priv</code></td>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td><code>Reload_priv</code></td>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td><code>Shutdown_priv</code></td>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td><code>Process_priv</code></td>
<td></td>
<td></td>
</tr>

<tr>
<td></td>
<td><code>File_priv</code></td>
<td></td>
<td></td>
</tr>
</table>

<p>For the second stage of access control (request verification),
the server may, if the request involves tables, additionally
consult the <code>tables_priv</code> and <code>columns_priv</code>
tables. The fields in these tables are shown here:</p>

<table border="1" width="100%">
<tr>
<td><strong>Table name</strong></td>
<td><code>tables_priv</code></td>
<td><code>columns_priv</code></td>
</tr>

<tr>
<td><strong>Scope fields</strong></td>
<td><code>Host</code></td>
<td><code>Host</code></td>
</tr>

<tr>
<td></td>
<td><code>Db</code></td>
<td><code>Db</code></td>
</tr>

<tr>
<td></td>
<td><code>User</code></td>
<td><code>User</code></td>
</tr>

<tr>
<td></td>
<td><code>Table_name</code></td>
<td><code>Table_name</code></td>
</tr>

<tr>
<td></td>
<td></td>
<td><code>Column_name</code></td>
</tr>

<tr>
<td><strong>Privilege fields</strong></td>
<td><code>Table_priv</code></td>
<td><code>Column_priv</code></td>
</tr>

<tr>
<td></td>
<td><code>Column_priv</code></td>
<td></td>
</tr>

<tr>
<td><strong>Other fields</strong></td>
<td><code>Timestamp</code></td>
<td><code>Timestamp</code></td>
</tr>

<tr>
<td></td>
<td><code>Grantor</code></td>
<td></td>
</tr>
</table>

<p>Each grant table contains scope fields and privilege fields.</p>

<p>Scope fields determine the scope of each entry in the tables,
that is, the context in which the entry applies. For example, a
<code>user</code> table entry with <code>Host</code> and
<code>User</code> values of <code>'thomas.loc.gov'</code> and
<code>'bob'</code> would be used for authenticating connections
made to the server by <code>bob</code> from the host
<code>thomas.loc.gov</code>. Similarly, a <code>db</code> table
entry with <code>Host</code>, <code>User</code>, and
<code>Db</code> fields of <code>'thomas.loc.gov'</code>,
<code>'bob'</code> and <code>'reports'</code> would be used when
<code>bob</code> connects from the host <code>thomas.loc.gov</code>
to access the <code>reports</code> database. The
<code>tables_priv</code> and <code>columns_priv</code> tables
contain scope fields indicating tables or table/column combinations
to which each entry applies.</p>

<p><a id="IDX463" name="IDX463"></a> For access-checking purposes,
comparisons of <code>Host</code> values are case-insensitive.
<code>User</code>, <code>Password</code>, <code>Db</code>, and
<code>Table_name</code> values are case-sensitive.
<code>Column_name</code> values are case-insensitive in MySQL
Version 3.22.12 or later.</p>

<p>Privilege fields indicate the privileges granted by a table
entry, that is, what operations can be performed. The server
combines the information in the various grant tables to form a
complete description of a user's privileges. The rules used to do
this are described in section <a
href="manual.html#Request_access">4.2.10 Access Control, Stage 2:
Request Verification</a>.</p>

<p>Scope fields are strings, declared as shown here; the default
value for each is the empty string:</p>

<table border="1" width="100%">
<tr>
<td><strong>Field name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Notes</strong></td>
</tr>

<tr>
<td><code>Host</code></td>
<td><code>CHAR(60)</code></td>
<td></td>
</tr>

<tr>
<td><code>User</code></td>
<td><code>CHAR(16)</code></td>
<td></td>
</tr>

<tr>
<td><code>Password</code></td>
<td><code>CHAR(16)</code></td>
<td></td>
</tr>

<tr>
<td><code>Db</code></td>
<td><code>CHAR(64)</code></td>
<td>(<code>CHAR(60)</code> for the <code>tables_priv</code> and
<code>columns_priv</code> tables)</td>
</tr>

<tr>
<td><code>Table_name</code></td>
<td><code>CHAR(60)</code></td>
<td></td>
</tr>

<tr>
<td><code>Column_name</code></td>
<td><code>CHAR(60)</code></td>
<td></td>
</tr>
</table>

<p>In the <code>user</code>, <code>db</code> and <code>host</code>
tables, all privilege fields are declared as
<code>ENUM('N','Y')</code>—each can have a value of
<code>'N'</code> or <code>'Y'</code>, and the default value is
<code>'N'</code>.</p>

<p>In the <code>tables_priv</code> and <code>columns_priv</code>
tables, the privilege fields are declared as <code>SET</code>
fields:</p>

<table border="1" width="100%">
<tr>
<td><strong>Table name</strong></td>
<td><strong>Field name</strong></td>
<td><strong>Possible set elements</strong></td>
</tr>

<tr>
<td><code>tables_priv</code></td>
<td><code>Table_priv</code></td>
<td><code>'Select', 'Insert', 'Update', 'Delete', 'Create', 'Drop',
'Grant', 'References', 'Index', 'Alter'</code></td>
</tr>

<tr>
<td><code>tables_priv</code></td>
<td><code>Column_priv</code></td>
<td><code>'Select', 'Insert', 'Update', 'References'</code></td>
</tr>

<tr>
<td><code>columns_priv</code></td>
<td><code>Column_priv</code></td>
<td><code>'Select', 'Insert', 'Update', 'References'</code></td>
</tr>
</table>

<p>Briefly, the server uses the grant tables like this:</p>

<ul>
<li>The <code>user</code> table scope fields determine whether to
allow or reject incoming connections. For allowed connections, any
privileges granted in the <code>user</code> table indicate the
user's global (superuser) privileges. These privileges apply to
<strong>all</strong> databases on the server.</li>

<li>The <code>db</code> and <code>host</code> tables are used
together: 

<ul>
<li>The <code>db</code> table scope fields determine which users
can access which databases from which hosts. The privilege fields
determine which operations are allowed.</li>

<li>The <code>host</code> table is used as an extension of the
<code>db</code> table when you want a given <code>db</code> table
entry to apply to several hosts. For example, if you want a user to
be able to use a database from several hosts in your network, leave
the <code>Host</code> value empty in the user's <code>db</code>
table entry, then populate the <code>host</code> table with an
entry for each of those hosts. This mechanism is described more
detail in section <a href="manual.html#Request_access">4.2.10
Access Control, Stage 2: Request Verification</a>.</li>
</ul>
</li>

<li>The <code>tables_priv</code> and <code>columns_priv</code>
tables are similar to the <code>db</code> table, but are more
fine-grained: they apply at the table and column levels rather than
at the database level.</li>
</ul>

<p>Note that administrative privileges (<code>RELOAD</code>,
<code>SHUTDOWN</code>, etc.) are specified only in the
<code>user</code> table. This is because administrative operations
are operations on the server itself and are not database-specific,
so there is no reason to list such privileges in the other grant
tables. In fact, only the <code>user</code> table need be consulted
to determine whether you can perform an administrative
operation.</p>

<p>The <code>FILE</code> privilege is specified only in the
<code>user</code> table, too. It is not an administrative privilege
as such, but your ability to read or write files on the server host
is independent of the database you are accessing.</p>

<p>The <code>mysqld</code> server reads the contents of the grant
tables once, when it starts up. Changes to the grant tables take
effect as indicated in section <a
href="manual.html#Privilege_changes">4.3.3 When Privilege Changes
Take Effect</a>.</p>

<p>When you modify the contents of the grant tables, it is a good
idea to make sure that your changes set up privileges the way you
want. For help in diagnosing problems, see section <a
href="manual.html#Access_denied">4.2.11 Causes of <code>Access
denied</code> Errors</a>. For advice on security issues, see
section <a href="manual.html#Security">4.2.2 How to Make MySQL
Secure Against Crackers</a>.</p>

<p>A useful diagnostic tool is the <code>mysqlaccess</code> script,
which Yves Carlier has provided for the MySQL distribution. Invoke
<code>mysqlaccess</code> with the <code>--help</code> option to
find out how it works. Note that <code>mysqlaccess</code> checks
access using only the <code>user</code>, <code>db</code> and
<code>host</code> tables. It does not check table- or column-level
privileges.</p>

<h3><a id="Privileges_provided" name="Privileges_provided"
href="manual_toc.html#Privileges_provided">4.2.7 Privileges
Provided by MySQL</a></h3>

<p><a id="IDX464" name="IDX464"></a></p>

<p>Information about user privileges is stored in the
<code>user</code>, <code>db</code>, <code>host</code>,
<code>tables_priv</code>, and <code>columns_priv</code> tables in
the <code>mysql</code> database (that is, in the database named
<code>mysql</code>). The MySQL server reads the contents of these
tables when it starts up and under the circumstances indicated in
section <a href="manual.html#Privilege_changes">4.3.3 When
Privilege Changes Take Effect</a>.</p>

<p>The names used in this manual to refer to the privileges
provided by MySQL version 4.0.2 are shown here, along with the
table column name associated with each privilege in the grant
tables and the context in which the privilege applies:</p>

<table border="1" width="100%">
<tr>
<td><strong>Privilege</strong></td>
<td><strong>Column</strong></td>
<td><strong>Context</strong></td>
</tr>

<tr>
<td><code>ALTER</code></td>
<td><code>Alter_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>DELETE</code></td>
<td><code>Delete_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>INDEX</code></td>
<td><code>Index_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>INSERT</code></td>
<td><code>Insert_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>SELECT</code></td>
<td><code>Select_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>UPDATE</code></td>
<td><code>Update_priv</code></td>
<td>tables</td>
</tr>

<tr>
<td><code>CREATE</code></td>
<td><code>Create_priv</code></td>
<td>databases, tables, or indexes</td>
</tr>

<tr>
<td><code>DROP</code></td>
<td><code>Drop_priv</code></td>
<td>databases or tables</td>
</tr>

<tr>
<td><code>GRANT</code></td>
<td><code>Grant_priv</code></td>
<td>databases or tables</td>
</tr>

<tr>
<td><code>REFERENCES</code></td>
<td><code>References_priv</code></td>
<td>databases or tables</td>
</tr>

<tr>
<td><code>CREATE TEMPORARY TABLES</code></td>
<td><code>Create_tmp_table_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>EXECUTE</code></td>
<td><code>Execute_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>FILE</code></td>
<td><code>File_priv</code></td>
<td>file access on server</td>
</tr>

<tr>
<td><code>LOCK TABLES</code></td>
<td><code>Lock_tables_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>PROCESS</code></td>
<td><code>Process_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>RELOAD</code></td>
<td><code>Reload_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>REPLICATION CLIENT</code></td>
<td><code>Repl_client_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>REPLICATION SLAVE</code></td>
<td><code>Repl_slave_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>SHOW DATABASES</code></td>
<td><code>Show_db_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>SHUTDOWN</code></td>
<td><code>Shutdown_priv</code></td>
<td>server administration</td>
</tr>

<tr>
<td><code>SUPER</code></td>
<td><code>Super_priv</code></td>
<td>server administration</td>
</tr>
</table>

<p>The <code>SELECT</code>, <code>INSERT</code>,
<code>UPDATE</code>, and <code>DELETE</code> privileges allow you
to perform operations on rows in existing tables in a database.</p>

<p><code>SELECT</code> statements require the <code>SELECT</code>
privilege only if they actually retrieve rows from a table. You can
execute certain <code>SELECT</code> statements even without
permission to access any of the databases on the server. For
example, you could use the <code>mysql</code> client as a simple
calculator:</p>

<pre>
mysql&gt; SELECT 1+1;
mysql&gt; SELECT PI()*2;
</pre>

<p>The <code>INDEX</code> privilege allows you to create or drop
(remove) indexes.</p>

<p>The <code>ALTER</code> privilege allows you to use <code>ALTER
TABLE</code>.</p>

<p>The <code>CREATE</code> and <code>DROP</code> privileges allow
you to create new databases and tables, or to drop (remove)
existing databases and tables.</p>

<p>Note that if you grant the <code>DROP</code> privilege for the
<code>mysql</code> database to a user, that user can drop the
database in which the MySQL access privileges are stored!</p>

<p>The <code>GRANT</code> privilege allows you to give to other
users those privileges you yourself possess.</p>

<p>The <code>FILE</code> privilege gives you permission to read and
write files on the server using the <code>LOAD DATA INFILE</code>
and <code>SELECT ... INTO OUTFILE</code> statements. Any user to
whom this privilege is granted can read or write any file that the
MySQL server can read or write.</p>

<p>The remaining privileges are used for administrative operations,
which are performed using the <code>mysqladmin</code> program. The
table here shows which <code>mysqladmin</code> commands each
administrative privilege allows you to execute:</p>

<table border="1" width="100%">
<tr>
<td><strong>Privilege</strong></td>
<td><strong>Commands permitted to privilege holders</strong></td>
</tr>

<tr>
<td><code>RELOAD</code></td>
<td><code>reload</code>, <code>refresh</code>,
<code>flush-privileges</code>, <code>flush-hosts</code>,
<code>flush-logs</code>, and <code>flush-tables</code></td>
</tr>

<tr>
<td><code>SHUTDOWN</code></td>
<td><code>shutdown</code></td>
</tr>

<tr>
<td><code>PROCESS</code></td>
<td><code>processlist</code></td>
</tr>

<tr>
<td><code>SUPER</code></td>
<td><code>kill</code></td>
</tr>
</table>

<p>The <code>reload</code> command tells the server to re-read the
grant tables. The <code>refresh</code> command flushes all tables
and opens and closes the log files. <code>flush-privileges</code>
is a synonym for <code>reload</code>. The other
<code>flush-*</code> commands perform functions similar to
<code>refresh</code> but are more limited in scope, and may be
preferable in some instances. For example, if you want to flush
just the log files, <code>flush-logs</code> is a better choice than
<code>refresh</code>.</p>

<p>The <code>shutdown</code> command shuts down the server.</p>

<p>The <code>processlist</code> command displays information about
the threads executing within the server. The <code>kill</code>
command kills server threads. You can always display or kill your
own threads, but you need the <code>PROCESS</code> privilege to
display and <code>SUPER</code> privilege to kill threads initiated
by other users. See section <a href="manual.html#KILL">4.5.5
<code>KILL</code> Syntax</a>.</p>

<p>It is a good idea in general to grant privileges only to those
users who need them, but you should exercise particular caution in
granting certain privileges:</p>

<ul>
<li>The <code>GRANT</code> privilege allows users to give away
their privileges to other users. Two users with different
privileges and with the <code>GRANT</code> privilege are able to
combine privileges.</li>

<li>The <code>ALTER</code> privilege may be used to subvert the
privilege system by renaming tables.</li>

<li>The <code>FILE</code> privilege can be abused to read any
world-readable file on the server into a database table, the
contents of which can then be accessed using <code>SELECT</code>.
This includes the contents of all databases hosted by the
server!</li>

<li>The <code>SHUTDOWN</code> privilege can be abused to deny
service to other users entirely, by terminating the server.</li>

<li>The <code>PROCESS</code> privilege can be used to view the
plain text of currently executing queries, including queries that
set or change passwords.</li>

<li>Privileges on the <code>mysql</code> database can be used to
change passwords and other access privilege information. (Passwords
are stored encrypted, so a malicious user cannot simply read them
to know the plain text password.) If they can access the
<code>mysql.user</code> password column, they can use it to log
into the MySQL server for the given user. (With sufficient
privileges, the same user can replace a password with a different
one.)</li>
</ul>

<p>There are some things that you cannot do with the MySQL
privilege system:</p>

<ul>
<li>You cannot explicitly specify that a given user should be
denied access. That is, you cannot explicitly match a user and then
refuse the connection.</li>

<li>You cannot specify that a user has privileges to create or drop
tables in a database but not to create or drop the database
itself.</li>
</ul>

<h3><a id="Connecting" name="Connecting"
href="manual_toc.html#Connecting">4.2.8 Connecting to the MySQL
Server</a></h3>

<p><a id="IDX465" name="IDX465"></a> <a id="IDX466"
name="IDX466"></a> <a id="IDX467" name="IDX467"></a> <a id="IDX468"
name="IDX468"></a></p>

<p>MySQL client programs generally require that you specify
connection parameters when you want to access a MySQL server: the
host you want to connect to, your user name, and your password. For
example, the <code>mysql</code> client can be started like this
(optional arguments are enclosed between <samp>`['</samp> and
<samp>`]'</samp>):</p>

<pre>
shell&gt; mysql [-h host_name] [-u user_name] [-pyour_pass]
</pre>

<p>Alternate forms of the <code>-h</code>, <code>-u</code>, and
<code>-p</code> options are <code>--host=host_name</code>,
<code>--user=user_name</code>, and
<code>--password=your_pass</code>. Note that there is <em>no
space</em> between <code>-p</code> or <code>--password=</code> and
the password following it.</p>

<p><strong>Note</strong>: Specifying a password on the command-line
is not secure! Any user on your system may then find out your
password by typing a command like: <code>ps auxww</code>. See
section <a href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt>
Option Files</a>.</p>

<p><code>mysql</code> uses default values for connection parameters
that are missing from the command-line:</p>

<ul>
<li>The default hostname is <code>localhost</code>.</li>

<li>The default user name is your Unix login name.</li>

<li>No password is supplied if <code>-p</code> is missing.</li>
</ul>

<p>Thus, for a Unix user <code>joe</code>, the following commands
are equivalent:</p>

<pre>
shell&gt; mysql -h localhost -u joe
shell&gt; mysql -h localhost
shell&gt; mysql -u joe
shell&gt; mysql
</pre>

<p>Other MySQL clients behave similarly.</p>

<p>On Unix systems, you can specify different default values to be
used when you make a connection, so that you need not enter them on
the command-line each time you invoke a client program. This can be
done in a couple of ways:</p>

<ul>
<li><a id="IDX469" name="IDX469"></a> You can specify connection
parameters in the <code>[client]</code> section of the
<tt>`.my.cnf'</tt> configuration file in your home directory. The
relevant section of the file might look like this: 

<pre>
[client]
host=host_name
user=user_name
password=your_pass
</pre>

See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</li>

<li><a id="IDX470" name="IDX470"></a> <a id="IDX471"
name="IDX471"></a> <a id="IDX472" name="IDX472"></a> <a id="IDX473"
name="IDX473"></a> <a id="IDX474" name="IDX474"></a> <a id="IDX475"
name="IDX475"></a> You can specify connection parameters using
environment variables. The host can be specified for
<code>mysql</code> using <code>MYSQL_HOST</code>. The MySQL user
name can be specified using <code>USER</code> (this is for Windows
only). The password can be specified using <code>MYSQL_PWD</code>
(but this is insecure; see the next section). See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</li>
</ul>

<h3><a id="Connection_access" name="Connection_access"
href="manual_toc.html#Connection_access">4.2.9 Access Control,
Stage 1: Connection Verification</a></h3>

<p><a id="IDX476" name="IDX476"></a> <a id="IDX477"
name="IDX477"></a> <a id="IDX478" name="IDX478"></a> <a id="IDX479"
name="IDX479"></a></p>

<p>When you attempt to connect to a MySQL server, the server
accepts or rejects the connection based on your identity and
whether you can verify your identity by supplying the correct
password. If not, the server denies access to you completely.
Otherwise, the server accepts the connection, then enters Stage 2
and waits for requests.</p>

<p>Your identity is based on two pieces of information:</p>

<ul>
<li>The host from which you connect</li>

<li>Your MySQL user name</li>
</ul>

<p>Identity checking is performed using the three <code>user</code>
table scope fields (<code>Host</code>, <code>User</code>, and
<code>Password</code>). The server accepts the connection only if a
<code>user</code> table entry matches your hostname and user name,
and you supply the correct password.</p>

<p>Values in the <code>user</code> table scope fields may be
specified as follows:</p>

<ul>
<li>A <code>Host</code> value may be a hostname or an IP number, or
<code>'localhost'</code> to indicate the local host.</li>

<li><a id="IDX480" name="IDX480"></a> You can use the wildcard
characters <samp>`%'</samp> and <samp>`_'</samp> in the
<code>Host</code> field.</li>

<li>A <code>Host</code> value of <code>'%'</code> matches any
hostname.</li>

<li>A blank <code>Host</code> value means that the privilege should
be anded with the entry in the <code>host</code> table that matches
the given host name. You can find more information about this in
the next chapter. <a id="IDX481" name="IDX481"></a></li>

<li>As of MySQL Version 3.23, for <code>Host</code> values
specified as IP numbers, you can specify a netmask indicating how
many address bits to use for the network number. For example: 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON db.*
    -&gt; TO david@'192.58.197.0/255.255.255.0';
</pre>

This will allow everyone to connect from an IP where the following
is true: 

<pre>
user_ip &amp; netmask = host_ip.
</pre>

In the above example all IP:s in the interval 192.58.197.0 -
192.58.197.255 can connect to the MySQL server.</li>

<li><a id="IDX482" name="IDX482"></a> Wildcard characters are not
allowed in the <code>User</code> field, but you can specify a blank
value, which matches any name. If the <code>user</code> table entry
that matches an incoming connection has a blank user name, the user
is considered to be the anonymous user (the user with no name),
rather than the name that the client actually specified. This means
that a blank user name is used for all further access checking for
the duration of the connection (that is, during Stage 2).</li>

<li>The <code>Password</code> field can be blank. This does not
mean that any password matches, it means the user must connect
without specifying a password.</li>
</ul>

<p><a id="IDX483" name="IDX483"></a> Non-blank
<code>Password</code> values represent encrypted passwords. MySQL
does not store passwords in plaintext form for anyone to see.
Rather, the password supplied by a user who is attempting to
connect is encrypted (using the <code>PASSWORD()</code> function).
The encrypted password is then used when the client/server is
checking if the password is correct. (This is done without the
encrypted password ever traveling over the connection.) Note that
from MySQL's point of view the encrypted password is the REAL
password, so you should not give anyone access to it! In
particular, don't give normal users read access to the tables in
the <code>mysql</code> database!</p>

<p>The examples here show how various combinations of
<code>Host</code> and <code>User</code> values in <code>user</code>
table entries apply to incoming connections:</p>

<table border="1" width="100%">
<tr>
<td><code>Host</code> <strong>value</strong></td>
<td><code>User</code> <strong>value</strong></td>
<td><strong>Connections matched by entry</strong></td>
</tr>

<tr>
<td><code>'thomas.loc.gov'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from
<code>thomas.loc.gov</code></td>
</tr>

<tr>
<td><code>'thomas.loc.gov'</code></td>
<td><code>''</code></td>
<td>Any user, connecting from <code>thomas.loc.gov</code></td>
</tr>

<tr>
<td><code>'%'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from any host</td>
</tr>

<tr>
<td><code>'%'</code></td>
<td><code>''</code></td>
<td>Any user, connecting from any host</td>
</tr>

<tr>
<td><code>'%.loc.gov'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from any host in the
<code>loc.gov</code> domain</td>
</tr>

<tr>
<td><code>'x.y.%'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from <code>x.y.net</code>,
<code>x.y.com</code>,<code>x.y.edu</code>, etc. (this is probably
not useful)</td>
</tr>

<tr>
<td><code>'144.155.166.177'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from the host with IP address
<code>144.155.166.177</code></td>
</tr>

<tr>
<td><code>'144.155.166.%'</code></td>
<td><code>'fred'</code></td>
<td><code>fred</code>, connecting from any host in the
<code>144.155.166</code> class C subnet</td>
</tr>

<tr>
<td><code>'144.155.166.0/255.255.255.0'</code></td>
<td><code>'fred'</code></td>
<td>Same as previous example</td>
</tr>
</table>

<p>Because you can use IP wildcard values in the <code>Host</code>
field (for example, <code>'144.155.166.%'</code> to match every
host on a subnet), there is the possibility that someone might try
to exploit this capability by naming a host
<code>144.155.166.somewhere.com</code>. To foil such attempts,
MySQL disallows matching on hostnames that start with digits and a
dot. Thus, if you have a host named something like
<code>1.2.foo.com</code>, its name will never match the
<code>Host</code> column of the grant tables. Only an IP number can
match an IP wildcard value.</p>

<p>An incoming connection may be matched by more than one entry in
the <code>user</code> table. For example, a connection from
<code>thomas.loc.gov</code> by <code>fred</code> would be matched
by several of the entries just shown above. How does the server
choose which entry to use if more than one matches? The server
resolves this question by sorting the <code>user</code> table after
reading it at startup time, then looking through the entries in
sorted order when a user attempts to connect. The first matching
entry is the one that is used.</p>

<p><code>user</code> table sorting works as follows. Suppose the
<code>user</code> table looks like this:</p>

<pre>
+-----------+----------+-
| Host      | User     | ...
+-----------+----------+-
| %         | root     | ...
| %         | jeffrey  | ...
| localhost | root     | ...
| localhost |          | ...
+-----------+----------+-
</pre>

<p>When the server reads in the table, it orders the entries with
the most-specific <code>Host</code> values first (<code>'%'</code>
in the <code>Host</code> column means ``any host'' and is least
specific). Entries with the same <code>Host</code> value are
ordered with the most-specific <code>User</code> values first (a
blank <code>User</code> value means ``any user'' and is least
specific). The resulting sorted <code>user</code> table looks like
this:</p>

<pre>
+-----------+----------+-
| Host      | User     | ...
+-----------+----------+-
| localhost | root     | ...
| localhost |          | ...
| %         | jeffrey  | ...
| %         | root     | ...
+-----------+----------+-
</pre>

<p><a id="IDX484" name="IDX484"></a> <a id="IDX485"
name="IDX485"></a> <a id="IDX486" name="IDX486"></a> When a
connection is attempted, the server looks through the sorted
entries and uses the first match found. For a connection from
<code>localhost</code> by <code>jeffrey</code>, the entries with
<code>'localhost'</code> in the <code>Host</code> column match
first. Of those, the entry with the blank user name matches both
the connecting hostname and user name. (The
<code>'%'/'jeffrey'</code> entry would have matched, too, but it is
not the first match in the table.)</p>

<p>Here is another example. Suppose the <code>user</code> table
looks like this:</p>

<pre>
+----------------+----------+-
| Host           | User     | ...
+----------------+----------+-
| %              | jeffrey  | ...
| thomas.loc.gov |          | ...
+----------------+----------+-
</pre>

<p>The sorted table looks like this:</p>

<pre>
+----------------+----------+-
| Host           | User     | ...
+----------------+----------+-
| thomas.loc.gov |          | ...
| %              | jeffrey  | ...
+----------------+----------+-
</pre>

<p>A connection from <code>thomas.loc.gov</code> by
<code>jeffrey</code> is matched by the first entry, whereas a
connection from <code>whitehouse.gov</code> by <code>jeffrey</code>
is matched by the second.</p>

<p>A common misconception is to think that for a given user name,
all entries that explicitly name that user will be used first when
the server attempts to find a match for the connection. This is
simply not true. The previous example illustrates this, where a
connection from <code>thomas.loc.gov</code> by <code>jeffrey</code>
is first matched not by the entry containing <code>'jeffrey'</code>
as the <code>User</code> field value, but by the entry with no user
name!</p>

<p>If you have problems connecting to the server, print out the
<code>user</code> table and sort it by hand to see where the first
match is being made. If connection was successful, but your
privileges are not what you expected you may use
<code>CURRENT_USER()</code> function (new in version 4.0.6) to see
what user/host combination your connection actually matched. See
section <a href="manual.html#Miscellaneous_functions">6.3.6.2
Miscellaneous Functions</a>.</p>

<h3><a id="Request_access" name="Request_access"
href="manual_toc.html#Request_access">4.2.10 Access Control, Stage
2: Request Verification</a></h3>

<p>Once you establish a connection, the server enters Stage 2. For
each request that comes in on the connection, the server checks
whether you have sufficient privileges to perform it, based on the
type of operation you wish to perform. This is where the privilege
fields in the grant tables come into play. These privileges can
come from any of the <code>user</code>, <code>db</code>,
<code>host</code>, <code>tables_priv</code>, or
<code>columns_priv</code> tables. The grant tables are manipulated
with <code>GRANT</code> and <code>REVOKE</code> commands. See
section <a href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>. (You may find it helpful to refer
to section <a href="manual.html#Privileges">4.2.6 How the Privilege
System Works</a>, which lists the fields present in each of the
grant tables.)</p>

<p>The <code>user</code> table grants privileges that are assigned
to you on a global basis and that apply no matter what the current
database is. For example, if the <code>user</code> table grants you
the <code>DELETE</code> privilege, you can delete rows from any
database on the server host! In other words, <code>user</code>
table privileges are superuser privileges. It is wise to grant
privileges in the <code>user</code> table only to superusers such
as server or database administrators. For other users, you should
leave the privileges in the <code>user</code> table set to
<code>'N'</code> and grant privileges on a database-specific basis
only, using the <code>db</code> and <code>host</code> tables.</p>

<p><a id="IDX487" name="IDX487"></a> <a id="IDX488"
name="IDX488"></a> <a id="IDX489" name="IDX489"></a> The
<code>db</code> and <code>host</code> tables grant
database-specific privileges. Values in the scope fields may be
specified as follows:</p>

<ul>
<li>The wildcard characters <samp>`%'</samp> and <samp>`_'</samp>
can be used in the <code>Host</code> and <code>Db</code> fields of
either table. If you wish to use for instance a <samp>`_'</samp>
character as part of a database name, specify it as
<samp>`\_'</samp> in the <code>GRANT</code> command.</li>

<li>A <code>'%'</code> <code>Host</code> value in the
<code>db</code> table means ``any host.'' A blank <code>Host</code>
value in the <code>db</code> table means ``consult the
<code>host</code> table for further information.''</li>

<li>A <code>'%'</code> or blank <code>Host</code> value in the
<code>host</code> table means ``any host.''</li>

<li>A <code>'%'</code> or blank <code>Db</code> value in either
table means ``any database.''</li>

<li>A blank <code>User</code> value in either table matches the
anonymous user.</li>
</ul>

<p><a id="IDX490" name="IDX490"></a> <a id="IDX491"
name="IDX491"></a> <a id="IDX492" name="IDX492"></a> <a id="IDX493"
name="IDX493"></a> The <code>db</code> and <code>host</code> tables
are read in and sorted when the server starts up (at the same time
that it reads the <code>user</code> table). The <code>db</code>
table is sorted on the <code>Host</code>, <code>Db</code>, and
<code>User</code> scope fields, and the <code>host</code> table is
sorted on the <code>Host</code> and <code>Db</code> scope fields.
As with the <code>user</code> table, sorting puts the most-specific
values first and least-specific values last, and when the server
looks for matching entries, it uses the first match that it
finds.</p>

<p><a id="IDX494" name="IDX494"></a> <a id="IDX495"
name="IDX495"></a> The <code>tables_priv</code> and
<code>columns_priv</code> tables grant table- and column-specific
privileges. Values in the scope fields may be specified as
follows:</p>

<ul>
<li>The wildcard characters <samp>`%'</samp> and <samp>`_'</samp>
can be used in the <code>Host</code> field of either table.</li>

<li>A <code>'%'</code> or blank <code>Host</code> value in either
table means ``any host.''</li>

<li>The <code>Db</code>, <code>Table_name</code> and
<code>Column_name</code> fields cannot contain wildcards or be
blank in either table.</li>
</ul>

<p>The <code>tables_priv</code> and <code>columns_priv</code>
tables are sorted on the <code>Host</code>, <code>Db</code>, and
<code>User</code> fields. This is similar to <code>db</code> table
sorting, although the sorting is simpler because only the
<code>Host</code> field may contain wildcards.</p>

<p>The request verification process is described here. (If you are
familiar with the access-checking source code, you will notice that
the description here differs slightly from the algorithm used in
the code. The description is equivalent to what the code actually
does; it differs only to make the explanation simpler.)</p>

<p>For administrative requests (<code>SHUTDOWN</code>,
<code>RELOAD</code>, etc.), the server checks only the
<code>user</code> table entry, because that is the only table that
specifies administrative privileges. Access is granted if the entry
allows the requested operation and denied otherwise. For example,
if you want to execute <code>mysqladmin shutdown</code> but your
<code>user</code> table entry doesn't grant the
<code>SHUTDOWN</code> privilege to you, access is denied without
even checking the <code>db</code> or <code>host</code> tables.
(They contain no <code>Shutdown_priv</code> column, so there is no
need to do so.)</p>

<p>For database-related requests (<code>INSERT</code>,
<code>UPDATE</code>, etc.), the server first checks the user's
global (superuser) privileges by looking in the <code>user</code>
table entry. If the entry allows the requested operation, access is
granted. If the global privileges in the <code>user</code> table
are insufficient, the server determines the user's
database-specific privileges by checking the <code>db</code> and
<code>host</code> tables:</p>

<ol>
<li>The server looks in the <code>db</code> table for a match on
the <code>Host</code>, <code>Db</code>, and <code>User</code>
fields. The <code>Host</code> and <code>User</code> fields are
matched to the connecting user's hostname and MySQL user name. The
<code>Db</code> field is matched to the database the user wants to
access. If there is no entry for the <code>Host</code> and
<code>User</code>, access is denied.</li>

<li>If there is a matching <code>db</code> table entry and its
<code>Host</code> field is not blank, that entry defines the user's
database-specific privileges.</li>

<li>If the matching <code>db</code> table entry's <code>Host</code>
field is blank, it signifies that the <code>host</code> table
enumerates which hosts should be allowed access to the database. In
this case, a further lookup is done in the <code>host</code> table
to find a match on the <code>Host</code> and <code>Db</code>
fields. If no <code>host</code> table entry matches, access is
denied. If there is a match, the user's database-specific
privileges are computed as the intersection (<strong>not</strong>
the union!) of the privileges in the <code>db</code> and
<code>host</code> table entries, that is, the privileges that are
<code>'Y'</code> in both entries. (This way you can grant general
privileges in the <code>db</code> table entry and then selectively
restrict them on a host-by-host basis using the <code>host</code>
table entries.)</li>
</ol>

<p>After determining the database-specific privileges granted by
the <code>db</code> and <code>host</code> table entries, the server
adds them to the global privileges granted by the <code>user</code>
table. If the result allows the requested operation, access is
granted. Otherwise, the server checks the user's table and column
privileges in the <code>tables_priv</code> and
<code>columns_priv</code> tables and adds those to the user's
privileges. Access is allowed or denied based on the result.</p>

<p>Expressed in boolean terms, the preceding description of how a
user's privileges are calculated may be summarised like this:</p>

<pre>
global privileges
OR (database privileges AND host privileges)
OR table privileges
OR column privileges
</pre>

<p>It may not be apparent why, if the global <code>user</code>
entry privileges are initially found to be insufficient for the
requested operation, the server adds those privileges to the
database-, table-, and column-specific privileges later. The reason
is that a request might require more than one type of privilege.
For example, if you execute an <code>INSERT ... SELECT</code>
statement, you need both <code>INSERT</code> and
<code>SELECT</code> privileges. Your privileges might be such that
the <code>user</code> table entry grants one privilege and the
<code>db</code> table entry grants the other. In this case, you
have the necessary privileges to perform the request, but the
server cannot tell that from either table by itself; the privileges
granted by the entries in both tables must be combined.</p>

<p><a id="IDX496" name="IDX496"></a> <a id="IDX497"
name="IDX497"></a></p>

<p>The <code>host</code> table can be used to maintain a list of
secure servers.</p>

<p>At TcX, the <code>host</code> table contains a list of all
machines on the local network. These are granted all
privileges.</p>

<p>You can also use the <code>host</code> table to indicate hosts
that are <strong>not</strong> secure. Suppose you have a machine
<code>public.your.domain</code> that is located in a public area
that you do not consider secure. You can allow access to all hosts
on your network except that machine by using <code>host</code>
table entries like this:</p>

<pre>
+--------------------+----+-
| Host               | Db | ...
+--------------------+----+-
| public.your.domain | %  | ... (all privileges set to 'N')
| %.your.domain      | %  | ... (all privileges set to 'Y')
+--------------------+----+-
</pre>

<p><a id="IDX498" name="IDX498"></a> <a id="IDX499"
name="IDX499"></a> <a id="IDX500" name="IDX500"></a> <a id="IDX501"
name="IDX501"></a></p>

<p>Naturally, you should always test your entries in the grant
tables (for example, using <code>mysqlaccess</code>) to make sure
your access privileges are actually set up the way you think they
are.</p>

<h3><a id="Access_denied" name="Access_denied"
href="manual_toc.html#Access_denied">4.2.11 Causes of <code>Access
denied</code> Errors</a></h3>

<p>If you encounter <code>Access denied</code> errors when you try
to connect to the MySQL server, the following list indicates some
courses of action you can take to correct the problem:</p>

<ul>
<li>After installing MySQL, did you run the
<code>mysql_install_db</code> script to set up the initial grant
table contents? If not, do so. See section <a
href="manual.html#Default_privileges">4.3.4 Setting Up the Initial
MySQL Privileges</a>. Test the initial privileges by executing this
command: 

<pre>
shell&gt; mysql -u root test
</pre>

The server should let you connect without error. You should also
make sure you have a file <tt>`user.MYD'</tt> in the MySQL database
directory. Ordinarily, this is <tt>`PATH/var/mysql/user.MYD'</tt>,
where <code>PATH</code> is the pathname to the MySQL installation
root.</li>

<li>After a fresh installation, you should connect to the server
and set up your users and their access permissions: 

<pre>
shell&gt; mysql -u root mysql
</pre>

The server should let you connect because the MySQL
<code>root</code> user has no password initially. That is also a
security risk, so setting the <code>root</code> password is
something you should do while you're setting up your other MySQL
users. If you try to connect as <code>root</code> and get this
error: 

<pre>
Access denied for user: '@unknown' to database mysql
</pre>

this means that you don't have an entry in the <code>user</code>
table with a <code>User</code> column value of <code>'root'</code>
and that <code>mysqld</code> cannot resolve the hostname for your
client. In this case, you must restart the server with the
<code>--skip-grant-tables</code> option and edit your
<tt>`/etc/hosts'</tt> or <tt>`\windows\hosts'</tt> file to add an
entry for your host.</li>

<li>If you get an error like the following: 

<pre>
shell&gt; mysqladmin -u root -pxxxx ver
Access denied for user: 'root@localhost' (Using password: YES)
</pre>

It means that you are using a wrong password. See section <a
href="manual.html#Passwords">4.3.7 Setting Up Passwords</a>. If you
have forgot the root password, you can restart <code>mysqld</code>
with <code>--skip-grant-tables</code> to change the password. See
section <a href="manual.html#Resetting_permissions">A.4.2 How to
Reset a Forgotten Root Password</a>. If you get the above error
even if you haven't specified a password, this means that you a
wrong password in some <code>my.ini</code> file. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. You can avoid using option files with the
<code>--no-defaults</code> option, as follows: 

<pre>
shell&gt; mysqladmin --no-defaults -u root ver
</pre>
</li>

<li><a id="IDX502" name="IDX502"></a> If you updated an existing
MySQL installation from a version earlier than Version 3.22.11 to
Version 3.22.11 or later, did you run the
<code>mysql_fix_privilege_tables</code> script? If not, do so. The
structure of the grant tables changed with MySQL Version 3.22.11
when the <code>GRANT</code> statement became functional.</li>

<li>If your privileges seem to have changed in the middle of a
session, it may be that a superuser has changed them. Reloading the
grant tables affects new client connections, but it also affects
existing connections as indicated in section <a
href="manual.html#Privilege_changes">4.3.3 When Privilege Changes
Take Effect</a>.</li>

<li>If you can't get your password to work, remember that you must
use the <code>PASSWORD()</code> function if you set the password
with the <code>INSERT</code>, <code>UPDATE</code>, or <code>SET
PASSWORD</code> statements. The <code>PASSWORD()</code> function is
unnecessary if you specify the password using the <code>GRANT ...
INDENTIFIED BY</code> statement or the <code>mysqladmin
password</code> command. See section <a
href="manual.html#Passwords">4.3.7 Setting Up Passwords</a>.</li>

<li><code>localhost</code> is a synonym for your local hostname,
and is also the default host to which clients try to connect if you
specify no host explicitly. However, connections to
<code>localhost</code> do not work if you are using a MySQL version
prior to 3.23.27 that uses MIT-pthreads (<code>localhost</code>
connections are made using Unix sockets, which were not supported
by MIT-pthreads at that time). To avoid this problem on such
systems, you should use the <code>--host</code> option to name the
server host explicitly. This will make a TCP/IP connection to the
<code>mysqld</code> server. In this case, you must have your real
hostname in <code>user</code> table entries on the server host.
(This is true even if you are running a client program on the same
host as the server.)</li>

<li>If you get an <code>Access denied</code> error when trying to
connect to the database with <code>mysql -u user_name
db_name</code>, you may have a problem with the <code>user</code>
table. Check this by executing <code>mysql -u root mysql</code> and
issuing this SQL statement: 

<pre>
mysql&gt; SELECT * FROM user;
</pre>

The result should include an entry with the <code>Host</code> and
<code>User</code> columns matching your computer's hostname and
your MySQL user name.</li>

<li>The <code>Access denied</code> error message will tell you who
you are trying to log in as, the host from which you are trying to
connect, and whether or not you were using a password. Normally,
you should have one entry in the <code>user</code> table that
exactly matches the hostname and user name that were given in the
error message. For example if you get an error message that
contains <code>Using password: NO</code>, this means that you tried
to login without an password.</li>

<li>If you get the following error when you try to connect from a
different host than the one on which the MySQL server is running,
then there is no row in the <code>user</code> table that matches
that host: 

<pre>
Host ... is not allowed to connect to this MySQL server
</pre>

You can fix this by using the command-line tool <code>mysql</code>
(on the server host!) to add a row to the <code>user</code>,
<code>db</code>, or <code>host</code> table for the user/hostname
combination from which you are trying to connect and then execute
<code>mysqladmin flush-privileges</code>. If you are not running
MySQL Version 3.22 and you don't know the IP number or hostname of
the machine from which you are connecting, you should put an entry
with <code>'%'</code> as the <code>Host</code> column value in the
<code>user</code> table and restart <code>mysqld</code> with the
<code>--log</code> option on the server machine. After trying to
connect from the client machine, the information in the MySQL log
will indicate how you really did connect. (Then replace the
<code>'%'</code> in the <code>user</code> table entry with the
actual hostname that shows up in the log. Otherwise, you'll have a
system that is insecure.) Another reason for this error on Linux is
that you are using a binary MySQL version that is compiled with a
different glibc version than the one you are using. In this case
you should either upgrade your OS/glibc or download the source
MySQL version and compile this yourself. A source RPM is normally
trivial to compile and install, so this isn't a big problem.</li>

<li>If you get an error message where the hostname is not shown or
where the hostname is an IP, even if you try to connect with a
hostname: 

<pre>
shell&gt; mysqladmin -u root -pxxxx -h some-hostname ver
Access denied for user: 'root@' (Using password: YES)
</pre>

This means that MySQL got some error when trying to resolve the IP
to a hostname. In this case you can execute <code>mysqladmin
flush-hosts</code> to reset the internal DNS cache. See section <a
href="manual.html#DNS">5.5.5 How MySQL uses DNS</a>. Some permanent
solutions are: 

<ul>
<li>Try to find out what is wrong with your DNS server and fix
this.</li>

<li>Specify IPs instead of hostnames in the MySQL privilege
tables.</li>

<li>Start <code>mysqld</code> with
<code>--skip-name-resolve</code>.</li>

<li>Start <code>mysqld</code> with
<code>--skip-host-cache</code>.</li>

<li>Connect to <code>localhost</code> if you are running the server
and the client on the same machine.</li>

<li>Put the client machine names in <code>/etc/hosts</code>.</li>
</ul>
</li>

<li>If <code>mysql -u root test</code> works but <code>mysql -h
your_hostname -u root test</code> results in <code>Access
denied</code>, then you may not have the correct name for your host
in the <code>user</code> table. A common problem here is that the
<code>Host</code> value in the user table entry specifies an
unqualified hostname, but your system's name resolution routines
return a fully qualified domain name (or vice-versa). For example,
if you have an entry with host <code>'tcx'</code> in the
<code>user</code> table, but your DNS tells MySQL that your
hostname is <code>'tcx.subnet.se'</code>, the entry will not work.
Try adding an entry to the <code>user</code> table that contains
the IP number of your host as the <code>Host</code> column value.
(Alternatively, you could add an entry to the <code>user</code>
table with a <code>Host</code> value that contains a wildcard--for
example, <code>'tcx.%'</code>. However, use of hostnames ending
with <samp>`%'</samp> is <strong>insecure</strong> and is
<strong>not</strong> recommended!)</li>

<li>If <code>mysql -u user_name test</code> works but <code>mysql
-u user_name other_db_name</code> doesn't work, you don't have an
entry for <code>other_db_name</code> listed in the <code>db</code>
table.</li>

<li>If <code>mysql -u user_name db_name</code> works when executed
on the server machine, but <code>mysql -u host_name -u user_name
db_name</code> doesn't work when executed on another client
machine, you don't have the client machine listed in the
<code>user</code> table or the <code>db</code> table.</li>

<li>If you can't figure out why you get <code>Access denied</code>,
remove from the <code>user</code> table all entries that have
<code>Host</code> values containing wildcards (entries that contain
<samp>`%'</samp> or <samp>`_'</samp>). A very common error is to
insert a new entry with <code>Host</code>=<code>'%'</code> and
<code>User</code>=<code>'some user'</code>, thinking that this will
allow you to specify <code>localhost</code> to connect from the
same machine. The reason that this doesn't work is that the default
privileges include an entry with
<code>Host</code>=<code>'localhost'</code> and
<code>User</code>=<code>''</code>. Because that entry has a
<code>Host</code> value <code>'localhost'</code> that is more
specific than <code>'%'</code>, it is used in preference to the new
entry when connecting from <code>localhost</code>! The correct
procedure is to insert a second entry with
<code>Host</code>=<code>'localhost'</code> and
<code>User</code>=<code>'some_user'</code>, or to remove the entry
with <code>Host</code>=<code>'localhost'</code> and
<code>User</code>=<code>''</code>.</li>

<li>If you get the following error, you may have a problem with the
<code>db</code> or <code>host</code> table: 

<pre>
Access to database denied
</pre>

If the entry selected from the <code>db</code> table has an empty
value in the <code>Host</code> column, make sure there are one or
more corresponding entries in the <code>host</code> table
specifying which hosts the <code>db</code> table entry applies to.
If you get the error when using the SQL commands <code>SELECT ...
INTO OUTFILE</code> or <code>LOAD DATA INFILE</code>, your entry in
the <code>user</code> table probably doesn't have the
<code>FILE</code> privilege enabled.</li>

<li><a id="IDX503" name="IDX503"></a> <a id="IDX504"
name="IDX504"></a> <a id="IDX505" name="IDX505"></a> Remember that
client programs will use connection parameters specified in
configuration files or environment variables. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>. If a client seems to be sending the wrong default
connection parameters when you don't specify them on the
command-line, check your environment and the <tt>`.my.cnf'</tt>
file in your home directory. You might also check the system-wide
MySQL configuration files, though it is far less likely that client
connection parameters will be specified there. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. If you get <code>Access denied</code> when you run a
client without any options, make sure you haven't specified an old
password in any of your option files! See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</li>

<li>If you make changes to the grant tables directly (using an
<code>INSERT</code> or <code>UPDATE</code> statement) and your
changes seem to be ignored, remember that you must issue a
<code>FLUSH PRIVILEGES</code> statement or execute a
<code>mysqladmin flush-privileges</code> command to cause the
server to re-read the privilege tables. Otherwise, your changes
have no effect until the next time the server is restarted.
Remember that after you set the <code>root</code> password with an
<code>UPDATE</code> command, you won't need to specify it until
after you flush the privileges, because the server won't know
you've changed the password yet!</li>

<li>If you have access problems with a Perl, PHP, Python, or ODBC
program, try to connect to the server with <code>mysql -u user_name
db_name</code> or <code>mysql -u user_name -pyour_pass
db_name</code>. If you are able to connect using the
<code>mysql</code> client, there is a problem with your program and
not with the access privileges. (Note that there is no space
between <code>-p</code> and the password; you can also use the
<code>--password=your_pass</code> syntax to specify the password.
If you use the <code>-p</code> option alone, MySQL will prompt you
for the password.)</li>

<li>For testing, start the <code>mysqld</code> daemon with the
<code>--skip-grant-tables</code> option. Then you can change the
MySQL grant tables and use the <code>mysqlaccess</code> script to
check whether your modifications have the desired effect. When you
are satisfied with your changes, execute <code>mysqladmin
flush-privileges</code> to tell the <code>mysqld</code> server to
start using the new grant tables. <strong>Note</strong>: reloading
the grant tables overrides the <code>--skip-grant-tables</code>
option. This allows you to tell the server to begin using the grant
tables again without bringing it down and restarting it.</li>

<li>If everything else fails, start the <code>mysqld</code> daemon
with a debugging option (for example,
<code>--debug=d,general,query</code>). This will print host and
user information about attempted connections, as well as
information about each command issued. See section <a
href="manual.html#Making_trace_files">E.1.2 Creating Trace
Files</a>.</li>

<li>If you have any other problems with the MySQL grant tables and
feel you must post the problem to the mailing list, always provide
a dump of the MySQL grant tables. You can dump the tables with the
<code>mysqldump mysql</code> command. As always, post your problem
using the <code>mysqlbug</code> script. See section <a
href="manual.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a>. In some cases you may need to restart
<code>mysqld</code> with <code>--skip-grant-tables</code> to run
<code>mysqldump</code>.</li>
</ul>

<h2><a id="User_Account_Management" name="User_Account_Management"
href="manual_toc.html#User_Account_Management">4.3 MySQL User
Account Management</a></h2>

<h3><a id="GRANT" name="GRANT" href="manual_toc.html#GRANT">4.3.1
<code>GRANT</code> and <code>REVOKE</code> Syntax</a></h3>

<p><a id="IDX506" name="IDX506"></a> <a id="IDX507"
name="IDX507"></a></p>

<p><a id="IDX508" name="IDX508"></a> <a id="IDX509"
name="IDX509"></a> <a id="IDX510" name="IDX510"></a> <a id="IDX511"
name="IDX511"></a> <a id="IDX512" name="IDX512"></a></p>

<pre>
GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]
    ON {tbl_name | * | *.* | db_name.*}
    TO user_name [IDENTIFIED BY [PASSWORD] 'password']
        [, user_name [IDENTIFIED BY 'password'] ...]
    [REQUIRE
        NONE |
        [{SSL| X509}]
    [CIPHER cipher [AND]]
    [ISSUER issuer [AND]]
    [SUBJECT subject]]
    [WITH [GRANT OPTION | MAX_QUERIES_PER_HOUR # |
                          MAX_UPDATES_PER_HOUR # |
                          MAX_CONNECTIONS_PER_HOUR #]]

REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]
    ON {tbl_name | * | *.* | db_name.*}
    FROM user_name [, user_name ...]
</pre>

<p><code>GRANT</code> is implemented in MySQL Version 3.22.11 or
later. For earlier MySQL versions, the <code>GRANT</code> statement
does nothing.</p>

<p>The <code>GRANT</code> and <code>REVOKE</code> commands allow
system administrators to create users and grant and revoke rights
to MySQL users at four privilege levels:</p>

<dl compact="compact">
<dt><strong>Global level</strong></dt>

<dd>Global privileges apply to all databases on a given server.
These privileges are stored in the <code>mysql.user</code>
table.</dd>

<dt><strong>Database level</strong></dt>

<dd>Database privileges apply to all tables in a given database.
These privileges are stored in the <code>mysql.db</code> and
<code>mysql.host</code> tables.</dd>

<dt><strong>Table level</strong></dt>

<dd>Table privileges apply to all columns in a given table. These
privileges are stored in the <code>mysql.tables_priv</code>
table.</dd>

<dt><strong>Column level</strong></dt>

<dd>Column privileges apply to single columns in a given table.
These privileges are stored in the <code>mysql.columns_priv</code>
table.</dd>
</dl>

<p>If you give a grant for a users that doesn't exists, that user
is created. For examples of how <code>GRANT</code> works, see
section <a href="manual.html#Adding_users">4.3.5 Adding New Users
to MySQL</a>.</p>

<p>For the <code>GRANT</code> and <code>REVOKE</code> statements,
<code>priv_type</code> may be specified as any of the
following:</p>

<table border="1" width="100%">
<tr>
<td><code>ALL [PRIVILEGES]</code></td>
<td>Sets all simple privileges except <code>WITH GRANT
OPTION</code></td>
</tr>

<tr>
<td><code>ALTER</code></td>
<td>Allows usage of <code>ALTER TABLE</code></td>
</tr>

<tr>
<td><code>CREATE</code></td>
<td>Allows usage of <code>CREATE TABLE</code></td>
</tr>

<tr>
<td><code>CREATE TEMPORARY TABLES</code></td>
<td>Allows usage of <code>CREATE TEMPORARY TABLE</code></td>
</tr>

<tr>
<td><code>DELETE</code></td>
<td>Allows usage of <code>DELETE</code></td>
</tr>

<tr>
<td><code>DROP</code></td>
<td>Allows usage of <code>DROP TABLE</code>.</td>
</tr>

<tr>
<td><code>EXECUTE</code></td>
<td>Allows the user to run stored procedures (for MySQL 5.0)</td>
</tr>

<tr>
<td><code>FILE</code></td>
<td>Allows usage of <code>SELECT ... INTO OUTFILE</code> and
<code>LOAD DATA INFILE</code>.</td>
</tr>

<tr>
<td><code>INDEX</code></td>
<td>Allows usage of <code>CREATE INDEX</code> and <code>DROP
INDEX</code></td>
</tr>

<tr>
<td><code>INSERT</code></td>
<td>Allows usage of <code>INSERT</code></td>
</tr>

<tr>
<td><code>LOCK TABLES</code></td>
<td>Allows usage of <code>LOCK TABLES</code> on tables for which
one has the <code>SELECT</code> privilege.</td>
</tr>

<tr>
<td><code>PROCESS</code></td>
<td>Allows usage of <code>SHOW FULL PROCESSLIST</code></td>
</tr>

<tr>
<td><code>REFERENCES</code></td>
<td>For the future</td>
</tr>

<tr>
<td><code>RELOAD</code></td>
<td>Allows usage of <code>FLUSH</code></td>
</tr>

<tr>
<td><code>REPLICATION CLIENT</code></td>
<td>Gives the right to the user to ask where the slaves/masters
are.</td>
</tr>

<tr>
<td><code>REPLICATION SLAVE</code></td>
<td>Needed for the replication slaves (to read binlogs from
master).</td>
</tr>

<tr>
<td><code>SELECT</code></td>
<td>Allows usage of <code>SELECT</code></td>
</tr>

<tr>
<td><code>SHOW DATABASES</code></td>
<td><code>SHOW DATABASES</code> shows all databases.</td>
</tr>

<tr>
<td><code>SHUTDOWN</code></td>
<td>Allows usage of <code>mysqladmin shutdown</code></td>
</tr>

<tr>
<td><code>SUPER</code></td>
<td>Allows one connect (once) even if max_connections is reached
and execute commands <code>CHANGE MASTER</code>, <code>KILL
thread</code>, <code>mysqladmin debug</code>, <code>PURGE MASTER
LOGS</code> and <code>SET GLOBAL</code></td>
</tr>

<tr>
<td><code>UPDATE</code></td>
<td>Allows usage of <code>UPDATE</code></td>
</tr>

<tr>
<td><code>USAGE</code></td>
<td>Synonym for ``no privileges.''</td>
</tr>

<tr>
<td><code>GRANT OPTION</code></td>
<td>Synonym for <code>WITH GRANT OPTION</code></td>
</tr>
</table>

<p><code>USAGE</code> can be used when you want to create a user
that has no privileges.</p>

<p>The privileges <code>CREATE TEMPORARY TABLES</code>,
<code>EXECUTE</code>, <code>LOCK TABLES</code>, <code>REPLICATION
...</code>, <code>SHOW DATABASES</code> and <code>SUPER</code> are
new for in version 4.0.2. To use these new privileges after
upgrading to 4.0.2, you have to run the
<code>mysql_fix_privilege_tables</code> script.</p>

<p>In older MySQL versions, the <code>PROCESS</code> privilege
gives the same rights as the new <code>SUPER</code> privilege.</p>

<p>To revoke the <code>GRANT</code> privilege from a user, use a
<code>priv_type</code> value of <code>GRANT OPTION</code>:</p>

<pre>
mysql&gt; REVOKE GRANT OPTION ON ... FROM ...;
</pre>

<p>The only <code>priv_type</code> values you can specify for a
table are <code>SELECT</code>, <code>INSERT</code>,
<code>UPDATE</code>, <code>DELETE</code>, <code>CREATE</code>,
<code>DROP</code>, <code>GRANT OPTION</code>, <code>INDEX</code>,
and <code>ALTER</code>.</p>

<p>The only <code>priv_type</code> values you can specify for a
column (that is, when you use a <code>column_list</code> clause)
are <code>SELECT</code>, <code>INSERT</code>, and
<code>UPDATE</code>.</p>

<p>You can set global privileges by using <code>ON *.*</code>
syntax. You can set database privileges by using <code>ON
db_name.*</code> syntax. If you specify <code>ON *</code> and you
have a current database, you will set the privileges for that
database. (<strong>Warning</strong>: if you specify <code>ON
*</code> and you <strong>don't</strong> have a current database,
you will affect the global privileges!)</p>

<p><strong>Please note</strong>: the <samp>`_'</samp> and
<samp>`%'</samp> wildcards are allowed when specifying database
names in <code>GRANT</code> commands. This means that if you wish
to use for instance a <samp>`_'</samp> character as part of a
database name, you should specify it as <samp>`\_'</samp> in the
<code>GRANT</code> command, to prevent the user from being able to
access additional databases matching the wildcard pattern, e.g.,
<code>GRANT ... ON `foo\_bar`.* TO ...</code>.</p>

<p>In order to accommodate granting rights to users from arbitrary
hosts, MySQL supports specifying the <code>user_name</code> value
in the form <code>user@host</code>. If you want to specify a
<code>user</code> string containing special characters (such as
<samp>`-'</samp>), or a <code>host</code> string containing special
characters or wildcard characters (such as <samp>`%'</samp>), you
can quote the user or host name (for example,
<code>'test-user'@'test-hostname'</code>).</p>

<p>You can specify wildcards in the hostname. For example,
<code>user@'%.loc.gov'</code> applies to <code>user</code> for any
host in the <code>loc.gov</code> domain, and
<code>user@'144.155.166.%'</code> applies to <code>user</code> for
any host in the <code>144.155.166</code> class C subnet.</p>

<p>The simple form <code>user</code> is a synonym for
<code>user@"%"</code>.</p>

<p>MySQL doesn't support wildcards in user names. Anonymous users
are defined by inserting entries with <code>User=''</code> into the
<code>mysql.user</code> table or creating an user with an empty
name with the <code>GRANT</code> command.</p>

<p><strong>Note</strong>: if you allow anonymous users to connect
to the MySQL server, you should also grant privileges to all local
users as <code>user@localhost</code> because otherwise the
anonymous user entry for the local host in the
<code>mysql.user</code> table will be used when the user tries to
log into the MySQL server from the local machine!</p>

<p>You can verify if this applies to you by executing this
query:</p>

<pre>
mysql&gt; SELECT Host,User FROM mysql.user WHERE User='';
</pre>

<p>For the moment, <code>GRANT</code> only supports host, table,
database, and column names up to 60 characters long. A user name
can be up to 16 characters.</p>

<p>The privileges for a table or column are formed from the logical
OR of the privileges at each of the four privilege levels. For
example, if the <code>mysql.user</code> table specifies that a user
has a global <code>SELECT</code> privilege, this can't be denied by
an entry at the database, table, or column level.</p>

<p>The privileges for a column can be calculated as follows:</p>

<pre>
global privileges
OR (database privileges AND host privileges)
OR table privileges
OR column privileges
</pre>

<p>In most cases, you grant rights to a user at only one of the
privilege levels, so life isn't normally as complicated as above.
The details of the privilege-checking procedure are presented in
section <a href="manual.html#Privilege_system">4.2 General Security
Issues and the MySQL Access Privilege System</a>.</p>

<p>If you grant privileges for a user/hostname combination that
does not exist in the <code>mysql.user</code> table, an entry is
added and remains there until deleted with a <code>DELETE</code>
command. In other words, <code>GRANT</code> may create
<code>user</code> table entries, but <code>REVOKE</code> will not
remove them; you must do that explicitly using
<code>DELETE</code>.</p>

<p><a id="IDX513" name="IDX513"></a> In MySQL Version 3.22.12 or
later, if a new user is created or if you have global grant
privileges, the user's password will be set to the password
specified by the <code>IDENTIFIED BY</code> clause, if one is
given. If the user already had a password, it is replaced by the
new one.</p>

<p>If you don't want to send the password in clear text you can use
the <code>PASSWORD</code> option followed by a scrambled password
from SQL function <code>PASSWORD()</code> or the C API function
<code>make_scrambled_password(char *to, const char
*password)</code>.</p>

<p><strong>Warning</strong>: if you create a new user but do not
specify an <code>IDENTIFIED BY</code> clause, the user has no
password. This is insecure.</p>

<p>Passwords can also be set with the <code>SET PASSWORD</code>
command. See section <a href="manual.html#SET_OPTION">5.5.6
<code>SET</code> Syntax</a>.</p>

<p>If you grant privileges for a database, an entry in the
<code>mysql.db</code> table is created if needed. When all
privileges for the database have been removed with
<code>REVOKE</code>, this entry is deleted.</p>

<p>If a user doesn't have any privileges on a table, the table is
not displayed when the user requests a list of tables (for example,
with a <code>SHOW TABLES</code> statement).</p>

<p>The <code>WITH GRANT OPTION</code> clause gives the user the
ability to give to other users any privileges the user has at the
specified privilege level. You should be careful to whom you give
the <code>GRANT</code> privilege, as two users with different
privileges may be able to join privileges!</p>

<p><code>MAX_QUERIES_PER_HOUR #</code>, <code>MAX_UPDATES_PER_HOUR
#</code> and <code>MAX_CONNECTIONS_PER_HOUR #</code> are new in
MySQL version 4.0.2. These options limit the number of
queries/updates and logins the user can do during one hour. If
<code>#</code> is 0 (default), then this means that there are no
limitations for that user. See section <a
href="manual.html#User_resources">4.3.6 Limiting user
resources</a>. Note: to specify any of these options for an
existing user without adding other additional privileges, use
<code>GRANT USAGE ... WITH MAX_...</code>.</p>

<p>You cannot grant another user a privilege you don't have
yourself; the <code>GRANT</code> privilege allows you to give away
only those privileges you possess.</p>

<p>Be aware that when you grant a user the <code>GRANT</code>
privilege at a particular privilege level, any privileges the user
already possesses (or is given in the future!) at that level are
also grantable by that user. Suppose you grant a user the
<code>INSERT</code> privilege on a database. If you then grant the
<code>SELECT</code> privilege on the database and specify
<code>WITH GRANT OPTION</code>, the user can give away not only the
<code>SELECT</code> privilege, but also <code>INSERT</code>. If you
then grant the <code>UPDATE</code> privilege to the user on the
database, the user can give away the <code>INSERT</code>,
<code>SELECT</code> and <code>UPDATE</code>.</p>

<p>You should not grant <code>ALTER</code> privileges to a normal
user. If you do that, the user can try to subvert the privilege
system by renaming tables!</p>

<p>Note that if you are using table or column privileges for even
one user, the server examines table and column privileges for all
users and this will slow down MySQL a bit.</p>

<p>When <code>mysqld</code> starts, all privileges are read into
memory. Database, table, and column privileges take effect at once,
and user-level privileges take effect the next time the user
connects. Modifications to the grant tables that you perform using
<code>GRANT</code> or <code>REVOKE</code> are noticed by the server
immediately. If you modify the grant tables manually (using
<code>INSERT</code>, <code>UPDATE</code>, etc.), you should execute
a <code>FLUSH PRIVILEGES</code> statement or run <code>mysqladmin
flush-privileges</code> to tell the server to reload the grant
tables. See section <a href="manual.html#Privilege_changes">4.3.3
When Privilege Changes Take Effect</a>.</p>

<p><a id="IDX514" name="IDX514"></a> The biggest differences
between the ANSI SQL and MySQL versions of <code>GRANT</code>
are:</p>

<ul>
<li>In MySQL privileges are given for an username + hostname
combination and not only for an username.</li>

<li>ANSI SQL doesn't have global or database-level privileges, and
ANSI SQL doesn't support all privilege types that MySQL supports.
MySQL doesn't support the ANSI SQL <code>TRIGGER</code> or
<code>UNDER</code> privileges.</li>

<li>ANSI SQL privileges are structured in a hierarchal manner. If
you remove an user, all privileges the user has granted are
revoked. In MySQL the granted privileges are not automatically
revoked, but you have to revoke these yourself if needed.</li>

<li>In MySQL, if you have the <code>INSERT</code> privilege on only
some of the columns in a table, you can execute <code>INSERT</code>
statements on the table; the columns for which you don't have the
<code>INSERT</code> privilege will be set to their default values.
ANSI SQL requires you to have the <code>INSERT</code> privilege on
all columns.</li>

<li>When you drop a table in ANSI SQL, all privileges for the table
are revoked. If you revoke a privilege in ANSI SQL, all privileges
that were granted based on this privilege are also revoked. In
MySQL, privileges can be dropped only with explicit
<code>REVOKE</code> commands or by manipulating the MySQL grant
tables.</li>
</ul>

<p>For a description of using <code>REQUIRE</code>, see section <a
href="manual.html#Secure_connections">4.3.9 Using Secure
Connections</a>.</p>

<h3><a id="User_names" name="User_names"
href="manual_toc.html#User_names">4.3.2 MySQL User Names and
Passwords</a></h3>

<p><a id="IDX515" name="IDX515"></a> <a id="IDX516"
name="IDX516"></a></p>

<p>There are several distinctions between the way user names and
passwords are used by MySQL and the way they are used by Unix or
Windows:</p>

<ul>
<li>User names, as used by MySQL for authentication purposes, have
nothing to do with Unix user names (login names) or Windows user
names. Most MySQL clients by default try to log in using the
current Unix user name as the MySQL user name, but that is for
convenience only. Client programs allow a different name to be
specified with the <code>-u</code> or <code>--user</code> options.
This means that you can't make a database secure in any way unless
all MySQL user names have passwords. Anyone may attempt to connect
to the server using any name, and they will succeed if they specify
any name that doesn't have a password.</li>

<li>MySQL user names can be up to 16 characters long; Unix user
names typically are limited to 8 characters.</li>

<li>MySQL passwords have nothing to do with Unix passwords. There
is no necessary connection between the password you use to log in
to a Unix machine and the password you use to access a database on
that machine.</li>

<li>MySQL encrypts passwords using a different algorithm than the
one used during the Unix login process. See the descriptions of the
<code>PASSWORD()</code> and <code>ENCRYPT()</code> functions in
section <a href="manual.html#Miscellaneous_functions">6.3.6.2
Miscellaneous Functions</a>. Note that even if the password is
stored 'scrambled', and knowing your 'scrambled' password is enough
to be able to connect to the MySQL server!</li>
</ul>

<p>MySQL users and their privileges are normally created with the
<code>GRANT</code> command. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</p>

<p>When you login to a MySQL server with a command-line client you
should specify the password with
<code>--password=your-password</code>. See section <a
href="manual.html#Connecting">4.2.8 Connecting to the MySQL
Server</a>.</p>

<pre>
mysql --user=monty --password=guess database_name
</pre>

<p>If you want the client to prompt for a password, you should use
<code>--password</code> without any argument</p>

<pre>
mysql --user=monty --password database_name
</pre>

<p>or the short form:</p>

<pre>
mysql -u monty -p database_name
</pre>

<p>Note that in the last example the password is
<strong>not</strong> 'database_name'.</p>

<p>If you want to use the <code>-p</code> option to supply a
password you should do so like this:</p>

<pre>
mysql -u monty -pguess database_name
</pre>

<p>On some systems, the library call that MySQL uses to prompt for
a password will automatically cut the password to 8 characters.
Internally MySQL doesn't have any limit for the length of the
password.</p>

<h3><a id="Privilege_changes" name="Privilege_changes"
href="manual_toc.html#Privilege_changes">4.3.3 When Privilege
Changes Take Effect</a></h3>

<p>When <code>mysqld</code> starts, all grant table contents are
read into memory and become effective at that point.</p>

<p>Modifications to the grant tables that you perform using
<code>GRANT</code>, <code>REVOKE</code>, or <code>SET
PASSWORD</code> are noticed by the server immediately.</p>

<p>If you modify the grant tables manually (using
<code>INSERT</code>, <code>UPDATE</code>, etc.), you should execute
a <code>FLUSH PRIVILEGES</code> statement or run <code>mysqladmin
flush-privileges</code> or <code>mysqladmin reload</code> to tell
the server to reload the grant tables. Otherwise, your changes will
have <em>no effect</em> until you restart the server. If you change
the grant tables manually but forget to reload the privileges, you
will be wondering why your changes don't seem to make any
difference!</p>

<p>When the server notices that the grant tables have been changed,
existing client connections are affected as follows:</p>

<ul>
<li>Table and column privilege changes take effect with the
client's next request.</li>

<li>Database privilege changes take effect at the next <code>USE
db_name</code> command.</li>

<li>Global privilege changes and password changes take effect the
next time the client connects.</li>
</ul>

<h3><a id="Default_privileges" name="Default_privileges"
href="manual_toc.html#Default_privileges">4.3.4 Setting Up the
Initial MySQL Privileges</a></h3>

<p><a id="IDX517" name="IDX517"></a> <a id="IDX518"
name="IDX518"></a> <a id="IDX519" name="IDX519"></a> <a id="IDX520"
name="IDX520"></a> <a id="IDX521" name="IDX521"></a> <a id="IDX522"
name="IDX522"></a> <a id="IDX523" name="IDX523"></a></p>

<p>After installing MySQL, you set up the initial access privileges
by running <code>scripts/mysql_install_db</code>. See section <a
href="manual.html#Quick_install">2.3.1 Quick Installation
Overview</a>. The <code>mysql_install_db</code> script starts up
the <code>mysqld</code> server, then initialises the grant tables
to contain the following set of privileges:</p>

<ul>
<li>The MySQL <code>root</code> user is created as a superuser who
can do anything. Connections must be made from the local host.
<strong>Note</strong>: The initial <code>root</code> password is
empty, so anyone can connect as <code>root</code> <em>without a
password</em> and be granted all privileges.</li>

<li><a id="IDX524" name="IDX524"></a> An anonymous user is created
that can do anything with databases that have a name of
<code>'test'</code> or starting with <code>'test_'</code>.
Connections must be made from the local host. This means any local
user can connect without a password and be treated as the anonymous
user.</li>

<li>Other privileges are denied. For example, normal users can't
use <code>mysqladmin shutdown</code> or <code>mysqladmin
processlist</code>.</li>
</ul>

<p><strong>Note</strong>: the default privileges are different for
Windows. See section <a href="manual.html#Windows_running">2.6.2.3
Running MySQL on Windows</a>.</p>

<p>Because your installation is initially wide open, one of the
first things you should do is specify a password for the MySQL
<code>root</code> user. You can do this as follows (note that you
specify the password using the <code>PASSWORD()</code>
function):</p>

<pre>
shell&gt; mysql -u root mysql
mysql&gt; SET PASSWORD FOR root@localhost=PASSWORD('new_password');
</pre>

<p>If you know what you are doing, you can also directly manipulate
the privilege tables:</p>

<pre>
shell&gt; mysql -u root mysql
mysql&gt; UPDATE user SET Password=PASSWORD('new_password')
    -&gt;     WHERE user='root';
mysql&gt; FLUSH PRIVILEGES;
</pre>

<p>Another way to set the password is by using the
<code>mysqladmin</code> command:</p>

<pre>
shell&gt; mysqladmin -u root password new_password
</pre>

<p>Only users with write/update access to the <code>mysql</code>
database can change the password for others users. All normal users
(not anonymous ones) can only change their own password with either
of the above commands or with <code>SET PASSWORD=PASSWORD('new
password')</code>.</p>

<p>Note that if you update the password in the <code>user</code>
table directly using the first method, you must tell the server to
re-read the grant tables (with <code>FLUSH PRIVILEGES</code>),
because the change will go unnoticed otherwise.</p>

<p>Once the <code>root</code> password has been set, thereafter you
must supply that password when you connect to the server as
<code>root</code>.</p>

<p>You may wish to leave the <code>root</code> password blank so
that you don't need to specify it while you perform additional
setup or testing. However, be sure to set it before using your
installation for any real production work.</p>

<p>See the <code>scripts/mysql_install_db</code> script to see how
it sets up the default privileges. You can use this as a basis to
see how to add other users.</p>

<p>If you want the initial privileges to be different from those
just described above, you can modify <code>mysql_install_db</code>
before you run it.</p>

<p><a id="IDX525" name="IDX525"></a> <a id="IDX526"
name="IDX526"></a> To re-create the grant tables completely, remove
all the <tt>`.frm'</tt>, <tt>`.MYI'</tt>, and <tt>`.MYD'</tt> files
in the directory containing the <code>mysql</code> database. (This
is the directory named <tt>`mysql'</tt> under the database
directory, which is listed when you run <code>mysqld
--help</code>.) Then run the <code>mysql_install_db</code> script,
possibly after editing it first to have the privileges you
want.</p>

<p><strong>Note</strong>: for MySQL versions older than Version
3.22.10, you should not delete the <tt>`.frm'</tt> files. If you
accidentally do this, you should copy them back from your MySQL
distribution before running <code>mysql_install_db</code>.</p>

<h3><a id="Adding_users" name="Adding_users"
href="manual_toc.html#Adding_users">4.3.5 Adding New Users to
MySQL</a></h3>

<p><a id="IDX527" name="IDX527"></a> <a id="IDX528"
name="IDX528"></a></p>

<p><a id="IDX529" name="IDX529"></a> <a id="IDX530"
name="IDX530"></a> <a id="IDX531" name="IDX531"></a></p>

<p>You can add users two different ways: by using
<code>GRANT</code> statements or by manipulating the MySQL grant
tables directly. The preferred method is to use <code>GRANT</code>
statements, because they are more concise and less error-prone. See
section <a href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</p>

<p>There are also a lot of contributed programs like
<code>phpmyadmin</code> that can be used to create and administrate
users.</p>

<p>The following examples show how to use the <code>mysql</code>
client to set up new users. These examples assume that privileges
are set up according to the defaults described in the previous
section. This means that to make changes, you must be on the same
machine where <code>mysqld</code> is running, you must connect as
the MySQL <code>root</code> user, and the <code>root</code> user
must have the <code>INSERT</code> privilege for the
<code>mysql</code> database and the <code>RELOAD</code>
administrative privilege. Also, if you have changed the
<code>root</code> user password, you must specify it for the
<code>mysql</code> commands here.</p>

<p>You can add new users by issuing <code>GRANT</code>
statements:</p>

<pre>
shell&gt; mysql --user=root mysql
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO monty@localhost
    -&gt;     IDENTIFIED BY 'some_pass' WITH GRANT OPTION;
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO monty@"%"
    -&gt;     IDENTIFIED BY 'some_pass' WITH GRANT OPTION;
mysql&gt; GRANT RELOAD,PROCESS ON *.* TO admin@localhost;
mysql&gt; GRANT USAGE ON *.* TO dummy@localhost;
</pre>

<p>These <code>GRANT</code> statements set up three new users:</p>

<dl compact="compact">
<dt><code>monty</code></dt>

<dd>A full superuser who can connect to the server from anywhere,
but who must use a password <code>'some_pass'</code> to do so. Note
that we must issue <code>GRANT</code> statements for both
<code>monty@localhost</code> and <code>monty@"%"</code>. If we
don't add the entry with <code>localhost</code>, the anonymous user
entry for <code>localhost</code> that is created by
<code>mysql_install_db</code> will take precedence when we connect
from the local host, because it has a more specific
<code>Host</code> field value and thus comes earlier in the
<code>user</code> table sort order.</dd>

<dt><code>admin</code></dt>

<dd>A user who can connect from <code>localhost</code> without a
password and who is granted the <code>RELOAD</code> and
<code>PROCESS</code> administrative privileges. This allows the
user to execute the <code>mysqladmin reload</code>,
<code>mysqladmin refresh</code>, and <code>mysqladmin
flush-*</code> commands, as well as <code>mysqladmin
processlist</code> . No database-related privileges are granted.
(They can be granted later by issuing additional <code>GRANT</code>
statements.)</dd>

<dt><code>dummy</code></dt>

<dd>A user who can connect without a password, but only from the
local host. The global privileges are all set to
<code>'N'</code>—the <code>USAGE</code> privilege type allows you
to create a user with no privileges. It is assumed that you will
grant database-specific privileges later.</dd>
</dl>

<p><a id="IDX532" name="IDX532"></a> <a id="IDX533"
name="IDX533"></a> You can also add the same user access
information directly by issuing <code>INSERT</code> statements and
then telling the server to reload the grant tables:</p>

<pre>
shell&gt; mysql --user=root mysql
mysql&gt; INSERT INTO user VALUES('localhost','monty',PASSWORD('some_pass'),
    -&gt;          'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y');
mysql&gt; INSERT INTO user VALUES('%','monty',PASSWORD('some_pass'),
    -&gt;          'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y');
mysql&gt; INSERT INTO user SET Host='localhost',User='admin',
    -&gt;           Reload_priv='Y', Process_priv='Y';
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt;                  VALUES('localhost','dummy','');
mysql&gt; FLUSH PRIVILEGES;
</pre>

<p>Depending on your MySQL version, you may have to use a different
number of <code>'Y'</code> values above (versions prior to Version
3.22.11 had fewer privilege columns). For the <code>admin</code>
user, the more readable extended <code>INSERT</code> syntax that is
available starting with Version 3.22.11 is used.</p>

<p>Note that to set up a superuser, you need only create a
<code>user</code> table entry with the privilege fields set to
<code>'Y'</code>. No <code>db</code> or <code>host</code> table
entries are necessary.</p>

<p>The privilege columns in the <code>user</code> table were not
set explicitly in the last <code>INSERT</code> statement (for the
<code>dummy</code> user), so those columns are assigned the default
value of <code>'N'</code>. This is the same thing that <code>GRANT
USAGE</code> does.</p>

<p>The following example adds a user <code>custom</code> who can
connect from hosts <code>localhost</code>,
<code>server.domain</code>, and <code>whitehouse.gov</code>. He
wants to access the <code>bankaccount</code> database only from
<code>localhost</code>, the <code>expenses</code> database only
from <code>whitehouse.gov</code>, and the <code>customer</code>
database from all three hosts. He wants to use the password
<code>stupid</code> from all three hosts.</p>

<p>To set up this user's privileges using <code>GRANT</code>
statements, run these commands:</p>

<pre>
shell&gt; mysql --user=root mysql
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;     ON bankaccount.*
    -&gt;     TO custom@localhost
    -&gt;     IDENTIFIED BY 'stupid';
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;     ON expenses.*
    -&gt;     TO custom@whitehouse.gov
    -&gt;     IDENTIFIED BY 'stupid';
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;     ON customer.*
    -&gt;     TO custom@'%'
    -&gt;     IDENTIFIED BY 'stupid';
</pre>

<p>The reason that we do to grant statements for the user 'custom'
is that we want the give the user access to MySQL both from the
local machine with Unix sockets and from the remote machine
'whitehouse.gov' over TCP/IP.</p>

<p>To set up the user's privileges by modifying the grant tables
directly, run these commands (note the <code>FLUSH
PRIVILEGES</code> at the end):</p>

<pre>
shell&gt; mysql --user=root mysql
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt; VALUES('localhost','custom',PASSWORD('stupid'));
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt; VALUES('server.domain','custom',PASSWORD('stupid'));
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt; VALUES('whitehouse.gov','custom',PASSWORD('stupid'));
mysql&gt; INSERT INTO db
    -&gt; (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,
    -&gt;  Create_priv,Drop_priv)
    -&gt; VALUES
    -&gt; ('localhost','bankaccount','custom','Y','Y','Y','Y','Y','Y');
mysql&gt; INSERT INTO db
    -&gt; (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,
    -&gt;  Create_priv,Drop_priv)
    -&gt; VALUES
    -&gt; ('whitehouse.gov','expenses','custom','Y','Y','Y','Y','Y','Y');
mysql&gt; INSERT INTO db
    -&gt; (Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,
    -&gt;  Create_priv,Drop_priv)
    -&gt; VALUES('%','customer','custom','Y','Y','Y','Y','Y','Y');
mysql&gt; FLUSH PRIVILEGES;
</pre>

<p>The first three <code>INSERT</code> statements add
<code>user</code> table entries that allow user <code>custom</code>
to connect from the various hosts with the given password, but
grant no permissions to him (all privileges are set to the default
value of <code>'N'</code>). The next three <code>INSERT</code>
statements add <code>db</code> table entries that grant privileges
to <code>custom</code> for the <code>bankaccount</code>,
<code>expenses</code>, and <code>customer</code> databases, but
only when accessed from the proper hosts. As usual, when the grant
tables are modified directly, the server must be told to reload
them (with <code>FLUSH PRIVILEGES</code>) so that the privilege
changes take effect.</p>

<p>If you want to give a specific user access from any machine in a
given domain, you can issue a <code>GRANT</code> statement like the
following:</p>

<pre>
mysql&gt; GRANT ...
    -&gt;     ON *.*
    -&gt;     TO myusername@"%.mydomainname.com"
    -&gt;     IDENTIFIED BY 'mypassword';
</pre>

<p>To do the same thing by modifying the grant tables directly, do
this:</p>

<pre>
mysql&gt; INSERT INTO user VALUES ('%.mydomainname.com', 'myusername',
    -&gt;             PASSWORD('mypassword'),...);
mysql&gt; FLUSH PRIVILEGES;
</pre>

<h3><a id="User_resources" name="User_resources"
href="manual_toc.html#User_resources">4.3.6 Limiting user
resources</a></h3>

<p>Starting from MySQL 4.0.2 one can limit certain resources per
user.</p>

<p>So far, the only available method of limiting usage of MySQL
server resources has been setting the
<code>max_user_connections</code> startup variable to a non-zero
value. But this method is strictly global and does not allow for
management of individual users, which could be of particular
interest to Internet Service Providers.</p>

<p>Therefore, management of three resources is introduced on the
individual user level:</p>

<ul>
<li>Number of all queries per hour: All commands that could be run
by a user.</li>

<li>Number of all updates per hour: Any command that changes any
table or database.</li>

<li>Number of connections made per hour: New connections opened per
hour.</li>
</ul>

<p>A user in the aforementioned context is a single entry in the
<code>user</code> table, which is uniquely identified by its
<code>user</code> and <code>host</code> columns.</p>

<p>All users are by default not limited in using the above
resources, unless the limits are granted to them. These limits can
be granted <strong>only</strong> via global <code>GRANT
(*.*)</code>, using this syntax:</p>

<pre>
GRANT ... WITH MAX_QUERIES_PER_HOUR N1
               MAX_UPDATES_PER_HOUR N2
               MAX_CONNECTIONS_PER_HOUR N3;
</pre>

<p>One can specify any combination of the above resources. N1, N2
and N3 are integers and stands for count / hour.</p>

<p>If user reaches any of the above limits withing one hour, his
connection will be terminated or refused and the appropriate error
message shall be issued.</p>

<p>Current usage values for a particular user can be flushed (set
to zero) by issuing a <code>GRANT</code> statement with any of the
above clauses, including a <code>GRANT</code> statement with the
current values.</p>

<p>Also, current values for all users will be flushed if privileges
are reloaded (in the server or using <code>mysqladmin
reload</code>) or if the <code>FLUSH USER_RESOURCES</code> command
is issued.</p>

<p>The feature is enabled as soon as a single user is granted with
any of the limiting <code>GRANT</code> clauses.</p>

<p>As a prerequisite for enabling this feature, the
<code>user</code> table in the <code>mysql</code> database must
contain the additional columns, as defined in the table creation
scripts <code>mysql_install_db</code> and
<code>mysql_install_db.sh</code> in <tt>`scripts'</tt>
subdirectory.</p>

<h3><a id="Passwords" name="Passwords"
href="manual_toc.html#Passwords">4.3.7 Setting Up
Passwords</a></h3>

<p><a id="IDX534" name="IDX534"></a> <a id="IDX535"
name="IDX535"></a></p>

<p><a id="IDX536" name="IDX536"></a> <a id="IDX537"
name="IDX537"></a></p>

<p>In most cases you should use <code>GRANT</code> to set up your
users/passwords, so the following only applies for advanced users.
See section <a href="manual.html#GRANT">4.3.1 <code>GRANT</code>
and <code>REVOKE</code> Syntax</a>.</p>

<p>The examples in the preceding sections illustrate an important
principle: when you store a non-empty password using
<code>INSERT</code> or <code>UPDATE</code> statements, you must use
the <code>PASSWORD()</code> function to encrypt it. This is because
the <code>user</code> table stores passwords in encrypted form, not
as plaintext. If you forget that fact, you are likely to attempt to
set passwords like this:</p>

<pre>
shell&gt; mysql -u root mysql
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt; VALUES('%','jeffrey','biscuit');
mysql&gt; FLUSH PRIVILEGES;
</pre>

<p>The result is that the plaintext value <code>'biscuit'</code> is
stored as the password in the <code>user</code> table. When the
user <code>jeffrey</code> attempts to connect to the server using
this password, the <code>mysql</code> client encrypts it with
<code>PASSWORD()</code>, generates an authentification vector based
on <strong>encrypted</strong> password and a random number,
obtained from server, and sends the result to the server. The
server uses the <code>password</code> value in the
<code>user</code> table (that is <strong>not encrypted</strong>
value <code>'biscuit'</code>) to perform the same calculations, and
compares results. The comparison fails and the server rejects the
connection:</p>

<pre>
shell&gt; mysql -u jeffrey -pbiscuit test
Access denied
</pre>

<p>Passwords must be encrypted when they are inserted in the
<code>user</code> table, so the <code>INSERT</code> statement
should have been specified like this instead:</p>

<pre>
mysql&gt; INSERT INTO user (Host,User,Password)
    -&gt; VALUES('%','jeffrey',PASSWORD('biscuit'));
</pre>

<p>You must also use the <code>PASSWORD()</code> function when you
use <code>SET PASSWORD</code> statements:</p>

<pre>
mysql&gt; SET PASSWORD FOR jeffrey@"%" = PASSWORD('biscuit');
</pre>

<p>If you set passwords using the <code>GRANT ... IDENTIFIED
BY</code> statement or the <code>mysqladmin password</code>
command, the <code>PASSWORD()</code> function is unnecessary. They
both take care of encrypting the password for you, so you would
specify a password of <code>'biscuit'</code> like this:</p>

<pre>
mysql&gt; GRANT USAGE ON *.* TO jeffrey@"%" IDENTIFIED BY 'biscuit';
</pre>

<p>or</p>

<pre>
shell&gt; mysqladmin -u jeffrey password biscuit
</pre>

<p><strong>Note</strong>: <code>PASSWORD()</code> does not perform
password encryption in the same way that Unix passwords are
encrypted. You should not assume that if your Unix password and
your MySQL password are the same, that <code>PASSWORD()</code> will
result in the same encrypted value as is stored in the Unix
password file. See section <a href="manual.html#User_names">4.3.2
MySQL User Names and Passwords</a>.</p>

<h3><a id="Password_security" name="Password_security"
href="manual_toc.html#Password_security">4.3.8 Keeping Your
Password Secure</a></h3>

<p>It is inadvisable to specify your password in a way that exposes
it to discovery by other users. The methods you can use to specify
your password when you run client programs are listed here, along
with an assessment of the risks of each method:</p>

<ul>
<li>Never give a normal user access to the <code>mysql.user</code>
table. Knowing the encrypted password for a user makes it possible
to login as this user. The passwords are only scrambled so that one
shouldn't be able to see the real password you used (if you happen
to use a similar password with your other applications).</li>

<li>Use a <code>-pyour_pass</code> or
<code>--password=your_pass</code> option on the command line. This
is convenient but insecure, because your password becomes visible
to system status programs (such as <code>ps</code>) that may be
invoked by other users to display command-lines. (MySQL clients
typically overwrite the command-line argument with zeroes during
their initialisation sequence, but there is still a brief interval
during which the value is visible.)</li>

<li>Use a <code>-p</code> or <code>--password</code> option (with
no <code>your_pass</code> value specified). In this case, the
client program solicits the password from the terminal: <a
id="IDX538" name="IDX538"></a> <a id="IDX539" name="IDX539"></a> 

<pre>
shell&gt; mysql -u user_name -p
Enter password: ********
</pre>

The <samp>`*'</samp> characters represent your password. It is more
secure to enter your password this way than to specify it on the
command-line because it is not visible to other users. However,
this method of entering a password is suitable only for programs
that you run interactively. If you want to invoke a client from a
script that runs non-interactively, there is no opportunity to
enter the password from the terminal. On some systems, you may even
find that the first line of your script is read and interpreted
(incorrectly) as your password!</li>

<li><a id="IDX540" name="IDX540"></a> Store your password in a
configuration file. For example, you can list your password in the
<code>[client]</code> section of the <tt>`.my.cnf'</tt> file in
your home directory: 

<pre>
[client]
password=your_pass
</pre>

If you store your password in <tt>`.my.cnf'</tt>, the file should
not be group or world readable or writable. Make sure the file's
access mode is <code>400</code> or <code>600</code>. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</li>

<li>You can store your password in the <code>MYSQL_PWD</code>
environment variable, but this method must be considered extremely
insecure and should not be used. Some versions of <code>ps</code>
include an option to display the environment of running processes;
your password will be in plain sight for all to see if you set
<code>MYSQL_PWD</code>. Even on systems without such a version of
<code>ps</code>, it is unwise to assume there is no other method to
observe process environments. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</li>
</ul>

<p>All in all, the safest methods are to have the client program
prompt for the password or to specify the password in a properly
protected <tt>`.my.cnf'</tt> file.</p>

<h3><a id="Secure_connections" name="Secure_connections"
href="manual_toc.html#Secure_connections">4.3.9 Using Secure
Connections</a></h3>

<p><a id="IDX541" name="IDX541"></a> <a id="IDX542"
name="IDX542"></a></p>

<h4><a id="Secure_basics" name="Secure_basics"
href="manual_toc.html#Secure_basics">4.3.9.1 Basics</a></h4>

<p>Beginning with version 4.0.0, MySQL has support for SSL
encrypted connections. To understand how MySQL uses SSL, it's
necessary to explain some basic SSL and X509 concepts. People who
are already familiar with them can skip this part.</p>

<p>By default, MySQL uses unencrypted connections between the
client and the server. This means that someone could watch all your
traffic and look at the data being sent or received. They could
even change the data while it is in transit between client and
server. Sometimes you need to move information over public networks
in a secure fashion; in such cases, using an unencrypted connection
is unacceptable.</p>

<p>SSL is a protocol that uses different encryption algorithms to
ensure that data received over a public network can be trusted. It
has mechanisms to detect any change, loss or replay of data. SSL
also incorporates algorithms to recognise and provide identity
verification using the X509 standard.</p>

<p><a id="IDX543" name="IDX543"></a> Encryption is the way to make
any kind of data unreadable. In fact, today's practice requires
many additional security elements from encryption algorithms. They
should resist many kind of known attacks like just messing with the
order of encrypted messages or replaying data twice.</p>

<p><a id="IDX544" name="IDX544"></a> X509 is a standard that makes
it possible to identify someone on the Internet. It is most
commonly used in e-commerce applications. In basic terms, there
should be some company (called a ``Certificate Authority'') that
assigns electronic certificates to anyone who needs them.
Certificates rely on asymmetric encryption algorithms that have two
encryption keys (a public key and a secret key). A certificate
owner can prove his identity by showing his certificate to other
party. A certificate consists of its owner's public key. Any data
encrypted with this public key can be decrypted only using the
corresponding secret key, which is held by the owner of the
certificate.</p>

<p>MySQL doesn't use encrypted connections by default, because
doing so would make the client/server protocol much slower. Any
kind of additional functionality requires the computer to do
additional work and encrypting data is a CPU-intensive operation
that requires time and can delay MySQL main tasks. By default MySQL
is tuned to be fast as possible.</p>

<p>If you need more information about SSL, X509, or encryption, you
should use your favourite Internet search engine and search for
keywords in which you are interested.</p>

<h4><a id="Secure_requirements" name="Secure_requirements"
href="manual_toc.html#Secure_requirements">4.3.9.2
Requirements</a></h4>

<p>To get secure connections to work with MySQL you must do the
following:</p>

<ol>
<li>Install the OpenSSL library. We have tested MySQL with OpenSSL
0.9.6. <a
href="http://www.openssl.org/">http://www.openssl.org/</a>.</li>

<li>Configure MySQL with <code>--with-vio
--with-openssl</code>.</li>

<li>If you are using an old MySQL installation, you have to update
your <code>mysql.user</code> table with some new SSL-related
columns. You can do this by running the
<code>mysql_fix_privilege_tables.sh</code> script. This is
necessary if your grant tables date from a version prior to MySQL
4.0.0.</li>

<li>You can check if a running <code>mysqld</code> server supports
OpenSSL by examining if <code>SHOW VARIABLES LIKE
'have_openssl'</code> returns <code>YES</code>.</li>
</ol>

<h4><a id="Secure_Create_Certs" name="Secure_Create_Certs"
href="manual_toc.html#Secure_Create_Certs">4.3.9.3 Setting Up SSL
Certificates for MySQL</a></h4>

<p>Here is an example for setting up SSL certificates for
MySQL:</p>

<pre>
DIR=`pwd`/openssl
PRIV=$DIR/private

mkdir $DIR $PRIV $DIR/newcerts
cp /usr/share/ssl/openssl.cnf $DIR
replace ./demoCA $DIR -- $DIR/openssl.cnf

# Create necessary files: $database, $serial and $new_certs_dir 
# directory (optional)

touch $DIR/index.txt
echo "01" &gt; $DIR/serial

#
# Generation of Certificate Authority(CA)
#

openssl req -new -x509 -keyout $PRIV/cakey.pem -out $DIR/cacert.pem \
    -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# ................++++++
# .........++++++
# writing new private key to '/home/monty/openssl/private/cakey.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be incorporated
# into your certificate request.
# What you are about to enter is what is called a Distinguished Name or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, section) []:
# Common Name (eg, YOUR name) []:MySQL admin
# Email Address []:

#
# Create server request and key
#
openssl req -new -keyout $DIR/server-key.pem -out \
    $DIR/server-req.pem -days 3600 -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# ..++++++
# ..........++++++
# writing new private key to '/home/monty/openssl/server-key.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be incorporated
# into your certificate request.
# What you are about to enter is what is called a Distinguished Name or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, section) []:
# Common Name (eg, YOUR name) []:MySQL server
# Email Address []:
# 
# Please enter the following 'extra' attributes
# to be sent with your certificate request
# A challenge password []:
# An optional company name []:

#
# Remove the passphrase from the key (optional)
#

openssl rsa -in $DIR/server-key.pem -out $DIR/server-key.pem

#
# Sign server cert
#
openssl ca  -policy policy_anything -out $DIR/server-cert.pem \
    -config $DIR/openssl.cnf -infiles $DIR/server-req.pem

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Enter PEM pass phrase:
# Check that the request matches the signature
# Signature ok
# The Subjects Distinguished Name is as follows
# countryName           :PRINTABLE:'FI'
# organizationName      :PRINTABLE:'MySQL AB'
# commonName            :PRINTABLE:'MySQL admin'
# Certificate is to be certified until Sep 13 14:22:46 2003 GMT (365 days)
# Sign the certificate? [y/n]:y
# 
# 
# 1 out of 1 certificate requests certified, commit? [y/n]y
# Write out database with 1 new entries
# Data Base Updated

#
# Create client request and key
#
openssl req -new -keyout $DIR/client-key.pem -out \
    $DIR/client-req.pem -days 3600 -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# .....................................++++++
# .............................................++++++
# writing new private key to '/home/monty/openssl/client-key.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be incorporated
# into your certificate request.
# What you are about to enter is what is called a Distinguished Name or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, section) []:
# Common Name (eg, YOUR name) []:MySQL user
# Email Address []:
# 
# Please enter the following 'extra' attributes
# to be sent with your certificate request
# A challenge password []:
# An optional company name []:

#
# Remove a passphrase from the key (optional)
#
openssl rsa -in $DIR/client-key.pem -out $DIR/client-key.pem

#
# Sign client cert
#

openssl ca  -policy policy_anything -out $DIR/client-cert.pem \
    -config $DIR/openssl.cnf -infiles $DIR/client-req.pem

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Enter PEM pass phrase:
# Check that the request matches the signature
# Signature ok
# The Subjects Distinguished Name is as follows
# countryName           :PRINTABLE:'FI'
# organizationName      :PRINTABLE:'MySQL AB'
# commonName            :PRINTABLE:'MySQL user'
# Certificate is to be certified until Sep 13 16:45:17 2003 GMT (365 days)
# Sign the certificate? [y/n]:y
# 
# 
# 1 out of 1 certificate requests certified, commit? [y/n]y
# Write out database with 1 new entries
# Data Base Updated

#
# Create a my.cnf file that you can use to test the certificates
#

cnf=""
cnf="$cnf [client]"
cnf="$cnf ssl-ca=$DIR/cacert.pem"
cnf="$cnf ssl-cert=$DIR/client-cert.pem"
cnf="$cnf ssl-key=$DIR/client-key.pem"
cnf="$cnf [mysqld]"
cnf="$cnf ssl-ca=$DIR/cacert.pem"
cnf="$cnf ssl-cert=$DIR/server-cert.pem"
cnf="$cnf ssl-key=$DIR/server-key.pem"
echo $cnf | replace " " '
' &gt; $DIR/my.cnf

#
# To test MySQL

mysqld --defaults-file=$DIR/my.cnf &amp;

mysql --defaults-file=$DIR/my.cnf
</pre>

<p>You can also test your setup by modifying the above
<tt>`my.cnf'</tt> file to refer to the demo certificates in the
mysql-source-dist/SSL direcory.</p>

<h4><a id="Secure_GRANT" name="Secure_GRANT"
href="manual_toc.html#Secure_GRANT">4.3.9.4 <code>GRANT</code>
Options</a></h4>

<p><a id="IDX545" name="IDX545"></a> <a id="IDX546"
name="IDX546"></a> <a id="IDX547" name="IDX547"></a></p>

<p>MySQL can check X509 certificate attributes in addition to the
normal username/password scheme. All the usual options are still
required (username, password, IP address mask, database/table
name).</p>

<p>There are different possibilities to limit connections:</p>

<ul>
<li>Without any SSL or X509 options, all kind of
encrypted/unencrypted connections are allowed if the username and
password are valid.</li>

<li><code>REQUIRE SSL</code> option limits the server to allow only
SSL encrypted connections. Note that this option can be omitted if
there are any ACL records which allow non-SSL connections. 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret" REQUIRE SSL;
</pre>
</li>

<li><code>REQUIRE X509</code> means that the client should have a
valid certificate but we do not care about the exact certificate,
issuer or subject. The only restriction is that it should be
possible to verify its signature with one of the CA certificates. 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret" REQUIRE X509;
</pre>
</li>

<li><code>REQUIRE ISSUER "issuer"</code> places a restriction on
connection attempts: The client must present a valid X509
certificate issued by CA <code>"issuer"</code>. Using X509
certificates always implies encryption, so the <code>SSL</code>
option is unneccessary. 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret"
    -&gt; REQUIRE ISSUER "C=FI, ST=Some-State, L=Helsinki,
    "&gt; O=MySQL Finland AB, CN=Tonu Samuel/Email=tonu@mysql.com";
</pre>
</li>

<li><code>REQUIRE SUBJECT "subject"</code> requires clients to have
valid X509 certificate with subject <code>"subject"</code> on it.
If the client presents a certificate that is valid but has a
different <code>"subject"</code>, the connection is disallowed. 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret"
    -&gt; REQUIRE SUBJECT "C=EE, ST=Some-State, L=Tallinn,
    "&gt; O=MySQL demo client certificate,
    "&gt; CN=Tonu Samuel/Email=tonu@mysql.com";
</pre>
</li>

<li><code>REQUIRE CIPHER "cipher"</code> is needed to assure enough
strong ciphers and keylengths will be used. SSL itself can be weak
if old algorithms with short encryption keys are used. Using this
option, we can ask for some exact cipher method to allow a
connection. 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret"
    -&gt; REQUIRE CIPHER "EDH-RSA-DES-CBC3-SHA";
</pre>

The <code>SUBJECT</code>, <code>ISSUER</code>, and
<code>CIPHER</code> options can be combined in the
<code>REQUIRE</code> clause like this: 

<pre>
mysql&gt; GRANT ALL PRIVILEGES ON test.* TO root@localhost
    -&gt; IDENTIFIED BY "goodsecret"
    -&gt; REQUIRE SUBJECT "C=EE, ST=Some-State, L=Tallinn,
    "&gt; O=MySQL demo client certificate,
    "&gt; CN=Tonu Samuel/Email=tonu@mysql.com"
    -&gt; AND ISSUER "C=FI, ST=Some-State, L=Helsinki,
    "&gt; O=MySQL Finland AB, CN=Tonu Samuel/Email=tonu@mysql.com"
    -&gt; AND CIPHER "EDH-RSA-DES-CBC3-SHA";
</pre>

Starting from MySQL 4.0.4 the <code>AND</code> keyword is optional
between <code>REQUIRE</code> options. The order of the options does
not matter, but no option can be specified twice.</li>
</ul>

<h2><a id="Disaster_Prevention" name="Disaster_Prevention"
href="manual_toc.html#Disaster_Prevention">4.4 Disaster Prevention
and Recovery</a></h2>

<h3><a id="Backup" name="Backup"
href="manual_toc.html#Backup">4.4.1 Database Backups</a></h3>

<p><a id="IDX548" name="IDX548"></a> <a id="IDX549"
name="IDX549"></a></p>

<p>Because MySQL tables are stored as files, it is easy to do a
backup. To get a consistent backup, do a <code>LOCK TABLES</code>
on the relevant tables followed by <code>FLUSH TABLES</code> for
the tables. See section <a href="manual.html#LOCK_TABLES">6.7.2
<code>LOCK TABLES/UNLOCK TABLES</code> Syntax</a>. See section <a
href="manual.html#FLUSH">4.5.3 <code>FLUSH</code> Syntax</a>. You
only need a read lock; this allows other threads to continue to
query the tables while you are making a copy of the files in the
database directory. The <code>FLUSH TABLE</code> is needed to
ensure that the all active index pages is written to disk before
you start the backup.</p>

<p>If you want to make a SQL level backup of a table, you can use
<code>SELECT INTO OUTFILE</code> or <code>BACKUP TABLE</code>. See
section <a href="manual.html#SELECT">6.4.1 <code>SELECT</code>
Syntax</a>. See section <a href="manual.html#BACKUP_TABLE">4.4.2
<code>BACKUP TABLE</code> Syntax</a>.</p>

<p>Another way to back up a database is to use the
<code>mysqldump</code> program or the <code>mysqlhotcopy
script</code>. See section <a href="manual.html#mysqldump">4.8.5
<code>mysqldump</code>, Dumping Table Structure and Data</a>. See
section <a href="manual.html#mysqlhotcopy">4.8.6
<code>mysqlhotcopy</code>, Copying MySQL Databases and
Tables</a>.</p>

<ol>
<li>Do a full backup of your databases: 

<pre>
shell&gt; mysqldump --tab=/path/to/some/dir --opt --all

or

shell&gt; mysqlhotcopy database /path/to/some/dir
</pre>

You can also simply copy all table files (<tt>`*.frm'</tt>,
<tt>`*.MYD'</tt>, and <tt>`*.MYI'</tt> files) as long as the server
isn't updating anything. The script <code>mysqlhotcopy</code> does
use this method.</li>

<li><a id="IDX550" name="IDX550"></a> <a id="IDX551"
name="IDX551"></a> Stop <code>mysqld</code> if it's running, then
start it with the <code>--log-update[=file_name]</code> option. See
section <a href="manual.html#Update_log">4.9.3 The Update Log</a>.
The update log file(s) provide you with the information you need to
replicate changes to the database that are made subsequent to the
point at which you executed <code>mysqldump</code>.</li>
</ol>

<p>If you have to restore something, try to recover your tables
using <code>REPAIR TABLE</code> or <code>myisamchk -r</code> first.
That should work in 99.9% of all cases. If <code>myisamchk</code>
fails, try the following procedure (this will only work if you have
started MySQL with <code>--log-update</code>, see section <a
href="manual.html#Update_log">4.9.3 The Update Log</a>):</p>

<ol>
<li>Restore the original <code>mysqldump</code> backup.</li>

<li>Execute the following command to re-run the updates in the
binary log: 

<pre>
shell&gt; mysqlbinlog hostname-bin.[0-9]* | mysql
</pre>

If you are using the update log you can use: 

<pre>
shell&gt; ls -1 -t -r hostname.[0-9]* | xargs cat | mysql
</pre>
</li>
</ol>

<p><code>ls</code> is used to get all the update log files in the
right order.</p>

<p>You can also do selective backups with <code>SELECT * INTO
OUTFILE 'file_name' FROM tbl_name</code> and restore with
<code>LOAD DATA INFILE 'file_name' REPLACE ...</code> To avoid
duplicate records, you need a <code>PRIMARY KEY</code> or a
<code>UNIQUE</code> key in the table. The <code>REPLACE</code>
keyword causes old records to be replaced with new ones when a new
record duplicates an old record on a unique key value.</p>

<p>If you get performance problems in making backups on your
system, you can solve this by setting up replication and do the
backups on the slave instead of on the master. See section <a
href="manual.html#Replication_Intro">4.10.1 Introduction</a>.</p>

<p>If you are using a Veritas filesystem, you can do:</p>

<ol>
<li>From a client (or Perl), execute: <code>FLUSH TABLES WITH READ
LOCK</code>.</li>

<li>From another shell, execute: <code>mount vxfs
snapshot</code>.</li>

<li>From the first client, execute: <code>UNLOCK
TABLES</code>.</li>

<li>Copy files from snapshot.</li>

<li>Unmount snapshot.</li>
</ol>

<h3><a id="BACKUP_TABLE" name="BACKUP_TABLE"
href="manual_toc.html#BACKUP_TABLE">4.4.2 <code>BACKUP TABLE</code>
Syntax</a></h3>

<p><a id="IDX552" name="IDX552"></a></p>

<p><a id="IDX553" name="IDX553"></a></p>

<pre>
BACKUP TABLE tbl_name[,tbl_name...] TO '/path/to/backup/directory'
</pre>

<p>Copies to the backup directory the minimum number of table files
needed to restore the table, after flushing any buffered changes to
disk. Currently works only for <code>MyISAM</code> tables. For
<code>MyISAM</code> tables, copies <tt>`.frm'</tt> (definition) and
<tt>`.MYD'</tt> (data) files. The index file can be rebuilt from
those two.</p>

<p>Before using this command, please see section <a
href="manual.html#Backup">4.4.1 Database Backups</a>.</p>

<p>During the backup, a read lock will be held for each table, one
at time, as they are being backed up. If you want to back up
several tables as a snapshot, you must first issue <code>LOCK
TABLES</code> obtaining a read lock for each table in the
group.</p>

<p>The command returns a table with the following columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>Table</td>
<td>Table name</td>
</tr>

<tr>
<td>Op</td>
<td>Always ``backup''</td>
</tr>

<tr>
<td>Msg_type</td>
<td>One of <code>status</code>, <code>error</code>,
<code>info</code> or <code>warning</code>.</td>
</tr>

<tr>
<td>Msg_text</td>
<td>The message.</td>
</tr>
</table>

<p>Note that <code>BACKUP TABLE</code> is only available in MySQL
version 3.23.25 and later.</p>

<h3><a id="RESTORE_TABLE" name="RESTORE_TABLE"
href="manual_toc.html#RESTORE_TABLE">4.4.3 <code>RESTORE
TABLE</code> Syntax</a></h3>

<p><a id="IDX554" name="IDX554"></a></p>

<pre>
RESTORE TABLE tbl_name[,tbl_name...] FROM '/path/to/backup/directory'
</pre>

<p>Restores the table(s) from the backup that was made with
<code>BACKUP TABLE</code>. Existing tables will not be overwritten;
if you try to restore over an existing table, you will get an
error. Restoring will take longer than backing up due to the need
to rebuild the index. The more keys you have, the longer it will
take. Just as <code>BACKUP TABLE</code>, <code>RESTORE TABLE</code>
currently works only for <code>MyISAM</code> tables.</p>

<p>The command returns a table with the following columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>Table</td>
<td>Table name</td>
</tr>

<tr>
<td>Op</td>
<td>Always ``restore''</td>
</tr>

<tr>
<td>Msg_type</td>
<td>One of <code>status</code>, <code>error</code>,
<code>info</code> or <code>warning</code>.</td>
</tr>

<tr>
<td>Msg_text</td>
<td>The message.</td>
</tr>
</table>

<h3><a id="CHECK_TABLE" name="CHECK_TABLE"
href="manual_toc.html#CHECK_TABLE">4.4.4 <code>CHECK TABLE</code>
Syntax</a></h3>

<p><a id="IDX555" name="IDX555"></a></p>

<pre>
CHECK TABLE tbl_name[,tbl_name...] [option [option...]]

option = QUICK | FAST | MEDIUM | EXTENDED | CHANGED
</pre>

<p><code>CHECK TABLE</code> works only on <code>MyISAM</code> and
<code>InnoDB</code> tables. On <code>MyISAM</code> tables it's the
same thing as running <code>myisamchk -m table_name</code> on the
table.</p>

<p>If you don't specify any option <code>MEDIUM</code> is used.</p>

<p>Checks the table(s) for errors. For <code>MyISAM</code> tables
the key statistics are updated. The command returns a table with
the following columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>Table</td>
<td>Table name.</td>
</tr>

<tr>
<td>Op</td>
<td>Always ``check''.</td>
</tr>

<tr>
<td>Msg_type</td>
<td>One of <code>status</code>, <code>error</code>,
<code>info</code>, or <code>warning</code>.</td>
</tr>

<tr>
<td>Msg_text</td>
<td>The message.</td>
</tr>
</table>

<p>Note that you can get many rows of information for each checked
table. The last row will be of <code>Msg_type status</code> and
should normally be <code>OK</code>. If you don't get
<code>OK</code>, or <code>Table is already up to date</code> you
should normally run a repair of the table. See section <a
href="manual.html#Table_maintenance">4.4.6 Using
<code>myisamchk</code> for Table Maintenance and Crash
Recovery</a>. <code>Table is already up to date</code> means that
the table the given <code>TYPE</code> told MySQL that there wasn't
any need to check the table.</p>

<p>The different check types stand for the following:</p>

<table border="1" width="100%">
<tr>
<td><strong>Type</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>QUICK</code></td>
<td>Don't scan the rows to check for wrong links.</td>
</tr>

<tr>
<td><code>FAST</code></td>
<td>Only check tables which haven't been closed properly.</td>
</tr>

<tr>
<td><code>CHANGED</code></td>
<td>Only check tables which have been changed since last check or
haven't been closed properly.</td>
</tr>

<tr>
<td><code>MEDIUM</code></td>
<td>Scan rows to verify that deleted links are okay. This also
calculates a key checksum for the rows and verifies this with a
calculated checksum for the keys.</td>
</tr>

<tr>
<td><code>EXTENDED</code></td>
<td>Do a full key lookup for all keys for each row. This ensures
that the table is 100% consistent, but will take a long time!</td>
</tr>
</table>

<p>For dynamically sized <code>MyISAM</code> tables a started check
will always do a <code>MEDIUM</code> check. For statically sized
rows we skip the row scan for <code>QUICK</code> and
<code>FAST</code> as the rows are very seldom corrupted.</p>

<p>You can combine check options as in:</p>

<pre>
CHECK TABLE test_table FAST QUICK;
</pre>

<p>Which would simply do a quick check on the table to see whether
it was closed properly.</p>

<p><strong>Note</strong>: that in some case <code>CHECK
TABLE</code> will change the table! This happens if the table is
marked as 'corrupted' or 'not closed properly' but <code>CHECK
TABLE</code> didn't find any problems in the table. In this case
<code>CHECK TABLE</code> will mark the table as okay.</p>

<p>If a table is corrupted, then it's most likely that the problem
is in the indexes and not in the data part. All of the above check
types checks the indexes thoroughly and should thus find most
errors.</p>

<p>If you just want to check a table that you assume is okay, you
should use no check options or the <code>QUICK</code> option. The
latter should be used when you are in a hurry and can take the very
small risk that <code>QUICK</code> didn't find an error in the
datafile. (In most cases MySQL should find, under normal usage, any
error in the data file. If this happens then the table will be
marked as 'corrupted', in which case the table can't be used until
it's repaired.)</p>

<p><code>FAST</code> and <code>CHANGED</code> are mostly intended
to be used from a script (for example to be executed from
<code>cron</code>) if you want to check your table from time to
time. In most cases you <code>FAST</code> is to be prefered over
<code>CHANGED</code>. (The only case when it isn't is when you
suspect a bug you have found a bug in the <code>MyISAM</code>
code.)</p>

<p><code>EXTENDED</code> is only to be used after you have run a
normal check but still get strange errors from a table when MySQL
tries to update a row or find a row by key (this is very unlikely
if a normal check has succeeded!).</p>

<p>Some things reported by check table, can't be corrected
automatically:</p>

<ul>
<li><code>Found row where the auto_increment column has the value
0</code>. This means that you have in the table a row where the
<code>AUTO_INCREMENT</code> index column contains the value 0.
(It's possible to create a row where the
<code>AUTO_INCREMENT</code> column is 0 by explicitly setting the
column to 0 with an <code>UPDATE</code> statement) This isn't an
error in itself, but could cause trouble if you decide to dump the
table and restore it or do an <code>ALTER TABLE</code> on the
table. In this case the <code>AUTO_INCREMENT</code> column will
change value, according to the rules of <code>AUTO_INCREMENT</code>
columns, which could cause problems like a duplicate key error. To
get rid of the warning, just execute an <code>UPDATE</code>
statement to set the column to some other value than 0.</li>
</ul>

<h3><a id="REPAIR_TABLE" name="REPAIR_TABLE"
href="manual_toc.html#REPAIR_TABLE">4.4.5 <code>REPAIR TABLE</code>
Syntax</a></h3>

<p><a id="IDX556" name="IDX556"></a></p>

<pre>
REPAIR TABLE tbl_name[,tbl_name...] [QUICK] [EXTENDED] [USE_FRM]
</pre>

<p><code>REPAIR TABLE</code> works only on <code>MyISAM</code>
tables and is the same as running <code>myisamchk -r
table_name</code> on the table.</p>

<p>Normally you should never have to run this command, but if
disaster strikes you are very likely to get back all your data from
a MyISAM table with <code>REPAIR TABLE</code>. If your tables get
corrupted a lot you should try to find the reason for this! See
section <a href="manual.html#Crashing">A.4.1 What To Do If MySQL
Keeps Crashing</a>. See section <a
href="manual.html#MyISAM_table_problems">7.1.3 <code>MyISAM</code>
Table Problems</a>.</p>

<p><code>REPAIR TABLE</code> repairs a possible corrupted table.
The command returns a table with the following columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>Table</td>
<td>Table name</td>
</tr>

<tr>
<td>Op</td>
<td>Always ``repair''</td>
</tr>

<tr>
<td>Msg_type</td>
<td>One of <code>status</code>, <code>error</code>,
<code>info</code> or <code>warning</code>.</td>
</tr>

<tr>
<td>Msg_text</td>
<td>The message.</td>
</tr>
</table>

<p>Note that you can get many rows of information for each repaired
table. The last one row will be of <code>Msg_type status</code> and
should normally be <code>OK</code>. If you don't get
<code>OK</code>, you should try repairing the table with
<code>myisamchk -o</code>, as <code>REPAIR TABLE</code> does not
yet implement all the options of <code>myisamchk</code>. In the
near future, we will make it more flexible.</p>

<p>If <code>QUICK</code> is given then MySQL will try to do a
<code>REPAIR</code> of only the index tree.</p>

<p>If you use <code>EXTENDED</code> then MySQL will create the
index row by row instead of creating one index at a time with
sorting; this may be better than sorting on fixed-length keys if
you have long <code>CHAR</code> keys that compress very well. This
type of repair is like that done by <code>myisamchk
--safe-recover</code>.</p>

<p>As of <code>MySQL</code> 4.0.2, there is a <code>USE_FRM</code>
mode for <code>REPAIR</code>. Use it if the <tt>`.MYI'</tt> file is
missing or if its header is corrupted. In this mode MySQL will
recreate the table, using information from the <tt>`.frm'</tt>
file. This kind of repair cannot be done with
<code>myisamchk</code>.</p>

<h3><a id="Table_maintenance" name="Table_maintenance"
href="manual_toc.html#Table_maintenance">4.4.6 Using
<code>myisamchk</code> for Table Maintenance and Crash
Recovery</a></h3>

<p>Starting with MySQL Version 3.23.13, you can check MyISAM tables
with the <code>CHECK TABLE</code> command. See section <a
href="manual.html#CHECK_TABLE">4.4.4 <code>CHECK TABLE</code>
Syntax</a>. You can repair tables with the <code>REPAIR
TABLE</code> command. See section <a
href="manual.html#REPAIR_TABLE">4.4.5 <code>REPAIR TABLE</code>
Syntax</a>.</p>

<p>To check/repair MyISAM tables (<tt>`.MYI'</tt> and
<tt>`.MYD'</tt>) you should use the <code>myisamchk</code> utility.
To check/repair ISAM tables (<tt>`.ISM'</tt> and <tt>`.ISD'</tt>)
you should use the <code>isamchk</code> utility. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</p>

<p>In the following text we will talk about <code>myisamchk</code>,
but everything also applies to the old <code>isamchk</code>.</p>

<p>You can use the <code>myisamchk</code> utility to get
information about your database tables, check and repair them, or
optimise them. The following sections describe how to invoke
<code>myisamchk</code> (including a description of its options),
how to set up a table maintenance schedule, and how to use
<code>myisamchk</code> to perform its various functions.</p>

<p>You can, in most cases, also use the command <code>OPTIMIZE
TABLES</code> to optimise and repair tables, but this is not as
fast or reliable (in case of real fatal errors) as
<code>myisamchk</code>. On the other hand, <code>OPTIMIZE
TABLE</code> is easier to use and you don't have to worry about
flushing tables. See section <a
href="manual.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE TABLE</code>
Syntax</a>.</p>

<p>Even that the repair in <code>myisamchk</code> is quite secure,
it's always a good idea to make a backup <em>before</em> doing a
repair (or anything that could make a lot of changes to a
table)</p>

<h4><a id="myisamchk_syntax" name="myisamchk_syntax"
href="manual_toc.html#myisamchk_syntax">4.4.6.1
<code>myisamchk</code> Invocation Syntax</a></h4>

<p><code>myisamchk</code> is invoked like this:</p>

<pre>
shell&gt; myisamchk [options] tbl_name
</pre>

<p>The <code>options</code> specify what you want
<code>myisamchk</code> to do. They are described here. (You can
also get a list of options by invoking <code>myisamchk
--help</code>.) With no options, <code>myisamchk</code> simply
checks your table. To get more information or to tell
<code>myisamchk</code> to take corrective action, specify options
as described here and in the following sections.</p>

<p><code>tbl_name</code> is the database table you want to
check/repair. If you run <code>myisamchk</code> somewhere other
than in the database directory, you must specify the path to the
file, because <code>myisamchk</code> has no idea where your
database is located. Actually, <code>myisamchk</code> doesn't care
whether the files you are working on are located in a database
directory; you can copy the files that correspond to a database
table into another location and perform recovery operations on them
there.</p>

<p>You can name several tables on the <code>myisamchk</code>
command-line if you wish. You can also specify a name as an index
file name (with the <tt>`.MYI'</tt> suffix), which allows you to
specify all tables in a directory by using the pattern
<tt>`*.MYI'</tt>. For example, if you are in a database directory,
you can check all the tables in the directory like this:</p>

<pre>
shell&gt; myisamchk *.MYI
</pre>

<p>If you are not in the database directory, you can check all the
tables there by specifying the path to the directory:</p>

<pre>
shell&gt; myisamchk /path/to/database_dir/*.MYI
</pre>

<p>You can even check all tables in all databases by specifying a
wildcard with the path to the MySQL data directory:</p>

<pre>
shell&gt; myisamchk /path/to/datadir/*/*.MYI
</pre>

<p>The recommended way to quickly check all tables is:</p>

<pre>
myisamchk --silent --fast /path/to/datadir/*/*.MYI
isamchk --silent /path/to/datadir/*/*.ISM
</pre>

<p>If you want to check all tables and repair all tables that are
corrupted, you can use the following line:</p>

<pre>
myisamchk --silent --force --fast --update-state -O key_buffer=64M \
          -O sort_buffer=64M -O read_buffer=1M -O write_buffer=1M \
          /path/to/datadir/*/*.MYI
isamchk --silent --force -O key_buffer=64M -O sort_buffer=64M \
        -O read_buffer=1M -O write_buffer=1M /path/to/datadir/*/*.ISM
</pre>

<p>The above assumes that you have more than 64 M free.</p>

<p>Note that if you get an error like:</p>

<pre>
myisamchk: warning: 1 clients is using or hasn't closed the table properly
</pre>

<p>This means that you are trying to check a table that has been
updated by the another program (like the <code>mysqld</code>
server) that hasn't yet closed the file or that has died without
closing the file properly.</p>

<p>If you <code>mysqld</code> is running, you must force a
sync/close of all tables with <code>FLUSH TABLES</code> and ensure
that no one is using the tables while you are running
<code>myisamchk</code>. In MySQL Version 3.23 the easiest way to
avoid this problem is to use <code>CHECK TABLE</code> instead of
<code>myisamchk</code> to check tables.</p>

<h4><a id="myisamchk_general_options"
name="myisamchk_general_options"
href="manual_toc.html#myisamchk_general_options">4.4.6.2 General
Options for <code>myisamchk</code></a></h4>

<p><a id="IDX557" name="IDX557"></a> <a id="IDX558"
name="IDX558"></a></p>

<p><code>myisamchk</code> supports the following options.</p>

<dl compact="compact">
<dt><code>-# or --debug=debug_options</code></dt>

<dd>Output debug log. The <code>debug_options</code> string often
is <code>'d:t:o,filename'</code>.</dd>

<dt><code>-? or --help</code></dt>

<dd>Display a help message and exit.</dd>

<dt><code>-O var=option, --set-variable var=option</code></dt>

<dd>Set the value of a variable. Please note that
<code>--set-variable</code> is deprecated since MySQL 4.0, just use
<code>--var=option</code> on its own. The possible variables and
their default values for myisamchk can be examined with
<code>myisamchk --help</code>: 

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>key_buffer_size</td>
<td>523264</td>
</tr>

<tr>
<td>read_buffer_size</td>
<td>262136</td>
</tr>

<tr>
<td>write_buffer_size</td>
<td>262136</td>
</tr>

<tr>
<td>sort_buffer_size</td>
<td>2097144</td>
</tr>

<tr>
<td>sort_key_blocks</td>
<td>16</td>
</tr>

<tr>
<td>decode_bits</td>
<td>9</td>
</tr>
</table>

<code>sort_buffer_size</code> is used when the keys are repaired by
sorting keys, which is the normal case when you use
<code>--recover</code>. <code>key_buffer_size</code> is used when
you are checking the table with <code>--extended-check</code> or
when the keys are repaired by inserting key row by row in to the
table (like when doing normal inserts). Repairing through the key
buffer is used in the following cases: 

<ul>
<li>If you use <code>--safe-recover</code>.</li>

<li>If the temporary files needed to sort the keys would be more
than twice as big as when creating the key file directly. This is
often the case when you have big <code>CHAR</code>,
<code>VARCHAR</code> or <code>TEXT</code> keys as the sort needs to
store the whole keys during sorting. If you have lots of temporary
space and you can force <code>myisamchk</code> to repair by sorting
you can use the <code>--sort-recover</code> option.</li>
</ul>

Reparing through the key buffer takes much less disk space than
using sorting, but is also much slower. If you want a faster
repair, set the above variables to about 1/4 of your available
memory. You can set both variables to big values, as only one of
the above buffers will be used at a time.</dd>

<dt><code>-s or --silent</code></dt>

<dd>Silent mode. Write output only when errors occur. You can use
<code>-s</code> twice (<code>-ss</code>) to make
<code>myisamchk</code> very silent.</dd>

<dt><code>-v or --verbose</code></dt>

<dd>Verbose mode. Print more information. This can be used with
<code>-d</code> and <code>-e</code>. Use <code>-v</code> multiple
times (<code>-vv</code>, <code>-vvv</code>) for more
verbosity!</dd>

<dt><code>-V or --version</code></dt>

<dd>Print the <code>myisamchk</code> version and exit.</dd>

<dt><code>-w or, --wait</code></dt>

<dd>Instead of giving an error if the table is locked, wait until
the table is unlocked before continuing. Note that if you are
running <code>mysqld</code> on the table with
<code>--skip-external-locking</code>, the table can only be locked
by another <code>myisamchk</code> command.</dd>
</dl>

<h4><a id="myisamchk_check_options" name="myisamchk_check_options"
href="manual_toc.html#myisamchk_check_options">4.4.6.3 Check
Options for <code>myisamchk</code></a></h4>

<p><a id="IDX559" name="IDX559"></a> <a id="IDX560"
name="IDX560"></a></p>

<dl compact="compact">
<dt><code>-c or --check</code></dt>

<dd>Check table for errors. This is the default operation if you
are not giving <code>myisamchk</code> any options that override
this.</dd>

<dt><code>-e or --extend-check</code></dt>

<dd>Check the table very thoroughly (which is quite slow if you
have many indexes). This option should only be used in extreme
cases. Normally, <code>myisamchk</code> or <code>myisamchk
--medium-check</code> should, in most cases, be able to find out if
there are any errors in the table. If you are using
<code>--extended-check</code> and have much memory, you should
increase the value of <code>key_buffer_size</code> a lot!</dd>

<dt><code>-F or --fast</code></dt>

<dd>Check only tables that haven't been closed properly.</dd>

<dt><code>-C or --check-only-changed</code></dt>

<dd>Check only tables that have changed since the last check.</dd>

<dt><code>-f or --force</code></dt>

<dd>Restart <code>myisamchk</code> with <code>-r</code> (repair) on
the table, if <code>myisamchk</code> finds any errors in the
table.</dd>

<dt><code>-i or --information</code></dt>

<dd>Print informational statistics about the table that is
checked.</dd>

<dt><code>-m or --medium-check</code></dt>

<dd>Faster than extended-check, but only finds 99.99% of all
errors. Should, however, be good enough for most cases.</dd>

<dt><code>-U or --update-state</code></dt>

<dd>Store in the <tt>`.MYI'</tt> file when the table was checked
and if the table crashed. This should be used to get full benefit
of the <code>--check-only-changed</code> option, but you shouldn't
use this option if the <code>mysqld</code> server is using the
table and you are running <code>mysqld</code> with
<code>--skip-external-locking</code>.</dd>

<dt><code>-T or --read-only</code></dt>

<dd>Don't mark table as checked. This is useful if you use
<code>myisamchk</code> to check a table that is in use by some
other application that doesn't use locking (like <code>mysqld
--skip-external-locking</code>).</dd>
</dl>

<h4><a id="myisamchk_repair_options"
name="myisamchk_repair_options"
href="manual_toc.html#myisamchk_repair_options">4.4.6.4 Repair
Options for myisamchk</a></h4>

<p><a id="IDX561" name="IDX561"></a> <a id="IDX562"
name="IDX562"></a></p>

<p>The following options are used if you start
<code>myisamchk</code> with <code>-r</code> or <code>-o</code>:</p>

<dl compact="compact">
<dt><code>-D # or --data-file-length=#</code></dt>

<dd>Max length of datafile (when re-creating datafile when it's
'full').</dd>

<dt><code>-e or --extend-check</code></dt>

<dd>Try to recover every possible row from the datafile. Normally
this will also find a lot of garbage rows. Don't use this option if
you are not totally desperate.</dd>

<dt><code>-f or --force</code></dt>

<dd>Overwrite old temporary files (<code>table_name.TMD</code>)
instead of aborting.</dd>

<dt><code>-k # or keys-used=#</code></dt>

<dd>If you are using ISAM, tells the ISAM storage engine to update
only the first <code>#</code> indexes. If you are using
<code>MyISAM</code>, tells which keys to use, where each binary bit
stands for one key (first key is bit 0). This can be used to get
faster inserts! Deactivated indexes can be reactivated by using
<code>myisamchk -r</code>. keys.</dd>

<dt><code>-l or --no-symlinks</code></dt>

<dd>Do not follow symbolic links. Normally <code>myisamchk</code>
repairs the table a symlink points at. This option doesn't exist in
MySQL 4.0, as MySQL 4.0 will not remove symlinks during
repair.</dd>

<dt><code>-r or --recover</code></dt>

<dd>Can fix almost anything except unique keys that aren't unique
(which is an extremely unlikely error with ISAM/MyISAM tables). If
you want to recover a table, this is the option to try first. Only
if myisamchk reports that the table can't be recovered by
<code>-r</code>, you should then try <code>-o</code>. (Note that in
the unlikely case that <code>-r</code> fails, the datafile is still
intact.) If you have lots of memory, you should increase the size
of <code>sort_buffer_size</code>!</dd>

<dt><code>-o or --safe-recover</code></dt>

<dd>Uses an old recovery method (reads through all rows in order
and updates all index trees based on the found rows); this is an
order of magnitude slower than <code>-r</code>, but can handle a
couple of very unlikely cases that <code>-r</code> cannot handle.
This recovery method also uses much less disk space than
<code>-r</code>. Normally one should always first repair with
<code>-r</code>, and only if this fails use <code>-o</code>. If you
have lots of memory, you should increase the size of
<code>key_buffer_size</code>!</dd>

<dt><code>-n or --sort-recover</code></dt>

<dd>Force <code>myisamchk</code> to use sorting to resolve the keys
even if the temporary files should be very big.</dd>

<dt><code>--character-sets-dir=...</code></dt>

<dd>Directory where character sets are stored.</dd>

<dt><code>--set-character-set=name</code></dt>

<dd>Change the character set used by the index</dd>

<dt><code>-t or --tmpdir=path</code></dt>

<dd>Path for storing temporary files. If this is not set,
<code>myisamchk</code> will use the environment variable
<code>TMPDIR</code> for this.</dd>

<dt><code>-q or --quick</code></dt>

<dd>Faster repair by not modifying the datafile. One can give a
second <code>-q</code> to force <code>myisamchk</code> to modify
the original datafile in case of duplicate keys</dd>

<dt><code>-u or --unpack</code></dt>

<dd>Unpack file packed with myisampack.</dd>
</dl>

<h4><a id="myisamchk_other_options" name="myisamchk_other_options"
href="manual_toc.html#myisamchk_other_options">4.4.6.5 Other
Options for <code>myisamchk</code></a></h4>

<p>Other actions that <code>myisamchk</code> can do, besides repair
and check tables:</p>

<dl compact="compact">
<dt><code>-a or --analyze</code></dt>

<dd>Analyse the distribution of keys. This improves join
performance by enabling the join optimiser to better choose in
which order it should join the tables and which keys it should use:
<code>myisamchk --describe --verbose table_name'</code> or using
<code>SHOW KEYS</code> in MySQL.</dd>

<dt><code>-d or --description</code></dt>

<dd>Prints some information about table.</dd>

<dt><code>-A or --set-auto-increment[=value]</code></dt>

<dd>Force <code>AUTO_INCREMENT</code> to start at this or higher
value. If no value is given, then sets the next
<code>AUTO_INCREMENT</code> value to the highest used value for the
auto key + 1.</dd>

<dt><code>-S or --sort-index</code></dt>

<dd>Sort the index tree blocks in high-low order. This will
optimise seeks and will make table scanning by key faster.</dd>

<dt><code>-R or --sort-records=#</code></dt>

<dd>Sorts records according to an index. This makes your data much
more localised and may speed up ranged <code>SELECT</code> and
<code>ORDER BY</code> operations on this index. (It may be very
slow to do a sort the first time!) To find out a table's index
numbers, use <code>SHOW INDEX</code>, which shows a table's indexes
in the same order that <code>myisamchk</code> sees them. Indexes
are numbered beginning with 1.</dd>
</dl>

<h4><a id="myisamchk_memory" name="myisamchk_memory"
href="manual_toc.html#myisamchk_memory">4.4.6.6
<code>myisamchk</code> Memory Usage</a></h4>

<p><a id="IDX563" name="IDX563"></a></p>

<p>Memory allocation is important when you run
<code>myisamchk</code>. <code>myisamchk</code> uses no more memory
than you specify with the <code>-O</code> options. If you are going
to use <code>myisamchk</code> on very large files, you should first
decide how much memory you want it to use. The default is to use
only about 3M to fix things. By using larger values, you can get
<code>myisamchk</code> to operate faster. For example, if you have
more than 32M RAM, you could use options such as these (in addition
to any other options you might specify):</p>

<pre>
shell&gt; myisamchk -O sort=16M -O key=16M -O read=1M -O write=1M ...
</pre>

<p>Using <code>-O sort=16M</code> should probably be enough for
most cases.</p>

<p>Be aware that <code>myisamchk</code> uses temporary files in
<code>TMPDIR</code>. If <code>TMPDIR</code> points to a memory
filesystem, you may easily get out of memory errors. If this
happens, set <code>TMPDIR</code> to point at some directory with
more space and restart <code>myisamchk</code>.</p>

<p>When repairing, <code>myisamchk</code> will also need a lot of
disk space:</p>

<ul>
<li>Double the size of the record file (the original one and a
copy). This space is not needed if one does a repair with
<code>--quick</code>, as in this case only the index file will be
re-created. This space is needed on the same disk as the original
record file!</li>

<li>Space for the new index file that replaces the old one. The old
index file is truncated at start, so one usually ignore this space.
This space is needed on the same disk as the original index
file!</li>

<li>When using <code>--recover</code> or
<code>--sort-recover</code> (but not when using
<code>--safe-recover</code>), you will need space for a sort buffer
for: <code>(largest_key + row_pointer_length)*number_of_rows *
2</code>. You can check the length of the keys and the
row_pointer_length with <code>myisamchk -dv table</code>. This
space is allocated on the temporary disk (specified by
<code>TMPDIR</code> or <code>--tmpdir=#</code>).</li>
</ul>

<p>If you have a problem with disk space during repair, you can try
to use <code>--safe-recover</code> instead of
<code>--recover</code>.</p>

<h4><a id="Crash_recovery" name="Crash_recovery"
href="manual_toc.html#Crash_recovery">4.4.6.7 Using
<code>myisamchk</code> for Crash Recovery</a></h4>

<p><a id="IDX564" name="IDX564"></a> <a id="IDX565"
name="IDX565"></a></p>

<p>If you run <code>mysqld</code> with
<code>--skip-external-locking</code> (which is the default on some
systems, like Linux), you can't reliably use <code>myisamchk</code>
to check a table when <code>mysqld</code> is using the same table.
If you can be sure that no one is accessing the tables through
<code>mysqld</code> while you run <code>myisamchk</code>, you only
have to do <code>mysqladmin flush-tables</code> before you start
checking the tables. If you can't guarantee the above, then you
must take down <code>mysqld</code> while you check the tables. If
you run <code>myisamchk</code> while <code>mysqld</code> is
updating the tables, you may get a warning that a table is corrupt
even if it isn't.</p>

<p>If you are not using <code>--skip-external-locking</code>, you
can use <code>myisamchk</code> to check tables at any time. While
you do this, all clients that try to update the table will wait
until <code>myisamchk</code> is ready before continuing.</p>

<p>If you use <code>myisamchk</code> to repair or optimise tables,
you <strong>must</strong> always ensure that the
<code>mysqld</code> server is not using the table (this also
applies if you are using <code>--skip-external-locking</code>). If
you don't take down <code>mysqld</code> you should at least do a
<code>mysqladmin flush-tables</code> before you run
<code>myisamchk</code>. Your tables <strong>may be
corrupted</strong> if the server and <code>myisamchk</code> access
the tables simultaneously.</p>

<p>This chapter describes how to check for and deal with data
corruption in MySQL databases. If your tables get corrupted
frequently you should try to find the reason for this! See section
<a href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</p>

<p>The <code>MyISAM</code> table section contains reason for why a
table could be corrupted. See section <a
href="manual.html#MyISAM_table_problems">7.1.3 <code>MyISAM</code>
Table Problems</a>.</p>

<p>When performing crash recovery, it is important to understand
that each table <code>tbl_name</code> in a database corresponds to
three files in the database directory:</p>

<table border="1" width="100%">
<tr>
<td><strong>File</strong></td>
<td><strong>Purpose</strong></td>
</tr>

<tr>
<td><tt>`tbl_name.frm'</tt></td>
<td>Table definition (form) file</td>
</tr>

<tr>
<td><tt>`tbl_name.MYD'</tt></td>
<td>Datafile</td>
</tr>

<tr>
<td><tt>`tbl_name.MYI'</tt></td>
<td>Index file</td>
</tr>
</table>

<p>Each of these three file types is subject to corruption in
various ways, but problems occur most often in datafiles and index
files.</p>

<p><code>myisamchk</code> works by creating a copy of the
<tt>`.MYD'</tt> (data) file row by row. It ends the repair stage by
removing the old <tt>`.MYD'</tt> file and renaming the new file to
the original file name. If you use <code>--quick</code>,
<code>myisamchk</code> does not create a temporary <tt>`.MYD'</tt>
file, but instead assumes that the <tt>`.MYD'</tt> file is correct
and only generates a new index file without touching the
<tt>`.MYD'</tt> file. This is safe, because <code>myisamchk</code>
automatically detects if the <tt>`.MYD'</tt> file is corrupt and
aborts the repair in this case. You can also give two
<code>--quick</code> options to <code>myisamchk</code>. In this
case, <code>myisamchk</code> does not abort on some errors (like
duplicate key) but instead tries to resolve them by modifying the
<tt>`.MYD'</tt> file. Normally the use of two <code>--quick</code>
options is useful only if you have too little free disk space to
perform a normal repair. In this case you should at least make a
backup before running <code>myisamchk</code>.</p>

<h4><a id="Check" name="Check" href="manual_toc.html#Check">4.4.6.8
How to Check Tables for Errors</a></h4>

<p><a id="IDX566" name="IDX566"></a> <a id="IDX567"
name="IDX567"></a> <a id="IDX568" name="IDX568"></a></p>

<p>To check a MyISAM table, use the following commands:</p>

<dl compact="compact">
<dt><code>myisamchk tbl_name</code></dt>

<dd>This finds 99.99% of all errors. What it can't find is
corruption that involves <strong>only</strong> the datafile (which
is very unusual). If you want to check a table, you should normally
run <code>myisamchk</code> without options or with either the
<code>-s</code> or <code>--silent</code> option.</dd>

<dt><code>myisamchk -m tbl_name</code></dt>

<dd>This finds 99.999% of all errors. It checks first all index
entries for errors and then it reads through all rows. It
calculates a checksum for all keys in the rows and verifies that
they checksum matches the checksum for the keys in the index
tree.</dd>

<dt><code>myisamchk -e tbl_name</code></dt>

<dd>This does a complete and thorough check of all data
(<code>-e</code> means ``extended check''). It does a check-read of
every key for each row to verify that they indeed point to the
correct row. This may take a long time on a big table with many
keys. <code>myisamchk</code> will normally stop after the first
error it finds. If you want to obtain more information, you can add
the <code>--verbose</code> (<code>-v</code>) option. This causes
<code>myisamchk</code> to keep going, up through a maximum of 20
errors. In normal usage, a simple <code>myisamchk</code> (with no
arguments other than the table name) is sufficient.</dd>

<dt><code>myisamchk -e -i tbl_name</code></dt>

<dd>Like the previous command, but the <code>-i</code> option tells
<code>myisamchk</code> to print some informational statistics,
too.</dd>
</dl>

<h4><a id="Repair" name="Repair"
href="manual_toc.html#Repair">4.4.6.9 How to Repair Tables</a></h4>

<p><a id="IDX569" name="IDX569"></a> <a id="IDX570"
name="IDX570"></a></p>

<p>In the following section we only talk about using
<code>myisamchk</code> on <code>MyISAM</code> tables (extensions
<tt>`.MYI'</tt> and <tt>`.MYD'</tt>). If you are using
<code>ISAM</code> tables (extensions <tt>`.ISM'</tt> and
<tt>`.ISD'</tt>), you should use <code>isamchk</code> instead.</p>

<p>Starting with MySQL Version 3.23.14, you can repair MyISAM
tables with the <code>REPAIR TABLE</code> command. See section <a
href="manual.html#REPAIR_TABLE">4.4.5 <code>REPAIR TABLE</code>
Syntax</a>.</p>

<p>The symptoms of a corrupted table include queries that abort
unexpectedly and observable errors such as these:</p>

<ul>
<li><tt>`tbl_name.frm'</tt> is locked against change</li>

<li>Can't find file <tt>`tbl_name.MYI'</tt> (Errcode: ###)</li>

<li>Unexpected end of file</li>

<li>Record file is crashed</li>

<li>Got error ### from table handler To get more information about
the error you can run <code>perror ###</code>. Here is the most
common errors that indicates a problem with the table: 

<pre>
shell&gt; perror 126 127 132 134 135 136 141 144 145
126 = Index file is crashed / Wrong file format
127 = Record-file is crashed
132 = Old database file
134 = Record was already deleted (or record file crashed)
135 = No more room in record file
136 = No more room in index file
141 = Duplicate unique key or constraint on write or update
144 = Table is crashed and last repair failed
145 = Table was marked as crashed and should be repaired
</pre>

Note that error 135, no more room in record file, is not an error
that can be fixed by a simple repair. In this case you have to do: 

<pre>
ALTER TABLE table MAX_ROWS=xxx AVG_ROW_LENGTH=yyy;
</pre>
</li>
</ul>

<p>In the other cases, you must repair your tables.
<code>myisamchk</code> can usually detect and fix most things that
go wrong.</p>

<p>The repair process involves up to four stages, described here.
Before you begin, you should <code>cd</code> to the database
directory and check the permissions of the table files. Make sure
they are readable by the Unix user that <code>mysqld</code> runs as
(and to you, because you need to access the files you are
checking). If it turns out you need to modify files, they must also
be writable by you.</p>

<p>If you are using MySQL Version 3.23.16 and above, you can (and
should) use the <code>CHECK</code> and <code>REPAIR</code> commands
to check and repair <code>MyISAM</code> tables. See section <a
href="manual.html#CHECK_TABLE">4.4.4 <code>CHECK TABLE</code>
Syntax</a>. See section <a href="manual.html#REPAIR_TABLE">4.4.5
<code>REPAIR TABLE</code> Syntax</a>.</p>

<p>The manual section about table maintenance includes the options
to <code>isamchk</code>/<code>myisamchk</code>. See section <a
href="manual.html#Table_maintenance">4.4.6 Using
<code>myisamchk</code> for Table Maintenance and Crash
Recovery</a>.</p>

<p>The following section is for the cases where the above command
fails or if you want to use the extended features that
<code>isamchk</code>/<code>myisamchk</code> provides.</p>

<p>If you are going to repair a table from the command-line, you
must first take down the <code>mysqld</code> server. Note that when
you do <code>mysqladmin shutdown</code> on a remote server, the
<code>mysqld</code> server will still be alive for a while after
<code>mysqladmin</code> returns, until all queries are stopped and
all keys have been flushed to disk.</p>

<p><strong>Stage 1: Checking your tables</strong></p>

<p>Run <code>myisamchk *.MYI</code> or <code>myisamchk -e
*.MYI</code> if you have more time. Use the <code>-s</code>
(silent) option to suppress unnecessary information.</p>

<p>If the <code>mysqld</code> server is done you should use the
--update option to tell <code>myisamchk</code> to mark the table as
'checked'.</p>

<p>You have to repair only those tables for which
<code>myisamchk</code> announces an error. For such tables, proceed
to Stage 2.</p>

<p>If you get weird errors when checking (such as <code>out of
memory</code> errors), or if <code>myisamchk</code> crashes, go to
Stage 3.</p>

<p><strong>Stage 2: Easy safe repair</strong></p>

<p>Note: If you want repairing to go much faster, you should add:
<code>-O sort_buffer=# -O key_buffer=#</code> (where # is about 1/4
of the available memory) to all <code>isamchk/myisamchk</code>
commands.</p>

<p>First, try <code>myisamchk -r -q tbl_name</code> (<code>-r
-q</code> means ``quick recovery mode''). This will attempt to
repair the index file without touching the datafile. If the
datafile contains everything that it should and the delete links
point at the correct locations within the datafile, this should
work, and the table is fixed. Start repairing the next table.
Otherwise, use the following procedure:</p>

<ol>
<li>Make a backup of the datafile before continuing.</li>

<li>Use <code>myisamchk -r tbl_name</code> (<code>-r</code> means
``recovery mode''). This will remove incorrect records and deleted
records from the datafile and reconstruct the index file.</li>

<li>If the preceding step fails, use <code>myisamchk --safe-recover
tbl_name</code>. Safe recovery mode uses an old recovery method
that handles a few cases that regular recovery mode doesn't (but is
slower).</li>
</ol>

<p>If you get weird errors when repairing (such as <code>out of
memory</code> errors), or if <code>myisamchk</code> crashes, go to
Stage 3.</p>

<p><strong>Stage 3: Difficult repair</strong></p>

<p>You should only reach this stage if the first 16K block in the
index file is destroyed or contains incorrect information, or if
the index file is missing. In this case, it's necessary to create a
new index file. Do so as follows:</p>

<ol>
<li>Move the datafile to some safe place.</li>

<li>Use the table description file to create new (empty) data and
index files: 

<pre>
shell&gt; mysql db_name
mysql&gt; SET AUTOCOMMIT=1;
mysql&gt; TRUNCATE TABLE table_name;
mysql&gt; quit
</pre>

If your SQL version doesn't have <code>TRUNCATE TABLE</code>, use
<code>DELETE FROM table_name</code> instead.</li>

<li>Copy the old datafile back onto the newly created datafile.
(Don't just move the old file back onto the new file; you want to
retain a copy in case something goes wrong.)</li>
</ol>

<p>Go back to Stage 2. <code>myisamchk -r -q</code> should work
now. (This shouldn't be an endless loop.)</p>

<p>As of <code>MySQL</code> 4.0.2 you can also use <code>REPAIR ...
USE_FRM</code> which performs the whole procedure
automatically.</p>

<p><strong>Stage 4: Very difficult repair</strong></p>

<p>You should reach this stage only if the description file has
also crashed. That should never happen, because the description
file isn't changed after the table is created:</p>

<ol>
<li>Restore the description file from a backup and go back to Stage
3. You can also restore the index file and go back to Stage 2. In
the latter case, you should start with <code>myisamchk
-r</code>.</li>

<li>If you don't have a backup but know exactly how the table was
created, create a copy of the table in another database. Remove the
new datafile, then move the description and index files from the
other database to your crashed database. This gives you new
description and index files, but leaves the datafile alone. Go back
to Stage 2 and attempt to reconstruct the index file.</li>
</ol>

<h4><a id="Optimisation" name="Optimisation"
href="manual_toc.html#Optimisation">4.4.6.10 Table
Optimisation</a></h4>

<p><a id="IDX571" name="IDX571"></a> <a id="IDX572"
name="IDX572"></a></p>

<p>To coalesce fragmented records and eliminate wasted space
resulting from deleting or updating records, run
<code>myisamchk</code> in recovery mode:</p>

<pre>
shell&gt; myisamchk -r tbl_name
</pre>

<p>You can optimise a table in the same way using the SQL
<code>OPTIMIZE TABLE</code> statement. <code>OPTIMIZE TABLE</code>
does a repair of the table and a key analysis, and also sorts the
index tree to give faster key lookups. There is also no possibility
of unwanted interaction between a utility and the server, because
the server does all the work when you use <code>OPTIMIZE
TABLE</code>. See section <a
href="manual.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE TABLE</code>
Syntax</a>.</p>

<p><code>myisamchk</code> also has a number of other options you
can use to improve the performance of a table:</p>

<ul>
<li><code>-S</code>, <code>--sort-index</code></li>

<li><code>-R index_num</code>,
<code>--sort-records=index_num</code></li>

<li><code>-a</code>, <code>--analyze</code></li>
</ul>

<p>For a full description of the option. See section <a
href="manual.html#myisamchk_syntax">4.4.6.1 <code>myisamchk</code>
Invocation Syntax</a>.</p>

<h3><a id="Maintenance_regimen" name="Maintenance_regimen"
href="manual_toc.html#Maintenance_regimen">4.4.7 Setting Up a Table
Maintenance Regimen</a></h3>

<p><a id="IDX573" name="IDX573"></a> <a id="IDX574"
name="IDX574"></a></p>

<p>Starting with MySQL Version 3.23.13, you can check MyISAM tables
with the <code>CHECK TABLE</code> command. See section <a
href="manual.html#CHECK_TABLE">4.4.4 <code>CHECK TABLE</code>
Syntax</a>. You can repair tables with the <code>REPAIR
TABLE</code> command. See section <a
href="manual.html#REPAIR_TABLE">4.4.5 <code>REPAIR TABLE</code>
Syntax</a>.</p>

<p>It is a good idea to perform table checks on a regular basis
rather than waiting for problems to occur. For maintenance
purposes, you can use <code>myisamchk -s</code> to check tables.
The <code>-s</code> option (short for <code>--silent</code>) causes
<code>myisamchk</code> to run in silent mode, printing messages
only when errors occur.</p>

<p><a id="IDX575" name="IDX575"></a> It's also a good idea to check
tables when the server starts up. For example, whenever the machine
has done a reboot in the middle of an update, you usually need to
check all the tables that could have been affected. (This is an
``expected crashed table''.) You could add a test to
<code>safe_mysqld</code> that runs <code>myisamchk</code> to check
all tables that have been modified during the last 24 hours if
there is an old <tt>`.pid'</tt> (process ID) file left after a
reboot. (The <tt>`.pid'</tt> file is created by <code>mysqld</code>
when it starts up and removed when it terminates normally. The
presence of a <tt>`.pid'</tt> file at system startup time indicates
that <code>mysqld</code> terminated abnormally.)</p>

<p>An even better test would be to check any table whose
last-modified time is more recent than that of the <tt>`.pid'</tt>
file.</p>

<p>You should also check your tables regularly during normal system
operation. At MySQL AB, we run a <code>cron</code> job to check all
our important tables once a week, using a line like this in a
<tt>`crontab'</tt> file:</p>

<pre>
35 0 * * 0 /path/to/myisamchk --fast --silent /path/to/datadir/*/*.MYI
</pre>

<p>This prints out information about crashed tables so we can
examine and repair them when needed.</p>

<p>As we haven't had any unexpectedly crashed tables (tables that
become corrupted for reasons other than hardware trouble) for a
couple of years now (this is really true), once a week is more than
enough for us.</p>

<p>We recommend that to start with, you execute <code>myisamchk
-s</code> each night on all tables that have been updated during
the last 24 hours, until you come to trust MySQL as much as we
do.</p>

<p><a id="IDX576" name="IDX576"></a> Normally you don't need to
maintain MySQL tables that much. If you are changing tables with
dynamic size rows (tables with <code>VARCHAR</code>,
<code>BLOB</code> or <code>TEXT</code> columns) or have tables with
many deleted rows you may want to from time to time (once a month?)
defragment/reclaim space from the tables.</p>

<p>You can do this by using <code>OPTIMIZE TABLE</code> on the
tables in question or if you can take the <code>mysqld</code>
server down for a while do:</p>

<pre>
isamchk -r --silent --sort-index -O sort_buffer_size=16M */*.ISM
myisamchk -r --silent --sort-index  -O sort_buffer_size=16M */*.MYI
</pre>

<h3><a id="Table-info" name="Table-info"
href="manual_toc.html#Table-info">4.4.8 Getting Information About a
Table</a></h3>

<p><a id="IDX577" name="IDX577"></a></p>

<p>To get a description of a table or statistics about it, use the
commands shown here. We explain some of the information in more
detail later:</p>

<ul>
<li>myisamchk -d tbl_name Runs <code>myisamchk</code> in ``describe
mode'' to produce a description of your table. If you start the
MySQL server using the <code>--skip-external-locking</code> option,
<code>myisamchk</code> may report an error for a table that is
updated while it runs. However, because <code>myisamchk</code>
doesn't change the table in describe mode, there isn't any risk of
destroying data.</li>

<li>myisamchk -d -v tbl_name To produce more information about what
<code>myisamchk</code> is doing, add <code>-v</code> to tell it to
run in verbose mode.</li>

<li>myisamchk -eis tbl_name Shows only the most important
information from a table. It is slow because it must read the whole
table.</li>

<li>myisamchk -eiv tbl_name This is like <code>-eis</code>, but
tells you what is being done.</li>
</ul>

<p><a id="IDX578" name="IDX578"></a> <a id="IDX579"
name="IDX579"></a> Example of <code>myisamchk -d</code> output:</p>

<pre>
MyISAM file:     company.MYI
Record format:   Fixed length
Data records:    1403698  Deleted blocks:         0
Recordlength:    226

table description:
Key Start Len Index   Type
1   2     8   unique  double
2   15    10  multip. text packed stripped
3   219   8   multip. double
4   63    10  multip. text packed stripped
5   167   2   multip. unsigned short
6   177   4   multip. unsigned long
7   155   4   multip. text
8   138   4   multip. unsigned long
9   177   4   multip. unsigned long
    193   1           text
</pre>

<p>Example of <code>myisamchk -d -v</code> output:</p>

<pre>
MyISAM file:         company
Record format:       Fixed length
File-version:        1
Creation time:       1999-10-30 12:12:51
Recover time:        1999-10-31 19:13:01
Status:              checked
Data records:           1403698  Deleted blocks:              0
Datafile parts:         1403698  Deleted data:                0
Datafilepointer (bytes):      3  Keyfile pointer (bytes):     3
Max datafile length: 3791650815  Max keyfile length: 4294967294
Recordlength:               226

table description:
Key Start Len Index   Type                  Rec/key     Root Blocksize
1   2     8   unique  double                      1 15845376      1024
2   15    10  multip. text packed stripped        2 25062400      1024
3   219   8   multip. double                     73 40907776      1024
4   63    10  multip. text packed stripped        5 48097280      1024
5   167   2   multip. unsigned short           4840 55200768      1024
6   177   4   multip. unsigned long            1346 65145856      1024
7   155   4   multip. text                     4995 75090944      1024
8   138   4   multip. unsigned long              87 85036032      1024
9   177   4   multip. unsigned long             178 96481280      1024
    193   1           text
</pre>

<p>Example of <code>myisamchk -eis</code> output:</p>

<pre>
Checking MyISAM file: company
Key:  1:  Keyblocks used:  97%  Packed:    0%  Max levels:  4
Key:  2:  Keyblocks used:  98%  Packed:   50%  Max levels:  4
Key:  3:  Keyblocks used:  97%  Packed:    0%  Max levels:  4
Key:  4:  Keyblocks used:  99%  Packed:   60%  Max levels:  3
Key:  5:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
Key:  6:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
Key:  7:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
Key:  8:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
Key:  9:  Keyblocks used:  98%  Packed:    0%  Max levels:  4
Total:    Keyblocks used:  98%  Packed:   17%

Records:          1403698    M.recordlength:     226
Packed:             0%
Recordspace used:     100%   Empty space:          0%
Blocks/Record:   1.00
Record blocks:    1403698    Delete blocks:        0
Recorddata:     317235748    Deleted data:         0
Lost space:             0    Linkdata:             0

User time 1626.51, System time 232.36
Maximum resident set size 0, Integral resident set size 0
Non physical pagefaults 0, Physical pagefaults 627, Swaps 0
Blocks in 0 out 0, Messages in 0 out 0, Signals 0
Voluntary context switches 639, Involuntary context switches 28966
</pre>

<p>Example of <code>myisamchk -eiv</code> output:</p>

<pre>
Checking MyISAM file: company
Data records: 1403698   Deleted blocks:       0
- check file-size
- check delete-chain
block_size 1024:
index  1:
index  2:
index  3:
index  4:
index  5:
index  6:
index  7:
index  8:
index  9:
No recordlinks
- check index reference
- check data record references index: 1
Key:  1:  Keyblocks used:  97%  Packed:    0%  Max levels:  4
- check data record references index: 2
Key:  2:  Keyblocks used:  98%  Packed:   50%  Max levels:  4
- check data record references index: 3
Key:  3:  Keyblocks used:  97%  Packed:    0%  Max levels:  4
- check data record references index: 4
Key:  4:  Keyblocks used:  99%  Packed:   60%  Max levels:  3
- check data record references index: 5
Key:  5:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
- check data record references index: 6
Key:  6:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
- check data record references index: 7
Key:  7:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
- check data record references index: 8
Key:  8:  Keyblocks used:  99%  Packed:    0%  Max levels:  3
- check data record references index: 9
Key:  9:  Keyblocks used:  98%  Packed:    0%  Max levels:  4
Total:    Keyblocks used:   9%  Packed:   17%

- check records and index references
[LOTS OF ROW NUMBERS DELETED]

Records:          1403698    M.recordlength:     226   Packed:             0%
Recordspace used:     100%   Empty space:          0%  Blocks/Record:   1.00
Record blocks:    1403698    Delete blocks:        0
Recorddata:     317235748    Deleted data:         0
Lost space:             0    Linkdata:             0

User time 1639.63, System time 251.61
Maximum resident set size 0, Integral resident set size 0
Non physical pagefaults 0, Physical pagefaults 10580, Swaps 0
Blocks in 4 out 0, Messages in 0 out 0, Signals 0
Voluntary context switches 10604, Involuntary context switches 122798
</pre>

<p>Here are the sizes of the data and index files for the table
used in the preceding examples:</p>

<pre>
-rw-rw-r--   1 monty    tcx     317235748 Jan 12 17:30 company.MYD
-rw-rw-r--   1 davida   tcx      96482304 Jan 12 18:35 company.MYM
</pre>

<p>Explanations for the types of information <code>myisamchk</code>
produces are given here. The ``keyfile'' is the index file.
``Record'' and ``row'' are synonymous:</p>

<ul>
<li>ISAM file Name of the ISAM (index) file.</li>

<li>Isam-version Version of ISAM format. Currently always 2.</li>

<li>Creation time When the datafile was created.</li>

<li>Recover time When the index/datafile was last
reconstructed.</li>

<li>Data records How many records are in the table.</li>

<li>Deleted blocks How many deleted blocks still have reserved
space. You can optimise your table to minimise this space. See
section <a href="manual.html#Optimisation">4.4.6.10 Table
Optimisation</a>.</li>

<li>Data file: Parts For dynamic record format, this indicates how
many data blocks there are. For an optimised table without
fragmented records, this is the same as <code>Data
records</code>.</li>

<li>Deleted data How many bytes of non-reclaimed deleted data there
are. You can optimise your table to minimise this space. See
section <a href="manual.html#Optimisation">4.4.6.10 Table
Optimisation</a>.</li>

<li>Data file pointer The size of the datafile pointer, in bytes.
It is usually 2, 3, 4, or 5 bytes. Most tables manage with 2 bytes,
but this cannot be controlled from MySQL yet. For fixed tables,
this is a record address. For dynamic tables, this is a byte
address.</li>

<li>Keyfile pointer The size of the index file pointer, in bytes.
It is usually 1, 2, or 3 bytes. Most tables manage with 2 bytes,
but this is calculated automatically by MySQL. It is always a block
address.</li>

<li>Max datafile length How long the table's datafile
(<tt>`.MYD'</tt> file) can become, in bytes.</li>

<li>Max keyfile length How long the table's key file
(<tt>`.MYI'</tt> file) can become, in bytes.</li>

<li>Recordlength How much space each record takes, in bytes.</li>

<li>Record format The format used to store table rows. The examples
shown above use <code>Fixed length</code>. Other possible values
are <code>Compressed</code> and <code>Packed</code>.</li>

<li>table description A list of all keys in the table. For each
key, some low-level information is presented: 

<ul>
<li>Key This key's number.</li>

<li>Start Where in the record this index part starts.</li>

<li>Len How long this index part is. For packed numbers, this
should always be the full length of the column. For strings, it may
be shorter than the full length of the indexed column, because you
can index a prefix of a string column.</li>

<li>Index <code>unique</code> or <code>multip.</code> (multiple).
Indicates whether one value can exist multiple times in this
index.</li>

<li>Type What data-type this index part has. This is an ISAM
data-type with the options <code>packed</code>,
<code>stripped</code> or <code>empty</code>.</li>

<li>Root Address of the root index block.</li>

<li>Blocksize The size of each index block. By default this is
1024, but the value may be changed at compile time.</li>

<li>Rec/key This is a statistical value used by the optimiser. It
tells how many records there are per value for this key. A unique
key always has a value of 1. This may be updated after a table is
loaded (or greatly changed) with <code>myisamchk -a</code>. If this
is not updated at all, a default value of 30 is given.</li>
</ul>
</li>

<li>In the first example above, the 9th key is a multi-part key
with two parts.</li>

<li>Keyblocks used What percentage of the keyblocks are used.
Because the table used in the examples had just been reorganised
with <code>myisamchk</code>, the values are very high (very near
the theoretical maximum).</li>

<li>Packed MySQL tries to pack keys with a common suffix. This can
only be used for
<code>CHAR</code>/<code>VARCHAR</code>/<code>DECIMAL</code> keys.
For long strings like names, this can significantly reduce the
space used. In the third example above, the 4th key is 10
characters long and a 60% reduction in space is achieved.</li>

<li>Max levels How deep the B-tree for this key is. Large tables
with long keys get high values.</li>

<li>Records How many rows are in the table.</li>

<li>M.recordlength The average record length. For tables with
fixed-length records, this is the exact record length.</li>

<li>Packed MySQL strips spaces from the end of strings. The
<code>Packed</code> value indicates the percentage of savings
achieved by doing this.</li>

<li>Recordspace used What percentage of the datafile is used.</li>

<li>Empty space What percentage of the datafile is unused.</li>

<li>Blocks/Record Average number of blocks per record (that is, how
many links a fragmented record is composed of). This is always 1.0
for fixed-format tables. This value should stay as close to 1.0 as
possible. If it gets too big, you can reorganise the table with
<code>myisamchk</code>. See section <a
href="manual.html#Optimisation">4.4.6.10 Table
Optimisation</a>.</li>

<li>Recordblocks How many blocks (links) are used. For fixed
format, this is the same as the number of records.</li>

<li>Deleteblocks How many blocks (links) are deleted.</li>

<li>Recorddata How many bytes in the datafile are used.</li>

<li>Deleted data How many bytes in the datafile are deleted
(unused).</li>

<li>Lost space If a record is updated to a shorter length, some
space is lost. This is the sum of all such losses, in bytes.</li>

<li>Linkdata When the dynamic table format is used, record
fragments are linked with pointers (4 to 7 bytes each).
<code>Linkdata</code> is the sum of the amount of storage used by
all such pointers.</li>
</ul>

<p>If a table has been compressed with <code>myisampack</code>,
<code>myisamchk -d</code> prints additional information about each
table column. See section <a href="manual.html#myisampack">4.7.4
<code>myisampack</code>, The MySQL Compressed Read-only Table
Generator</a>, for an example of this information and a description
of what it means.</p>

<h2><a id="Database_Administration" name="Database_Administration"
href="manual_toc.html#Database_Administration">4.5 Database
Administration Language Reference</a></h2>

<h3><a id="OPTIMIZE_TABLE" name="OPTIMIZE_TABLE"
href="manual_toc.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE
TABLE</code> Syntax</a></h3>

<p><a id="IDX580" name="IDX580"></a></p>

<p><a id="IDX581" name="IDX581"></a> <a id="IDX582"
name="IDX582"></a></p>

<pre>
OPTIMIZE TABLE tbl_name[,tbl_name]...
</pre>

<p><code>OPTIMIZE TABLE</code> should be used if you have deleted a
large part of a table or if you have made many changes to a table
with variable-length rows (tables that have <code>VARCHAR</code>,
<code>BLOB</code>, or <code>TEXT</code> columns). Deleted records
are maintained in a linked list and subsequent <code>INSERT</code>
operations reuse old record positions. You can use <code>OPTIMIZE
TABLE</code> to reclaim the unused space and to defragment the
datafile.</p>

<p>For the moment, <code>OPTIMIZE TABLE</code> works only on
<code>MyISAM</code> and <code>BDB</code> tables. For
<code>BDB</code> tables, <code>OPTIMIZE TABLE</code> is currently
mapped to <code>ANALYZE TABLE</code>. See section <a
href="manual.html#ANALYZE_TABLE">4.5.2 <code>ANALYZE TABLE</code>
Syntax</a>.</p>

<p>You can get <code>OPTIMIZE TABLE</code> to work on other table
types by starting <code>mysqld</code> with <code>--skip-new</code>
or <code>--safe-mode</code>, but in this case <code>OPTIMIZE
TABLE</code> is just mapped to <code>ALTER TABLE</code>.</p>

<p><code>OPTIMIZE TABLE</code> works the following way:</p>

<ul>
<li>If the table has deleted or split rows, repair the table.</li>

<li>If the index pages are not sorted, sort them.</li>

<li>If the statistics are not up to date (and the repair couldn't
be done by sorting the index), update them.</li>
</ul>

<p><code>OPTIMIZE TABLE</code> for a <code>MyISAM</code> table is
equivalent to running <code>myisamchk --quick --check-only-changed
--sort-index --analyze</code> on the table.</p>

<p>Note that the table is locked during the time <code>OPTIMIZE
TABLE</code> is running!</p>

<h3><a id="ANALYZE_TABLE" name="ANALYZE_TABLE"
href="manual_toc.html#ANALYZE_TABLE">4.5.2 <code>ANALYZE
TABLE</code> Syntax</a></h3>

<p><a id="IDX583" name="IDX583"></a></p>

<pre>
ANALYZE TABLE tbl_name[,tbl_name...]
</pre>

<p>Analyse and store the key distribution for the table. During the
analysis, the table is locked with a read lock. This works on
<code>MyISAM</code> and <code>BDB</code> tables.</p>

<p>This is equivalent to running <code>myisamchk -a</code> on the
table.</p>

<p>MySQL uses the stored key distribution to decide in which order
tables should be joined when one does a join on something else than
a constant.</p>

<p>The command returns a table with the following columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Value</strong></td>
</tr>

<tr>
<td>Table</td>
<td>Table name</td>
</tr>

<tr>
<td>Op</td>
<td>Always ``analyze''</td>
</tr>

<tr>
<td>Msg_type</td>
<td>One of <code>status</code>, <code>error</code>,
<code>info</code> or <code>warning</code>.</td>
</tr>

<tr>
<td>Msg_text</td>
<td>The message.</td>
</tr>
</table>

<p>You can check the stored key distribution with the <code>SHOW
INDEX</code> command. See section <a
href="manual.html#SHOW_DATABASE_INFO">4.5.6.1 Retrieving
information about Database, Tables, Columns, and Indexes</a>.</p>

<p>If the table hasn't changed since the last <code>ANALYZE
TABLE</code> command, the table will not be analysed again.</p>

<h3><a id="FLUSH" name="FLUSH" href="manual_toc.html#FLUSH">4.5.3
<code>FLUSH</code> Syntax</a></h3>

<p><a id="IDX584" name="IDX584"></a></p>

<p><a id="IDX585" name="IDX585"></a> <a id="IDX586"
name="IDX586"></a> <a id="IDX587" name="IDX587"></a></p>

<pre>
FLUSH flush_option [,flush_option] ...
</pre>

<p>You should use the <code>FLUSH</code> command if you want to
clear some of the internal caches MySQL uses. To execute
<code>FLUSH</code>, you must have the <code>RELOAD</code>
privilege.</p>

<p><code>flush_option</code> can be any of the following:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>HOSTS</code></td>
<td>Empties the host cache tables. You should flush the host tables
if some of your hosts change IP number or if you get the error
message <code>Host ... is blocked</code>. When more than
<code>max_connect_errors</code> errors occur in a row for a given
host while connection to the MySQL server, MySQL assumes something
is wrong and blocks the host from further connection requests.
Flushing the host tables allows the host to attempt to connect
again. See section <a href="manual.html#Blocked_host">A.2.4
<code>Host '...' is blocked</code> Error</a>. You can start
<code>mysqld</code> with <code>-O
max_connect_errors=999999999</code> to avoid this error
message.</td>
</tr>

<tr>
<td><code>DES_KEY_FILE</code></td>
<td>Reloads the DES keys from the file that was specified with the
<code>--des-key-file</code> option at server startup time.</td>
</tr>

<tr>
<td><code>LOGS</code></td>
<td>Closes and reopens all log files. If you have specified the
update log file or a binary log file without an extension, the
extension number of the log file will be incremented by one
relative to the previous file. If you have used an extension in the
file name, MySQL will close and reopen the update log file. See
section <a href="manual.html#Update_log">4.9.3 The Update Log</a>.
This is the same thing as sending the <code>SIGHUP</code> signal to
the <code>mysqld</code> server.</td>
</tr>

<tr>
<td><code>PRIVILEGES</code></td>
<td>Reloads the privileges from the grant tables in the
<code>mysql</code> database.</td>
</tr>

<tr>
<td><code>QUERY CACHE</code></td>
<td>Defragment the query cache to better utilise its memory. This
command will not remove any queries from the cache, unlike
<code>RESET QUERY CACHE</code>.</td>
</tr>

<tr>
<td><code>TABLES</code></td>
<td>Closes all open tables and force all tables in use to be
closed. This also flushes the query cache.</td>
</tr>

<tr>
<td><code>[TABLE | TABLES] tbl_name [,tbl_name...]</code></td>
<td>Flushes only the given tables.</td>
</tr>

<tr>
<td><code>TABLES WITH READ LOCK</code></td>
<td>Closes all open tables and locks all tables for all databases
with a read lock until you execute <code>UNLOCK TABLES</code>. This
is very convenient way to get backups if you have a filesystem,
like Veritas, that can take snapshots in time.</td>
</tr>

<tr>
<td><code>STATUS</code></td>
<td>Resets most status variables to zero. This is something one
should only use when debugging a query.</td>
</tr>

<tr>
<td><code>USER_RESOURCES</code></td>
<td>Resets all user resources to zero. This will enable blocked
users to login again. See section <a
href="manual.html#User_resources">4.3.6 Limiting user
resources</a>.</td>
</tr>
</table>

<p>You can also access each of the commands shown above with the
<code>mysqladmin</code> utility, using the
<code>flush-hosts</code>, <code>flush-logs</code>,
<code>reload</code>, or <code>flush-tables</code> commands.</p>

<p>Take also a look at the <code>RESET</code> command used with
replication. See section <a href="manual.html#RESET">4.5.4
<code>RESET</code> Syntax</a>.</p>

<h3><a id="RESET" name="RESET" href="manual_toc.html#RESET">4.5.4
<code>RESET</code> Syntax</a></h3>

<pre>
RESET reset_option [,reset_option] ...
</pre>

<p>The <code>RESET</code> command is used to clear things. It also
acts as an stronger version of the <code>FLUSH</code> command. See
section <a href="manual.html#FLUSH">4.5.3 <code>FLUSH</code>
Syntax</a>.</p>

<p>To execute <code>RESET</code>, you must have the
<code>RELOAD</code> privilege.</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>MASTER</code></td>
<td>Deletes all binary logs listed in the index file, resetting the
binlog index file to be empty. In pre-3.23.26 versions, <code>FLUSH
MASTER</code> (Master)</td>
</tr>

<tr>
<td><code>SLAVE</code></td>
<td>Makes the slave forget its replication position in the master
logs. In pre 3.23.26 versions the command was called <code>FLUSH
SLAVE</code>(Slave)</td>
</tr>

<tr>
<td><code>QUERY CACHE</code></td>
<td>Removes all query results from the query cache.</td>
</tr>
</table>

<h3><a id="KILL" name="KILL" href="manual_toc.html#KILL">4.5.5
<code>KILL</code> Syntax</a></h3>

<p><a id="IDX588" name="IDX588"></a></p>

<p><a id="IDX589" name="IDX589"></a></p>

<pre>
KILL thread_id
</pre>

<p>Each connection to <code>mysqld</code> runs in a separate
thread. You can see which threads are running with the <code>SHOW
PROCESSLIST</code> command and kill a thread with the <code>KILL
thread_id</code> command.</p>

<p>If you have the <code>PROCESS</code> privilege, you can see all
threads. If you have the <code>SUPER</code> privilege, you can kill
all threads. Otherwise, you can only see and kill your own
threads.</p>

<p>You can also use the <code>mysqladmin processlist</code> and
<code>mysqladmin kill</code> commands to examine and kill
threads.</p>

<p>When you do a <code>KILL</code>, a thread-specific <code>kill
flag</code> is set for the thread.</p>

<p>In most cases it may take some time for the thread to die as the
kill flag is only checked at specific intervals.</p>

<ul>
<li>In <code>SELECT</code>, <code>ORDER BY</code> and <code>GROUP
BY</code> loops, the flag is checked after reading a block of rows.
If the kill flag is set the statement is aborted</li>

<li>When doing an <code>ALTER TABLE</code> the kill flag is checked
before each block of rows are read from the original table. If the
kill flag was set the command is aborted and the temporary table is
deleted.</li>

<li>When doing an <code>UPDATE TABLE</code> and <code>DELETE
TABLE</code>, the kill flag is checked after each block read and
after each updated or delete row. If the kill flag is set the
statement is aborted. Note that if you are not using transactions,
the changes will not be rolled back!</li>

<li><code>GET_LOCK()</code> will abort with <code>NULL</code>.</li>

<li>An <code>INSERT DELAYED</code> thread will quickly flush all
rows it has in memory and die.</li>

<li>If the thread is in the table lock handler (state:
<code>Locked</code>), the table lock will be quickly aborted.</li>

<li>If the thread is waiting for free disk space in a
<code>write</code> call, the write is aborted with an disk full
error message.</li>
</ul>

<h3><a id="SHOW" name="SHOW" href="manual_toc.html#SHOW">4.5.6
<code>SHOW</code> Syntax</a></h3>

<p><a id="IDX590" name="IDX590"></a> <a id="IDX591"
name="IDX591"></a> <a id="IDX592" name="IDX592"></a> <a id="IDX593"
name="IDX593"></a> <a id="IDX594" name="IDX594"></a> <a id="IDX595"
name="IDX595"></a> <a id="IDX596" name="IDX596"></a> <a id="IDX597"
name="IDX597"></a> <a id="IDX598" name="IDX598"></a> <a id="IDX599"
name="IDX599"></a> <a id="IDX600" name="IDX600"></a> <a id="IDX601"
name="IDX601"></a> <a id="IDX602" name="IDX602"></a> <a id="IDX603"
name="IDX603"></a> <a id="IDX604" name="IDX604"></a> <a id="IDX605"
name="IDX605"></a> <a id="IDX606" name="IDX606"></a></p>

<pre>
   SHOW DATABASES [LIKE wild]
or SHOW [OPEN] TABLES [FROM db_name] [LIKE wild]
or SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [LIKE wild]
or SHOW INDEX FROM tbl_name [FROM db_name]
or SHOW TABLE STATUS [FROM db_name] [LIKE wild]
or SHOW STATUS [LIKE wild]
or SHOW VARIABLES [LIKE wild]
or SHOW LOGS
or SHOW [FULL] PROCESSLIST
or SHOW GRANTS FOR user
or SHOW CREATE TABLE table_name
or SHOW MASTER STATUS
or SHOW MASTER LOGS
or SHOW SLAVE STATUS
or SHOW WARNINGS [LIMIT #]
or SHOW ERRORS [LIMIT #]
</pre>

<p><code>SHOW</code> provides information about databases, tables,
columns, or status information about the server. If the <code>LIKE
wild</code> part is used, the <code>wild</code> string can be a
string that uses the SQL <samp>`%'</samp> and <samp>`_'</samp>
wildcard characters.</p>

<h4><a id="SHOW_DATABASE_INFO" name="SHOW_DATABASE_INFO"
href="manual_toc.html#SHOW_DATABASE_INFO">4.5.6.1 Retrieving
information about Database, Tables, Columns, and Indexes</a></h4>

<p><a id="IDX607" name="IDX607"></a></p>

<p>You can use <code>db_name.tbl_name</code> as an alternative to
the <code>tbl_name FROM db_name</code> syntax. These two statements
are equivalent:</p>

<pre>
mysql&gt; SHOW INDEX FROM mytable FROM mydb;
mysql&gt; SHOW INDEX FROM mydb.mytable;
</pre>

<p><code>SHOW DATABASES</code> lists the databases on the MySQL
server host. You can also get this list using the
<code>mysqlshow</code> command line tool. In version 4.0.2 you will
only see those databases for which you have some kind of privilege,
if you don't have the global <code>SHOW DATABASES</code>
privilege.</p>

<p><code>SHOW TABLES</code> lists the tables in a given database.
You can also get this list using the <code>mysqlshow db_name</code>
command.</p>

<p><strong>Note</strong>: if a user doesn't have any privileges for
a table, the table will not show up in the output from <code>SHOW
TABLES</code> or <code>mysqlshow db_name</code>.</p>

<p><code>SHOW OPEN TABLES</code> lists the tables that are
currently open in the table cache. See section <a
href="manual.html#Table_cache">5.4.7 How MySQL Opens and Closes
Tables</a>. The <code>Comment</code> field tells how many times the
table is <code>cached</code> and <code>in_use</code>.</p>

<p><code>SHOW COLUMNS</code> lists the columns in a given table. If
you specify the <code>FULL</code> option, you will also get the
privileges you have for each column. If the column types are
different from what you expect them to be based on a <code>CREATE
TABLE</code> statement, note that MySQL sometimes changes column
types. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>.</p>

<p>The <code>DESCRIBE</code> statement provides information similar
to <code>SHOW COLUMNS</code>. See section <a
href="manual.html#DESCRIBE">6.6.2 <code>DESCRIBE</code> Syntax (Get
Information About Columns)</a>.</p>

<p><code>SHOW FIELDS</code> is a synonym for <code>SHOW
COLUMNS</code>, and <code>SHOW KEYS</code> is a synonym for
<code>SHOW INDEX</code>. You can also list a table's columns or
indexes with <code>mysqlshow db_name tbl_name</code> or
<code>mysqlshow -k db_name tbl_name</code>.</p>

<p><code>SHOW INDEX</code> returns the index information in a
format that closely resembles the <code>SQLStatistics</code> call
in ODBC. The following columns are returned:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>Table</code></td>
<td>Name of the table.</td>
</tr>

<tr>
<td><code>Non_unique</code></td>
<td>0 if the index can't contain duplicates.</td>
</tr>

<tr>
<td><code>Key_name</code></td>
<td>Name of the index.</td>
</tr>

<tr>
<td><code>Seq_in_index</code></td>
<td>Column sequence number in index, starting with 1.</td>
</tr>

<tr>
<td><code>Column_name</code></td>
<td>Column name.</td>
</tr>

<tr>
<td><code>Collation</code></td>
<td>How the column is sorted in the index. In MySQL, this can have
values <samp>`A'</samp> (Ascending) or <code>NULL</code> (Not
sorted).</td>
</tr>

<tr>
<td><code>Cardinality</code></td>
<td>Number of unique values in the index. This is updated by
running <code>isamchk -a</code>.</td>
</tr>

<tr>
<td><code>Sub_part</code></td>
<td>Number of indexed characters if the column is only partly
indexed. <code>NULL</code> if the entire key is indexed.</td>
</tr>

<tr>
<td><code>Null</code></td>
<td>Contains 'YES' if the column may contain
<code>NULL</code>.</td>
</tr>

<tr>
<td><code>Index_type</code></td>
<td>Index method used.</td>
</tr>

<tr>
<td><code>Comment</code></td>
<td>Various remarks. For now, it tells in MySQL &lt; 4.0.2 whether
index is <code>FULLTEXT</code> or not.</td>
</tr>
</table>

<p>Note that as the <code>Cardinality</code> is counted based on
statistics stored as integers, it's not necessarily accurate for
small tables.</p>

<p>The <code>Null</code> and <code>Index_type</code> columns were
added in MySQL 4.0.2.</p>

<h4><a id="SHOW_TABLE_STATUS" name="SHOW_TABLE_STATUS"
href="manual_toc.html#SHOW_TABLE_STATUS">4.5.6.2 <code>SHOW TABLE
STATUS</code></a></h4>

<p><a id="IDX608" name="IDX608"></a> <a id="IDX609"
name="IDX609"></a> <a id="IDX610" name="IDX610"></a></p>

<pre>
SHOW TABLE STATUS [FROM db_name] [LIKE wild]
</pre>

<p><code>SHOW TABLE STATUS</code> (new in Version 3.23) works likes
<code>SHOW STATUS</code>, but provides a lot of information about
each table. You can also get this list using the <code>mysqlshow
--status db_name</code> command. The following columns are
returned:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>Name</code></td>
<td>Name of the table.</td>
</tr>

<tr>
<td><code>Type</code></td>
<td>Type of table. See section <a href="manual.html#Table_types">7
MySQL Table Types</a>.</td>
</tr>

<tr>
<td><code>Row_format</code></td>
<td>The row storage format (Fixed, Dynamic, or Compressed).</td>
</tr>

<tr>
<td><code>Rows</code></td>
<td>Number of rows.</td>
</tr>

<tr>
<td><code>Avg_row_length</code></td>
<td>Average row length.</td>
</tr>

<tr>
<td><code>Data_length</code></td>
<td>Length of the datafile.</td>
</tr>

<tr>
<td><code>Max_data_length</code></td>
<td>Max length of the datafile.</td>
</tr>

<tr>
<td><code>Index_length</code></td>
<td>Length of the index file.</td>
</tr>

<tr>
<td><code>Data_free</code></td>
<td>Number of allocated but not used bytes.</td>
</tr>

<tr>
<td><code>Auto_increment</code></td>
<td>Next autoincrement value.</td>
</tr>

<tr>
<td><code>Create_time</code></td>
<td>When the table was created.</td>
</tr>

<tr>
<td><code>Update_time</code></td>
<td>When the datafile was last updated.</td>
</tr>

<tr>
<td><code>Check_time</code></td>
<td>When the table was last checked.</td>
</tr>

<tr>
<td><code>Create_options</code></td>
<td>Extra options used with <code>CREATE TABLE</code>.</td>
</tr>

<tr>
<td><code>Comment</code></td>
<td>The comment used when creating the table (or some information
why MySQL couldn't access the table information).</td>
</tr>
</table>

<p><code>InnoDB</code> tables will report the free space in the
tablespace in the table comment.</p>

<h4><a id="SHOW_STATUS" name="SHOW_STATUS"
href="manual_toc.html#SHOW_STATUS">4.5.6.3 <code>SHOW
STATUS</code></a></h4>

<p><a id="IDX611" name="IDX611"></a> <code>SHOW STATUS</code>
provides server status information (like <code>mysqladmin
extended-status</code>). The output resembles that shown here,
though the format and numbers probably differ:</p>

<pre>
+--------------------------+------------+
| Variable_name            | Value      |
+--------------------------+------------+
| Aborted_clients          | 0          |
| Aborted_connects         | 0          |
| Bytes_received           | 155372598  |
| Bytes_sent               | 1176560426 |
| Connections              | 30023      |
| Created_tmp_disk_tables  | 0          |
| Created_tmp_tables       | 8340       |
| Created_tmp_files        | 60         |
| Delayed_insert_threads   | 0          |
| Delayed_writes           | 0          |
| Delayed_errors           | 0          |
| Flush_commands           | 1          |
| Handler_delete           | 462604     |
| Handler_read_first       | 105881     |
| Handler_read_key         | 27820558   |
| Handler_read_next        | 390681754  |
| Handler_read_prev        | 6022500    |
| Handler_read_rnd         | 30546748   |
| Handler_read_rnd_next    | 246216530  |
| Handler_update           | 16945404   |
| Handler_write            | 60356676   |
| Key_blocks_used          | 14955      |
| Key_read_requests        | 96854827   |
| Key_reads                | 162040     |
| Key_write_requests       | 7589728    |
| Key_writes               | 3813196    |
| Max_used_connections     | 0          |
| Not_flushed_key_blocks   | 0          |
| Not_flushed_delayed_rows | 0          |
| Open_tables              | 1          |
| Open_files               | 2          |
| Open_streams             | 0          |
| Opened_tables            | 44600      |
| Questions                | 2026873    |
| Select_full_join         | 0          |
| Select_full_range_join   | 0          |
| Select_range             | 99646      |
| Select_range_check       | 0          |
| Select_scan              | 30802      |
| Slave_running            | OFF        |
| Slave_open_temp_tables   | 0          |
| Slow_launch_threads      | 0          |
| Slow_queries             | 0          |
| Sort_merge_passes        | 30         |
| Sort_range               | 500        |
| Sort_rows                | 30296250   |
| Sort_scan                | 4650       |
| Table_locks_immediate    | 1920382    |
| Table_locks_waited       | 0          |
| Threads_cached           | 0          |
| Threads_created          | 30022      |
| Threads_connected        | 1          |
| Threads_running          | 1          |
| Uptime                   | 80380      |
+--------------------------+------------+
</pre>

<p><a id="IDX612" name="IDX612"></a> The status variables listed
above have the following meaning:</p>

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>Aborted_clients</code></td>
<td>Number of connections aborted because the client died without
closing the connection properly. See section <a
href="manual.html#Communication_errors">A.2.9 Communication Errors
/ Aborted Connection</a>.</td>
</tr>

<tr>
<td><code>Aborted_connects</code></td>
<td>Number of tries to connect to the MySQL server that failed. See
section <a href="manual.html#Communication_errors">A.2.9
Communication Errors / Aborted Connection</a>.</td>
</tr>

<tr>
<td><code>Bytes_received</code></td>
<td>Number of bytes received from all clients.</td>
</tr>

<tr>
<td><code>Bytes_sent</code></td>
<td>Number of bytes sent to all clients.</td>
</tr>

<tr>
<td><code>Com_xxx</code></td>
<td>Number of times each xxx command has been executed.</td>
</tr>

<tr>
<td><code>Connections</code></td>
<td>Number of connection attempts to the MySQL server.</td>
</tr>

<tr>
<td><code>Created_tmp_disk_tables</code></td>
<td>Number of implicit temporary tables on disk created while
executing statements.</td>
</tr>

<tr>
<td><code>Created_tmp_tables</code></td>
<td>Number of implicit temporary tables in memory created while
executing statements.</td>
</tr>

<tr>
<td><code>Created_tmp_files</code></td>
<td>How many temporary files <code>mysqld</code> has created.</td>
</tr>

<tr>
<td><code>Delayed_insert_threads</code></td>
<td>Number of delayed insert handler threads in use.</td>
</tr>

<tr>
<td><code>Delayed_writes</code></td>
<td>Number of rows written with <code>INSERT DELAYED</code>.</td>
</tr>

<tr>
<td><code>Delayed_errors</code></td>
<td>Number of rows written with <code>INSERT DELAYED</code> for
which some error occurred (probably <code>duplicate
key</code>).</td>
</tr>

<tr>
<td><code>Flush_commands</code></td>
<td>Number of executed <code>FLUSH</code> commands.</td>
</tr>

<tr>
<td><code>Handler_commit</code></td>
<td>Number of internal <code>COMMIT</code> commands.</td>
</tr>

<tr>
<td><code>Handler_delete</code></td>
<td>Number of times a row was deleted from a table.</td>
</tr>

<tr>
<td><code>Handler_read_first</code></td>
<td>Number of times the first entry was read from an index. If this
is high, it suggests that the server is doing a lot of full index
scans, for example, <code>SELECT col1 FROM foo</code>, assuming
that col1 is indexed.</td>
</tr>

<tr>
<td><code>Handler_read_key</code></td>
<td>Number of requests to read a row based on a key. If this is
high, it is a good indication that your queries and tables are
properly indexed.</td>
</tr>

<tr>
<td><code>Handler_read_next</code></td>
<td>Number of requests to read next row in key order. This will be
incremented if you are querying an index column with a range
constraint. This also will be incremented if you are doing an index
scan.</td>
</tr>

<tr>
<td><code>Handler_read_prev</code></td>
<td>Number of requests to read previous row in key order. This is
mainly used to optimise <code>ORDER BY ... DESC</code>.</td>
</tr>

<tr>
<td><code>Handler_read_rnd</code></td>
<td>Number of requests to read a row based on a fixed position.
This will be high if you are doing a lot of queries that require
sorting of the result.</td>
</tr>

<tr>
<td><code>Handler_read_rnd_next</code></td>
<td>Number of requests to read the next row in the datafile. This
will be high if you are doing a lot of table scans. Generally this
suggests that your tables are not properly indexed or that your
queries are not written to take advantage of the indexes you
have.</td>
</tr>

<tr>
<td><code>Handler_rollback</code></td>
<td>Number of internal <code>ROLLBACK</code> commands.</td>
</tr>

<tr>
<td><code>Handler_update</code></td>
<td>Number of requests to update a row in a table.</td>
</tr>

<tr>
<td><code>Handler_write</code></td>
<td>Number of requests to insert a row in a table.</td>
</tr>

<tr>
<td><code>Key_blocks_used</code></td>
<td>The number of used blocks in the key cache.</td>
</tr>

<tr>
<td><code>Key_read_requests</code></td>
<td>The number of requests to read a key block from the cache.</td>
</tr>

<tr>
<td><code>Key_reads</code></td>
<td>The number of physical reads of a key block from disk.</td>
</tr>

<tr>
<td><code>Key_write_requests</code></td>
<td>The number of requests to write a key block to the cache.</td>
</tr>

<tr>
<td><code>Key_writes</code></td>
<td>The number of physical writes of a key block to disk.</td>
</tr>

<tr>
<td><code>Max_used_connections</code></td>
<td>The maximum number of connections in use simultaneously.</td>
</tr>

<tr>
<td><code>Not_flushed_key_blocks</code></td>
<td>Keys blocks in the key cache that has changed but hasn't yet
been flushed to disk.</td>
</tr>

<tr>
<td><code>Not_flushed_delayed_rows</code></td>
<td>Number of rows waiting to be written in <code>INSERT
DELAY</code> queues.</td>
</tr>

<tr>
<td><code>Open_tables</code></td>
<td>Number of tables that are open.</td>
</tr>

<tr>
<td><code>Open_files</code></td>
<td>Number of files that are open.</td>
</tr>

<tr>
<td><code>Open_streams</code></td>
<td>Number of streams that are open (used mainly for logging).</td>
</tr>

<tr>
<td><code>Opened_tables</code></td>
<td>Number of tables that have been opened.</td>
</tr>

<tr>
<td><code>Rpl_status</code></td>
<td>Status of failsafe replication. (Not yet in use).</td>
</tr>

<tr>
<td><code>Select_full_join</code></td>
<td>Number of joins without keys (If this is 0, you should
carefully check the index of your tables).</td>
</tr>

<tr>
<td><code>Select_full_range_join</code></td>
<td>Number of joins where we used a range search on reference
table.</td>
</tr>

<tr>
<td><code>Select_range</code></td>
<td>Number of joins where we used ranges on the first table. (It's
normally not critical even if this is big.)</td>
</tr>

<tr>
<td><code>Select_scan</code></td>
<td>Number of joins where we did a full scan of the first
table.</td>
</tr>

<tr>
<td><code>Select_range_check</code></td>
<td>Number of joins without keys where we check for key usage after
each row (If this is 0, you should carefully check the index of
your tables).</td>
</tr>

<tr>
<td><code>Questions</code></td>
<td>Number of queries sent to the server.</td>
</tr>

<tr>
<td><code>Slave_open_temp_tables</code></td>
<td>Number of temporary tables currently open by the slave
thread</td>
</tr>

<tr>
<td><code>Slave_running</code></td>
<td>Is <code>ON</code> if this is a slave that is connected to a
master.</td>
</tr>

<tr>
<td><code>Slow_launch_threads</code></td>
<td>Number of threads that have taken more than
<code>slow_launch_time</code> to create.</td>
</tr>

<tr>
<td><code>Slow_queries</code></td>
<td>Number of queries that have taken more than
<code>long_query_time</code>. See section <a
href="manual.html#Slow_query_log">4.9.5 The Slow Query
Log</a>.</td>
</tr>

<tr>
<td><code>Sort_merge_passes</code></td>
<td>Number of merges passes the sort algoritm have had to do. If
this value is large you should consider increasing
<code>sort_buffer</code>.</td>
</tr>

<tr>
<td><code>Sort_range</code></td>
<td>Number of sorts that where done with ranges.</td>
</tr>

<tr>
<td><code>Sort_rows</code></td>
<td>Number of sorted rows.</td>
</tr>

<tr>
<td><code>Sort_scan</code></td>
<td>Number of sorts that where done by scanning the table.</td>
</tr>

<tr>
<td><code>ssl_xxx</code></td>
<td>Variables used by SSL; Not yet implemented.</td>
</tr>

<tr>
<td><code>Table_locks_immediate</code></td>
<td>Number of times a table lock was acquired immediately.
Available after 3.23.33.</td>
</tr>

<tr>
<td><code>Table_locks_waited</code></td>
<td>Number of times a table lock could not be acquired immediately
and a wait was needed. If this is high, and you have performance
problems, you should first optimise your queries, and then either
split your table(s) or use replication. Available after
3.23.33.</td>
</tr>

<tr>
<td><code>Threads_cached</code></td>
<td>Number of threads in the thread cache.</td>
</tr>

<tr>
<td><code>Threads_connected</code></td>
<td>Number of currently open connections.</td>
</tr>

<tr>
<td><code>Threads_created</code></td>
<td>Number of threads created to handle connections.</td>
</tr>

<tr>
<td><code>Threads_running</code></td>
<td>Number of threads that are not sleeping.</td>
</tr>

<tr>
<td><code>Uptime</code></td>
<td>How many seconds the server has been up.</td>
</tr>
</table>

<p>Some comments about the above:</p>

<ul>
<li>If <code>Opened_tables</code> is big, then your
<code>table_cache</code> variable is probably too small.</li>

<li>If <code>Key_reads</code> is big, then your
<code>key_buffer_size</code> variable is probably too small. The
<strong>cache miss rate</strong> can be calculated with
<code>Key_reads</code>/<code>Key_read_requests</code>.</li>

<li>If <code>Handler_read_rnd</code> is big, then you probably have
a lot of queries that require MySQL to scan whole tables or you
have joins that don't use keys properly.</li>

<li>If <code>Threads_created</code> is big, you may want to
increase the <code>thread_cache_size</code> variable. The cache hit
rate can be calculated with
<code>Threads_created</code>/<code>Connections</code>.</li>

<li>If <code>Created_tmp_disk_tables</code> is big, you may want to
increase the <code>tmp_table_size</code> variable to get the
temporary tables memory-based instead of disk based.</li>
</ul>

<h4><a id="SHOW_VARIABLES" name="SHOW_VARIABLES"
href="manual_toc.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a></h4>

<pre>
SHOW [GLOBAL | SESSION] VARIABLES [LIKE wild]
</pre>

<p><code>SHOW VARIABLES</code> shows the values of some MySQL
system variables. You can also get this information using the
<code>mysqladmin variables</code> command. If the default values
are unsuitable, you can set most of these variables using
command-line options when <code>mysqld</code> starts up. See
section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>.</p>

<p>The options <code>GLOBAL</code> and <code>SESSION</code> are new
in MySQL 4.0.3. With <code>GLOBAL</code> you will get the variables
that will be used for new connections to MySQL. With
<code>SESSION</code> you will get the values that are in effect for
the current connection. If you are not using either option,
<code>SESSION</code> is used.</p>

<p>You can change most options with the <code>SET</code> command.
See section <a href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<p>The output resembles that shown here, though the format and
numbers may differ somewhat:</p>

<pre>
+---------------------------------+------------------------------+
| Variable_name                   | Value                        |
+---------------------------------+------------------------------|
| back_log                        | 50                           |
| basedir                         | /usr/local/mysql             |
| bdb_cache_size                  | 8388572                      |
| bdb_log_buffer_size             | 32768                        |
| bdb_home                        | /usr/local/mysql             |
| bdb_max_lock                    | 10000                        |
| bdb_logdir                      |                              |
| bdb_shared_data                 | OFF                          |
| bdb_tmpdir                      | /tmp/                        |
| bdb_version                     | Sleepycat Software: ...  |
| binlog_cache_size               | 32768                        |
| bulk_insert_buffer_size         | 8388608                      |
| character_set                   | latin1                       |
| character_sets                  | latin1 big5 czech euc_kr     |
| concurrent_insert               | ON                           |
| connect_timeout                 | 5                            |
| convert_character_set           |                              |
| datadir                         | /usr/local/mysql/data/       |
| delay_key_write                 | ON                           |
| delayed_insert_limit            | 100                          |
| delayed_insert_timeout          | 300                          |
| delayed_queue_size              | 1000                         |
| flush                           | OFF                          |
| flush_time                      | 0                            |
| ft_boolean_syntax               | + -&gt;&lt;()~*:""&amp;|               |
| ft_min_word_len                 | 4                            |
| ft_max_word_len                 | 254                          |
| ft_max_word_len_for_sort        | 20                           |
| ft_stopword_file                |                              |
| have_bdb                        | YES                          |
| have_innodb                     | YES                          |
| have_isam                       | YES                          |
| have_raid                       | NO                           |
| have_symlink                    | DISABLED                     |
| have_openssl                    | YES                          |
| have_query_cache                | YES                          |
| init_file                       |                              |
| innodb_additional_mem_pool_size | 1048576                      |
| innodb_buffer_pool_size         | 8388608                      |
| innodb_data_file_path           | ibdata1:10M:autoextend       |
| innodb_data_home_dir            |                              |
| innodb_file_io_threads          | 4                            |
| innodb_force_recovery           | 0                            |
| innodb_thread_concurrency       | 8                            |
| innodb_flush_log_at_trx_commit  | 0                            |
| innodb_fast_shutdown            | ON                           |
| innodb_flush_method             |                              |
| innodb_lock_wait_timeout        | 50                           |
| innodb_log_arch_dir             |                              |
| innodb_log_archive              | OFF                          |
| innodb_log_buffer_size          | 1048576                      |
| innodb_log_file_size            | 5242880                      |
| innodb_log_files_in_group       | 2                            |
| innodb_log_group_home_dir       | ./                           |
| innodb_mirrored_log_groups      | 1                            |
| interactive_timeout             | 28800                        |
| join_buffer_size                | 131072                       |
| key_buffer_size                 | 16773120                     |
| language                        | /usr/local/mysql/share/...   |
| large_files_support             | ON                           |
| local_infile                    | ON                           |
| locked_in_memory                | OFF                          |
| log                             | OFF                          |
| log_update                      | OFF                          |
| log_bin                         | OFF                          |
| log_slave_updates               | OFF                          |
| log_slow_queries                | OFF                          |
| log_warnings                    | OFF                          |
| long_query_time                 | 10                           |
| low_priority_updates            | OFF                          |
| lower_case_table_names          | OFF                          |
| max_allowed_packet              | 1047552                      |
| max_binlog_cache_size           | 4294967295                   |
| max_binlog_size                 | 1073741824                   |
| max_connections                 | 100                          |
| max_connect_errors              | 10                           |
| max_delayed_threads             | 20                           |
| max_heap_table_size             | 16777216                     |
| max_join_size                   | 4294967295                   |
| max_sort_length                 | 1024                         |
| max_user_connections            | 0                            |
| max_tmp_tables                  | 32                           |
| max_write_lock_count            | 4294967295                   |
| myisam_max_extra_sort_file_size | 268435456                    |
| myisam_max_sort_file_size       | 2147483647                   |
| myisam_recover_options          | force                        |
| myisam_sort_buffer_size         | 8388608                      |
| net_buffer_length               | 16384                        |
| net_read_timeout                | 30                           |
| net_retry_count                 | 10                           |
| net_write_timeout               | 60                           |
| open_files_limit                | 0                            |
| pid_file                        | /usr/local/mysql/name.pid    |
| port                            | 3306                         |
| protocol_version                | 10                           |
| read_buffer_size                | 131072                       |
| read_rnd_buffer_size            | 262144                       |
| rpl_recovery_rank               | 0                            |
| query_cache_limit               | 1048576                      |
| query_cache_size                | 0                            |
| query_cache_type                | ON                           |
| safe_show_database              | OFF                          |
| server_id                       | 0                            |
| slave_net_timeout               | 3600                         |
| skip_external_locking           | ON                           |
| skip_networking                 | OFF                          |
| skip_show_database              | OFF                          |
| slow_launch_time                | 2                            |
| socket                          | /tmp/mysql.sock              |
| sort_buffer_size                | 2097116                      |
| sql_mode                        | 0                            |
| table_cache                     | 64                           |
| table_type                      | MYISAM                       |
| thread_cache_size               | 3                            |
| thread_stack                    | 131072                       |
| tx_isolation                    | READ-COMMITTED               |
| timezone                        | EEST                         |
| tmp_table_size                  | 33554432                     |
| tmpdir                          | /tmp/                        |
| version                         | 4.0.4-beta                   |
| wait_timeout                    | 28800                        |
+---------------------------------+------------------------------+
</pre>

<p>Each option is described here. Values for buffer sizes, lengths,
and stack sizes are given in bytes. You can specify values with a
suffix of <samp>`K'</samp> or <samp>`M'</samp> to indicate
kilobytes or megabytes. For example, <code>16M</code> indicates 16
megabytes. The case of suffix letters does not matter;
<code>16M</code> and <code>16m</code> are equivalent:</p>

<p><a id="IDX613" name="IDX613"></a></p>

<ul>
<li><code>ansi_mode</code>. Is <code>ON</code> if
<code>mysqld</code> was started with <code>--ansi</code>. See
section <a href="manual.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a>.</li>

<li><code>back_log</code> The number of outstanding connection
requests MySQL can have. This comes into play when the main MySQL
thread gets <strong>very</strong> many connection requests in a
very short time. It then takes some time (although very little) for
the main thread to check the connection and start a new thread. The
<code>back_log</code> value indicates how many requests can be
stacked during this short time before MySQL momentarily stops
answering new requests. You need to increase this only if you
expect a large number of connections in a short period of time. In
other words, this value is the size of the listen queue for
incoming TCP/IP connections. Your operating system has its own
limit on the size of this queue. The manual page for the Unix
<code>listen(2)</code> system call should have more details. Check
your OS documentation for the maximum value for this variable.
Attempting to set <code>back_log</code> higher than your operating
system limit will be ineffective.</li>

<li><code>basedir</code> The value of the <code>--basedir</code>
option.</li>

<li><code>bdb_cache_size</code> The buffer that is allocated to
cache index and rows for <code>BDB</code> tables. If you don't use
<code>BDB</code> tables, you should start <code>mysqld</code> with
<code>--skip-bdb</code> to not waste memory for this cache.</li>

<li><code>bdb_log_buffer_size</code> The buffer that is allocated
to cache index and rows for <code>BDB</code> tables. If you don't
use <code>BDB</code> tables, you should set this to 0 or start
<code>mysqld</code> with <code>--skip-bdb</code> to not waste
memory for this cache.</li>

<li><code>bdb_home</code> The value of the <code>--bdb-home</code>
option.</li>

<li><code>bdb_max_lock</code> The maximum number of locks (10,000
by default) you can have active on a BDB table. You should increase
this if you get errors of type <code>bdb: Lock table is out of
available locks</code> or <code>Got error 12 from ...</code> when
you have do long transactions or when <code>mysqld</code> has to
examine a lot of rows to calculate the query.</li>

<li><code>bdb_logdir</code> The value of the
<code>--bdb-logdir</code> option.</li>

<li><code>bdb_shared_data</code> Is <code>ON</code> if you are
using <code>--bdb-shared-data</code>.</li>

<li><code>bdb_tmpdir</code> The value of the
<code>--bdb-tmpdir</code> option.</li>

<li><code>binlog_cache_size</code>. The size of the cache to hold
the SQL statements for the binary log during a transaction. If you
often use big, multi-statement transactions you can increase this
to get more performance. See section <a
href="manual.html#COMMIT">6.7.1 <code>BEGIN/COMMIT/ROLLBACK</code>
Syntax</a>.</li>

<li><code>bulk_insert_buffer_size</code> (was
<code>myisam_bulk_insert_tree_size</code>) MyISAM uses special
tree-like cache to make bulk inserts (that is, <code>INSERT ...
SELECT</code>, <code>INSERT ... VALUES (...), (...), ...</code>,
and <code>LOAD DATA INFILE</code>) faster. This variable limits the
size of the cache tree in bytes per thread. Setting it to 0 will
disable this optimisation. <strong>Note</strong>: this cache is
only used when adding data to non-empty table. Default value is 8
MB.</li>

<li><code>character_set</code> The default character set.</li>

<li><code>character_sets</code> The supported character sets.</li>

<li><code>concurrent_inserts</code> If <code>ON</code> (the
default), MySQL will allow you to use <code>INSERT</code> on
<code>MyISAM</code> tables at the same time as you run
<code>SELECT</code> queries on them. You can turn this option off
by starting <code>mysqld</code> with <code>--safe</code> or
<code>--skip-new</code>. <a id="IDX614" name="IDX614"></a></li>

<li><code>connect_timeout</code> The number of seconds the
<code>mysqld</code> server is waiting for a connect packet before
responding with <code>Bad handshake</code>.</li>

<li><code>datadir</code> The value of the <code>--datadir</code>
option.</li>

<li><code>delay_key_write</code> Option for MyISAM tables. Can have
one of the following values: 

<table border="1" width="100%">
<tr>
<td>OFF</td>
<td>All CREATE TABLE ... DELAYED_KEY_WRITES are ignored.</td>
</tr>

<tr>
<td>ON</td>
<td>(default) MySQL will honor the <code>DELAY_KEY_WRITE</code>
option for <code>CREATE TABLE</code>.</td>
</tr>

<tr>
<td>ALL</td>
<td>All new opened tables are treated as if they were created with
the <code>DELAY_KEY_WRITE</code> option.</td>
</tr>
</table>

If <code>DELAY_KEY_WRITE</code> is enabled this means that the key
buffer for tables with this option will not get flushed on every
index update, but only when a table is closed. This will speed up
writes on keys a lot, but you should add automatic checking of all
tables with <code>myisamchk --fast --force</code> if you use
this.</li>

<li><code>delayed_insert_limit</code> After inserting
<code>delayed_insert_limit</code> rows, the <code>INSERT
DELAYED</code> handler will check if there are any
<code>SELECT</code> statements pending. If so, it allows these to
execute before continuing.</li>

<li><code>delayed_insert_timeout</code> How long a <code>INSERT
DELAYED</code> thread should wait for <code>INSERT</code>
statements before terminating.</li>

<li><code>delayed_queue_size</code> What size queue (in rows)
should be allocated for handling <code>INSERT DELAYED</code>. If
the queue becomes full, any client that does <code>INSERT
DELAYED</code> will wait until there is room in the queue
again.</li>

<li><code>flush</code> This is <code>ON</code> if you have started
MySQL with the <code>--flush</code> option.</li>

<li><code>flush_time</code> If this is set to a non-zero value,
then every <code>flush_time</code> seconds all tables will be
closed (to free up resources and sync things to disk). We only
recommend this option on Windows 9x/Me, or on systems where you
have very little resources.</li>

<li><code>ft_boolean_syntax</code> List of operators supported by
<code>MATCH ... AGAINST(... IN BOOLEAN MODE)</code>. See section <a
href="manual.html#Fulltext_Search">6.8 MySQL Full-text
Search</a>.</li>

<li><code>ft_min_word_len</code> The minimum length of the word to
be included in a <code>FULLTEXT</code> index. <strong>Note:
<code>FULLTEXT</code> indexes must be rebuilt after changing this
variable.</strong> (This option is new for MySQL 4.0.)</li>

<li><code>ft_max_word_len</code> The maximum length of the word to
be included in a <code>FULLTEXT</code> index. <strong>Note:
<code>FULLTEXT</code> indexes must be rebuilt after changing this
variable.</strong> (This option is new for MySQL 4.0.)</li>

<li><code>ft_max_word_len_for_sort</code> The maximum length of the
word in a <code>FULLTEXT</code> index to be used in fast index
recreation method in <code>REPAIR</code>, <code>CREATE
INDEX</code>, or <code>ALTER TABLE</code>. Longer words are
inserted the slow way. The rule of the thumb is as follows: with
<code>ft_max_word_len_for_sort</code> increasing,
<strong>MySQL</strong> will create bigger temporary files (thus
slowing the process down, due to disk I/O), and will put fewer keys
in one sort block (again, decreasing the efficiency). When
<code>ft_max_word_len_for_sort</code> is too small, instead,
<strong>MySQL</strong> will insert a lot of words into index the
slow way, but short words will be inserted very quickly.</li>

<li><code>ft_stopword_file</code> The file to read the list of
stopwords for fulltext search from. All the words from the file
will be used, comments are <strong>not</strong> honored. By
default, built-in list of stopwords is used (as defined in
<tt>`myisam/ft_static.c'</tt>). Setting this parameter to an empty
string (<code>""</code>) will disable stopword filtering.
<strong>Note: <code>FULLTEXT</code> indexes must be rebuilt after
changing this variable.</strong> (This option is new for MySQL
4.0.10)</li>

<li><code>have_innodb</code> <code>YES</code> if
<code>mysqld</code> supports InnoDB tables. <code>DISABLED</code>
if <code>--skip-innodb</code> is used.</li>

<li><code>have_bdb</code> <code>YES</code> if <code>mysqld</code>
supports Berkeley DB tables. <code>DISABLED</code> if
<code>--skip-bdb</code> is used.</li>

<li><code>have_raid</code> <code>YES</code> if <code>mysqld</code>
supports the <code>RAID</code> option.</li>

<li><code>have_openssl</code> <code>YES</code> if
<code>mysqld</code> supports SSL (encryption) on the client/server
protocol.</li>

<li><code>init_file</code> The name of the file specified with the
<code>--init-file</code> option when you start the server. This is
a file of SQL statements you want the server to execute when it
starts.</li>

<li><code>interactive_timeout</code> The number of seconds the
server waits for activity on an interactive connection before
closing it. An interactive client is defined as a client that uses
the <code>CLIENT_INTERACTIVE</code> option to
<code>mysql_real_connect()</code>. See also
<code>wait_timeout</code>.</li>

<li><code>join_buffer_size</code> The size of the buffer that is
used for full joins (joins that do not use indexes). The buffer is
allocated one time for each full join between two tables. Increase
this value to get a faster full join when adding indexes is not
possible. (Normally the best way to get fast joins is to add
indexes.) <a id="IDX615" name="IDX615"></a></li>

<li><code>key_buffer_size</code> Index blocks are buffered and are
shared by all threads. <code>key_buffer_size</code> is the size of
the buffer used for index blocks. Increase this to get better index
handling (for all reads and multiple writes) to as much as you can
afford; 64M on a 256M machine that mainly runs MySQL is quite
common. If you, however, make this too big (for instance more than
50% of your total memory) your system may start to page and become
extremely slow. Remember that because MySQL does not cache data
reads, you will have to leave some room for the OS filesystem
cache. You can check the performance of the key buffer by doing
<code>SHOW STATUS</code> and examine the variables
<code>Key_read_requests</code>, <code>Key_reads</code>,
<code>Key_write_requests</code>, and <code>Key_writes</code>. The
<code>Key_reads/Key_read_request</code> ratio should normally be
&lt; 0.01. The <code>Key_write/Key_write_requests</code> is usually
near 1 if you are using mostly updates/deletes but may be much
smaller if you tend to do updates that affect many at the same time
or if you are using <code>DELAY_KEY_WRITE</code>. See section <a
href="manual.html#SHOW">4.5.6 <code>SHOW</code> Syntax</a>. To get
even more speed when writing many rows at the same time, use
<code>LOCK TABLES</code>. See section <a
href="manual.html#LOCK_TABLES">6.7.2 <code>LOCK TABLES/UNLOCK
TABLES</code> Syntax</a>.</li>

<li><code>language</code> The language used for error
messages.</li>

<li><code>large_file_support</code> If <code>mysqld</code> was
compiled with options for big file support.</li>

<li><code>locked_in_memory</code> If <code>mysqld</code> was locked
in memory with <code>--memlock</code></li>

<li><code>log</code> If logging of all queries is enabled.</li>

<li><code>log_update</code> If the update log is enabled.</li>

<li><code>log_bin</code> If the binary log is enabled.</li>

<li><code>log_slave_updates</code> If the updates from the slave
should be logged.</li>

<li><code>long_query_time</code> If a query takes longer than this
(in seconds), the <code>Slow_queries</code> counter will be
incremented. If you are using <code>--log-slow-queries</code>, the
query will be logged to the slow query logfile. This value is
measured in real time, not CPU time, so a query that may be under
the threshold on a lightly loaded system may be above the threshold
on a heavily loaded one. See section <a
href="manual.html#Slow_query_log">4.9.5 The Slow Query
Log</a>.</li>

<li><code>lower_case_table_names</code> If set to 1 table names are
stored in lowercase on disk and table name comparisons will be
case-insensitive. From version 4.0.2, this option also applies to
database names. See section <a
href="manual.html#Name_case_sensitivity">6.1.3 Case Sensitivity in
Names</a>.</li>

<li><code>max_allowed_packet</code> The maximum size of one packet.
The message buffer is initialised to <code>net_buffer_length</code>
bytes, but can grow up to <code>max_allowed_packet</code> bytes
when needed. This value by default is small, to catch big (possibly
wrong) packets. You must increase this value if you are using big
<code>BLOB</code> columns. It should be as big as the biggest
<code>BLOB</code> you want to use. The protocol limits for
<code>max_allowed_packet</code> is 16M in MySQL 3.23 and 1G in
MySQL 4.0.</li>

<li><code>max_binlog_cache_size</code> If a multi-statement
transaction requires more than this amount of memory, one will get
the error "Multi-statement transaction required more than
'max_binlog_cache_size' bytes of storage".</li>

<li><code>max_binlog_size</code> Available after 3.23.33. If a
write to the binary (replication) log exceeds the given value,
rotate the logs. You cannot set it to less than 1024 bytes, or more
than 1 GB. Default is 1 GB.</li>

<li><code>max_connections</code> The number of simultaneous clients
allowed. Increasing this value increases the number of file
descriptors that <code>mysqld</code> requires. See below for
comments on file descriptor limits. See section <a
href="manual.html#Too_many_connections">A.2.5 <code>Too many
connections</code> Error</a>.</li>

<li><code>max_connect_errors</code> If there is more than this
number of interrupted connections from a host this host will be
blocked from further connections. You can unblock a host with the
command <code>FLUSH HOSTS</code>.</li>

<li><code>max_delayed_threads</code> Don't start more than this
number of threads to handle <code>INSERT DELAYED</code> statements.
If you try to insert data into a new table after all <code>INSERT
DELAYED</code> threads are in use, the row will be inserted as if
the <code>DELAYED</code> attribute wasn't specified.</li>

<li><code>max_heap_table_size</code> Don't allow creation of heap
tables bigger than this.</li>

<li><code>max_join_size</code> Joins that are probably going to
read more than <code>max_join_size</code> records return an error.
Set this value if your users tend to perform joins that lack a
<code>WHERE</code> clause, that take a long time, and that return
millions of rows.</li>

<li><code>max_sort_length</code> The number of bytes to use when
sorting <code>BLOB</code> or <code>TEXT</code> values (only the
first <code>max_sort_length</code> bytes of each value are used;
the rest are ignored).</li>

<li><code>max_user_connections</code> The maximum number of active
connections for a single user (0 = no limit).</li>

<li><code>max_tmp_tables</code> (This option doesn't yet do
anything.) Maximum number of temporary tables a client can keep
open at the same time.</li>

<li><code>max_write_lock_count</code> After this many write locks,
allow some read locks to run in between.</li>

<li><code>myisam_recover_options</code> The value of the
<code>--myisam-recover</code> option.</li>

<li><code>myisam_sort_buffer_size</code> The buffer that is
allocated when sorting the index when doing a <code>REPAIR</code>
or when creating indexes with <code>CREATE INDEX</code> or
<code>ALTER TABLE</code>.</li>

<li><code>myisam_max_extra_sort_file_size</code>. If the temporary
file used for fast index creation would be bigger than using the
key cache by the amount specified here, then prefer the key cache
method. This is mainly used to force long character keys in large
tables to use the slower key cache method to create the index.
<strong>Note</strong> that this parameter is given in megabytes
before 4.0.3 and in bytes starting from this version.</li>

<li><code>myisam_max_sort_file_size</code> The maximum size of the
temporary file MySQL is allowed to use while recreating the index
(during <code>REPAIR</code>, <code>ALTER TABLE</code> or <code>LOAD
DATA INFILE</code>. If the file-size would be bigger than this, the
index will be created through the key cache (which is slower).
<strong>Note</strong> that this parameter is given in megabytes
before 4.0.3 and in bytes starting from this version.</li>

<li><code>net_buffer_length</code> The communication buffer is
reset to this size between queries. This should not normally be
changed, but if you have very little memory, you can set it to the
expected size of a query. (That is, the expected length of SQL
statements sent by clients. If statements exceed this length, the
buffer is automatically enlarged, up to
<code>max_allowed_packet</code> bytes.)</li>

<li><code>net_read_timeout</code> Number of seconds to wait for
more data from a connection before aborting the read. Note that
when we don't expect data from a connection, the timeout is defined
by <code>write_timeout</code>. See also
<code>slave_net_timeout</code>.</li>

<li><code>net_retry_count</code> If a read on a communication port
is interrupted, retry this many times before giving up. This value
should be quite high on <code>FreeBSD</code> as internal interrupts
are sent to all threads.</li>

<li><code>net_write_timeout</code> Number of seconds to wait for a
block to be written to a connection before aborting the write.</li>

<li><code>open_files_limit</code> If this is not 0, then
<code>mysqld</code> will use this value to reserve file descriptors
to use with <code>setrlimit()</code>. If this value is 0 then
<code>mysqld</code> will reserve <code>max_connections*5</code> or
<code>max_connections + table_cache*2</code> (whichever is larger)
number of files. You should try increasing this if
<code>mysqld</code> gives you the error 'Too many open files'.</li>

<li><code>pid_file</code> The value of the <code>--pid-file</code>
option.</li>

<li><code>port</code> The value of the <code>--port</code>
option.</li>

<li><code>protocol_version</code> The protocol version used by the
MySQL server.</li>

<li><code>read_buffer_size</code> (was <code>record_buffer</code>)
Each thread that does a sequential scan allocates a buffer of this
size for each table it scans. If you do many sequential scans, you
may want to increase this value.</li>

<li><code>record_rnd_buffer_size</code> When reading rows in sorted
order after a sort, the rows are read through this buffer to avoid
a disk seeks. Can improve <code>ORDER BY</code> by a lot if set to
a high value. As this is a thread-specific variable, one should not
set this big globally, but just change this when running some
specific big queries.</li>

<li><code>query_cache_limit</code> Don't cache results that are
bigger than this. (Default 1M).</li>

<li><code>query_cache_size</code> The memory allocated to store
results from old queries. If this is 0, the query cache is disabled
(default).</li>

<li><code>query_cache_type</code> This may be set (only numeric) to


<table border="1" width="100%">
<tr>
<td><strong>Value</strong></td>
<td><strong>Alias</strong></td>
<td><strong>Comment</strong></td>
</tr>

<tr>
<td>0</td>
<td>OFF</td>
<td>Don't cache or retrieve results.</td>
</tr>

<tr>
<td>1</td>
<td>ON</td>
<td>Cache all results except <code>SELECT SQL_NO_CACHE ...</code>
queries.</td>
</tr>

<tr>
<td>2</td>
<td>DEMAND</td>
<td>Cache only <code>SELECT SQL_CACHE ...</code> queries.</td>
</tr>
</table>
</li>

<li><code>safe_show_database</code> Don't show databases for which
the user doesn't have any database or table privileges. This can
improve security if you're concerned about people being able to see
what databases other users have. See also
<code>skip_show_database</code>.</li>

<li><code>server_id</code> The value of the
<code>--server-id</code> option.</li>

<li><code>skip_locking</code> Is OFF if <code>mysqld</code> uses
external locking.</li>

<li><code>skip_networking</code> Is ON if we only allow local
(socket) connections.</li>

<li><code>skip_show_database</code> This prevents people from doing
<code>SHOW DATABASES</code> if they don't have the
<code>PROCESS</code> privilege. This can improve security if you're
concerned about people being able to see what databases other users
have. See also <code>safe_show_database</code>.</li>

<li><code>slave_net_timeout</code> Number of seconds to wait for
more data from a master/slave connection before aborting the
read.</li>

<li><code>slow_launch_time</code> If creating the thread takes
longer than this value (in seconds), the
<code>Slow_launch_threads</code> counter will be incremented.</li>

<li><code>socket</code> The Unix socket used by the server.</li>

<li><code>sort_buffer</code> Each thread that needs to do a sort
allocates a buffer of this size. Increase this value for faster
<code>ORDER BY</code> or <code>GROUP BY</code> operations. See
section <a href="manual.html#Temporary_files">A.4.4 Where MySQL
Stores Temporary Files</a>.</li>

<li><code>table_cache</code> The number of open tables for all
threads. Increasing this value increases the number of file
descriptors that <code>mysqld</code> requires. You can check if you
need to increase the table cache by checking the
<code>Opened_tables</code> variable. See section <a
href="manual.html#SHOW_STATUS">4.5.6.3 <code>SHOW
STATUS</code></a>. If this variable is big and you don't do
<code>FLUSH TABLES</code> a lot (which just forces all tables to be
closed and reopenend), then you should increase the value of this
variable. For more information about the table cache, see section
<a href="manual.html#Table_cache">5.4.7 How MySQL Opens and Closes
Tables</a>.</li>

<li><code>table_type</code> The default table type.</li>

<li><code>thread_cache_size</code> How many threads we should keep
in a cache for reuse. When a client disconnects, the client's
threads are put in the cache if there aren't more than
<code>thread_cache_size</code> threads from before. All new threads
are first taken from the cache, and only when the cache is empty is
a new thread created. This variable can be increased to improve
performance if you have a lot of new connections. (Normally this
doesn't give a notable performance improvement if you have a good
thread implementation.) By examing the difference between the
<code>Connections</code> and <code>Threads_created</code> status
variables (see section <a href="manual.html#SHOW_STATUS">4.5.6.3
<code>SHOW STATUS</code></a> for details) you can see how efficient
thread cache is.</li>

<li><code>thread_concurrency</code> On Solaris, <code>mysqld</code>
will call <code>thr_setconcurrency()</code> with this value.
<code>thr_setconcurrency()</code> permits the application to give
the threads system a hint for the desired number of threads that
should be run at the same time.</li>

<li><code>thread_stack</code> The stack size for each thread. Many
of the limits detected by the <code>crash-me</code> test are
dependent on this value. The default is large enough for normal
operation. See section <a href="manual.html#MySQL_Benchmarks">5.1.4
The MySQL Benchmark Suite</a>.</li>

<li><code>timezone</code> The timezone for the server.</li>

<li><code>tmp_table_size</code> If an in-memory temporary table
exceeds this size, MySQL will automatically convert it to an
on-disk <code>MyISAM</code> table. Increase the value of
<code>tmp_table_size</code> if you do many advanced <code>GROUP
BY</code> queries and you have lots of memory.</li>

<li><code>tmpdir</code> The directory used for temporary files and
temporary tables.</li>

<li><code>version</code> The version number for the server.</li>

<li><code>wait_timeout</code> The number of seconds the server
waits for activity on a not interactive connection before closing
it. On thread startup <code>SESSION.WAIT_TIMEOUT</code> is
initialised from <code>GLOBAL.WAIT_TIMEOUT</code> or
<code>GLOBAL.INTERACTIVE_TIMEOUT</code> depending on the type of
client (as defined by the <code>CLIENT_INTERACTIVE</code> connect
option). See also <code>interactive_timeout</code>.</li>
</ul>

<p>The manual section that describes tuning MySQL contains some
information of how to tune the above variables. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<h4><a id="SHOW_LOGS" name="SHOW_LOGS"
href="manual_toc.html#SHOW_LOGS">4.5.6.5 <code>SHOW
LOGS</code></a></h4>

<p><code>SHOW LOGS</code> shows you status information about
existing log files. It currently only displays information about
Berkeley DB log files.</p>

<ul>
<li><code>File</code> shows the full path to the log file</li>

<li><code>Type</code> shows the type of the log file
(<code>BDB</code> for Berkeley DB log files)</li>

<li><code>Status</code> shows the status of the log file
(<code>FREE</code> if the file can be removed, or <code>IN
USE</code> if the file is needed by the transaction subsystem)</li>
</ul>

<h4><a id="SHOW_PROCESSLIST" name="SHOW_PROCESSLIST"
href="manual_toc.html#SHOW_PROCESSLIST">4.5.6.6 <code>SHOW
PROCESSLIST</code></a></h4>

<p><a id="IDX616" name="IDX616"></a> <a id="IDX617"
name="IDX617"></a></p>

<p><a id="IDX618" name="IDX618"></a> <a id="IDX619"
name="IDX619"></a></p>

<p><code>SHOW [FULL] PROCESSLIST</code> shows you which threads are
running. You can also get this information using the
<code>mysqladmin processlist</code> command. If you have the
<code>SUPER</code> privilege, you can see all threads. Otherwise,
you can see only your own threads. See section <a
href="manual.html#KILL">4.5.5 <code>KILL</code> Syntax</a>. If you
don't use the <code>FULL</code> option, then only the first 100
characters of each query will be shown.</p>

<p>This command is very useful if you get the 'too many
connections' error message and want to find out what's going on.
MySQL reserves one extra connection for a client with the
<code>SUPER</code> privilege to ensure that you should always be
able to login and check the system (assuming you are not giving
this privilege to all your users).</p>

<p>Some states commonly seen in <code>mysqladmin
processlist</code></p>

<ul>
<li><code>Checking table</code> The thread is performing
[automatic] checking of the table.</li>

<li><code>Closing tables</code> Means that the thread is flushing
the changed table data to disk and closing the used tables. This
should be a fast operation. If not, then you should check that you
don't have a full disk or that the disk is not in very heavy
use.</li>

<li><code>Connect Out</code> Slave connecting to master.</li>

<li><code>Copying to tmp table on disk</code> The temporary result
set was larger than <code>tmp_table_size</code> and the thread is
now changing the in memory-based temporary table to a disk based
one to save memory.</li>

<li><code>Creating tmp table</code> The thread is creating a
temporary table to hold a part of the result for the query.</li>

<li><code>deleting from main table</code> When executing the first
part of a multi-table delete and we are only deleting from the
first table.</li>

<li><code>deleting from reference tables</code> When executing the
second part of a multi-table delete and we are deleting the matched
rows from the other tables.</li>

<li><code>Flushing tables</code> The thread is executing
<code>FLUSH TABLES</code> and is waiting for all threads to close
their tables.</li>

<li><code>Killed</code> Someone has sent a kill to the thread and
it should abort next time it checks the kill flag. The flag is
checked in each major loop in MySQL, but in some cases it may still
take a short time for the thread to die. If the thread is locked by
some other thread, the kill will take affect as soon as the other
thread releases it's lock.</li>

<li><code>Sending data</code> The thread is processing rows for a
<code>SELECT</code> statement and is also sending data to the
client.</li>

<li><code>Sorting for group</code> The thread is doing a sort to
satsify a <code>GROUP BY</code>.</li>

<li><code>Sorting for order</code> The thread is doing a sort to
satsify a <code>ORDER BY</code>.</li>

<li><code>Opening tables</code> This simply means that the thread
is trying to open a table. This is should be very fast procedure,
unless something prevents opening. For example an <code>ALTER
TABLE</code> or a <code>LOCK TABLE</code> can prevent opening a
table until the command is finished.</li>

<li><code>Removing duplicates</code> The query was using
<code>SELECT DISTINCT</code> in such a way that MySQL couldn't
optimise that distinct away at an early stage. Because of this
MySQL has to do an extra stage to remove all duplicated rows before
sending the result to the client.</li>

<li><code>Reopen table</code> The thread got a lock for the table,
but noticed after getting the lock that the underlying table
structure changed. It has freed the lock, closed the table and is
now trying to reopen it.</li>

<li><code>Repair by sorting</code> The repair code is using sorting
to create indexes.</li>

<li><code>Repair with keycache</code> The repair code is using
creating keys one by one through the key cache. This is much slower
than <code>Repair by sorting</code>.</li>

<li><code>Searching rows for update</code> The thread is doing a
first phase to find all matching rows before updating them. This
has to be done if the <code>UPDATE</code> is changing the index
that is used to find the involved rows.</li>

<li><code>Sleeping</code> The thread is wating for the client to
send a new command to it.</li>

<li><code>System lock</code> The thread is waiting for getting to
get a external system lock for the table. If you are not using
multiple mysqld servers that are accessing the same tables, you can
disable system locks with the <code>--skip-external-locking</code>
option.</li>

<li><code>Upgrading lock</code> The <code>INSERT DELAYED</code>
handler is trying to get a lock for the table to insert rows.</li>

<li><code>Updating</code> The thread is searching for rows to
update and updating them.</li>

<li><code>User Lock</code> The thread is waiting on a
<code>GET_LOCK()</code>.</li>

<li><code>Waiting for tables</code> The thread got a notification
that the underlying structure for a table has changed and it needs
to reopen the table to get the new structure. To be able to reopen
the table it must however wait until all other threads have closed
the table in question. This notification happens if another thread
has used <code>FLUSH TABLES</code> or one of the following commands
on the table in question: <code>FLUSH TABLES table_name</code>,
<code>ALTER TABLE</code>, <code>RENAME TABLE</code>, <code>REPAIR
TABLE</code>, <code>ANALYZE TABLE</code> or <code>OPTIMIZE
TABLE</code>.</li>

<li><code>waiting for handler insert</code> The <code>INSERT
DELAYED</code> handler has processed all inserts and are waiting to
get new ones.</li>
</ul>

<p>Most states are very quick operations. If threads last in any of
these states for many seconds, there may be a problem around that
needs to be investigated.</p>

<p>There are some other states that are not mentioned previously,
but most of these are only useful to find bugs in
<code>mysqld</code>.</p>

<h4><a id="SHOW_GRANTS" name="SHOW_GRANTS"
href="manual_toc.html#SHOW_GRANTS">4.5.6.7 <code>SHOW
GRANTS</code></a></h4>

<p><a id="IDX620" name="IDX620"></a></p>

<p><code>SHOW GRANTS FOR user</code> lists the grant commands that
must be issued to duplicate the grants for a user.</p>

<pre>
mysql&gt; SHOW GRANTS FOR root@localhost;
+---------------------------------------------------------------------+
| Grants for root@localhost                                           |
+---------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |
+---------------------------------------------------------------------+
</pre>

<p>To list grants for the current session one may use
<code>CURRENT_USER()</code> function (new in version 4.0.6) to find
out what user the session was authentificated as. See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</p>

<h4><a id="SHOW_CREATE_TABLE" name="SHOW_CREATE_TABLE"
href="manual_toc.html#SHOW_CREATE_TABLE">4.5.6.8 <code>SHOW CREATE
TABLE</code></a></h4>

<p>Shows a <code>CREATE TABLE</code> statement that will create the
given table:</p>

<pre>
mysql&gt; SHOW CREATE TABLE t\G
*************************** 1. row ***************************
       Table: t
Create Table: CREATE TABLE t (
  id int(11) default NULL auto_increment,
  s char(60) default NULL,
  PRIMARY KEY (id)
) TYPE=MyISAM

</pre>

<p><code>SHOW CREATE TABLE</code> will quote table and column names
according to <code>SQL_QUOTE_SHOW_CREATE</code> option. section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<h4><a id="SHOW_WARNINGS" name="SHOW_WARNINGS"
href="manual_toc.html#SHOW_WARNINGS">4.5.6.9 <code>SHOW WARNINGS |
ERRORS</code></a></h4>

<pre>
SHOW WARNINGS [LIMIT #]
SHOW ERRORS [LIMIT #]
</pre>

<p>This command is implemented in MySQL 4.1.0.</p>

<p>It shows the errors, warnings and notes that one got for the
last command. The errors/warnings are reset for each new command
that uses a table.</p>

<p>The MySQL server sends back the total number of warnings and
errors you got for the last commend; This can be retrieved by
calling <code>mysql_warning_count()</code>.</p>

<p>Up to <code>max_error_count</code> messages are stored (Global
and thread specific variable).</p>

<p>You can retrieve the number of errors from
<code>@error_count</code> and warnings from
<code>@warning_count</code>.</p>

<p><code>SHOW WARNINGS</code> shows all errors, warnings and notes
you got for the last command while <code>SHOW ERRORS</code> only
shows you the errors.</p>

<pre>
mysql&gt; DROP TABLE IF EXISTS no_such_table;
mysql&gt; SHOW WARNINGS;

+-------+------+-------------------------------+
| Level | Code | Message                       |
+-------+------+-------------------------------+
| Note  | 1051 | Unknown table 'no_such_table' |
+-------+------+-------------------------------+
</pre>

<h2><a id="Localisation" name="Localisation"
href="manual_toc.html#Localisation">4.6 MySQL Localisation and
International Usage</a></h2>

<h3><a id="Character_sets" name="Character_sets"
href="manual_toc.html#Character_sets">4.6.1 The Character Set Used
for Data and Sorting</a></h3>

<p><a id="IDX621" name="IDX621"></a> <a id="IDX622"
name="IDX622"></a> <a id="IDX623" name="IDX623"></a></p>

<p>By default, MySQL uses the ISO-8859-1 (Latin1) character set
with sorting according to Swedish/Finnish. This is the character
set suitable in the USA and western Europe.</p>

<p>All standard MySQL binaries are compiled with
<code>--with-extra-charsets=complex</code>. This will add code to
all standard programs to be able to handle <code>latin1</code> and
all multi-byte character sets within the binary. Other character
sets will be loaded from a character-set definition file when
needed.</p>

<p>The character set determines what characters are allowed in
names and how things are sorted by the <code>ORDER BY</code> and
<code>GROUP BY</code> clauses of the <code>SELECT</code>
statement.</p>

<p>You can change the character set with the
<code>--default-character-set</code> option when you start the
server. The character sets available depend on the
<code>--with-charset=charset</code> and
<code>--with-extra-charsets= list-of-charset | complex | all</code>
options to <code>configure</code>, and the character set
configuration files listed in <tt>`SHAREDIR/charsets/Index'</tt>.
See section <a href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>.</p>

<p>If you change the character set when running MySQL (which may
also change the sort order), you must run <code>myisamchk -r -q
--set-character-set=charset</code> on all tables. Otherwise, your
indexes may not be ordered correctly.</p>

<p>When a client connects to a MySQL server, the server sends the
default character set in use to the client. The client will switch
to use this character set for this connection.</p>

<p>One should use <code>mysql_real_escape_string()</code> when
escaping strings for a SQL query.
<code>mysql_real_escape_string()</code> is identical to the old
<code>mysql_escape_string()</code> function, except that it takes
the <code>MYSQL</code> connection handle as the first
parameter.</p>

<p>If the client is compiled with different paths than where the
server is installed and the user who configured MySQL didn't
include all character sets in the MySQL binary, one must specify
for the client where it can find the additional character sets it
will need if the server runs with a different character set than
the client.</p>

<p>One can specify this by putting in a MySQL option file:</p>

<pre>
[client]
character-sets-dir=/usr/local/mysql/share/mysql/charsets
</pre>

<p>where the path points to the directory in which the dynamic
MySQL character sets are stored.</p>

<p>One can force the client to use specific character set by
specifying:</p>

<pre>
[client]
default-character-set=character-set-name
</pre>

<p>but normally this is never needed.</p>

<h4><a id="German_character_set" name="German_character_set"
href="manual_toc.html#German_character_set">4.6.1.1 German
character set</a></h4>

<p>To get German sorting order, you should start
<code>mysqld</code> with
<code>--default-character-set=latin1_de</code>. This will give you
the following characteristics.</p>

<p>When sorting and comparing string's the following mapping is
done on the strings before doing the comparison:</p>

<pre>
ä  -&gt;  ae
ö  -&gt;  oe
ü  -&gt;  ue
ß  -&gt;  ss
</pre>

<p>All accented characters, are converted to their un-accented
uppercase counterpart. All letters are converted to uppercase.</p>

<p>When comparing strings with <code>LIKE</code> the one -&gt; two
character mapping is not done. All letters are converted to
uppercase. Accent are removed from all letters except:
<code>Ü</code>, <code>ü</code>, <code>Ö</code>, <code>ö</code>,
<code>Ä</code> and <code>ä</code>.</p>

<h3><a id="Languages" name="Languages"
href="manual_toc.html#Languages">4.6.2 Non-English Error
Messages</a></h3>

<p><a id="IDX624" name="IDX624"></a> <a id="IDX625"
name="IDX625"></a> <a id="IDX626" name="IDX626"></a> <a id="IDX627"
name="IDX627"></a></p>

<p><code>mysqld</code> can issue error messages in the following
languages: Czech, Danish, Dutch, English (the default), Estonian,
French, German, Greek, Hungarian, Italian, Japanese, Korean,
Norwegian, Norwegian-ny, Polish, Portuguese, Romanian, Russian,
Slovak, Spanish, and Swedish.</p>

<p>To start <code>mysqld</code> with a particular language, use
either the <code>--language=lang</code> or <code>-L lang</code>
options. For example:</p>

<pre>
shell&gt; mysqld --language=swedish
</pre>

<p>or:</p>

<pre>
shell&gt; mysqld --language=/usr/local/share/swedish
</pre>

<p>Note that all language names are specified in lowercase.</p>

<p>The language files are located (by default) in
<tt>`<var>mysql_base_dir</var>/share/<var>LANGUAGE</var>/'</tt>.</p>

<p>To update the error message file, you should edit the
<tt>`errmsg.txt'</tt> file and execute the following command to
generate the <tt>`errmsg.sys'</tt> file:</p>

<pre>
shell&gt; comp_err errmsg.txt errmsg.sys
</pre>

<p>If you upgrade to a newer version of MySQL, remember to repeat
your changes with the new <tt>`errmsg.txt'</tt> file.</p>

<h3><a id="Adding_character_set" name="Adding_character_set"
href="manual_toc.html#Adding_character_set">4.6.3 Adding a New
Character Set</a></h3>

<p><a id="IDX628" name="IDX628"></a> <a id="IDX629"
name="IDX629"></a></p>

<p>To add another character set to MySQL, use the following
procedure.</p>

<p>Decide if the set is simple or complex. If the character set
does not need to use special string collating routines for sorting
and does not need multi-byte character support, it is simple. If it
needs either of those features, it is complex.</p>

<p>For example, <code>latin1</code> and <code>danish</code> are
simple charactersets while <code>big5</code> or <code>czech</code>
are complex character sets.</p>

<p>In the following section, we have assumed that you name your
character set <code>MYSET</code>.</p>

<p>For a simple character set do the following:</p>

<ol>
<li>Add MYSET to the end of the <tt>`sql/share/charsets/Index'</tt>
file Assign a unique number to it.</li>

<li>Create the file <tt>`sql/share/charsets/MYSET.conf'</tt>. (You
can use <tt>`sql/share/charsets/latin1.conf'</tt> as a base for
this.) The syntax for the file very simple: 

<ul>
<li>Comments start with a '#' character and proceed to the end of
the line.</li>

<li>Words are separated by arbitrary amounts of whitespace.</li>

<li>When defining the character set, every word must be a number in
hexadecimal format</li>

<li>The <code>ctype</code> array takes up the first 257 words. The
<code>to_lower[]</code>, <code>to_upper[]</code> and
<code>sort_order[]</code> arrays take up 256 words each after
that.</li>
</ul>

See section <a href="manual.html#Character_arrays">4.6.4 The
Character Definition Arrays</a>.</li>

<li>Add the character set name to the
<code>CHARSETS_AVAILABLE</code> and <code>COMPILED_CHARSETS</code>
lists in <code>configure.in</code>.</li>

<li>Reconfigure, recompile, and test.</li>
</ol>

<p>For a complex character set do the following:</p>

<ol>
<li>Create the file <tt>`strings/ctype-MYSET.c'</tt> in the MySQL
source distribution.</li>

<li>Add MYSET to the end of the <tt>`sql/share/charsets/Index'</tt>
file. Assign a unique number to it.</li>

<li>Look at one of the existing <tt>`ctype-*.c'</tt> files to see
what needs to be defined, for example
<tt>`strings/ctype-big5.c'</tt>. Note that the arrays in your file
must have names like <code>ctype_MYSET</code>,
<code>to_lower_MYSET</code>, and so on. This corresponds to the
arrays in the simple character set. See section <a
href="manual.html#Character_arrays">4.6.4 The Character Definition
Arrays</a>. For a complex character set</li>

<li>Near the top of the file, place a special comment like this: 

<pre>
/*
 * This comment is parsed by configure to create ctype.c,
 * so don't change it unless you know what you are doing.
 *
 * .configure. number_MYSET=MYNUMBER
 * .configure. strxfrm_multiply_MYSET=N
 * .configure. mbmaxlen_MYSET=N
 */
</pre>

The <code>configure</code> program uses this comment to include the
character set into the MySQL library automatically. The
strxfrm_multiply and mbmaxlen lines will be explained in the
following sections. Only include these if you need the string
collating functions or the multi-byte character set functions,
respectively.</li>

<li>You should then create some of the following functions: 

<ul>
<li><code>my_strncoll_MYSET()</code></li>

<li><code>my_strcoll_MYSET()</code></li>

<li><code>my_strxfrm_MYSET()</code></li>

<li><code>my_like_range_MYSET()</code></li>
</ul>

See section <a href="manual.html#String_collating">4.6.5 String
Collating Support</a>.</li>

<li>Add the character set name to the
<code>CHARSETS_AVAILABLE</code> and <code>COMPILED_CHARSETS</code>
lists in <code>configure.in</code>.</li>

<li>Reconfigure, recompile, and test.</li>
</ol>

<p>The file <tt>`sql/share/charsets/README'</tt> includes some more
instructions.</p>

<p>If you want to have the character set included in the MySQL
distribution, mail a patch to <a
href="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.</p>

<h3><a id="Character_arrays" name="Character_arrays"
href="manual_toc.html#Character_arrays">4.6.4 The Character
Definition Arrays</a></h3>

<p><code>to_lower[]</code> and <code>to_upper[]</code> are simple
arrays that hold the lowercase and uppercase characters
corresponding to each member of the character set. For example:</p>

<pre>
to_lower['A'] should contain 'a'
to_upper['a'] should contain 'A'
</pre>

<p><code>sort_order[]</code> is a map indicating how characters
should be ordered for comparison and sorting purposes. For many
character sets, this is the same as <code>to_upper[]</code> (which
means sorting will be case-insensitive). MySQL will sort characters
based on the value of <code>sort_order[character]</code>. For more
complicated sorting rules, see the discussion of string collating
below. See section <a href="manual.html#String_collating">4.6.5
String Collating Support</a>.</p>

<p><code>ctype[]</code> is an array of bit values, with one element
for one character. (Note that <code>to_lower[]</code>,
<code>to_upper[]</code>, and <code>sort_order[]</code> are indexed
by character value, but <code>ctype[]</code> is indexed by
character value + 1. This is an old legacy to be able to handle
<code>EOF</code>.)</p>

<p>You can find the following bitmask definitions in
<tt>`m_ctype.h'</tt>:</p>

<pre>
#define _U      01      /* Uppercase */
#define _L      02      /* Lowercase */
#define _N      04      /* Numeral (digit) */
#define _S      010     /* Spacing character */
#define _P      020     /* Punctuation */
#define _C      040     /* Control character */
#define _B      0100    /* Blank */
#define _X      0200    /* heXadecimal digit */
</pre>

<p>The <code>ctype[]</code> entry for each character should be the
union of the applicable bitmask values that describe the character.
For example, <code>'A'</code> is an uppercase character
(<code>_U</code>) as well as a hexadecimal digit (<code>_X</code>),
so <code>ctype['A'+1]</code> should contain the value:</p>

<pre>
_U + _X = 01 + 0200 = 0201
</pre>

<h3><a id="String_collating" name="String_collating"
href="manual_toc.html#String_collating">4.6.5 String Collating
Support</a></h3>

<p><a id="IDX630" name="IDX630"></a> <a id="IDX631"
name="IDX631"></a></p>

<p>If the sorting rules for your language are too complex to be
handled with the simple <code>sort_order[]</code> table, you need
to use the string collating functions.</p>

<p>Right now the best documentation on this is the character sets
that are already implemented. Look at the <code>big5</code>,
<code>czech</code>, <code>gbk</code>, <code>sjis</code>, and
<code>tis160</code> character sets for examples.</p>

<p>You must specify the <code>strxfrm_multiply_MYSET=N</code> value
in the special comment at the top of the file. <code>N</code>
should be set to the maximum ratio the strings may grow during
<code>my_strxfrm_MYSET</code> (it must be a positive integer).</p>

<h3><a id="Multi-byte_characters" name="Multi-byte_characters"
href="manual_toc.html#Multi-byte_characters">4.6.6 Multi-byte
Character Support</a></h3>

<p><a id="IDX632" name="IDX632"></a> <a id="IDX633"
name="IDX633"></a></p>

<p>If your want to add support for a new character set that
includes multi-byte characters, you need to use the multi-byte
character functions.</p>

<p>Right now the best documentation on this is the character sets
that are already implemented. Look at the <code>euc_kr</code>,
<code>gb2312</code>, <code>gbk</code>, <code>sjis</code>, and
<code>ujis</code> character sets for examples. These are
implemented in the <tt>`ctype-'charset'.c'</tt> files in the
<tt>`strings'</tt> directory.</p>

<p>You must specify the <code>mbmaxlen_MYSET=N</code> value in the
special comment at the top of the source file. <code>N</code>
should be set to the size in bytes of the largest character in the
set.</p>

<h3><a id="Problems_with_character_sets"
name="Problems_with_character_sets"
href="manual_toc.html#Problems_with_character_sets">4.6.7 Problems
With Character Sets</a></h3>

<p>If you try to use a character set that is not compiled into your
binary, you can run into a couple of different problems:</p>

<ul>
<li>Your program has a wrong path to where the character sets are
stored. (Default <tt>`/usr/local/mysql/share/mysql/charsets'</tt>).
This can be fixed by using the <code>--character-sets-dir</code>
option to the program in question.</li>

<li>The character set is a multi-byte character set that can't be
loaded dynamically. In this case you have to recompile the program
with the support for the character set.</li>

<li>The character set is a dynamic character set, but you don't
have a configure file for it. In this case you should install the
configure file for the character set from a new MySQL
distribution.</li>

<li>Your <tt>`Index'</tt> file doesn't contain the name for the
character set. 

<pre>
ERROR 1105: File '/usr/local/share/mysql/charsets/?.conf' not found
(Errcode: 2)
</pre>

In this case you should either get a new <code>Index</code> file or
add by hand the name of any missing character sets.</li>
</ul>

<p>For <code>MyISAM</code> tables, you can check the character set
name and number for a table with <code>myisamchk -dvv
table_name</code>.</p>

<h2><a id="Server-Side_Scripts" name="Server-Side_Scripts"
href="manual_toc.html#Server-Side_Scripts">4.7 MySQL Server-Side
Scripts and Utilities</a></h2>

<h3><a id="Server-Side_Overview" name="Server-Side_Overview"
href="manual_toc.html#Server-Side_Overview">4.7.1 Overview of the
Server-Side Scripts and Utilities</a></h3>

<p><a id="IDX634" name="IDX634"></a> <a id="IDX635"
name="IDX635"></a></p>

<p>All MySQL programs take many different options. However, every
MySQL program provides a <code>--help</code> option that you can
use to get a full description of the program's different options.
For example, try <code>mysql --help</code>.</p>

<p>You can override default options for all standard programs with
an option file. section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</p>

<p>The following list briefly describes the server-side MySQL
programs:</p>

<dl compact="compact">
<dt><code>myisamchk</code></dt>

<dd><a id="IDX636" name="IDX636"></a> Utility to describe, check,
optimise, and repair MySQL tables. Because <code>myisamchk</code>
has many functions, it is described in its own chapter. See section
<a href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>. <a id="IDX637" name="IDX637"></a></dd>

<dt><code>make_binary_distribution</code></dt>

<dd>Makes a binary release of a compiled MySQL. This could be sent
by FTP to <tt>`/pub/mysql/Incoming'</tt> on
<code>support.mysql.com</code> for the convenience of other MySQL
users. <a id="IDX638" name="IDX638"></a></dd>

<dt><code>mysqlbug</code></dt>

<dd>The MySQL bug report script. This script should always be used
when filing a bug report to the MySQL list. <a id="IDX639"
name="IDX639"></a></dd>

<dt><code>mysqld</code></dt>

<dd>The SQL daemon. This should always be running. <a id="IDX640"
name="IDX640"></a></dd>

<dt><code>mysql_install_db</code></dt>

<dd>Creates the MySQL grant tables with default privileges. This is
usually executed only once, when first installing MySQL on a
system.</dd>
</dl>

<h3><a id="safe_mysqld" name="safe_mysqld"
href="manual_toc.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>,
The Wrapper Around <code>mysqld</code></a></h3>

<p><a id="IDX641" name="IDX641"></a> <a id="IDX642"
name="IDX642"></a> <a id="IDX643" name="IDX643"></a> <a id="IDX644"
name="IDX644"></a></p>

<p>Note that in MySQL 4.0 <code>safe_mysqld</code> was renamed to
<code>mysqld_safe</code>.</p>

<p><code>safe_mysqld</code> is the recommended way to start a
<code>mysqld</code> daemon on Unix. <code>safe_mysqld</code> adds
some safety features such as restarting the server when an error
occurs and logging run-time information to a log file.</p>

<p>If you don't use <code>--mysqld=#</code> or
<code>--mysqld-version=#</code> <code>safe_mysqld</code> will use
an executable named <code>mysqld-max</code> if it exists. If not,
<code>safe_mysqld</code> will start <code>mysqld</code>. This makes
it very easy to test to use <code>mysqld-max</code> instead of
<code>mysqld</code>; just copy <code>mysqld-max</code> to where you
have <code>mysqld</code> and it will be used.</p>

<p>Normally one should never edit the <code>safe_mysqld</code>
script, but instead put the options to <code>safe_mysqld</code> in
the <code>[safe_mysqld]</code> section in the <tt>`my.cnf'</tt>
file. <code>safe_mysqld</code> will read all options from the
<code>[mysqld]</code>, <code>[server]</code> and
<code>[safe_mysqld]</code> sections from the option files. See
section <a href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt>
Option Files</a>.</p>

<p>Note that all options on the command-line to
<code>safe_mysqld</code> are passed to <code>mysqld</code>. If you
wants to use any options in <code>safe_mysqld</code> that
<code>mysqld</code> doesn't support, you must specify these in the
option file.</p>

<p>Most of the options to <code>safe_mysqld</code> are the same as
the options to <code>mysqld</code>. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</p>

<p><code>safe_mysqld</code> supports the following options:</p>

<dl compact="compact">
<dt><code>--basedir=path</code></dt>

<dt><code>--core-file-size=#</code></dt>

<dd>Size of the core file <code>mysqld</code> should be able to
create. Passed to <code>ulimit -c</code>.</dd>

<dt><code>--datadir=path</code></dt>

<dt><code>--defaults-extra-file=path</code></dt>

<dt><code>--defaults-file=path</code></dt>

<dt><code>--err-log=path (this is marked obsolete in 4.0; Use
--log-error instead)</code></dt>

<dt><code>--log-error=path</code></dt>

<dd>Write the error log to the above file. See section <a
href="manual.html#Error_log">4.9.1 The Error Log</a>.</dd>

<dt><code>--ledir=path</code></dt>

<dd>Path to <code>mysqld</code></dd>

<dt><code>--log=path</code></dt>

<dt><code>--mysqld=mysqld-version</code></dt>

<dd>Name of the <code>mysqld</code> version in the
<code>ledir</code> directory you want to start.</dd>

<dt><code>--mysqld-version=version</code></dt>

<dd>Similar to <code>--mysqld=</code> but here you only give the
suffix for <code>mysqld</code>. For example if you use
<code>--mysqld-version=max</code>, <code>safe_mysqld</code> will
start the <code>ledir/mysqld-max</code> version. If the argument to
<code>--mysqld-version</code> is empty, <code>ledir/mysqld</code>
will be used.</dd>

<dt><code>--no-defaults</code></dt>

<dt><code>--open-files-limit=#</code></dt>

<dd>Number of files <code>mysqld</code> should be able to open.
Passed to <code>ulimit -n</code>. Note that you need to start
<code>safe_mysqld</code> as root for this to work properly!</dd>

<dt><code>--pid-file=path</code></dt>

<dt><code>--port=#</code></dt>

<dt><code>--socket=path</code></dt>

<dt><code>--timezone=#</code></dt>

<dd>Set the timezone (the <code>TZ</code>) variable to the value of
this parameter.</dd>

<dt><code>--user=#</code></dt>
</dl>

<p>The <code>safe_mysqld</code> script is written so that it
normally is able to start a server that was installed from either a
source or a binary version of MySQL, even if these install the
server in slightly different locations. <code>safe_mysqld</code>
expects one of these conditions to be true:</p>

<ul>
<li>The server and databases can be found relative to the directory
from which <code>safe_mysqld</code> is invoked.
<code>safe_mysqld</code> looks under its working directory for
<tt>`bin'</tt> and <tt>`data'</tt> directories (for binary
distributions) or for <tt>`libexec'</tt> and <tt>`var'</tt>
directories (for source distributions). This condition should be
met if you execute <code>safe_mysqld</code> from your MySQL
installation directory (for example, <tt>`/usr/local/mysql'</tt>
for a binary distribution).</li>

<li>If the server and databases cannot be found relative to the
working directory, <code>safe_mysqld</code> attempts to locate them
by absolute pathnames. Typical locations are
<tt>`/usr/local/libexec'</tt> and <tt>`/usr/local/var'</tt>. The
actual locations are determined when the distribution was built
from which <code>safe_mysqld</code> comes. They should be correct
if MySQL was installed in a standard location.</li>
</ul>

<p>Because <code>safe_mysqld</code> will try to find the server and
databases relative to its own working directory, you can install a
binary distribution of MySQL anywhere, as long as you start
<code>safe_mysqld</code> from the MySQL installation directory:</p>

<pre>
shell&gt; cd mysql_installation_directory
shell&gt; bin/safe_mysqld &amp;
</pre>

<p>If <code>safe_mysqld</code> fails, even when invoked from the
MySQL installation directory, you can modify it to use the path to
<code>mysqld</code> and the pathname options that are correct for
your system. Note that if you upgrade MySQL in the future, your
modified version of <code>safe_mysqld</code> will be overwritten,
so you should make a copy of your edited version that you can
reinstall.</p>

<h3><a id="mysqld_multi" name="mysqld_multi"
href="manual_toc.html#mysqld_multi">4.7.3
<code>mysqld_multi</code>, A Program for Managing Multiple MySQL
Servers</a></h3>

<p><a id="IDX645" name="IDX645"></a> <a id="IDX646"
name="IDX646"></a> <a id="IDX647" name="IDX647"></a> <a id="IDX648"
name="IDX648"></a></p>

<p><code>mysqld_multi</code> is meant for managing several
<code>mysqld</code> processes that listen for connections on
different Unix sockets and TCP/IP ports.</p>

<p>The program will search for group(s) named
<code>[mysqld#]</code> from <tt>`my.cnf'</tt> (or the file named by
the <code>--config-file=...</code> option), where <code>#</code>
can be any positive number starting from 1. This number is referred
to in the following discussion as the option group number, or GNR.
Group numbers distinquish option groups from one another and are
used as arguments to <code>mysqld_multi</code> to specify which
servers you want to start, stop, or obtain status for. Options
listed in these groups should be the same as you would use in the
usual <code>[mysqld]</code> group used for starting
<code>mysqld</code>. (See, for example, section <a
href="manual.html#Automatic_start">2.4.3 Starting and Stopping
MySQL Automatically</a>.) However, for <code>mysqld_multi</code>,
be sure that each group includes options for values such as the
port, socket, etc., to be used for each individual
<code>mysqld</code> process.</p>

<p><code>mysqld_multi</code> is invoked using the following
syntax:</p>

<pre>
Usage: mysqld_multi [OPTIONS] {start|stop|report} [GNR,GNR,GNR...]
or     mysqld_multi [OPTIONS] {start|stop|report} [GNR-GNR,GNR,GNR-GNR,...]
</pre>

<p>Each GNR represents an option group number. You can start, stop
or report any GNR, or several of them at the same time. For an
example of how you might set up an option file, use this
command:</p>

<pre>
shell&gt; mysqld_multi --example
</pre>

<p>The GNR values in the list can be comma-separated or combined
with a dash; in the latter case, all the GNRs between GNR1-GNR2
will be affected. With no GNR argument, all groups listed in the
option file will be either started, stopped, or reported. Note that
you must not have any white spaces in the GNR list. Anything after
a white space is ignored.</p>

<p><code>mysqld_multi</code> supports the following options:</p>

<dl compact="compact">
<dt><code>--config-file=...</code></dt>

<dd><a id="IDX649" name="IDX649"></a> Alternative config file.
Note: This will not affect this program's own options (group
<code>[mysqld_multi]</code>), but only groups
<code>[mysqld#]</code>. Without this option, everything will be
searched from the ordinary <tt>`my.cnf'</tt> file. <a id="IDX650"
name="IDX650"></a></dd>

<dt><code>--example</code></dt>

<dd>Display an example option file. <a id="IDX651"
name="IDX651"></a></dd>

<dt><code>--help</code></dt>

<dd>Print this help and exit. <a id="IDX652"
name="IDX652"></a></dd>

<dt><code>--log=...</code></dt>

<dd>Log file. Full path to and the name for the log file. Note: If
the file exists, everything will be appended. <a id="IDX653"
name="IDX653"></a></dd>

<dt><code>--mysqladmin=...</code></dt>

<dd><code>mysqladmin</code> binary to be used for a server
shutdown. <a id="IDX654" name="IDX654"></a></dd>

<dt><code>--mysqld=...</code></dt>

<dd><code>mysqld</code> binary to be used. Note that you can give
<code>safe_mysqld</code> to this option also. The options are
passed to <code>mysqld</code>. Just make sure you have
<code>mysqld</code> in your environment variable <code>PATH</code>
or fix <code>safe_mysqld</code>. <a id="IDX655"
name="IDX655"></a></dd>

<dt><code>--no-log</code></dt>

<dd>Print to stdout instead of the log file. By default the log
file is turned on. <a id="IDX656" name="IDX656"></a></dd>

<dt><code>--password=...</code></dt>

<dd>Password for user for <code>mysqladmin</code>. <a id="IDX657"
name="IDX657"></a></dd>

<dt><code>--tcp-ip</code></dt>

<dd>Connect to the MySQL server(s) via the TCP/IP port instead of
the Unix socket. This affects stopping and reporting. If a socket
file is missing, the server may still be running, but can be
accessed only via the TCP/IP port. By default, connections are made
using the Unix socket. <a id="IDX658" name="IDX658"></a></dd>

<dt><code>--user=...</code></dt>

<dd>MySQL user for <code>mysqladmin</code>. <a id="IDX659"
name="IDX659"></a></dd>

<dt><code>--version</code></dt>

<dd>Print the version number and exit.</dd>
</dl>

<p>Some notes about <code>mysqld_multi</code>:</p>

<ul>
<li>Make sure that the MySQL user, who is stopping the
<code>mysqld</code> services (e.g using the <code>mysqladmin</code>
program) have the same password and username for all the data
directories accessed (to the <code>mysql</code> database) And make
sure that the user has the <code>SHUTDOWN</code> privilege! If you
have many data directories and many different <code>mysql</code>
databases with different passwords for the MySQL <code>root</code>
user, you may want to create a common <code>multi_admin</code> user
for each using the same password (see below). Example how to do it:


<pre>
shell&gt; mysql -u root -S /tmp/mysql.sock -proot_password -e
"GRANT SHUTDOWN ON *.* TO multi_admin@localhost IDENTIFIED BY 'multipass'"
</pre>

See section <a href="manual.html#Privileges">4.2.6 How the
Privilege System Works</a>. You will have to do the above for each
<code>mysqld</code> running in each data directory, that you have
(just change the socket, <code>-S=...</code>).</li>

<li><code>pid-file</code> is very important, if you are using
<code>safe_mysqld</code> to start <code>mysqld</code> (e.g.,
<code>--mysqld=safe_mysqld</code>) Every <code>mysqld</code> should
have its own <code>pid-file</code>. The advantage using
<code>safe_mysqld</code> instead of <code>mysqld</code> directly
here is, that <code>safe_mysqld</code> ``guards'' every
<code>mysqld</code> process and will restart it, if a
<code>mysqld</code> process terminates due to a signal sent using
<code>kill -9</code>, or for other reasons such as a segmentation
fault (which MySQL should never do, of course ;). Please note that
the <code>safe_mysqld</code> script may require that you start it
from a certain place. This means that you may have to
<code>cd</code> to a certain directory, before you start the
<code>mysqld_multi</code>. If you have problems starting, please
see the <code>safe_mysqld</code> script. Check especially the
lines: 

<pre>
--------------------------------------------------------------------------
MY_PWD=`pwd` Check if we are starting this relative (for the binary
release) if test -d /data/mysql -a -f ./share/mysql/english/errmsg.sys
-a -x ./bin/mysqld
--------------------------------------------------------------------------
</pre>

See section <a href="manual.html#safe_mysqld">4.7.2
<code>safe_mysqld</code>, The Wrapper Around
<code>mysqld</code></a>. The above test should be successful, or
you may encounter problems.</li>

<li>Beware of the dangers starting multiple <code>mysqld</code>s in
the same data directory. Use separate data directories, unless you
<strong>know</strong> what you are doing!</li>

<li>The socket file and the TCP/IP port must be different for every
<code>mysqld</code>.</li>

<li>The first and fifth <code>mysqld</code> group were
intentionally left out from the example. You may have 'gaps' in the
config file. This gives you more flexibility. The order in which
the <code>mysqlds</code> are started or stopped depends on the
order in which they appear in the config file.</li>

<li>When you want to refer to a certain group using GNR with this
program, just use the number in the end of the group name. For
example, the GNR for a group named <code>[mysqld17]</code> is
17.</li>

<li>You may want to use option <code>--user</code> for
<code>mysqld</code>, but in order to do this you need to run the
<code>mysqld_multi</code> script as the Unix <code>root</code>
user. Having the option in the config file doesn't matter; you will
just get a warning, if you are not the superuser and the
<code>mysqlds</code> are started under <strong>your</strong> Unix
account. <strong>Important</strong>: Make sure that the
<code>pid-file</code> and the data directory are
read+write(+execute for the latter one) accessible for
<strong>that</strong> Unix user, who the specific
<code>mysqld</code> process is started as. <strong>Do not</strong>
use the Unix root account for this, unless you
<strong>know</strong> what you are doing!</li>

<li><strong>Most important</strong>: Make sure that you understand
the meanings of the options that are passed to the
<code>mysqld</code>s and <strong>why one would want</strong> to
have separate <code>mysqld</code> processes. Starting multiple
<code>mysqld</code>s in one data directory <strong>will
not</strong> give you extra performance in a threaded system!</li>
</ul>

<p>See section <a href="manual.html#Multiple_servers">4.1.4 Running
Multiple MySQL Servers on the Same Machine</a>.</p>

<p>This is an example of the config file on behalf of
<code>mysqld_multi</code>.</p>

<pre>
# This file should probably be in your home dir (~/.my.cnf) or /etc/my.cnf
# Version 2.1 by Jani Tolonen

[mysqld_multi]
mysqld     = /usr/local/bin/safe_mysqld
mysqladmin = /usr/local/bin/mysqladmin
user       = multi_admin
password   = multipass

[mysqld2]
socket     = /tmp/mysql.sock2
port       = 3307
pid-file   = /usr/local/mysql/var2/hostname.pid2
datadir    = /usr/local/mysql/var2
language   = /usr/local/share/mysql/english
user       = john

[mysqld3]
socket     = /tmp/mysql.sock3
port       = 3308
pid-file   = /usr/local/mysql/var3/hostname.pid3
datadir    = /usr/local/mysql/var3
language   = /usr/local/share/mysql/swedish
user       = monty

[mysqld4]
socket     = /tmp/mysql.sock4
port       = 3309
pid-file   = /usr/local/mysql/var4/hostname.pid4
datadir    = /usr/local/mysql/var4
language   = /usr/local/share/mysql/estonia
user       = tonu

[mysqld6]
socket     = /tmp/mysql.sock6
port       = 3311
pid-file   = /usr/local/mysql/var6/hostname.pid6
datadir    = /usr/local/mysql/var6
language   = /usr/local/share/mysql/japanese
user       = jani
</pre>

<p>See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</p>

<h3><a id="myisampack" name="myisampack"
href="manual_toc.html#myisampack">4.7.4 <code>myisampack</code>,
The MySQL Compressed Read-only Table Generator</a></h3>

<p><a id="IDX660" name="IDX660"></a> <a id="IDX661"
name="IDX661"></a> <a id="IDX662" name="IDX662"></a> <a id="IDX663"
name="IDX663"></a> <a id="IDX664" name="IDX664"></a></p>

<p><code>myisampack</code> is used to compress MyISAM tables, and
<code>pack_isam</code> is used to compress ISAM tables. Because
ISAM tables are deprecated, we will only discuss
<code>myisampack</code> here, but everything said about
<code>myisampack</code> should also be true for
<code>pack_isam</code>.</p>

<p><code>myisampack</code> works by compressing each column in the
table separately. The information needed to decompress columns is
read into memory when the table is opened. This results in much
better performance when accessing individual records, because you
only have to uncompress exactly one record, not a much larger disk
block as when using Stacker on MS-DOS. Usually,
<code>myisampack</code> packs the datafile 40%-70%.</p>

<p>MySQL uses memory mapping (<code>mmap()</code>) on compressed
tables and falls back to normal read/write file usage if
<code>mmap()</code> doesn't work.</p>

<p>Please note the following:</p>

<ul>
<li>After packing, the table is read-only. This is generally
intended (such as when accessing packed tables on a CD). Also
allowing writes to a packed table is on our TODO list but with low
priority.</li>

<li><code>myisampack</code> can also pack <code>BLOB</code> or
<code>TEXT</code> columns. The older <code>pack_isam</code> (for
<code>ISAM</code> tables) can not do this.</li>
</ul>

<p><code>myisampack</code> is invoked like this:</p>

<pre>
shell&gt; myisampack [options] filename ...
</pre>

<p>Each filename should be the name of an index (<tt>`.MYI'</tt>)
file. If you are not in the database directory, you should specify
the pathname to the file. It is permissible to omit the
<tt>`.MYI'</tt> extension.</p>

<p><code>myisampack</code> supports the following options:</p>

<dl compact="compact">
<dt><code>-b, --backup</code></dt>

<dd>Make a backup of the table as <code>tbl_name.OLD</code>.</dd>

<dt><code>-#, --debug=debug_options</code></dt>

<dd>Output debug log. The <code>debug_options</code> string often
is <code>'d:t:o,filename'</code>.</dd>

<dt><code>-f, --force</code></dt>

<dd>Force packing of the table even if it becomes bigger or if the
temporary file exists. <code>myisampack</code> creates a temporary
file named <tt>`tbl_name.TMD'</tt> while it compresses the table.
If you kill <code>myisampack</code>, the <tt>`.TMD'</tt> file may
not be deleted. Normally, <code>myisampack</code> exits with an
error if it finds that <tt>`tbl_name.TMD'</tt> exists. With
<code>--force</code>, <code>myisampack</code> packs the table
anyway.</dd>

<dt><code>-?, --help</code></dt>

<dd>Display a help message and exit.</dd>

<dt><code>-j big_tbl_name, --join=big_tbl_name</code></dt>

<dd>Join all tables named on the command-line into a single table
<code>big_tbl_name</code>. All tables that are to be combined
<strong>must</strong> be identical (same column names and types,
same indexes, etc.).</dd>

<dt><code>-p #, --packlength=#</code></dt>

<dd>Specify the record length storage size, in bytes. The value
should be 1, 2, or 3. (<code>myisampack</code> stores all rows with
length pointers of 1, 2, or 3 bytes. In most normal cases,
<code>myisampack</code> can determine the right length value before
it begins packing the file, but it may notice during the packing
process that it could have used a shorter length. In this case,
<code>myisampack</code> will print a note that the next time you
pack the same file, you could use a shorter record length.)</dd>

<dt><code>-s, --silent</code></dt>

<dd>Silent mode. Write output only when errors occur.</dd>

<dt><code>-t, --test</code></dt>

<dd>Don't actually pack table, just test packing it.</dd>

<dt><code>-T dir_name, --tmp_dir=dir_name</code></dt>

<dd>Use the named directory as the location in which to write the
temporary table.</dd>

<dt><code>-v, --verbose</code></dt>

<dd>Verbose mode. Write information about progress and packing
result.</dd>

<dt><code>-V, --version</code></dt>

<dd>Display version information and exit.</dd>

<dt><code>-w, --wait</code></dt>

<dd>Wait and retry if table is in use. If the <code>mysqld</code>
server was invoked with the <code>--skip-external-locking</code>
option, it is not a good idea to invoke <code>myisampack</code> if
the table might be updated during the packing process.</dd>
</dl>

<p><a id="IDX665" name="IDX665"></a> The sequence of commands shown
here illustrates a typical table compression session:</p>

<pre>
shell&gt; ls -l station.*
-rw-rw-r--   1 monty    my         994128 Apr 17 19:00 station.MYD
-rw-rw-r--   1 monty    my          53248 Apr 17 19:00 station.MYI
-rw-rw-r--   1 monty    my           5767 Apr 17 19:00 station.frm

shell&gt; myisamchk -dvv station

MyISAM file:     station
Isam-version:  2
Creation time: 1996-03-13 10:08:58
Recover time:  1997-02-02  3:06:43
Data records:              1192  Deleted blocks:              0
Datafile: Parts:           1192  Deleted data:                0
Datafile pointer (bytes):     2  Keyfile pointer (bytes):     2
Max datafile length:   54657023  Max keyfile length:   33554431
Recordlength:               834
Record format: Fixed length

table description:
Key Start Len Index   Type                       Root  Blocksize    Rec/key
1   2     4   unique  unsigned long              1024       1024          1
2   32    30  multip. text                      10240       1024          1

Field Start Length Type
1     1     1
2     2     4
3     6     4
4     10    1
5     11    20
6     31    1
7     32    30
8     62    35
9     97    35
10    132   35
11    167   4
12    171   16
13    187   35
14    222   4
15    226   16
16    242   20
17    262   20
18    282   20
19    302   30
20    332   4
21    336   4
22    340   1
23    341   8
24    349   8
25    357   8
26    365   2
27    367   2
28    369   4
29    373   4
30    377   1
31    378   2
32    380   8
33    388   4
34    392   4
35    396   4
36    400   4
37    404   1
38    405   4
39    409   4
40    413   4
41    417   4
42    421   4
43    425   4
44    429   20
45    449   30
46    479   1
47    480   1
48    481   79
49    560   79
50    639   79
51    718   79
52    797   8
53    805   1
54    806   1
55    807   20
56    827   4
57    831   4

shell&gt; myisampack station.MYI
Compressing station.MYI: (1192 records)
- Calculating statistics

normal:     20  empty-space:      16  empty-zero:        12  empty-fill:  11
pre-space:   0  end-space:        12  table-lookups:      5  zero:         7
Original trees:  57  After join: 17
- Compressing file
87.14%

shell&gt; ls -l station.*
-rw-rw-r--   1 monty    my         127874 Apr 17 19:00 station.MYD
-rw-rw-r--   1 monty    my          55296 Apr 17 19:04 station.MYI
-rw-rw-r--   1 monty    my           5767 Apr 17 19:00 station.frm

shell&gt; myisamchk -dvv station

MyISAM file:     station
Isam-version:  2
Creation time: 1996-03-13 10:08:58
Recover time:  1997-04-17 19:04:26
Data records:              1192  Deleted blocks:              0
Datafile: Parts:           1192  Deleted data:                0
Datafilepointer (bytes):      3  Keyfile pointer (bytes):     1
Max datafile length:   16777215  Max keyfile length:     131071
Recordlength:               834
Record format: Compressed

table description:
Key Start Len Index   Type                       Root  Blocksize    Rec/key
1   2     4   unique  unsigned long             10240       1024          1
2   32    30  multip. text                      54272       1024          1

Field Start Length Type                         Huff tree  Bits
1     1     1      constant                             1     0
2     2     4      zerofill(1)                          2     9
3     6     4      no zeros, zerofill(1)                2     9
4     10    1                                           3     9
5     11    20     table-lookup                         4     0
6     31    1                                           3     9
7     32    30     no endspace, not_always              5     9
8     62    35     no endspace, not_always, no empty    6     9
9     97    35     no empty                             7     9
10    132   35     no endspace, not_always, no empty    6     9
11    167   4      zerofill(1)                          2     9
12    171   16     no endspace, not_always, no empty    5     9
13    187   35     no endspace, not_always, no empty    6     9
14    222   4      zerofill(1)                          2     9
15    226   16     no endspace, not_always, no empty    5     9
16    242   20     no endspace, not_always              8     9
17    262   20     no endspace, no empty                8     9
18    282   20     no endspace, no empty                5     9
19    302   30     no endspace, no empty                6     9
20    332   4      always zero                          2     9
21    336   4      always zero                          2     9
22    340   1                                           3     9
23    341   8      table-lookup                         9     0
24    349   8      table-lookup                        10     0
25    357   8      always zero                          2     9
26    365   2                                           2     9
27    367   2      no zeros, zerofill(1)                2     9
28    369   4      no zeros, zerofill(1)                2     9
29    373   4      table-lookup                        11     0
30    377   1                                           3     9
31    378   2      no zeros, zerofill(1)                2     9
32    380   8      no zeros                             2     9
33    388   4      always zero                          2     9
34    392   4      table-lookup                        12     0
35    396   4      no zeros, zerofill(1)               13     9
36    400   4      no zeros, zerofill(1)                2     9
37    404   1                                           2     9
38    405   4      no zeros                             2     9
39    409   4      always zero                          2     9
40    413   4      no zeros                             2     9
41    417   4      always zero                          2     9
42    421   4      no zeros                             2     9
43    425   4      always zero                          2     9
44    429   20     no empty                             3     9
45    449   30     no empty                             3     9
46    479   1                                          14     4
47    480   1                                          14     4
48    481   79     no endspace, no empty               15     9
49    560   79     no empty                             2     9
50    639   79     no empty                             2     9
51    718   79     no endspace                         16     9
52    797   8      no empty                             2     9
53    805   1                                          17     1
54    806   1                                           3     9
55    807   20     no empty                             3     9
56    827   4      no zeros, zerofill(2)                2     9
57    831   4      no zeros, zerofill(1)                2     9
</pre>

<p>The information printed by <code>myisampack</code> is described
here:</p>

<dl compact="compact">
<dt><code>normal</code></dt>

<dd>The number of columns for which no extra packing is used.</dd>

<dt><code>empty-space</code></dt>

<dd>The number of columns containing values that are only spaces;
these will occupy 1 bit.</dd>

<dt><code>empty-zero</code></dt>

<dd>The number of columns containing values that are only binary
0's; these will occupy 1 bit.</dd>

<dt><code>empty-fill</code></dt>

<dd>The number of integer columns that don't occupy the full byte
range of their type; these are changed to a smaller type (for
example, an <code>INTEGER</code> column may be changed to
<code>MEDIUMINT</code>).</dd>

<dt><code>pre-space</code></dt>

<dd>The number of decimal columns that are stored with leading
spaces. In this case, each value will contain a count for the
number of leading spaces.</dd>

<dt><code>end-space</code></dt>

<dd>The number of columns that have a lot of trailing spaces. In
this case, each value will contain a count for the number of
trailing spaces.</dd>

<dt><code>table-lookup</code></dt>

<dd>The column had only a small number of different values, which
were converted to an <code>ENUM</code> before Huffman
compression.</dd>

<dt><code>zero</code></dt>

<dd>The number of columns for which all values are zero.</dd>

<dt><code>Original trees</code></dt>

<dd>The initial number of Huffman trees.</dd>

<dt><code>After join</code></dt>

<dd>The number of distinct Huffman trees left after joining trees
to save some header space.</dd>
</dl>

<p>After a table has been compressed, <code>myisamchk -dvv</code>
prints additional information about each field:</p>

<dl compact="compact">
<dt><code>Type</code></dt>

<dd>The field type may contain the following descriptors: 

<dl compact="compact">
<dt><code>constant</code></dt>

<dd>All rows have the same value.</dd>

<dt><code>no endspace</code></dt>

<dd>Don't store endspace.</dd>

<dt><code>no endspace, not_always</code></dt>

<dd>Don't store endspace and don't do end space compression for all
values.</dd>

<dt><code>no endspace, no empty</code></dt>

<dd>Don't store endspace. Don't store empty values.</dd>

<dt><code>table-lookup</code></dt>

<dd>The column was converted to an <code>ENUM</code>.</dd>

<dt><code>zerofill(n)</code></dt>

<dd>The most significant <code>n</code> bytes in the value are
always 0 and are not stored.</dd>

<dt><code>no zeros</code></dt>

<dd>Don't store zeros.</dd>

<dt><code>always zero</code></dt>

<dd>0 values are stored in 1 bit.</dd>
</dl>
</dd>

<dt><code>Huff tree</code></dt>

<dd>The Huffman tree associated with the field.</dd>

<dt><code>Bits</code></dt>

<dd>The number of bits used in the Huffman tree.</dd>
</dl>

<p>After you have run
<code>pack_isam</code>/<code>myisampack</code> you must run
<code>isamchk</code>/<code>myisamchk</code> to re-create the index.
At this time you can also sort the index blocks and create
statistics needed for the MySQL optimiser to work more
efficiently:</p>

<pre>
myisamchk -rq --analyze --sort-index table_name.MYI
isamchk   -rq --analyze --sort-index table_name.ISM
</pre>

<p>After you have installed the packed table into the MySQL
database directory you should do <code>mysqladmin
flush-tables</code> to force <code>mysqld</code> to start using the
new table.</p>

<p>If you want to unpack a packed table, you can do this with the
<code>--unpack</code> option to <code>isamchk</code> or
<code>myisamchk</code>.</p>

<h3><a id="mysqld-max" name="mysqld-max"
href="manual_toc.html#mysqld-max">4.7.5 <code>mysqld-max</code>, An
Extended <code>mysqld</code> Server</a></h3>

<p><a id="IDX666" name="IDX666"></a></p>

<p><code>mysqld-max</code> is the MySQL server
(<code>mysqld</code>) configured with the following configure
options:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Comment</strong></td>
</tr>

<tr>
<td>--with-server-suffix=-max</td>
<td>Add a suffix to the <code>mysqld</code> version string.</td>
</tr>

<tr>
<td>--with-innodb</td>
<td>Support for InnoDB tables.</td>
</tr>

<tr>
<td>--with-bdb</td>
<td>Support for Berkeley DB (BDB) tables</td>
</tr>

<tr>
<td>CFLAGS=-DUSE_SYMDIR</td>
<td>Symbolic links support for Windows.</td>
</tr>
</table>

<p>You can find the MySQL-max binaries at <a
href="http://www.mysql.com/downloads/mysql-max-3.23.html">http://www.mysql.com/downloads/mysql-max-3.23.html</a>.</p>

<p>The Windows MySQL binary distributions includes both the
standard <code>mysqld.exe</code> binary and the
<code>mysqld-max.exe</code> binary. <a
href="http://www.mysql.com/downloads/mysql-3.23.html">http://www.mysql.com/downloads/mysql-3.23.html</a>.
See section <a href="manual.html#Windows_installation">2.1.2
Installing MySQL on Windows</a>.</p>

<p>Note that as InnoDB and Berkeley DB are not available for all
platforms, some of the <code>Max</code> binaries may not have
support for both of these. You can check which table types are
supported by doing the following query:</p>

<pre>
mysql&gt; SHOW VARIABLES LIKE "have_%";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| have_bdb      | YES   |
| have_innodb   | NO    |
| have_isam     | YES   |
| have_raid     | NO    |
| have_openssl  | NO    |
+---------------+-------+
</pre>

<p>The meaning of the values are:</p>

<table border="1" width="100%">
<tr>
<td><strong>Value</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>YES</code></td>
<td>The option is activated and usable.</td>
</tr>

<tr>
<td><code>NO</code></td>
<td>MySQL is not compiled with support for this option.</td>
</tr>

<tr>
<td><code>DISABLED</code></td>
<td>The xxxx option is disabled because one started
<code>mysqld</code> with <code>--skip-xxxx</code> or because one
didn't start <code>mysqld</code> with all needed options to enable
the option. In this case the <code>hostname.err</code> file should
contain a reason for why the option is disabled.</td>
</tr>
</table>

<p><strong>Note</strong>: To be able to create InnoDB tables you
<strong>must</strong> edit your startup options to include at least
the <code>innodb_data_file_path</code> option. See section <a
href="manual.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a>.</p>

<p>To get better performance for BDB tables, you should add some
configuration options for these too. See section <a
href="manual.html#BDB_start">7.6.3 <code>BDB</code> startup
options</a>.</p>

<p><code>safe_mysqld</code> will automatically try to start any
<code>mysqld</code> binary with the <code>-max</code> suffix. This
makes it very easy to test out a another <code>mysqld</code> binary
in an existing installation. Just run <code>configure</code> with
the options you want and then install the new <code>mysqld</code>
binary as <code>mysqld-max</code> in the same directory where your
old <code>mysqld</code> binary is. See section <a
href="manual.html#safe_mysqld">4.7.2 <code>safe_mysqld</code>, The
Wrapper Around <code>mysqld</code></a>.</p>

<p>The <code>mysqld-max</code> RPM uses the above mentioned
<code>safe_mysqld</code> feature. It just installs the
<code>mysqld-max</code> executable and <code>safe_mysqld</code>
will automatically use this executable when
<code>safe_mysqld</code> is restarted.</p>

<p>The following table shows which table types our standard
MySQL-Max binaries includes:</p>

<table border="1" width="100%">
<tr>
<td><strong>System</strong></td>
<td><code>BDB</code></td>
<td><code>InnoDB</code></td>
</tr>

<tr>
<td>AIX 4.3</td>
<td>N</td>
<td>Y</td>
</tr>

<tr>
<td>HP-UX 11.0</td>
<td>N</td>
<td>Y</td>
</tr>

<tr>
<td>Linux-Alpha</td>
<td>N</td>
<td>Y</td>
</tr>

<tr>
<td>Linux-Intel</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td>Linux-IA64</td>
<td>N</td>
<td>Y</td>
</tr>

<tr>
<td>Solaris-Intel</td>
<td>N</td>
<td>Y</td>
</tr>

<tr>
<td>Solaris-SPARC</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td>Caldera (SCO) OSR5</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td>UnixWare</td>
<td>Y</td>
<td>Y</td>
</tr>

<tr>
<td>Windows/NT</td>
<td>Y</td>
<td>Y</td>
</tr>
</table>

<h2><a id="Client-Side_Scripts" name="Client-Side_Scripts"
href="manual_toc.html#Client-Side_Scripts">4.8 MySQL Client-Side
Scripts and Utilities</a></h2>

<h3><a id="Client-Side_Overview" name="Client-Side_Overview"
href="manual_toc.html#Client-Side_Overview">4.8.1 Overview of the
Client-Side Scripts and Utilities</a></h3>

<p><a id="IDX667" name="IDX667"></a> <a id="IDX668"
name="IDX668"></a></p>

<p>All MySQL clients that communicate with the server using the
<code>mysqlclient</code> library use the following environment
variables:</p>

<p><a id="IDX669" name="IDX669"></a> <a id="IDX670"
name="IDX670"></a> <a id="IDX671" name="IDX671"></a> <a id="IDX672"
name="IDX672"></a> <a id="IDX673" name="IDX673"></a> <a id="IDX674"
name="IDX674"></a> <a id="IDX675" name="IDX675"></a> <a id="IDX676"
name="IDX676"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Name</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>MYSQL_UNIX_PORT</code></td>
<td>The default socket; used for connections to
<code>localhost</code></td>
</tr>

<tr>
<td><code>MYSQL_TCP_PORT</code></td>
<td>The default TCP/IP port</td>
</tr>

<tr>
<td><code>MYSQL_PWD</code></td>
<td>The default password</td>
</tr>

<tr>
<td><code>MYSQL_DEBUG</code></td>
<td>Debug-trace options when debugging</td>
</tr>

<tr>
<td><code>TMPDIR</code></td>
<td>The directory where temporary tables/files are created</td>
</tr>
</table>

<br />
<br />
 

<p>Use of <code>MYSQL_PWD</code> is insecure. See section <a
href="manual.html#Connecting">4.2.8 Connecting to the MySQL
Server</a>.</p>

<p><a id="IDX677" name="IDX677"></a> <a id="IDX678"
name="IDX678"></a> <a id="IDX679" name="IDX679"></a> <a id="IDX680"
name="IDX680"></a> <a id="IDX681" name="IDX681"></a> <a id="IDX682"
name="IDX682"></a> <a id="IDX683" name="IDX683"></a> The
<tt>`mysql'</tt> client uses the file named in the
<code>MYSQL_HISTFILE</code> environment variable to save the
command-line history. The default value for the history file is
<tt>`$HOME/.mysql_history'</tt>, where <code>$HOME</code> is the
value of the <code>HOME</code> environment variable. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</p>

<p>All MySQL programs take many different options. However, every
MySQL program provides a <code>--help</code> option that you can
use to get a full description of the program's different options.
For example, try <code>mysql --help</code>.</p>

<p>You can override default options for all standard client
programs with an option file. section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</p>

<p>The following list briefly describes the client-side MySQL
programs:</p>

<dl compact="compact">
<dt><code>msql2mysql</code></dt>

<dd><a id="IDX684" name="IDX684"></a> A shell script that converts
<code>mSQL</code> programs to MySQL. It doesn't handle all cases,
but it gives a good start when converting. <a id="IDX685"
name="IDX685"></a></dd>

<dt><code>mysqlaccess</code></dt>

<dd>A script that checks the access privileges for a host, user,
and database combination. <a id="IDX686" name="IDX686"></a></dd>

<dt><code>mysqladmin</code></dt>

<dd>Utility for performing administrative operations, such as
creating or dropping databases, reloading the grant tables,
flushing tables to disk, and reopening log files.
<code>mysqladmin</code> can also be used to retrieve version,
process, and status information from the server. See section <a
href="manual.html#mysqladmin">4.8.3 <code>mysqladmin</code>,
Administrating a MySQL Server</a>. <a id="IDX687"
name="IDX687"></a></dd>

<dt><code>mysqldump</code></dt>

<dd>Dumps a MySQL database into a file as SQL statements or as
tab-separated text files. Enhanced freeware originally by Igor
Romanenko. See section <a href="manual.html#mysqldump">4.8.5
<code>mysqldump</code>, Dumping Table Structure and Data</a>. <a
id="IDX688" name="IDX688"></a></dd>

<dt><code>mysqlimport</code></dt>

<dd>Imports text files into their respective tables using
<code>LOAD DATA INFILE</code>. See section <a
href="manual.html#mysqlimport">4.8.7 <code>mysqlimport</code>,
Importing Data from Text Files</a>. <a id="IDX689"
name="IDX689"></a></dd>

<dt><code>mysqlshow</code></dt>

<dd>Displays information about databases, tables, columns, and
indexes. <a id="IDX690" name="IDX690"></a></dd>

<dt><code>replace</code></dt>

<dd>A utility program that is used by <code>msql2mysql</code>, but
that has more general applicability as well. <code>replace</code>
changes strings in place in files or on the standard input. Uses a
finite state machine to match longer strings first. Can be used to
swap strings. For example, this command swaps <code>a</code> and
<code>b</code> in the given files: 

<pre>
shell&gt; replace a b b a -- file1 file2 ...
</pre>
</dd>
</dl>

<h3><a id="mysql" name="mysql" href="manual_toc.html#mysql">4.8.2
<code>mysql</code>, The Command-line Tool</a></h3>

<p><a id="IDX691" name="IDX691"></a> <a id="IDX692"
name="IDX692"></a> <a id="IDX693" name="IDX693"></a> <a id="IDX694"
name="IDX694"></a></p>

<p><code>mysql</code> is a simple SQL shell (with GNU
<code>readline</code> capabilities). It supports interactive and
non-interactive use. When used interactively, query results are
presented in an ASCII-table format. When used non-interactively
(for example, as a filter), the result is presented in
tab-separated format. (The output format can be changed using
command-line options.) You can run scripts simply like this:</p>

<pre>
shell&gt; mysql database &lt; script.sql &gt; output.tab
</pre>

<p>If you have problems due to insufficient memory in the client,
use the <code>--quick</code> option! This forces <code>mysql</code>
to use <code>mysql_use_result()</code> rather than
<code>mysql_store_result()</code> to retrieve the result set.</p>

<p>Using <code>mysql</code> is very easy. Just start it as follows:
<code>mysql database</code> or <code>mysql --user=user_name
--password=your_password database</code>. Type a SQL statement, end
it with <samp>`;'</samp>, <samp>`\g'</samp>, or <samp>`\G'</samp>
and press Enter.</p>

<p><a id="IDX695" name="IDX695"></a> <a id="IDX696"
name="IDX696"></a> <a id="IDX697" name="IDX697"></a> <a id="IDX698"
name="IDX698"></a> <code>mysql</code> supports the following
options:</p>

<dl compact="compact">
<dt><code>-?, --help</code></dt>

<dd><a id="IDX699" name="IDX699"></a> Display this help and exit.
<a id="IDX700" name="IDX700"></a></dd>

<dt><code>-A, --no-auto-rehash</code></dt>

<dd>No automatic rehashing. One has to use 'rehash' to get table
and field completion. This gives a quicker start of mysql. <a
id="IDX701" name="IDX701"></a></dd>

<dt><code>--prompt=...</code></dt>

<dd>Set the mysql prompt to specified format. <a id="IDX702"
name="IDX702"></a></dd>

<dt><code>-b, --no-beep</code></dt>

<dd>Turn off beep-on-error. <a id="IDX703" name="IDX703"></a></dd>

<dt><code>-B, --batch</code></dt>

<dd>Print results with a tab as separator, each row on a new line.
Doesn't use history file. <a id="IDX704" name="IDX704"></a></dd>

<dt><code>--character-sets-dir=...</code></dt>

<dd>Directory where character sets are located. <a id="IDX705"
name="IDX705"></a></dd>

<dt><code>-C, --compress</code></dt>

<dd>Use compression in server/client protocol. <a id="IDX706"
name="IDX706"></a></dd>

<dt><code>-#, --debug[=...]</code></dt>

<dd>Debug log. Default is 'd:t:o,/tmp/mysql.trace'. <a id="IDX707"
name="IDX707"></a></dd>

<dt><code>-D, --database=...</code></dt>

<dd>Database to use. This is mainly useful in the <tt>`my.cnf'</tt>
file. <a id="IDX708" name="IDX708"></a></dd>

<dt><code>--default-character-set=...</code></dt>

<dd>Set the default character set. <a id="IDX709"
name="IDX709"></a></dd>

<dt><code>-e, --execute=...</code></dt>

<dd>Execute command and quit. (Output like with --batch) <a
id="IDX710" name="IDX710"></a></dd>

<dt><code>-E, --vertical</code></dt>

<dd>Print the output of a query (rows) vertically. Without this
option you can also force this output by ending your statements
with <code>\G</code>. <a id="IDX711" name="IDX711"></a></dd>

<dt><code>-f, --force</code></dt>

<dd>Continue even if we get a SQL error. <a id="IDX712"
name="IDX712"></a></dd>

<dt><code>-g, --no-named-commands</code></dt>

<dd>Named commands are disabled. Use \* form only, or use named
commands only in the beginning of a line ending with a semicolon
(<samp>`;'</samp>). Since Version 10.9, the client now starts with
this option <strong>enabled</strong> by default! With the -g
option, long format commands will still work from the first line,
however. <a id="IDX713" name="IDX713"></a></dd>

<dt><code>-G, --enable-named-commands</code></dt>

<dd>Named commands are <strong>enabled</strong>. Long format
commands are allowed as well as shortened \* commands. <a
id="IDX714" name="IDX714"></a></dd>

<dt><code>-i, --ignore-space</code></dt>

<dd>Ignore space after function names. <a id="IDX715"
name="IDX715"></a></dd>

<dt><code>-h, --host=...</code></dt>

<dd>Connect to the given host. <a id="IDX716"
name="IDX716"></a></dd>

<dt><code>-H, --html</code></dt>

<dd>Produce HTML output. <a id="IDX717" name="IDX717"></a></dd>

<dt><code>-X, --xml</code></dt>

<dd>Produce XML output. <a id="IDX718" name="IDX718"></a></dd>

<dt><code>-L, --skip-line-numbers</code></dt>

<dd>Don't write line number for errors. Useful when one wants to
compare result files that includes error messages <a id="IDX719"
name="IDX719"></a></dd>

<dt><code>--no-pager</code></dt>

<dd>Disable pager and print to stdout. See interactive help (\h)
also. <a id="IDX720" name="IDX720"></a></dd>

<dt><code>--no-tee</code></dt>

<dd>Disable outfile. See interactive help (\h) also. <a id="IDX721"
name="IDX721"></a></dd>

<dt><code>-n, --unbuffered</code></dt>

<dd>Flush buffer after each query. <a id="IDX722"
name="IDX722"></a></dd>

<dt><code>-N, --skip-column-names</code></dt>

<dd>Don't write column names in results. <a id="IDX723"
name="IDX723"></a></dd>

<dt><code>-O, --set-variable var=option</code></dt>

<dd>Give a variable a value. <code>--help</code> lists variables.
Please note that <code>--set-variable</code> is deprecated since
MySQL 4.0, just use <code>--var=option</code> on its own. <a
id="IDX724" name="IDX724"></a></dd>

<dt><code>-o, --one-database</code></dt>

<dd>Only update the default database. This is useful for skipping
updates to other database in the update log. <a id="IDX725"
name="IDX725"></a></dd>

<dt><code><code>--pager[=...]</code></code></dt>

<dd>Output type. Default is your <code>ENV</code> variable
<code>PAGER</code>. Valid pagers are less, more, cat [&gt;
filename], etc. See interactive help (\h) also. This option does
not work in batch mode. Pager works only in Unix. <a id="IDX726"
name="IDX726"></a></dd>

<dt><code>-p[password], --password[=...]</code></dt>

<dd>Password to use when connecting to server. If a password is not
given on the command-line, you will be prompted for it. Note that
if you use the short form <code>-p</code> you can't have a space
between the option and the password. <a id="IDX727"
name="IDX727"></a></dd>

<dt><code>-P --port=...</code></dt>

<dd>TCP/IP port number to use for connection. <a id="IDX728"
name="IDX728"></a></dd>

<dt><code>-q, --quick</code></dt>

<dd>Don't cache result, print it row-by-row. This may slow down the
server if the output is suspended. Doesn't use history file. <a
id="IDX729" name="IDX729"></a></dd>

<dt><code>-r, --raw</code></dt>

<dd>Write column values without escape conversion. Used with
<code>--batch</code> <a id="IDX730" name="IDX730"></a></dd>

<dt><code>-s, --silent</code></dt>

<dd>Be more silent. <a id="IDX731" name="IDX731"></a></dd>

<dt><code>-S --socket=...</code></dt>

<dd>Socket file to use for connection. <a id="IDX732"
name="IDX732"></a></dd>

<dt><code>-t --table</code></dt>

<dd>Output in table format. This is default in non-batch mode. <a
id="IDX733" name="IDX733"></a></dd>

<dt><code>-T, --debug-info</code></dt>

<dd>Print some debug information at exit. <a id="IDX734"
name="IDX734"></a></dd>

<dt><code>--tee=...</code></dt>

<dd>Append everything into outfile. See interactive help (\h) also.
Does not work in batch mode. <a id="IDX735" name="IDX735"></a></dd>

<dt><code>-u, --user=#</code></dt>

<dd>User for login if not current user. <a id="IDX736"
name="IDX736"></a></dd>

<dt><code>-U, --safe-updates[=#], --i-am-a-dummy[=#]</code></dt>

<dd>Only allow <code>UPDATE</code> and <code>DELETE</code> that
uses keys. See below for more information about this option. You
can reset this option if you have it in your <tt>`my.cnf'</tt> file
by using <code>--safe-updates=0</code>. <a id="IDX737"
name="IDX737"></a></dd>

<dt><code>-v, --verbose</code></dt>

<dd>More verbose output (-v -v -v gives the table output format).
<a id="IDX738" name="IDX738"></a></dd>

<dt><code>-V, --version</code></dt>

<dd>Output version information and exit. <a id="IDX739"
name="IDX739"></a></dd>

<dt><code>-w, --wait</code></dt>

<dd>Wait and retry if connection is down instead of aborting.</dd>
</dl>

<p>You can also set the following variables with <code>-O</code> or
<code>--set-variable</code>; please note that
<code>--set-variable</code> is deprecated since MySQL 4.0, just use
<code>--var=option</code> on its own:</p>

<p><a id="IDX740" name="IDX740"></a> <a id="IDX741"
name="IDX741"></a> <a id="IDX742" name="IDX742"></a> <a id="IDX743"
name="IDX743"></a> <a id="IDX744" name="IDX744"></a> <a id="IDX745"
name="IDX745"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Variable Name</strong></td>
<td><strong>Default</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>connect_timeout</td>
<td>0</td>
<td>Number of seconds before timeout connection.</td>
</tr>

<tr>
<td>max_allowed_packet</td>
<td>16777216</td>
<td>Max packetlength to send/receive from to server</td>
</tr>

<tr>
<td>net_buffer_length</td>
<td>16384</td>
<td>Buffer for TCP/IP and socket communication</td>
</tr>

<tr>
<td>select_limit</td>
<td>1000</td>
<td>Automatic limit for SELECT when using --i-am-a-dummy</td>
</tr>

<tr>
<td>max_join_size</td>
<td>1000000</td>
<td>Automatic limit for rows in a join when using
--i-am-a-dummy.</td>
</tr>
</table>

<br />
<br />
 

<p>If you type 'help' on the command-line, <code>mysql</code> will
print out the commands that it supports:</p>

<p><a id="IDX746" name="IDX746"></a></p>

<pre>
mysql&gt; help

MySQL commands:
help    (\h)    Display this text.
?       (\h)    Synonym for `help'.
clear   (\c)    Clear command.
connect (\r)    Reconnect to the server.
                Optional arguments are db and host.
edit    (\e)    Edit command with $EDITOR.
ego     (\G)    Send command to mysql server,
                display result vertically.
exit    (\q)    Exit mysql. Same as quit.
go      (\g)    Send command to mysql server.
nopager (\n)    Disable pager, print to stdout.
notee   (\t)    Don't write into outfile.
pager   (\P)    Set PAGER [to_pager].
                Print the query results via PAGER.
print   (\p)    Print current command.
prompt  (\R)    Change your mysql prompt.
quit    (\q)    Quit mysql.
rehash  (\#)    Rebuild completion hash.
source  (\.)    Execute a SQL script file.
                Takes a file name as an argument.
status  (\s)    Get status information from the server.
tee     (\T)    Set outfile [to_outfile].
                Append everything into given outfile.
use     (\u)    Use another database.
                Takes database name as argument.
</pre>

<p>The <code>pager</code> command works only in Unix.</p>

<p><a id="IDX747" name="IDX747"></a> The <code>status</code>
command gives you some information about the connection and the
server you are using. If you are running in the
<code>--safe-updates</code> mode, <code>status</code> will also
print the values for the <code>mysql</code> variables that affect
your queries.</p>

<p><a id="IDX748" name="IDX748"></a> A useful startup option for
beginners (introduced in MySQL Version 3.23.11) is
<code>--safe-updates</code> (or <code>--i-am-a-dummy</code> for
users that has at some time done a <code>DELETE FROM
table_name</code> but forgot the <code>WHERE</code> clause). When
using this option, <code>mysql</code> sends the following command
to the MySQL server when opening the connection:</p>

<pre>
SET SQL_SAFE_UPDATES=1,SQL_SELECT_LIMIT=#select_limit#,
    SQL_MAX_JOIN_SIZE=#max_join_size#"
</pre>

<p>where <code>#select_limit#</code> and
<code>#max_join_size#</code> are variables that can be set from the
<code>mysql</code> command-line. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<p>The effect of the above is:</p>

<ul>
<li>You are not allowed to do an <code>UPDATE</code> or
<code>DELETE</code> statement if you don't have a key constraint in
the <code>WHERE</code> part. One can, however, force an
<code>UPDATE/DELETE</code> by using <code>LIMIT</code>: 

<pre>
UPDATE table_name SET not_key_column=# WHERE not_key_column=# LIMIT 1;
</pre>
</li>

<li>All big results are automatically limited to
<code>#select_limit#</code> rows.</li>

<li><code>SELECT</code>s that will probably need to examine more
than <code>#max_join_size</code> row combinations will be
aborted.</li>
</ul>

<p>Some useful hints about the <code>mysql</code> client:</p>

<p>Some data is much more readable when displayed vertically,
instead of the usual horizontal box type output. For example longer
text, which includes new lines, is often much easier to be read
with vertical output.</p>

<pre>
mysql&gt; SELECT * FROM mails WHERE LENGTH(txt) &lt; 300 lIMIT 300,1\G
*************************** 1. row ***************************
  msg_nro: 3068
     date: 2000-03-01 23:29:50
time_zone: +0200
mail_from: Monty
    reply: monty@no.spam.com
  mail_to: "Thimble Smith" &lt;tim@no.spam.com&gt;
      sbj: UTF-8
      txt: &gt;&gt;&gt;&gt;&gt; "Thimble" == Thimble Smith writes:

Thimble&gt; Hi.  I think this is a good idea.  Is anyone familiar with UTF-8
Thimble&gt; or Unicode? Otherwise, I'll put this on my TODO list and see what
Thimble&gt; happens.

Yes, please do that.

Regards,
Monty
     file: inbox-jani-1
     hash: 190402944
1 row in set (0.09 sec)
</pre>

<p>For logging, you can use the <code>tee</code> option. The
<code>tee</code> can be started with option <code>--tee=...</code>,
or from the command-line interactively with command
<code>tee</code>. All the data displayed on the screen will also be
appended into a given file. This can be very useful for debugging
purposes also. The <code>tee</code> can be disabled from the
command-line with command <code>notee</code>. Executing
<code>tee</code> again starts logging again. Without a parameter
the previous file will be used. Note that <code>tee</code> will
flush the results into the file after each command, just before the
command-line appears again waiting for the next command.</p>

<p>Browsing, or searching the results in the interactive mode in
Unix less, more, or any other similar program, is now possible with
option <code>--pager[=...]</code>. Without argument,
<code>mysql</code> client will look for environment variable PAGER
and set <code>pager</code> to that. <code>pager</code> can be
started from the interactive command-line with command
<code>pager</code> and disabled with command <code>nopager</code>.
The command takes an argument optionally and the <code>pager</code>
will be set to that. Command <code>pager</code> can be called
without an argument, but this requires that the option
<code>--pager</code> was used, or the <code>pager</code> will
default to stdout. <code>pager</code> works only in Unix, since it
uses the popen() function, which doesn't exist in Windows. In
Windows, the <code>tee</code> option can be used instead, although
it may not be as handy as <code>pager</code> can be in some
situations.</p>

<p>A few tips about <code>pager</code>:</p>

<ul>
<li>You can use it to write to a file: 

<pre>
mysql&gt; pager cat &gt; /tmp/log.txt
</pre>

and the results will only go to a file. You can also pass any
options for the programs that you want to use with the
<code>pager</code>: 

<pre>
mysql&gt; pager less -n -i -S
</pre>
</li>

<li>From the above do note the option '-S'. You may find it very
useful when browsing the results; try the option with horizontal
output (end commands with '\g', or ';') and with vertical output
(end commands with '\G'). Sometimes a very wide result set is hard
to be read from the screen, with option -S to less you can browse
the results within the interactive less from left to right,
preventing lines longer than your screen from being continued to
the next line. This can make the result set much more readable. You
can swith the mode between on and off within the interactive less
with '-S'. See the 'h' for more help about less.</li>

<li>You can combine very complex ways to handle the results, for
example the following would send the results to two files in two
different directories, on two different hard-disks mounted on /dr1
and /dr2, yet let the results still be seen on the screen via less:


<pre>
mysql&gt; pager cat | tee /dr1/tmp/res.txt | \
tee /dr2/tmp/res2.txt | less -n -i -S
</pre>
</li>
</ul>

<p>You can also combine the two functions above; have the
<code>tee</code> enabled, <code>pager</code> set to 'less' and you
will be able to browse the results in unix 'less' and still have
everything appended into a file the same time. The difference
between Unix <code>tee</code> used with the <code>pager</code> and
the <code>mysql</code> client in-built <code>tee</code>, is that
the in-built <code>tee</code> works even if you don't have the Unix
<code>tee</code> available. The in-built <code>tee</code> also logs
everything that is printed on the screen, where the Unix
<code>tee</code> used with <code>pager</code> doesn't log quite
that much. Last, but not least, the interactive <code>tee</code> is
more handy to switch on and off, when you want to log something
into a file, but want to be able to turn the feature off
sometimes.</p>

<p><a id="IDX749" name="IDX749"></a> From MySQL version 4.0.2 it is
possible to change the prompt in the <code>mysql</code>
command-line client.</p>

<p>You can use the following prompt options:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>\v</td>
<td>mysqld version</td>
</tr>

<tr>
<td>\d</td>
<td>database in use</td>
</tr>

<tr>
<td>\h</td>
<td>host connected to</td>
</tr>

<tr>
<td>\p</td>
<td>port connected on</td>
</tr>

<tr>
<td>\u</td>
<td>username</td>
</tr>

<tr>
<td>\U</td>
<td>full username@host</td>
</tr>

<tr>
<td>\\</td>
<td><samp>`\'</samp></td>
</tr>

<tr>
<td>\n</td>
<td>new line break</td>
</tr>

<tr>
<td>\t</td>
<td>tab</td>
</tr>

<tr>
<td>\</td>
<td>space</td>
</tr>

<tr>
<td>\_</td>
<td>space</td>
</tr>

<tr>
<td>\R</td>
<td>military hour time (0-23)</td>
</tr>

<tr>
<td>\r</td>
<td>standard hour time (1-12)</td>
</tr>

<tr>
<td>\m</td>
<td>minutes</td>
</tr>

<tr>
<td>\y</td>
<td>two digit year</td>
</tr>

<tr>
<td>\Y</td>
<td>four digit year</td>
</tr>

<tr>
<td>\D</td>
<td>full date format</td>
</tr>

<tr>
<td>\s</td>
<td>seconds</td>
</tr>

<tr>
<td>\w</td>
<td>day of the week in three letter format (Mon, Tue, ...)</td>
</tr>

<tr>
<td>\P</td>
<td>am/pm</td>
</tr>

<tr>
<td>\o</td>
<td>month in number format</td>
</tr>

<tr>
<td>\O</td>
<td>month in three letter format (Jan, Feb, ...)</td>
</tr>

<tr>
<td>\c</td>
<td>counter that counts up for each command you do</td>
</tr>
</table>

<br />
<br />
 

<p><samp>`\'</samp> followed by any other letter just becomes that
letter.</p>

<p>You may set the prompt in the following places:</p>

<dl compact="compact">
<dt><strong>Environment Variable</strong></dt>

<dd>You may set the <code>MYSQL_PS1</code> environment variable to
a prompt string. For example: 

<pre>
shell&gt; export MYSQL_PS1="(\u@\h) [\d]&gt; "
</pre>
</dd>

<dt><strong><tt>`my.cnf'</tt></strong></dt>

<dt><strong><tt>`.my.cnf'</tt></strong></dt>

<dd>You may set the <code>prompt</code> option in any MySQL
configuration file, in the <code>mysql</code> group. For example: 

<pre>
[mysql]
prompt=(\u@\h) [\d]&gt;\_
</pre>
</dd>

<dt><strong>Command Line</strong></dt>

<dd>You may set the <code>--prompt</code> option on the command
line to <code>mysql</code>. For example: 

<pre>
shell&gt; mysql --prompt="(\u@\h) [\d]&gt; "

(user@host) [database]&gt; 
</pre>
</dd>

<dt><strong>Interactively</strong></dt>

<dd>You may also use the <code>prompt</code> (or <code>\R</code>)
command to change your prompt interactively. For example: 

<pre>
mysql&gt; prompt (\u@\h) [\d]&gt;\_
PROMPT set to '(\u@\h) [\d]&gt;\_'
(user@host) [database]&gt; 
(user@host) [database]&gt; prompt
Returning to default PROMPT of mysql&gt; 
mysql&gt; 
</pre>
</dd>
</dl>

<h3><a id="mysqladmin" name="mysqladmin"
href="manual_toc.html#mysqladmin">4.8.3 <code>mysqladmin</code>,
Administrating a MySQL Server</a></h3>

<p><a id="IDX750" name="IDX750"></a> <a id="IDX751"
name="IDX751"></a> <a id="IDX752" name="IDX752"></a></p>

<p>A utility for performing administrative operations. The syntax
is:</p>

<pre>
shell&gt; mysqladmin [OPTIONS] command [command-option] command ...
</pre>

<p>You can get a list of the options your version of
<code>mysqladmin</code> supports by executing <code>mysqladmin
--help</code>.</p>

<p>The current <code>mysqladmin</code> supports the following
commands:</p>

<dl compact="compact">
<dt><code>create databasename</code></dt>

<dd>Create a new database.</dd>

<dt><code>drop databasename</code></dt>

<dd>Delete a database and all its tables.</dd>

<dt><code>extended-status</code></dt>

<dd>Gives an extended status message from the server.</dd>

<dt><code>flush-hosts</code></dt>

<dd>Flush all cached hosts.</dd>

<dt><code>flush-logs</code></dt>

<dd>Flush all logs.</dd>

<dt><code>flush-tables</code></dt>

<dd>Flush all tables.</dd>

<dt><code>flush-privileges</code></dt>

<dd>Reload grant tables (same as reload).</dd>

<dt><code>kill id,id,...</code></dt>

<dd>Kill mysql threads.</dd>

<dt><code>password</code></dt>

<dd>Set a new password. Change old password to new-password.</dd>

<dt><code>ping</code></dt>

<dd>Check if mysqld is alive.</dd>

<dt><code>processlist</code></dt>

<dd>Show list of active threads in server.</dd>

<dt><code>reload</code></dt>

<dd>Reload grant tables.</dd>

<dt><code>refresh</code></dt>

<dd>Flush all tables and close and open logfiles.</dd>

<dt><code>shutdown</code></dt>

<dd>Take server down.</dd>

<dt><code>slave-start</code></dt>

<dd>Start slave replication thread.</dd>

<dt><code>slave-stop</code></dt>

<dd>Stop slave replication thread.</dd>

<dt><code>status</code></dt>

<dd>Gives a short status message from the server.</dd>

<dt><code>variables</code></dt>

<dd>Prints variables available.</dd>

<dt><code>version</code></dt>

<dd>Get version info from server.</dd>
</dl>

<p>All commands can be shortened to their unique prefix. For
example:</p>

<pre>
shell&gt; mysqladmin proc stat
+----+-------+-----------+----+-------------+------+-------+------+
| Id | User  | Host      | db | Command     | Time | State | Info |
+----+-------+-----------+----+-------------+------+-------+------+
| 6  | monty | localhost |    | Processlist | 0    |       |      |
+----+-------+-----------+----+-------------+------+-------+------+
Uptime: 10077  Threads: 1  Questions: 9  Slow queries: 0
Opens: 6 Flush tables: 1  Open tables: 2
Memory in use: 1092K  Max memory used: 1116K
</pre>

<p><a id="IDX753" name="IDX753"></a> The <code>mysqladmin
status</code> command result has the following columns:</p>

<p><a id="IDX754" name="IDX754"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Column</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>Uptime</td>
<td>Number of seconds the MySQL server has been up.</td>
</tr>

<tr>
<td>Threads</td>
<td>Number of active threads (clients). <a id="IDX755"
name="IDX755"></a></td>
</tr>

<tr>
<td>Questions</td>
<td>Number of questions from clients since <code>mysqld</code> was
started. <a id="IDX756" name="IDX756"></a></td>
</tr>

<tr>
<td>Slow queries</td>
<td>Queries that have taken more than <code>long_query_time</code>
seconds. See section <a href="manual.html#Slow_query_log">4.9.5 The
Slow Query Log</a>. <a id="IDX757" name="IDX757"></a></td>
</tr>

<tr>
<td>Opens</td>
<td>How many tables <code>mysqld</code> has opened. <a id="IDX758"
name="IDX758"></a></td>
</tr>

<tr>
<td>Flush tables</td>
<td>Number of <code>flush ...</code>, <code>refresh</code>, and
<code>reload</code> commands. <a id="IDX759" name="IDX759"></a> <a
id="IDX760" name="IDX760"></a></td>
</tr>

<tr>
<td>Open tables</td>
<td>Number of tables that are open now. <a id="IDX761"
name="IDX761"></a></td>
</tr>

<tr>
<td>Memory in use</td>
<td>Memory allocated directly by the <code>mysqld</code> code (only
available when MySQL is compiled with --with-debug=full). <a
id="IDX762" name="IDX762"></a></td>
</tr>

<tr>
<td>Max memory used</td>
<td>Maximum memory allocated directly by the <code>mysqld</code>
code (only available when MySQL is compiled with
--with-debug=full). <a id="IDX763" name="IDX763"></a></td>
</tr>
</table>

<br />
<br />
 

<p>If you do <code>mysqladmin shutdown</code> on a socket (in other
words, on a the computer where <code>mysqld</code> is running),
<code>mysqladmin</code> will wait until the MySQL
<code>pid-file</code> is removed to ensure that the
<code>mysqld</code> server has stopped properly.</p>

<h3><a id="Using_mysqlcheck" name="Using_mysqlcheck"
href="manual_toc.html#Using_mysqlcheck">4.8.4 Using
<code>mysqlcheck</code> for Table Maintenance and Crash
Recovery</a></h3>

<p>Since MySQL version 3.23.38 you will be able to use a new
checking and repairing tool for <code>MyISAM</code> tables. The
difference to <code>myisamchk</code> is that
<code>mysqlcheck</code> should be used when the <code>mysqld</code>
server is running, where as <code>myisamchk</code> should be used
when it is not. The benefit is that you no longer have to take the
server down for checking or repairing your tables.</p>

<p><code>mysqlcheck</code> uses MySQL server commands
<code>CHECK</code>, <code>REPAIR</code>, <code>ANALYZE</code> and
<code>OPTIMIZE</code> in a convenient way for the user.</p>

<p>There are three alternative ways to invoke
<code>mysqlcheck</code>:</p>

<pre>
shell&gt; mysqlcheck [OPTIONS] database [tables]
shell&gt; mysqlcheck [OPTIONS] --databases DB1 [DB2 DB3...]
shell&gt; mysqlcheck [OPTIONS] --all-databases
</pre>

<p>So it can be used in a similar way as <code>mysqldump</code>
when it comes to what databases and tables you want to choose.</p>

<p><code>mysqlcheck</code> does have a special feature compared to
the other clients; the default behaviour, checking tables (-c), can
be changed by renaming the binary. So if you want to have a tool
that repairs tables by default, you should just copy
<code>mysqlcheck</code> to your harddrive with a new name,
<code>mysqlrepair</code>, or alternatively make a symbolic link to
<code>mysqlrepair</code> and name the symbolic link as
<code>mysqlrepair</code>. If you invoke <code>mysqlrepair</code>
now, it will repair tables by default.</p>

<p>The names that you can use to change <code>mysqlcheck</code>
default behaviour are here:</p>

<pre>
mysqlrepair:   The default option will be -r
mysqlanalyze:  The default option will be -a
mysqloptimize: The default option will be -o
</pre>

<p>The options available for <code>mysqlcheck</code> are listed
here, please check what your version supports with <code>mysqlcheck
--help</code>.</p>

<dl compact="compact">
<dt><code>-A, --all-databases</code></dt>

<dd>Check all the databases. This will be same as --databases with
all databases selected</dd>

<dt><code>-1, --all-in-1</code></dt>

<dd>Instead of making one query for each table, execute all queries
in 1 query separately for each database. Table names will be in a
comma separated list.</dd>

<dt><code>-a, --analyze</code></dt>

<dd>Analyse given tables.</dd>

<dt><code>--auto-repair</code></dt>

<dd>If a checked table is corrupted, automatically fix it.
Repairing will be done after all tables have been checked, if
corrupted ones were found.</dd>

<dt><code>-#, --debug=...</code></dt>

<dd>Output debug log. Often this is 'd:t:o,filename'</dd>

<dt><code>--character-sets-dir=...</code></dt>

<dd>Directory where character sets are</dd>

<dt><code>-c, --check</code></dt>

<dd>Check table for errors</dd>

<dt><code>-C, --check-only-changed</code></dt>

<dd>Check only tables that have changed since last check or haven't
been closed properly.</dd>

<dt><code>--compress</code></dt>

<dd>Use compression in server/client protocol.</dd>

<dt><code>-?, --help</code></dt>

<dd>Display this help message and exit.</dd>

<dt><code>-B, --databases</code></dt>

<dd>To check several databases. Note the difference in usage; in
this case no tables are given. All name arguments are regarded as
database names.</dd>

<dt><code>--default-character-set=...</code></dt>

<dd>Set the default character set</dd>

<dt><code>-F, --fast</code></dt>

<dd>Check only tables that hasn't been closed properly</dd>

<dt><code>-f, --force</code></dt>

<dd>Continue even if we get an sql-error.</dd>

<dt><code>-e, --extended</code></dt>

<dd>If you are using this option with CHECK TABLE, it will ensure
that the table is 100 percent consistent, but will take a long
time. If you are using this option with REPAIR TABLE, it will run
an extended repair on the table, which may not only take a long
time to execute, but may produce a lot of garbage rows also!</dd>

<dt><code>-h, --host=...</code></dt>

<dd>Connect to host.</dd>

<dt><code>-m, --medium-check</code></dt>

<dd>Faster than extended-check, but only finds 99.99 percent of all
errors. Should be good enough for most cases.</dd>

<dt><code>-o, --optimize</code></dt>

<dd>Optimise table</dd>

<dt><code>-p, --password[=...]</code></dt>

<dd>Password to use when connecting to server. If password is not
given it's solicited on the tty.</dd>

<dt><code>-P, --port=...</code></dt>

<dd>Port number to use for connection.</dd>

<dt><code>-q, --quick</code></dt>

<dd>If you are using this option with CHECK TABLE, it prevents the
check from scanning the rows to check for wrong links. This is the
fastest check. If you are using this option with REPAIR TABLE, it
will try to repair only the index tree. This is the fastest repair
method for a table.</dd>

<dt><code>-r, --repair</code></dt>

<dd>Can fix almost anything except unique keys that aren't
unique.</dd>

<dt><code>-s, --silent</code></dt>

<dd>Print only error messages.</dd>

<dt><code>-S, --socket=...</code></dt>

<dd>Socket file to use for connection.</dd>

<dt><code>--tables</code></dt>

<dd>Overrides option --databases (-B).</dd>

<dt><code>-u, --user=#</code></dt>

<dd>User for login if not current user.</dd>

<dt><code>-v, --verbose</code></dt>

<dd>Print info about the various stages.</dd>

<dt><code>-V, --version</code></dt>

<dd>Output version information and exit.</dd>
</dl>

<h3><a id="mysqldump" name="mysqldump"
href="manual_toc.html#mysqldump">4.8.5 <code>mysqldump</code>,
Dumping Table Structure and Data</a></h3>

<p><a id="IDX764" name="IDX764"></a> <a id="IDX765"
name="IDX765"></a> <a id="IDX766" name="IDX766"></a> <a id="IDX767"
name="IDX767"></a></p>

<p><a id="IDX768" name="IDX768"></a> Utility to dump a database or
a collection of database for backup or for transferring the data to
another SQL server (not necessarily a MySQL server). The dump will
contain SQL statements to create the table and/or populate the
table.</p>

<p>If you are doing a backup on the server, you should consider
using the <code>mysqlhotcopy</code> instead. See section <a
href="manual.html#mysqlhotcopy">4.8.6 <code>mysqlhotcopy</code>,
Copying MySQL Databases and Tables</a>.</p>

<pre>
shell&gt; mysqldump [OPTIONS] database [tables]
OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]
OR     mysqldump [OPTIONS] --all-databases [OPTIONS]
</pre>

<p>If you don't give any tables or use the <code>--databases</code>
or <code>--all-databases</code>, the whole database(s) will be
dumped.</p>

<p>You can get a list of the options your version of
<code>mysqldump</code> supports by executing <code>mysqldump
--help</code>.</p>

<p>Note that if you run <code>mysqldump</code> without
<code>--quick</code> or <code>--opt</code>, <code>mysqldump</code>
will load the whole result set into memory before dumping the
result. This will probably be a problem if you are dumping a big
database.</p>

<p>Note that if you are using a new copy of the
<code>mysqldump</code> program and you are going to do a dump that
will be read into a very old MySQL server, you should not use the
<code>--opt</code> or <code>-e</code> options.</p>

<p><code>mysqldump</code> supports the following options:</p>

<dl compact="compact">
<dt><code>--add-locks</code></dt>

<dd>Add <code>LOCK TABLES</code> before and <code>UNLOCK
TABLE</code> after each table dump. (To get faster inserts into
MySQL.)</dd>

<dt><code>--add-drop-table</code></dt>

<dd>Add a <code>drop table</code> before each create
statement.</dd>

<dt><code>-A, --all-databases</code></dt>

<dd>Dump all the databases. This will be same as
<code>--databases</code> with all databases selected.</dd>

<dt><code>-a, --all</code></dt>

<dd>Include all MySQL-specific create options.</dd>

<dt><code>--allow-keywords</code></dt>

<dd>Allow creation of column names that are keywords. This works by
prefixing each column name with the table name.</dd>

<dt><code>-c, --complete-insert</code></dt>

<dd>Use complete insert statements (with column names).</dd>

<dt><code>-C, --compress</code></dt>

<dd>Compress all information between the client and the server if
both support compression.</dd>

<dt><code>-B, --databases</code></dt>

<dd>To dump several databases. Note the difference in usage. In
this case no tables are given. All name arguments are regarded as
database names. <code>USE db_name;</code> will be included in the
output before each new database.</dd>

<dt><code>--delayed</code></dt>

<dd>Insert rows with the <code>INSERT DELAYED</code> command.</dd>

<dt><code>-e, --extended-insert</code></dt>

<dd>Use the new multiline <code>INSERT</code> syntax. (Gives more
compact and faster inserts statements.)</dd>

<dt><code>-#, --debug[=option_string]</code></dt>

<dd>Trace usage of the program (for debugging).</dd>

<dt><code>--help</code></dt>

<dd>Display a help message and exit.</dd>

<dt><code>--fields-terminated-by=...</code></dt>

<dt><code>--fields-enclosed-by=...</code></dt>

<dt><code>--fields-optionally-enclosed-by=...</code></dt>

<dt><code>--fields-escaped-by=...</code></dt>

<dt><code>--lines-terminated-by=...</code></dt>

<dd>These options are used with the <code>-T</code> option and have
the same meaning as the corresponding clauses for <code>LOAD DATA
INFILE</code>. See section <a href="manual.html#LOAD_DATA">6.4.9
<code>LOAD DATA INFILE</code> Syntax</a>.</dd>

<dt><code>-F, --flush-logs</code></dt>

<dd>Flush log file in the MySQL server before starting the
dump.</dd>

<dt><code>-f, --force,</code></dt>

<dd>Continue even if we get a SQL error during a table dump.</dd>

<dt><code>-h, --host=..</code></dt>

<dd>Dump data from the MySQL server on the named host. The default
host is <code>localhost</code>.</dd>

<dt><code>-l, --lock-tables.</code></dt>

<dd>Lock all tables before starting the dump. The tables are locked
with <code>READ LOCAL</code> to allow concurrent inserts in the
case of <code>MyISAM</code> tables. Please note that when dumping
multiple databases, <code>--lock-tables</code> will lock tables for
each database separately. So using this option will not guarantee
your tables will be logically consistent between databases. Tables
in different databases may be dumped in completely different
states.</dd>

<dt><code>-K, --disable-keys</code></dt>

<dd><code>/*!40000 ALTER TABLE tb_name DISABLE KEYS */;</code> and
<code>/*!40000 ALTER TABLE tb_name ENABLE KEYS */;</code> will be
put in the output. This will make loading the data into a MySQL 4.0
server faster as the indexes are created after all data are
inserted.</dd>

<dt><code>-n, --no-create-db</code></dt>

<dd><code>CREATE DATABASE /*!32312 IF NOT EXISTS*/ db_name;</code>
will not be put in the output. The above line will be added
otherwise, if a <code>--databases</code> or
<code>--all-databases</code> option was given.</dd>

<dt><code>-t, --no-create-info</code></dt>

<dd>Don't write table creation information (the <code>CREATE
TABLE</code> statement).</dd>

<dt><code>-d, --no-data</code></dt>

<dd>Don't write any row information for the table. This is very
useful if you just want to get a dump of the structure for a
table!</dd>

<dt><code>--opt</code></dt>

<dd>Same as <code>--quick --add-drop-table --add-locks
--extended-insert --lock-tables</code>. Should give you the fastest
possible dump for reading into a MySQL server.</dd>

<dt><code>-pyour_pass, --password[=your_pass]</code></dt>

<dd>The password to use when connecting to the server. If you
specify no <samp>`=your_pass'</samp> part, <code>mysqldump</code>
you will be prompted for a password.</dd>

<dt><code>-P port_num, --port=port_num</code></dt>

<dd>The TCP/IP port number to use for connecting to a host. (This
is used for connections to hosts other than <code>localhost</code>,
for which Unix sockets are used.)</dd>

<dt><code>-q, --quick</code></dt>

<dd>Don't buffer query, dump directly to stdout. Uses
<code>mysql_use_result()</code> to do this.</dd>

<dt><code>-Q, --quote-names</code></dt>

<dd>Quote table and column names within <samp>``'</samp>
characters.</dd>

<dt><code>-r, --result-file=...</code></dt>

<dd>Direct output to a given file. This option should be used in
MSDOS, because it prevents new line <samp>`\n'</samp> from being
converted to <samp>`\n\r'</samp> (new line + carriage return).</dd>

<dt><code>--single-transaction</code></dt>

<dd>This option issues a <code>BEGIN</code> SQL command before
dumping data from server. It is mostly useful with
<code>InnoDB</code> tables and <code>READ_COMMITTED</code>
transaction isolation level, as in this mode it will dump the
consistent state of the database at the time then
<code>BEGIN</code> was issued without blocking any applications.
When using this option you should keep in mind that only
transactional tables will be dumped in a consistent state, e.g.,
any <code>MyISAM</code> or <code>HEAP</code> tables dumped while
using this option may still change state. The
<code>--single-transaction</code> option was added in version
4.0.2. This option is mutually exclusive with the
<code>--lock-tables</code> option as <code>LOCK TABLES</code>
already commits a previous transaction internally.</dd>

<dt><code>-S /path/to/socket, --socket=/path/to/socket</code></dt>

<dd>The socket file to use when connecting to
<code>localhost</code> (which is the default host).</dd>

<dt><code>--tables</code></dt>

<dd>Overrides option --databases (-B).</dd>

<dt><code>-T, --tab=path-to-some-directory</code></dt>

<dd>Creates a <code>table_name.sql</code> file, that contains the
SQL CREATE commands, and a <code>table_name.txt</code> file, that
contains the data, for each give table. The format of the
<tt>`.txt'</tt> file is made according to the
<code>--fields-xxx</code> and <code>--lines--xxx</code> options.
<strong>Note</strong>: This option only works if
<code>mysqldump</code> is run on the same machine as the
<code>mysqld</code> daemon, and the user/group that
<code>mysqld</code> is running as (normally user
<code>mysql</code>, group <code>mysql</code>) needs to have
permission to create/write a file at the location you specify.</dd>

<dt><code>-u user_name, --user=user_name</code></dt>

<dd>The MySQL user name to use when connecting to the server. The
default value is your Unix login name.</dd>

<dt><code>-O var=option, --set-variable var=option</code></dt>

<dd>Set the value of a variable. The possible variables are listed
below. Please note that <code>--set-variable</code> is deprecated
since MySQL 4.0, just use <code>--var=option</code> on its
own.</dd>

<dt><code>-v, --verbose</code></dt>

<dd>Verbose mode. Print out more information on what the program
does.</dd>

<dt><code>-V, --version</code></dt>

<dd>Print version information and exit.</dd>

<dt><code>-w, --where='where-condition'</code></dt>

<dd>Dump only selected records. Note that quotes are
mandatory:</dd>

<dt><code>-X, --xml</code></dt>

<dd>Dumps a database as well formed XML</dd>

<dt><code>-x, --first-slave</code></dt>

<dd>Locks all tables across all databases. 

<pre>
"--where=user='jimf'" "-wuserid&gt;1" "-wuserid&lt;1"
</pre>
</dd>

<dt><code>-O net_buffer_length=#, where # &lt; 16M</code></dt>

<dd>When creating multi-row-insert statements (as with option
<code>--extended-insert</code> or <code>--opt</code>),
<code>mysqldump</code> will create rows up to
<code>net_buffer_length</code> length. If you increase this
variable, you should also ensure that the
<code>max_allowed_packet</code> variable in the MySQL server is
bigger than the <code>net_buffer_length</code>.</dd>
</dl>

<p>The most normal use of <code>mysqldump</code> is probably for
making a backup of whole databases. See section <a
href="manual.html#Backup">4.4.1 Database Backups</a>.</p>

<pre>
mysqldump --opt database &gt; backup-file.sql
</pre>

<p>You can read this back into MySQL with:</p>

<pre>
mysql database &lt; backup-file.sql
</pre>

<p>or</p>

<pre>
mysql -e "source /patch-to-backup/backup-file.sql" database
</pre>

<p>However, it's also very useful to populate another MySQL server
with information from a database:</p>

<pre>
mysqldump --opt database | mysql --host=remote-host -C database
</pre>

<p>It is possible to dump several databases with one command:</p>

<pre>
mysqldump --databases database1 [database2 ...] &gt; my_databases.sql
</pre>

<p>If all the databases are wanted, one can use:</p>

<pre>
mysqldump --all-databases &gt; all_databases.sql
</pre>

<h3><a id="mysqlhotcopy" name="mysqlhotcopy"
href="manual_toc.html#mysqlhotcopy">4.8.6
<code>mysqlhotcopy</code>, Copying MySQL Databases and
Tables</a></h3>

<p><a id="IDX769" name="IDX769"></a> <a id="IDX770"
name="IDX770"></a> <a id="IDX771" name="IDX771"></a> <a id="IDX772"
name="IDX772"></a></p>

<p><code>mysqlhotcopy</code> is a Perl script that uses <code>LOCK
TABLES</code>, <code>FLUSH TABLES</code> and <code>cp</code> or
<code>scp</code> to quickly make a backup of a database. It's the
fastest way to make a backup of the database or single tables, but
it can only be run on the same machine where the database
directories are.</p>

<pre>
mysqlhotcopy db_name [/path/to/new_directory]

mysqlhotcopy db_name_1 ... db_name_n /path/to/new_directory

mysqlhotcopy db_name./regex/
</pre>

<p><code>mysqlhotcopy</code> supports the following options:</p>

<dl compact="compact">
<dt><code>-?, --help</code></dt>

<dd>Display a help screen and exit</dd>

<dt><code>-u, --user=#</code></dt>

<dd>User for database login</dd>

<dt><code>-p, --password=#</code></dt>

<dd>Password to use when connecting to server</dd>

<dt><code>-P, --port=#</code></dt>

<dd>Port to use when connecting to local server</dd>

<dt><code>-S, --socket=#</code></dt>

<dd>Socket to use when connecting to local server</dd>

<dt><code>--allowold</code></dt>

<dd>Don't abort if target already exists (rename it _old)</dd>

<dt><code>--keepold</code></dt>

<dd>Don't delete previous (now renamed) target when done</dd>

<dt><code>--noindices</code></dt>

<dd>Don't include full index files in copy to make the backup
smaller and faster The indexes can later be reconstructed with
<code>myisamchk -rq.</code>.</dd>

<dt><code>--method=#</code></dt>

<dd>Method for copy (<code>cp</code> or <code>scp</code>).</dd>

<dt><code>-q, --quiet</code></dt>

<dd>Be silent except for errors</dd>

<dt><code>--debug</code></dt>

<dd>Enable debug</dd>

<dt><code>-n, --dryrun</code></dt>

<dd>Report actions without doing them</dd>

<dt><code>--regexp=#</code></dt>

<dd>Copy all databases with names matching regexp</dd>

<dt><code>--suffix=#</code></dt>

<dd>Suffix for names of copied databases</dd>

<dt><code>--checkpoint=#</code></dt>

<dd>Insert checkpoint entry into specified db.table</dd>

<dt><code>--flushlog</code></dt>

<dd>Flush logs once all tables are locked.</dd>

<dt><code>--tmpdir=#</code></dt>

<dd>Temporary directory (instead of /tmp).</dd>
</dl>

<p>You can use <code>perldoc mysqlhotcopy</code> to get more
complete documentation for <code>mysqlhotcopy</code>.</p>

<p><code>mysqlhotcopy</code> reads the groups <code>[client]</code>
and <code>[mysqlhotcopy]</code> from the option files.</p>

<p>To be able to execute <code>mysqlhotcopy</code> you need write
access to the backup directory, the <code>SELECT</code> privilege
for the tables you are about to copy and the MySQL
<code>RELOAD</code> privilege (to be able to execute <code>FLUSH
TABLES</code>).</p>

<h3><a id="mysqlimport" name="mysqlimport"
href="manual_toc.html#mysqlimport">4.8.7 <code>mysqlimport</code>,
Importing Data from Text Files</a></h3>

<p><a id="IDX773" name="IDX773"></a> <a id="IDX774"
name="IDX774"></a> <a id="IDX775" name="IDX775"></a> <a id="IDX776"
name="IDX776"></a> <a id="IDX777" name="IDX777"></a></p>

<p><code>mysqlimport</code> provides a command-line interface to
the <code>LOAD DATA INFILE</code> SQL statement. Most options to
<code>mysqlimport</code> correspond directly to the same options to
<code>LOAD DATA INFILE</code>. See section <a
href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>.</p>

<p><code>mysqlimport</code> is invoked like this:</p>

<pre>
shell&gt; mysqlimport [options] database textfile1 [textfile2 ...]
</pre>

<p>For each text file named on the command-line,
<code>mysqlimport</code> strips any extension from the filename and
uses the result to determine which table to import the file's
contents into. For example, files named <tt>`patient.txt'</tt>,
<tt>`patient.text'</tt>, and <tt>`patient'</tt> would all be
imported into a table named <code>patient</code>.</p>

<p><code>mysqlimport</code> supports the following options:</p>

<dl compact="compact">
<dt><code>-c, --columns=...</code></dt>

<dd>This option takes a comma-separated list of field names as an
argument. The field list is used to create a proper <code>LOAD DATA
INFILE</code> command, which is then passed to MySQL. See section
<a href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>.</dd>

<dt><code>-C, --compress</code></dt>

<dd>Compress all information between the client and the server if
both support compression.</dd>

<dt><code>-#, --debug[=option_string]</code></dt>

<dd>Trace usage of the program (for debugging).</dd>

<dt><code>-d, --delete</code></dt>

<dd>Empty the table before importing the text file.</dd>

<dt><code>--fields-terminated-by=...</code></dt>

<dt><code>--fields-enclosed-by=...</code></dt>

<dt><code>--fields-optionally-enclosed-by=...</code></dt>

<dt><code>--fields-escaped-by=...</code></dt>

<dt><code>--lines-terminated-by=...</code></dt>

<dd>These options have the same meaning as the corresponding
clauses for <code>LOAD DATA INFILE</code>. See section <a
href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>.</dd>

<dt><code>-f, --force</code></dt>

<dd>Ignore errors. For example, if a table for a text file doesn't
exist, continue processing any remaining files. Without
<code>--force</code>, <code>mysqlimport</code> exits if a table
doesn't exist.</dd>

<dt><code>--help</code></dt>

<dd>Display a help message and exit.</dd>

<dt><code>-h host_name, --host=host_name</code></dt>

<dd>Import data to the MySQL server on the named host. The default
host is <code>localhost</code>.</dd>

<dt><code>-i, --ignore</code></dt>

<dd>See the description for the <code>--replace</code> option.</dd>

<dt><code>-l, --lock-tables</code></dt>

<dd>Lock <strong>all</strong> tables for writing before processing
any text files. This ensures that all tables are synchronised on
the server.</dd>

<dt><code>-L, --local</code></dt>

<dd>Read input files from the client. By default, text files are
assumed to be on the server if you connect to
<code>localhost</code> (which is the default host).</dd>

<dt><code>-pyour_pass, --password[=your_pass]</code></dt>

<dd>The password to use when connecting to the server. If you
specify no <samp>`=your_pass'</samp> part, <code>mysqlimport</code>
you will be prompted for a password.</dd>

<dt><code>-P port_num, --port=port_num</code></dt>

<dd>The TCP/IP port number to use for connecting to a host. (This
is used for connections to hosts other than <code>localhost</code>,
for which Unix sockets are used.)</dd>

<dt><code>-r, --replace</code></dt>

<dd>The <code>--replace</code> and <code>--ignore</code> options
control handling of input records that duplicate existing records
on unique key values. If you specify <code>--replace</code>, new
rows replace existing rows that have the same unique key value. If
you specify <code>--ignore</code>, input rows that duplicate an
existing row on a unique key value are skipped. If you don't
specify either option, an error occurs when a duplicate key value
is found, and the rest of the text file is ignored.</dd>

<dt><code>-s, --silent</code></dt>

<dd>Silent mode. Write output only when errors occur.</dd>

<dt><code>-S /path/to/socket, --socket=/path/to/socket</code></dt>

<dd>The socket file to use when connecting to
<code>localhost</code> (which is the default host).</dd>

<dt><code>-u user_name, --user=user_name</code></dt>

<dd>The MySQL user name to use when connecting to the server. The
default value is your Unix login name.</dd>

<dt><code>-v, --verbose</code></dt>

<dd>Verbose mode. Print out more information what the program
does.</dd>

<dt><code>-V, --version</code></dt>

<dd>Print version information and exit.</dd>
</dl>

<p>Here is a sample run using <code>mysqlimport</code>:</p>

<pre>
$ mysql --version
mysql  Ver 9.33 Distrib 3.22.25, for pc-linux-gnu (i686)
$ uname -a
Linux xxx.com 2.2.5-15 #1 Mon Apr 19 22:21:09 EDT 1999 i586 unknown
$ mysql -e 'CREATE TABLE imptest(id INT, n VARCHAR(30))' test
$ ed
a
100     Max Sydow
101     Count Dracula
.
w imptest.txt
32
q
$ od -c imptest.txt
0000000   1   0   0  \t   M   a   x       S   y   d   o   w  \n   1   0
0000020   1  \t   C   o   u   n   t       D   r   a   c   u   l   a  \n
0000040
$ mysqlimport --local test imptest.txt
test.imptest: Records: 2  Deleted: 0  Skipped: 0  Warnings: 0
$ mysql -e 'SELECT * FROM imptest' test
+------+---------------+
| id   | n             |
+------+---------------+
|  100 | Max Sydow     |
|  101 | Count Dracula |
+------+---------------+
</pre>

<h3><a id="mysqlshow" name="mysqlshow"
href="manual_toc.html#mysqlshow">4.8.8 Showing Databases, Tables,
and Columns</a></h3>

<p><a id="IDX778" name="IDX778"></a> <a id="IDX779"
name="IDX779"></a> <a id="IDX780" name="IDX780"></a> <a id="IDX781"
name="IDX781"></a> <a id="IDX782" name="IDX782"></a></p>

<p><code>mysqlshow</code> can be used to quickly look at which
databases exist, their tables, and the table's columns.</p>

<p>With the <code>mysql</code> program you can get the same
information with the <code>SHOW</code> commands. See section <a
href="manual.html#SHOW">4.5.6 <code>SHOW</code> Syntax</a>.</p>

<p><code>mysqlshow</code> is invoked like this:</p>

<pre>
shell&gt; mysqlshow [OPTIONS] [database [table [column]]]
</pre>

<ul>
<li>If no database is given, all matching databases are shown.</li>

<li>If no table is given, all matching tables in the database are
shown.</li>

<li>If no column is given, all matching columns and column types in
the table are shown.</li>
</ul>

<p>Note that in newer MySQL versions, you only see those
database/tables/columns for which you have some privileges.</p>

<p>If the last argument contains a shell or SQL wildcard
(<code>*</code>, <code>?</code>, <code>%</code> or <code>_</code>)
then only what's matched by the wildcard is shown. If a database
contains underscore(s), those should be escaped with backslash
(some Unix shells will require two), in order to get tables /
columns properly. '*' are converted into SQL '%' wildcard and '?'
into SQL '_' wildcard. This may cause some confusion when you try
to display the columns for a table with a <code>_</code> as in this
case <code>mysqlshow</code> only shows you the table names that
match the pattern. This is easily fixed by adding an extra
<code>%</code> last on the command-line (as a separate
argument).</p>

<h3><a id="perror" name="perror"
href="manual_toc.html#perror">4.8.9 perror, Explaining Error
Codes</a></h3>

<p><a id="IDX783" name="IDX783"></a> <a id="IDX784"
name="IDX784"></a></p>

<p><a id="IDX785" name="IDX785"></a> <a id="IDX786"
name="IDX786"></a></p>

<p>For most system errors MySQL will, in addition to a internal
text message, also print the system error code in one of the
following styles: <code>message ... (errno: #)</code> or
<code>message ... (Errcode: #)</code>.</p>

<p>You can find out what the error code means by either examining
the documentation for your system or use the <code>perror</code>
utility.</p>

<p><code>perror</code> prints a description for a system error
code, or an MyISAM/ISAM storage engine (table handler) error
code.</p>

<p><code>perror</code> is invoked like this:</p>

<pre>
shell&gt; perror [OPTIONS] [ERRORCODE [ERRORCODE...]]

Example:

shell&gt; perror 13 64
Error code  13:  Permission denied
Error code  64:  Machine is not on the network
</pre>

<p>Note that the error messages are mostly system dependent!</p>

<h3><a id="Batch_Commands" name="Batch_Commands"
href="manual_toc.html#Batch_Commands">4.8.10 How to Run SQL
Commands from a Text File</a></h3>

<p>The <code>mysql</code> client typically is used interactively,
like this:</p>

<pre>
shell&gt; mysql database
</pre>

<p>However, it's also possible to put your SQL commands in a file
and tell <code>mysql</code> to read its input from that file. To do
so, create a text file <tt>`text_file'</tt> that contains the
commands you wish to execute. Then invoke <code>mysql</code> as
shown here:</p>

<pre>
shell&gt; mysql database &lt; text_file
</pre>

<p>You can also start your text file with a <code>USE
db_name</code> statement. In this case, it is unnecessary to
specify the database name on the command line:</p>

<pre>
shell&gt; mysql &lt; text_file
</pre>

<p>If you are already running <code>mysql</code>, you can execute a
SQL script file using the <code>source</code> command:</p>

<pre>
mysql&gt; source filename;
</pre>

<p>For more information about batch mode, section <a
href="manual.html#Batch_mode">3.6 Using <code>mysql</code> in Batch
Mode</a>.</p>

<h2><a id="Log_Files" name="Log_Files"
href="manual_toc.html#Log_Files">4.9 The MySQL Log Files</a></h2>

<p><a id="IDX787" name="IDX787"></a></p>

<p>MySQL has several different log files that can help you find out
what's going on inside <code>mysqld</code>:</p>

<table border="1" width="100%">
<tr>
<td><strong>Log file</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>The error log</td>
<td>Problems encountering starting, running or stopping
<code>mysqld</code>.</td>
</tr>

<tr>
<td>The isam log</td>
<td>Logs all changes to the ISAM tables. Used only for debugging
the isam code.</td>
</tr>

<tr>
<td>The query log</td>
<td>Established connections and executed queries.</td>
</tr>

<tr>
<td>The update log</td>
<td>Deprecated: Stores all statements that changes data</td>
</tr>

<tr>
<td>The binary log</td>
<td>Stores all statements that changes something. Used also for
replication</td>
</tr>

<tr>
<td>The slow log</td>
<td>Stores all queries that took more than
<code>long_query_time</code> to execute or didn't use indexes.</td>
</tr>
</table>

<p>All logs can be found in the <code>mysqld</code> data directory.
You can force <code>mysqld</code> to reopen the log files (or in
some cases switch to a new log) by executing <code>FLUSH
LOGS</code>. See section <a href="manual.html#FLUSH">4.5.3
<code>FLUSH</code> Syntax</a>.</p>

<h3><a id="Error_log" name="Error_log"
href="manual_toc.html#Error_log">4.9.1 The Error Log</a></h3>

<p>The error log file contains information indicating when
<code>mysqld</code> was started and stopped and also any critical
errors found when running.</p>

<p>If <code>mysqld</code> dies unexpectedly and
<code>mysqld_safe</code> needs to restart <code>mysqld</code>,
<code>mysqld_safe</code> will write a <code>restarted mysqld</code>
row in this file. This log also holds a warning if
<code>mysqld</code> notices a table that needs to be automatically
checked or repaired.</p>

<p>On some operating systems, the error log will contain a stack
trace for where <code>mysqld</code> died. This can be used to find
out where <code>mysqld</code> died. See section <a
href="manual.html#Using_stack_trace">E.1.4 Using a Stack
Trace</a>.</p>

<p>Beginning with MySQL 4.0.10 you can specify where
<code>mysqld</code> stores the error log file with the option
<code>--log-error[=filename]</code>. If no file name is given
<code>mysqld</code> will use
<code>mysql-data-dir/'hostname'.err</code> on Unix and
<tt>`\mysql\data\mysql.err'</tt> on windows. If you execute
<code>flush logs</code> the old file will be prefixed with
<code>--old</code> and <code>mysqld</code> will create a new empty
log file.</p>

<p>In older MySQL versions the error log handling was done by
<code>mysqld_safe</code> which redirected the error file to
<code>'hostname'.err</code>. One could change this file name with
the option <code>--err-log=filename</code>.</p>

<p>If you don't specify <code>--log-error</code> or if you use the
<code>--console</code> option the errors will be written to stderr
(the terminal).</p>

<p>On windows the output is always done to the <code>.err</code>
file if <code>--console</code> is not given.</p>

<h3><a id="Query_log" name="Query_log"
href="manual_toc.html#Query_log">4.9.2 The General Query
Log</a></h3>

<p><a id="IDX788" name="IDX788"></a> <a id="IDX789"
name="IDX789"></a></p>

<p>If you want to know what happens within <code>mysqld</code>, you
should start it with <code>--log[=file]</code>. This will log all
connections and queries to the log file (by default named
<tt>`'hostname'.log'</tt>). This log can be very useful when you
suspect an error in a client and want to know exactly what
<code>mysqld</code> thought the client sent to it.</p>

<p>Older versions of the <code>mysql.server</code> script (from
MySQL 3.23.4 to 3.23.8) pass <code>safe_mysqld</code> a
<code>--log</code> option (enable general query log). If you need
better performance when you start using MySQL in a production
environment, you can remove the <code>--log</code> option from
<code>mysql.server</code> or change it to <code>--log-bin</code>.
See section <a href="manual.html#Binary_log">4.9.4 The Binary
Update Log</a>.</p>

<p>The entries in this log are written as <code>mysqld</code>
receives the questions. This may be different from the order in
which the statements are executed. This is in contrast to the
update log and the binary log which are written after the query is
executed, but before any locks are released.</p>

<h3><a id="Update_log" name="Update_log"
href="manual_toc.html#Update_log">4.9.3 The Update Log</a></h3>

<p><a id="IDX790" name="IDX790"></a> <a id="IDX791"
name="IDX791"></a></p>

<p><strong>Note</strong>: the update log is replaced by the binary
log. See section <a href="manual.html#Binary_log">4.9.4 The Binary
Update Log</a>. With this you can do anything that you can do with
the update log.</p>

<p>When started with the <code>--log-update[=file_name]</code>
option, <code>mysqld</code> writes a log file containing all SQL
commands that update data. If no filename is given, it defaults to
the name of the host machine. If a filename is given, but it
doesn't contain a path, the file is written in the data directory.
If <tt>`file_name'</tt> doesn't have an extension,
<code>mysqld</code> will create log file names like so:
<tt>`file_name.###'</tt>, where <code>###</code> is a number that
is incremented each time you execute <code>mysqladmin
refresh</code>, execute <code>mysqladmin flush-logs</code>, execute
the <code>FLUSH LOGS</code> statement, or restart the server.</p>

<p><strong>Note</strong>: for the above scheme to work, you must
not create your own files with the same filename as the update log
+ some extensions that may be regarded as a number, in the
directory used by the update log!</p>

<p>If you use the <code>--log</code> or <code>-l</code> options,
<code>mysqld</code> writes a general log with a filename of
<tt>`hostname.log'</tt>, and restarts and refreshes do not cause a
new log file to be generated (although it is closed and reopened).
In this case you can copy it (on Unix) by doing:</p>

<pre>
mv hostname.log hostname-old.log
mysqladmin flush-logs
cp hostname-old.log to-backup-directory
rm hostname-old.log
</pre>

<p>Update logging is smart because it logs only statements that
really update data. So an <code>UPDATE</code> or a
<code>DELETE</code> with a <code>WHERE</code> that finds no rows is
not written to the log. It even skips <code>UPDATE</code>
statements that set a column to the value it already has.</p>

<p>The update logging is done immediately after a query completes
but before any locks are released or any commit is done. This
ensures that the log will be logged in the execution order.</p>

<p>If you want to update a database from update log files, you
could do the following (assuming your update logs have names of the
form <tt>`file_name.###'</tt>):</p>

<pre>
shell&gt; ls -1 -t -r file_name.[0-9]* | xargs cat | mysql
</pre>

<p><code>ls</code> is used to get all the log files in the right
order.</p>

<p>This can be useful if you have to revert to backup files after a
crash and you want to redo the updates that occurred between the
time of the backup and the crash.</p>

<h3><a id="Binary_log" name="Binary_log"
href="manual_toc.html#Binary_log">4.9.4 The Binary Update
Log</a></h3>

<p><a id="IDX792" name="IDX792"></a> <a id="IDX793"
name="IDX793"></a></p>

<p>The intention is that the binary log should replace the update
log, so we recommend you to switch to this log format as soon as
possible!</p>

<p>The binary log contains all information that is available in the
update log in a more efficient format. It also contains information
about how long each query took that updated the database. It
doesn't contain queries that don't modify any data. If you want to
log all queries (for example to find a problem query) you should
use the general query log. See section <a
href="manual.html#Query_log">4.9.2 The General Query Log</a>.</p>

<p>The binary log is also used when you are replicating a slave
from a master. See section <a href="manual.html#Replication">4.10
Replication in MySQL</a>.</p>

<p>When started with the <code>--log-bin[=file_name]</code> option,
<code>mysqld</code> writes a log file containing all SQL commands
that update data. If no file name is given, it defaults to the name
of the host machine followed by <code>-bin</code>. If file name is
given, but it doesn't contain a path, the file is written in the
data directory.</p>

<p>If you supply an extension to
<code>--log-bin=filename.extension</code>, the extension will be
silenty removed.</p>

<p>To the binary log filename <code>mysqld</code> will append an
extension that is a number that is incremented each time you
execute <code>mysqladmin refresh</code>, execute <code>mysqladmin
flush-logs</code>, execute the <code>FLUSH LOGS</code> statement or
restart the server. A new binary log will also automatically be
created when it reaches <code>max_binlog_size</code>. You can
delete all not active binary log files with the <code>RESET
MASTER</code> command. See section <a
href="manual.html#RESET">4.5.4 <code>RESET</code> Syntax</a>.</p>

<p>You can use the following options to <code>mysqld</code> to
affect what is logged to the binary log:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>binlog-do-db=database_name</code></td>
<td>Tells the master that it should log updates to the binary log
if the current (i.e. selected) database is 'database_name'. All
others databases which are not explicitly mentioned are ignored.
Note that if you use this you should ensure that you only do
updates in the current database. (Example:
<code>binlog-do-db=some_database</code>)</td>
</tr>

<tr>
<td><code>binlog-ignore-db=database_name</code></td>
<td>Tells the master that updates where the current (i.e. selected)
database is 'database_name' should not be stored in the binary log.
Note that if you use this you should ensure that you only do
updates in the current database. (Example:
<code>binlog-ignore-db=some_database</code>)</td>
</tr>
</table>

<p>To be able to know which different binary log files have been
used, <code>mysqld</code> will also create a binary log index file
that contains the name of all used binary log files. By default
this has the same name as the binary log file, with the extension
<code>'.index'</code>. You can change the name of the binary log
index file with the <code>--log-bin-index=[filename]</code>
option.</p>

<p>If you are using replication, you should not delete old binary
log files until you are sure that no slave will ever need to use
them. One way to do this is to do <code>mysqladmin
flush-logs</code> once a day and then remove any logs that are more
than 3 days old.</p>

<p><a id="IDX794" name="IDX794"></a> You can examine the binary log
file with the <code>mysqlbinlog</code> command. For example, you
can update a MySQL server from the binary log as follows:</p>

<pre>
shell&gt; mysqlbinlog log-file | mysql -h server_name
</pre>

<p>You can also use the <code>mysqlbinlog</code> program to read
the binary log directly from a remote MySQL server!</p>

<p><code>mysqlbinlog --help</code> will give you more information
of how to use this program!</p>

<p>If you are using <code>BEGIN [WORK]</code> or <code>SET
AUTOCOMMIT=0</code>, you must use the MySQL binary log for backups
instead of the old update log.</p>

<p>The binary logging is done immediately after a query completes
but before any locks are released or any commit is done. This
ensures that the log will be logged in the execution order.</p>

<p>Updates to non-transactional tables are stored in the binary log
immediately after execution. For transactional tables such as
<code>BDB</code> or <code>InnoDB</code> tables, all updates
(<code>UPDATE</code>, <code>DELETE</code> or <code>INSERT</code>)
that change tables are cached until a <code>COMMIT</code> command
is sent to the server. At this point <code>mysqld</code> writes the
whole transaction to the binary log before the <code>COMMIT</code>
is executed. very thread will, on start, allocate a buffer of
<code>binlog_cache_size</code> to buffer queries. If a query is
bigger than this, the thread will open a temporary file to store
the transaction. The temporary file will be deleted when the thread
ends.</p>

<p>The <code>max_binlog_cache_size</code> (default 4G) can be used
to restrict the total size used to cache a multi-query transaction.
If a transaction is bigger than this it will fail and roll
back.</p>

<p>If you are using the update or binary log, concurrent inserts
will be converted to normal inserts when using <code>CREATE ...
SELECT</code> or <code>INSERT ... SELECT</code>. This is to ensure
that you can recreate an exact copy of your tables by applying the
log on a backup.</p>

<h3><a id="Slow_query_log" name="Slow_query_log"
href="manual_toc.html#Slow_query_log">4.9.5 The Slow Query
Log</a></h3>

<p><a id="IDX795" name="IDX795"></a> <a id="IDX796"
name="IDX796"></a></p>

<p>When started with the
<code>--log-slow-queries[=file_name]</code> option,
<code>mysqld</code> writes a log file containing all SQL commands
that took more than <code>long_query_time</code> to execute. The
time to get the initial table locks are not counted as execution
time.</p>

<p>The slow query log is logged after the query is executed and
after all locks has been released. This may be different from the
order in which the statements are executed.</p>

<p>If no file name is given, it defaults to the name of the host
machine suffixed with <code>-slow.log</code>. If a filename is
given, but doesn't contain a path, the file is written in the data
directory.</p>

<p>The slow query log can be used to find queries that take a long
time to execute and are thus candidates for optimisation. With a
large log, that can become a difficult task. You can pipe the slow
query log through the <code>mysqldumpslow</code> command to get a
summary of the queries which appear in the log.</p>

<p>You are using <code>--log-long-format</code> then also queries
that are not using indexes are printed. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</p>

<h3><a id="Log_file_maintenance" name="Log_file_maintenance"
href="manual_toc.html#Log_file_maintenance">4.9.6 Log File
Maintenance</a></h3>

<p><a id="IDX797" name="IDX797"></a> <a id="IDX798"
name="IDX798"></a> <a id="IDX799" name="IDX799"></a></p>

<p>The MySQL Server can create a number of different log files,
which make it easy to see what is going on. See section <a
href="manual.html#Log_Files">4.9 The MySQL Log Files</a>. One must
however regularly clean up these files, to ensure that the logs
don't take up too much disk space.</p>

<p>When using MySQL with log files, you will, from time to time,
want to remove/backup old log files and tell MySQL to start logging
on new files. See section <a href="manual.html#Backup">4.4.1
Database Backups</a>.</p>

<p>On a Linux (<code>Red Hat</code>) installation, you can use the
<code>mysql-log-rotate</code> script for this. If you installed
MySQL from an RPM distribution, the script should have been
installed automatically. Note that you should be careful with this
if you are using the log for replication!</p>

<p>On other systems you must install a short script yourself that
you start from <code>cron</code> to handle log files.</p>

<p>You can force MySQL to start using new log files by using
<code>mysqladmin flush-logs</code> or by using the SQL command
<code>FLUSH LOGS</code>. If you are using MySQL Version 3.21 you
must use <code>mysqladmin refresh</code>.</p>

<p>The above command does the following:</p>

<ul>
<li>If standard logging (<code>--log</code>) or slow query logging
(<code>--log-slow-queries</code>) is used, closes and reopens the
log file (<tt>`mysql.log'</tt> and <tt>``hostname`-slow.log'</tt>
as default).</li>

<li>If update logging (<code>--log-update</code>) is used, closes
the update log and opens a new log file with a higher sequence
number.</li>
</ul>

<p>If you are using only an update log, you only have to flush the
logs and then move away the old update log files to a backup. If
you are using the normal logging, you can do something like:</p>

<pre>
shell&gt; cd mysql-data-directory
shell&gt; mv mysql.log mysql.old
shell&gt; mysqladmin flush-logs
</pre>

<p>and then take a backup and remove <tt>`mysql.old'</tt>.</p>

<h2><a id="Replication" name="Replication"
href="manual_toc.html#Replication">4.10 Replication in
MySQL</a></h2>

<p><a id="IDX800" name="IDX800"></a> <a id="IDX801"
name="IDX801"></a> <a id="IDX802" name="IDX802"></a> <a id="IDX803"
name="IDX803"></a></p>

<p>This section describes the various replication features in
MySQL. It serves as a reference to the options available with
replication. You will be introduced to replication and learn how to
implement it. Toward the end, there are some frequently asked
questions and descriptions of problems and how to solve them.</p>

<p>We suggest that you visit our website at <a
href="http://www.mysql.com/">http://www.mysql.com/</a> often and
read updates to this section. Replication is constantly being
improved, and we update the manual frequently with the most current
information.</p>

<h3><a id="Replication_Intro" name="Replication_Intro"
href="manual_toc.html#Replication_Intro">4.10.1
Introduction</a></h3>

<p>One way replication can be used is to increase both robustness
and speed. For robustness you can have two systems and can switch
to the backup if you have problems with the master. The extra speed
is achieved by sending a part of the non-updating queries to the
replica server. Of course this only works if non-updating queries
dominate, but that is the normal case.</p>

<p>Starting in Version 3.23.15, MySQL supports one-way replication
internally. One server acts as the master, while the other acts as
the slave. Note that one server could play the roles of master in
one pair and slave in the other. The master server keeps a binary
log of updates (see section <a href="manual.html#Binary_log">4.9.4
The Binary Update Log</a>) and an index file to binary logs to keep
track of log rotation. The slave, upon connecting, informs the
master where it left off since the last successfully propagated
update, catches up on the updates, and then blocks and waits for
the master to notify it of the new updates.</p>

<p>Note that if you are replicating a database, all updates to this
database should be done through the master!</p>

<p>Another benefit of using replication is that one can get live
backups of the system by doing a backup on a slave instead of doing
it on the master. See section <a href="manual.html#Backup">4.4.1
Database Backups</a>.</p>

<h3><a id="Replication_Implementation"
name="Replication_Implementation"
href="manual_toc.html#Replication_Implementation">4.10.2
Replication Implementation Overview</a></h3>

<p><a id="IDX804" name="IDX804"></a></p>

<p>MySQL replication is based on the server keeping track of all
changes to your database (updates, deletes, etc) in the binary log
(see section <a href="manual.html#Binary_log">4.9.4 The Binary
Update Log</a>) and the slave server(s) reading the saved queries
from the master server's binary log so that the slave can execute
the same queries on its copy of the data.</p>

<p>It is <strong>very important</strong> to realise that the binary
log is simply a record starting from a fixed point in time (the
moment you enable binary logging). Any slaves which you set up will
need copies of all the data from your master as it existed the
moment that you enabled binary logging on the master. If you start
your slaves with data that doesn't agree with what was on the
master <strong>when the binary log was started</strong>, your
slaves may fail.</p>

<p>Please see the following table for an indication of master-slave
compatibility between different versions. With regard to version
4.0, we recommend using same version on both sides.</p>

<table border="1" width="100%">
<tr>
<td></td>
<td></td>
<td><strong>Master</strong></td>
<td><strong>Master</strong></td>
<td><strong>Master</strong></td>
<td><strong>Master</strong></td>
</tr>

<tr>
<td></td>
<td></td>
<td><strong>3.23.33 and up</strong></td>
<td><strong>4.0.0</strong></td>
<td><strong>4.0.1</strong></td>
<td><strong>4.0.3 and up</strong></td>
</tr>

<tr>
<td><strong>Slave</strong></td>
<td><strong>3.23.33 and up</strong></td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>

<tr>
<td><strong>Slave</strong></td>
<td><strong>4.0.0</strong></td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>

<tr>
<td><strong>Slave</strong></td>
<td><strong>4.0.1</strong></td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>

<tr>
<td><strong>Slave</strong></td>
<td><strong>4.0.3 and up</strong></td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
</table>

<p><strong>Note</strong>: MySQL Version 4.0.2 is not recommended
for replication.</p>

<p>Starting from 4.0.0, one can use <code>LOAD DATA FROM
MASTER</code> to set up a slave. Be aware that <code>LOAD DATA FROM
MASTER</code> currently works only if all the tables on the master
are <code>MyISAM</code> type, and will acquire a global read lock,
so no writes are possible while the tables are being transferred
from the master. This limitation is of a temporary nature, and is
due to the fact that we have not yet implemented hot lock-free
table backup. It will be removed in the future 4.0 branch versions
once we implement hot backup enabling <code>LOAD DATA FROM
MASTER</code> to work without blocking master updates.</p>

<p>Due to the above limitation, we recommend that at this point you
use <code>LOAD DATA FROM MASTER</code> only if the dataset on the
master is relatively small, or if a prolonged read lock on the
master is acceptable. While the actual speed of <code>LOAD DATA
FROM MASTER</code> may vary from system to system, a good rule for
a rough estimate of how long it is going to take is 1 second per 1
MB of the datafile. You will get close to the estimate if both
master and slave are equivalent to 700 MHz Pentium, are connected
through 100 MBit/s network, and your index file is about half the
size of your data file. Of course, your mileage will vary from
system to system, the above rule just gives you a rough order of
magnitude estimate.</p>

<p>Once a slave is properly configured and running, it will simply
connect to the master and wait for updates to process. If the
master goes away or the slave loses connectivity with your master,
it will keep trying to connect every
<code>master-connect-retry</code> seconds until it is able to
reconnect and resume listening for updates.</p>

<p>Each slave keeps track of where it left off. The master server
has no knowledge of how many slaves there are or which ones are
up-to-date at any given time.</p>

<p>The next section explains the master/slave setup process in more
detail.</p>

<h3><a id="Replication_HOWTO" name="Replication_HOWTO"
href="manual_toc.html#Replication_HOWTO">4.10.3 How To Set Up
Replication</a></h3>

<p>Here is a quick description of how to set up complete
replication on your current MySQL server. It assumes you want to
replicate all your databases and have not configured replication
before. You will need to shutdown your master server briefly to
complete the steps outlined here.</p>

<p>While this method is the most straightforward way to set up a
slave, it is not the only one. For example, if you already have a
snapshot of the master, and the master already has server id set
and binary logging enabled, you can set up a slave without shutting
the master down or even blocking the updates. For more details,
please see section <a href="manual.html#Replication_FAQ">4.10.7
Replication FAQ</a>.</p>

<p>If you want to become a real MySQL replication guru, we suggest
that you begin by studying, pondering, and trying all commands
mentioned in section <a href="manual.html#Replication_SQL">4.10.6
SQL Commands Related to Replication</a>. You should also
familiarise yourself with replication startup options in
<tt>`my.cnf'</tt> in section <a
href="manual.html#Replication_Options">4.10.5 Replication Options
in <tt>`my.cnf'</tt></a>.</p>

<ol>
<li>Make sure you have a recent version of MySQL installed on the
master and slave(s). Use Version 3.23.29 or higher. Previous
releases used a different binary log format and had bugs which have
been fixed in newer releases. Please, do not report bugs until you
have verified that the problem is present in the latest
release.</li>

<li>Set up special a replication user on the master with the
<code>FILE</code> (in MySQL versions older than 4.0.2) or
<code>REPLICATION SLAVE</code> privilege in newer MySQL versions.
You must also have given permission to connect from all the slaves.
If the user is only doing replication (which is recommended), you
don't need to grant any additional privileges. For example, to
create a user named <code>repl</code> which can access your master
from any host, you might use this command: 

<pre>
mysql&gt; GRANT FILE ON *.* TO repl@"%" IDENTIFIED BY '&lt;password&gt;';
</pre>
</li>

<li>If you are using MyISAM tables, flush all the tables and block
write queries by executing <code>FLUSH TABLES WITH READ LOCK</code>
command. 

<pre>
mysql&gt; FLUSH TABLES WITH READ LOCK;
</pre>

and then take a snapshot of the data on your master server. The
easiest way to do this (on Unix) is to simply use
<strong>tar</strong> to produce an archive of your entire data
directory. The exact data directory location depends on your
installation. 

<pre>
tar -cvf /tmp/mysql-snapshot.tar /path/to/data-dir
</pre>

Windows users can use <code>WinZIP</code> or similar software to
create an archive of the data directory. After or during the
process of taking a snapshot, read the value of the current binary
log name and the offset on the master: 

<pre>
mysql &gt; SHOW MASTER STATUS;
+---------------+----------+--------------+-------------------------------+
| File          | Position | Binlog_do_db | Binlog_ignore_db              |
+---------------+----------+--------------+-------------------------------+
| mysql-bin.003 | 73       | test,bar     | foo,manual,sasha_likes_to_run |
+---------------+----------+--------------+-------------------------------+
1 row in set (0.06 sec)
</pre>

The <code>File</code> column shows the name of the log, while
<code>Position</code> shows the offset. n the above example, the
binary log value is <code>mysql-bin.003</code> and the offset is
73. Record the values - you will need to use them later when you
are setting up the slave. Once you have taken the snapshot and
recorded the log name and offset, you can re-enable write activity
on the master: 

<pre>
mysql&gt; UNLOCK TABLES;
</pre>

If you are using InnoDB tables, ideally you should use the InnoDB
Hot Backup tool that is available to those who purchase MySQL
commercial licenses, support, or the backup tool itself. It will
take a consistent snapshot without acquiring any locks on the
master server, and record the log name and offset corresponding to
the snapshot to be later used on the slave. More information about
the tool is avaliable at <a
href="http://www.innodb.com/hotbackup.html">http://www.innodb.com/hotbackup.html</a>.
Without the hot backup tool, the quickest way to take a snapshot of
InnoDB tables is to shut the master server down and copy the data
files, the logs, and the table definition files
(<code>.frm</code>). To record the current log file name and
offset, you should do the following before you shut down the
server: 

<pre>
mysql&gt; FLUSH TABLES WITH READ LOCK;
mysql&gt; SHOW MASTER STATUS;
</pre>

And then record the log name and the offset from the output of
<code>SHOW MASTER STATUS</code> as was shown earlier. Once you have
recorded the log name and the offset, shut the server down without
unlocking the tables to make sure it goes down with the snapshot
corresponding to the current log file and offset: 

<pre>
shell&gt; mysqladmin -uroot shutdown
</pre>

If the master has been previously running without
<code>log-bin</code> enabled, the values of log name and position
will be empty when you run <code>SHOW MASTER STATUS</code>. In that
case, record empty string ('') for the log name, and 4 for the
offset.</li>

<li>Make sure that <tt>`my.cnf'</tt> on the master has
<code>log-bin</code> if it is not there already and
<code>server-id=unique number</code> in the <code>[mysqld]</code>
section. If those options are not present, add them and restart the
server. It is very important that the id of the slave is different
from the id of the master. Think of <code>server-id</code> as
something similar to the IP address - it uniquely identifies the
server instance in the community of replication partners. 

<pre>
[mysqld]
log-bin
server-id=1
</pre>
</li>

<li>Add the following to <tt>`my.cnf'</tt> on the slave(s): 

<pre>
server-id=&lt;some unique number between 1 and 2^32-1 that is different from
 that of the master&gt;
</pre>

replacing the values in &lt;&gt; with what is relevant to your
system. <code>server-id</code> must be different for each server
participating in replication. If you don't specify a server-id, it
will be set to 1 if you have not defined <code>master-host</code>,
else it will be set to 2. Note that in the case of
<code>server-id</code> omission the master will refuse connections
from all slaves, and the slave will refuse to connect to a master.
Thus, omitting <code>server-id</code> is only good for backup with
a binary log.</li>

<li>While the slave is running, make it forget about the old
replication configuration if it has been replicating previously: 

<pre>
mysql&gt; RESET SLAVE;
</pre>
</li>

<li>Copy the snapshot data into your data directory on your
slave(s). Make sure that the privileges on the files and
directories are correct. The user which MySQL runs as needs to be
able to read and write to them, just as on the master.</li>

<li>Restart the slave(s).</li>

<li>Once the slave comes up, execute the following command: 

<pre>
mysql&gt; CHANGE MASTER TO MASTER_HOST='&lt;master host name&gt;',
 MASTER_USER='&lt;replication user name&gt;',
 MASTER_PASSWORD='&lt;replication password&gt;',
 MASTER_LOG_FILE='&lt;recorded log file name&gt;',
 MASTER_LOG_POS=&lt;recorded log offset&gt;;
</pre>

replacing the values in &lt;&gt; with the actual values relevant to
your system.</li>

<li>Start the slave thread: 

<pre>
mysql&gt; SLAVE START;
</pre>
</li>
</ol>

<p>After you have done the above, the slave(s) should connect to
the master and catch up on any updates which happened since the
snapshot was taken.</p>

<p>If you have forgotten to set <code>server-id</code> for the
slave you will get the following error in the error log file:</p>

<pre>
Warning: one should set server_id to a non-0 value if master_host is set.
The server will not act as a slave.
</pre>

<p>If you have forgotten to do this for the master, the slaves will
not be able to connect to the master.</p>

<p>If a slave is not able to replicate for any reason, you will
find error messages in the error log on the slave.</p>

<p>Once a slave is replicating, you will find a file called
<tt>`master.info'</tt> in the same directory as your error log. The
<tt>`master.info'</tt> file is used by the slave to keep track of
how much of the master's binary log it has processed. <strong>Do
not</strong> remove or edit the file, unless you really know what
you are doing. Even in that case, it is preferred that you use
<code>CHANGE MASTER TO</code> command.</p>

<p>Now that you have a snapshot, you can use it to set up other
slaves. To do so, follow the slave portion of the procedure
described above. You do not need to take another snapshot of the
master.</p>

<h3><a id="Replication_Features" name="Replication_Features"
href="manual_toc.html#Replication_Features">4.10.4 Replication
Features and Known Problems</a></h3>

<p><a id="IDX805" name="IDX805"></a> <a id="IDX806"
name="IDX806"></a> <a id="IDX807" name="IDX807"></a></p>

<p>Here is an explanation of what is supported and what is not:</p>

<ul>
<li>Replication will be done correctly with
<code>AUTO_INCREMENT</code>, <code>LAST_INSERT_ID()</code>, and
<code>TIMESTAMP</code> values.</li>

<li><code>RAND()</code> in updates does not replicate properly. Use
<code>RAND(some_non_rand_expr)</code> if you are replicating
updates with <code>RAND()</code>. You can, for example, use
<code>UNIX_TIMESTAMP()</code> for the argument to
<code>RAND()</code>.</li>

<li>You have to use the same character set
(<code>--default-character-set</code>) on the master and the slave.
If not, you may get duplicate key errors on the slave, because a
key that is regarded as unique in the master character set may not
be unique in the slave character set.</li>

<li>In 3.23, <code>LOAD DATA INFILE</code> will be handled properly
as long as the file still resides on the master server at the time
of update propagation. <code>LOAD LOCAL DATA INFILE</code> will be
skipped. In 4.0, this limitation is not present - all forms of
<code>LOAD DATA INFILE</code> are properly replicated.</li>

<li>Update queries that use user variables are not replication-safe
(yet).</li>

<li><code>FLUSH</code> commands are not stored in the binary log
and are because of this not replicated to the slaves. This is not
normally a problem as <code>FLUSH</code> doesn't change anything.
This does however mean that if you update the MySQL privilege
tables directly without using the <code>GRANT</code> statement and
you replicate the <code>mysql</code> privilege database, you must
do a <code>FLUSH PRIVILEGES</code> on your slaves to put the new
privileges into effect.</li>

<li>Temporary tables starting in 3.23.29 are replicated properly
with the exception of the case when you shut down slave server (
not just slave thread), you have some temporary tables open, and
they are used in subsequent updates. To deal with this problem
shutting down the slave, do <code>SLAVE STOP</code>, check
<code>Slave_open_temp_tables</code> variable to see if it is 0,
then issue <code>mysqladmin shutdown</code>. If the number is not
0, restart the slave thread with <code>SLAVE START</code> and see
if you have better luck next time. There will be a cleaner
solution, but it has to wait until version 4.0. In earlier versions
temporary tables are not replicated properly - we recommend that
you either upgrade, or execute <code>SET SQL_LOG_BIN=0</code> on
your clients before all queries with temp tables.</li>

<li>MySQL only supports one master and many slaves. In 4.x, we will
add a voting algorithm to automatically change master if something
goes wrong with the current master. We will also introduce 'agent'
processes to help do load balancing by sending select queries to
different slaves.</li>

<li>Starting in Version 3.23.26, it is safe to connect servers in a
circular master-slave relationship with
<code>log-slave-updates</code> enabled. Note, however, that many
queries will not work right in this kind of setup unless your
client code is written to take care of the potential problems that
can happen from updates that occur in different sequence on
different servers. This means that you can do a setup like the
following: 

<pre>
A -&gt; B -&gt; C -&gt; A
</pre>

This setup will only works if you only do non conflicting updates
between the tables. In other words, if you insert data in A and C,
you should never insert a row in A that may have a conflicting key
with a row insert in C. You should also not update the sam rows on
two servers if the order in which the updates are applied matters.
Note that the log format has changed in Version 3.23.26 so that
pre-3.23.26 slaves will not be able to read it.</li>

<li>If the query on the slave gets an error, the slave thread will
terminate, and a message will appear in the <tt>`.err'</tt> file.
You should then connect to the slave manually, fix the cause of the
error (for example, non-existent table), and then run the
<code>SLAVE START</code> SQL command (available starting in Version
3.23.16). In Version 3.23.15, you will have to restart the
server.</li>

<li>If connection to the master is lost, the slave will retry
immediately, and then in case of failure every
<code>master-connect-retry</code> (default 60) seconds. Because of
this, it is safe to shut down the master, and then restart it after
a while. The slave will also be able to deal with network
connectivity outages.</li>

<li>Shutting down the slave (cleanly) is also safe, as it keeps
track of where it left off. Unclean shutdowns might produce
problems, especially if disk cache was not synced before the system
died. Your system fault tolerance will be greatly increased if you
have a good UPS.</li>

<li>If the master is listening on a non-standard port, you will
also need to specify this with <code>master-port</code> parameter
in <tt>`my.cnf'</tt> .</li>

<li>In Version 3.23.15, all of the tables and databases will be
replicated. Starting in Version 3.23.16, you can restrict
replication to a set of databases with <code>replicate-do-db</code>
directives in <tt>`my.cnf'</tt> or just exclude a set of databases
with <code>replicate-ignore-db</code>. Note that up until Version
3.23.23, there was a bug that did not properly deal with <code>LOAD
DATA INFILE</code> if you did it in a database that was excluded
from replication.</li>

<li>Starting in Version 3.23.16, <code>SET SQL_LOG_BIN = 0</code>
will turn off replication (binary) logging on the master, and
<code>SET SQL_LOG_BIN = 1</code> will turn it back on -- you must
have the <code>SUPER</code> (in MySQL 4.0.2 and above) or
<code>PROCESS</code> (in older MySQL versions) privilege to do
this.</li>

<li>Starting in Version 3.23.19, you can clean up stale replication
leftovers when something goes wrong and you want a clean start with
<code>FLUSH MASTER</code> and <code>FLUSH SLAVE</code> commands. In
Version 3.23.26 we have renamed them to <code>RESET MASTER</code>
and <code>RESET SLAVE</code> respectively to clarify what they do.
The old <code>FLUSH</code> variants still work, though, for
compatibility.</li>

<li>Starting in Version 3.23.23, you can change masters and adjust
log position with <code>CHANGE MASTER TO</code>.</li>

<li>Starting in Version 3.23.23, you tell the master that updates
in certain databases should not be logged to the binary log with
<code>binlog-ignore-db</code>.</li>

<li>Starting in Version 3.23.26, you can use
<code>replicate-rewrite-db</code> to tell the slave to apply
updates from one database on the master to the one with a different
name on the slave.</li>

<li>Starting in Version 3.23.28, you can use <code>PURGE MASTER
LOGS TO 'log-name'</code> to get rid of old logs while the slave is
running. This will remove all old logs before, but not including
<code>'log-name'</code>.</li>

<li>Due to the non-transactional nature of MyISAM tables, it is
possible to have a query that will only partially update a table
and return an error code. This can happen, for example, on a
multi-row insert that has one row violating a key constraint, or if
a long update query is killed after updating some of the rows. If
that happens on the master, the slave thread will exit and wait for
the DBA to decide what to do about it unless the error code is
legitimate and the query execution results in the same error code.
If this error code validation behaviour is not desirable, some ( or
all) errors could be masked out with <code>slave-skip-errors</code>
option starting in Version 3.23.47.</li>

<li>While individual tables can be excluded from replication with
<code>replicate-do-table</code>/<code>replicate-ignore-table</code>
or
<code>replicate-wild-do-table</code>/<code>replicate-wild-ignore-table</code>,
there are currently some design deficiencies that in some rather
rare cases produce unexpected results. The replication protocol
does not inform the slave explicitly which tables are going to be
modified by the query -- so the slave has to parse the query to
know this. To avoid redundant parsing for queries that will end up
actually being executed, table exclusion is currently implemented
by sending the query to the standard MySQL parser, which will
short-circuit the query and report success if it detects that the
table should be ignored. In addition to several inefficiencies,
this approach is also more bug prone, and there are two known bugs
as of Version 3.23.49 -- because the parser automatically opens the
table when parsing some queries the ignored table has to exist on
the slave. The other bug is that if the ignored table gets
partially updated, the slave thread will not notice that the table
actually should have been ignored and will suspend the replication
process. While the above bugs are conceptually very simple to fix,
we have not yet found a way to do this without a significant code
change that would compromise the stability status of 3.23 branch.
There exists a workaround for both if in the rare case it happens
to affect your application -- use
<code>slave-skip-errors</code>.</li>
</ul>

<h3><a id="Replication_Options" name="Replication_Options"
href="manual_toc.html#Replication_Options">4.10.5 Replication
Options in <tt>`my.cnf'</tt></a></h3>

<p>If you are using replication, we recommend that you use MySQL
Version 3.23.33 or later. Older versions work, but they do have
some bugs and are missing some features. Some of the options
mentioned here may not be available in your version if it is not
the most recent one. For all options specific to the 4.0 branch,
there is a note indicating so. Otherwise, if you discover that the
option you are interested in is not available in your 3.23 version,
and you really need it, please upgrade to the most recent 3.23
branch.</p>

<p>Please be aware that 4.0 branch is still in alpha, so some
things may not be working as smoothly as you would like. If you
really would like to try the new features of 4.0, we recommend you
do it in such a way that in case there is a problem your mission
critical applications will not be disrupted.</p>

<p>On both master and slave you need to use the
<code>server-id</code> option. This sets a unique replication id.
You should pick a unique value in the range between 1 to 2^32-1 for
each master and slave. Example: <code>server-id=3</code></p>

<p>The following table describes the options you can use for the
<code>MASTER</code>:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>log-bin=filename</code></td>
<td>Write to a binary update log to the specified location. Note
that if you give it a parameter with an extension (for example,
<code>log-bin=/mysql/logs/replication.log</code> ) versions up to
3.23.24 will not work right during replication if you do
<code>FLUSH LOGS</code> . The problem is fixed in Version 3.23.25.
If you are using this kind of log name, <code>FLUSH LOGS</code>
will be ignored on binlog. To clear the log, run <code>FLUSH
MASTER</code>, and do not forget to run <code>FLUSH SLAVE</code> on
all slaves. In Versions 3.23.26 and later, you should use
<code>RESET MASTER</code> and <code>RESET SLAVE</code>. You can use
this option if you want to have a name which is independant of your
hostname (could be useful in case you rename your host one
day).</td>
</tr>

<tr>
<td><code>log-bin-index=filename</code></td>
<td>Because the user could issue the <code>FLUSH LOGS</code>
command, we need to know which log is currently active and which
ones have been rotated out and in what sequence. This information
is stored in the binary log index file. The default is
<tt>``hostname`.index'</tt>. You should not need to change this.
Example: <code>log-bin-index=db.index</code></td>
</tr>

<tr>
<td><code>sql-bin-update-same</code></td>
<td>If set, setting <code>SQL_LOG_BIN</code> to a value will
automatically set <code>SQL_LOG_UPDATE</code> to the same value and
vice versa.</td>
</tr>

<tr>
<td><code>binlog-do-db=database_name</code></td>
<td>Tells the master that it should log updates to the binary log
if the current (i.e. selected) database is
<code>database_name</code>. All others databases which are not
explicitly mentioned are ignored. Note that if you use this, you
should ensure that you do updates only in the current database.
Example: <code>binlog-do-db=sales</code></td>
</tr>

<tr>
<td><code>binlog-ignore-db=database_name</code></td>
<td>Tells the master that updates where the current (i.e. selected)
database is <code>database_name</code> should not be stored in the
binary log. Note that if you use this, you should ensure that you
do updates only in the current database. Example:
<code>binlog-ignore-db=accounting</code></td>
</tr>
</table>

<p>The following table describes the options you can use for the
<code>SLAVE</code>:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>master-host=host</code></td>
<td>Master hostname or IP address for replication. If not set, the
slave thread will not be started. Note that the setting of
<code>master-host</code> will be ignored if there exists a valid
<tt>`master.info'</tt> file. Probably a better name for this
options would have been something like
<code>bootstrap-master-host</code>, but it is too late to change
now. Example: <code>master-host=db-master.mycompany.com</code></td>
</tr>

<tr>
<td><code>master-user=username</code></td>
<td>The username the slave thread will use for authentication when
connecting to the master. The user must have the <code>FILE</code>
privilege. If the master user is not set, user <code>test</code> is
assumed. The value in <tt>`master.info'</tt> will take precedence
if it can be read. Example: <code>master-user=scott</code></td>
</tr>

<tr>
<td><code>master-password=password</code></td>
<td>The password the slave thread will authenticate with when
connecting to the master. If not set, an empty password is
assumed.The value in <tt>`master.info'</tt> will take precedence if
it can be read. Example: <code>master-password=tiger</code></td>
</tr>

<tr>
<td><code>master-port=portnumber</code></td>
<td>The port the master is listening on. If not set, the compiled
setting of <code>MYSQL_PORT</code> is assumed. If you have not
tinkered with <code>configure</code> options, this should be 3306.
The value in <tt>`master.info'</tt> will take precedence if it can
be read. Example: <code>master-port=3306</code></td>
</tr>

<tr>
<td><code>master-connect-retry=seconds</code></td>
<td>The number of seconds the slave thread will sleep before
retrying to connect to the master in case the master goes down or
the connection is lost. Default is 60. Example:
<code>master-connect-retry=60</code></td>
</tr>

<tr>
<td><code>master-ssl</code></td>
<td>Available after 4.0.0. Turn SSL on for replication. Be warned
that is this is a relatively new feature. Example:
<code>master-ssl</code></td>
</tr>

<tr>
<td><code>master-ssl-key</code></td>
<td>Available after 4.0.0. Master SSL keyfile name. Only applies if
you have enabled <code>master-ssl</code>. Example:
<code>master-ssl-key=SSL/master-key.pem</code></td>
</tr>

<tr>
<td><code>master-ssl-cert</code></td>
<td>Available after 4.0.0. Master SSL certificate file name. Only
applies if you have enabled <code>master-ssl</code>. Example:
<code>master-ssl-key=SSL/master-cert.pem</code></td>
</tr>

<tr>
<td><code>master-info-file=filename</code></td>
<td>The location of the file that remembers where we left off on
the master during the replication process. The default is
<tt>`master.info'</tt> in the data directory. You should not need
to change this. Example:
<code>master-info-file=master.info</code></td>
</tr>

<tr>
<td><code>report-host</code></td>
<td>Available after 4.0.0. Hostname or IP of the slave to be
reported to the master during slave registration. Will appear in
the output of <code>SHOW SLAVE HOSTS</code>. Leave unset if you do
not want the slave to register itself with the master. Note that it
is not sufficient for the master to simply read the IP of the slave
off the socket once the slave connects. Due to <code>NAT</code> and
other routing issues, that IP may not be valid for connecting to
the slave from the master or other hosts. Example:
<code>report-host=slave1.mycompany.com</code></td>
</tr>

<tr>
<td><code>report-port</code></td>
<td>Available after 4.0.0. Port for connecting to slave reported to
the master during slave registration. Set it only if the slave is
listening on a non-default port or if you have a special tunnel
from the master or other clients to the slave. If not sure, leave
this option unset.</td>
</tr>

<tr>
<td><code>replicate-do-table=db_name.table_name</code></td>
<td>Tells the slave thread to restrict replication to the specified
table. To specify more than one table, use the directive multiple
times, once for each table. This will work for cross-database
updates, in contrast to <code>replicate-do-db</code>. Example:
<code>replicate-do-table=some_db.some_table</code></td>
</tr>

<tr>
<td><code>replicate-ignore-table=db_name.table_name</code></td>
<td>Tells the slave thread to not replicate any command that
updates the specified table (even if any other tables may be update
by the same command). To specify more than one table to ignore, use
the directive multiple times, once for each table. This will work
for cross-datbase updates, in contrast to
<code>replicate-ignore-db</code>. Example:
<code>replicate-ignore-table=db_name.some_table</code></td>
</tr>

<tr>
<td><code>replicate-wild-do-table=db_name.table_name</code></td>
<td>Tells the slave thread to restrict replication to queries where
any of the updated tables match the specified wildcard pattern. To
specify more than one table, use the directive multiple times, once
for each table. This will work for cross-database updates. Example:
<code>replicate-wild-do-table=foo%.bar%</code> will replicate only
updates that uses a table in any databases that start with
<code>foo</code> and whose table names start with <code>bar</code>.
Note that if you do <code>replicate-wild-do-table=foo%.%</code>
then the rule will be propagated to <code>CREATE DATABASE</code>
and <code>DROP DATABASE</code>, i.e. these two statements will be
replicated if the database name matches the database pattern
('foo%' here) (this magic is triggered by '%' being the table
pattern).</td>
</tr>

<tr>
<td>
<code>replicate-wild-ignore-table=db_name.table_name</code></td>
<td>Tells the slave thread to not replicate a query where any table
matches the given wildcard pattern. To specify more than one table
to ignore, use the directive multiple times, once for each table.
This will work for cross-database updates. Example:
<code>replicate-wild-ignore-table=foo%.bar%</code> will not do
updates to tables in databases that start with <code>foo</code> and
whose table names start with <code>bar</code>. Note that if you do
<code>replicate-wild-ignore-table=foo%.%</code> then the rule will
be propagated to <code>CREATE DATABASE</code> and <code>DROP
DATABASE</code>, i.e. these two statements will not be replicated
if the database name matches the database pattern ('foo%' here)
(this magic is triggered by '%' being the table pattern).</td>
</tr>

<tr>
<td><code>replicate-ignore-db=database_name</code></td>
<td>Tells the slave thread to not replicate any command where the
current database is <code>database_name</code>. To specify more
than one database to ignore, use the directive multiple times, once
for each database. You should not use this directive if you are
using cross table updates and you don't want these update to be
replicated. The main reason for this behaviour is that it's hard
from the command alone know if a query should be replicated or not;
For example if you are using multi-table-delete or
multi-table-update commands in MySQL 4.x that goes across multiple
databases. It's also very fast to just check the current database,
as this only has to be done once at connect time or when the
database changes. If you need cross database updates to work, make
sure you have 3.23.28 or later, and use
<code>replicate-wild-ignore-table=db_name.%</code>. Example:
<code>replicate-ignore-db=some_db</code></td>
</tr>

<tr>
<td><code>replicate-do-db=database_name</code></td>
<td>Tells the slave thread to restrict replication to commands
where the current database is <code>database_name</code>. To
specify more than one database, use the directive multiple times,
once for each database. Note that this will not replicate
cross-database queries such as <code>UPDATE some_db.some_table SET
foo='bar'</code> while having selected a different or no database.
If you need cross database updates to work, make sure you have
3.23.28 or later, and use
<code>replicate-wild-do-table=db_name.%</code>. Example:
<code>replicate-do-db=some_db</code></td>
</tr>

<tr>
<td><code>log-slave-updates</code></td>
<td>Tells the slave to log the updates from the slave thread to the
binary log. Off by default. You will need to turn it on if you plan
to daisy-chain the slaves.</td>
</tr>

<tr>
<td><code>replicate-rewrite-db=from_name-&gt;to_name</code></td>
<td>Updates to a database with a different name than the original.
Example:
<code>replicate-rewrite-db=master_db_name-&gt;slave_db_name</code></td>
</tr>

<tr>
<td><code>slave-skip-errors= [err_code1,err_code2,... |
all]</code></td>
<td>Available only in 3.23.47 and later. Tells the slave thread to
continue replication when a query returns an error from the
provided list. Normally, replication will discontinue when an error
is encountered, giving the user a chance to resolve the
inconsistency in the data manually. Do not use this option unless
you fully understand why you are getting the errors. If there are
no bugs in your replication setup and client programs, and no bugs
in MySQL itself, you should never get an abort with error.
Indiscriminate use of this option will result in slaves being
hopelessly out of sync with the master and you having no idea how
the problem happened. For error codes, you should use the numbers
provided by the error message in your slave error log and in the
output of <code>SHOW SLAVE STATUS</code>. Full list of error
messages can be found in the source distribution in
<tt>`Docs/mysqld_error.txt'</tt>. You can (but should not) also use
a very non-recommended value of <code>all</code> which will ignore
all error messages and keep barging along regardless. Needless to
say, if you use it, we make no promises regarding your data
integrity. Please do not complain if your data on the slave is not
anywhere close to what it is on the master in this case -- you have
been warned. Example: <code>slave-skip-errors=1062,1053</code> or
<code>slave-skip-errors=all</code></td>
</tr>

<tr>
<td><code>skip-slave-start</code></td>
<td>Tells the slave server not to start the slave on the startup.
The user can start it later with <code>SLAVE START</code>.</td>
</tr>

<tr>
<td><code>slave_compressed_protocol=#</code></td>
<td>If 1, then use compression on the slave/client protocol if both
slave and master support this.</td>
</tr>

<tr>
<td><code>slave_net_timeout=#</code></td>
<td>Number of seconds to wait for more data from the master before
aborting the read.</td>
</tr>
</table>

<h3><a id="Replication_SQL" name="Replication_SQL"
href="manual_toc.html#Replication_SQL">4.10.6 SQL Commands Related
to Replication</a></h3>

<p><a id="IDX808" name="IDX808"></a> <a id="IDX809"
name="IDX809"></a> <a id="IDX810" name="IDX810"></a></p>

<p>Replication can be controlled through the SQL interface. Here is
the summary of commands:</p>

<table border="1" width="100%">
<tr>
<td><strong>Command</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>SLAVE START</code></td>
<td>Starts the slave thread. As of MySQL 4.0.2, you can add
<code>IO_THREAD</code> or <code>SQL_THREAD</code> options to the
statement to start the I/O thread or the SQL thread. The I/O thread
reads queries from the master server and stores them in the relay
log. The SQL thread reads the relay log and executes the queries.
(Slave)</td>
</tr>

<tr>
<td><code>SLAVE STOP</code></td>
<td>Stops the slave thread. Like <code>SLAVE START</code>, this
statement may be used with <code>IO_THREAD</code> and
<code>SQL_THREAD</code> options. (Slave)</td>
</tr>

<tr>
<td><code>SET SQL_LOG_BIN=0</code></td>
<td>Disables update logging if the user has the <code>SUPER</code>
privilege. Ignored otherwise. (Master)</td>
</tr>

<tr>
<td><code>SET SQL_LOG_BIN=1</code></td>
<td>Re-enables update logging if the user has the
<code>SUPER</code> privilege. Ignored otherwise. (Master)</td>
</tr>

<tr>
<td><code>SET GLOBAL SQL_SLAVE_SKIP_COUNTER=n</code></td>
<td>Skip the next <code>n</code> events from the master. Only valid
when the slave thread is not running, otherwise, gives an error.
Useful for recovering from replication glitches.</td>
</tr>

<tr>
<td><code>RESET MASTER</code></td>
<td>Deletes all binary logs listed in the index file, resetting the
binlog index file to be empty. In pre-3.23.26 versions, use
<code>FLUSH MASTER</code>. (Master)</td>
</tr>

<tr>
<td><code>RESET SLAVE</code></td>
<td>Makes the slave forget its replication position in the master
logs. In pre 3.23.26 versions the command was called <code>FLUSH
SLAVE</code>. (Slave)</td>
</tr>

<tr>
<td><code>LOAD TABLE tblname FROM MASTER</code></td>
<td>Downloads a copy of the table from master to the slave.
Implemented mainly for debugging of <code>LOAD DATA FROM
MASTER</code>, but some ``gourmet'' users might find it useful for
other things. Do not use it if you consider yourself the average
``non-hacker'' type user. (Slave)</td>
</tr>

<tr>
<td><code>LOAD DATA FROM MASTER</code></td>
<td>Available starting in 4.0.0. Takes a snapshot of the master and
copies it to the slave. Updates the values of
<code>MASTER_LOG_FILE</code> and <code>MASTER_LOG_POS</code> so
that the slave will start replicating from the correct position.
Will honor table and database exclusion rules specified with
<code>replicate-*</code> options. So far works only with
<code>MyISAM</code> tables and acquires a global read lock on the
master while taking the snapshot. In the future it is planned to
make it work with <code>InnoDB</code> tables and to remove the need
for global read lock using the non-blocking online backup feature.
Note that <code>LOAD DATA FROM MASTER</code> does
<strong>NOT</strong> copy of any tables in the <code>mysql</code>
database. This is to make it easy to have different users and
privileges on the master and the slave.</td>
</tr>

<tr>
<td><code>CHANGE MASTER TO master_def_list</code></td>
<td>Changes the master parameters to the values specified in
<code>master_def_list</code> and restarts the slave thread.
<code>master_def_list</code> is a comma-separated list of
<code>master_def</code> where <code>master_def</code> is one of the
following: <code>MASTER_HOST</code>, <code>MASTER_USER</code>,
<code>MASTER_PASSWORD</code>, <code>MASTER_PORT</code>,
<code>MASTER_CONNECT_RETRY</code>, <code>MASTER_LOG_FILE</code>,
<code>MASTER_LOG_POS</code>. For example: 

<pre>
CHANGE MASTER TO
  MASTER_HOST='master2.mycompany.com',
  MASTER_USER='replication',
  MASTER_PASSWORD='bigs3cret',
  MASTER_PORT=3306,
  MASTER_LOG_FILE='master2-bin.001',
  MASTER_LOG_POS=4;
</pre>

You only need to specify the values that need to be changed. The
values that you omit will stay the same with the exception of when
you change the host or the port. In that case, the slave will
assume that since you are connecting to a different host or a
different port, the master is different. Therefore, the old values
of log and position are not applicable anymore, and will
automatically be reset to an empty string and 0, respectively (the
start values). Note that if you restart the slave, it will remember
its last master. If this is not desirable, you should delete the
<tt>`master.info'</tt> file before restarting, and the slave will
read its master from <tt>`my.cnf'</tt> or the command-line. This
command is useful for setting up a slave when you have the snapshot
of the master and have recorded the log and the offset on the
master that the snapshot corresponds to. You can run <code>CHANGE
MASTER TO MASTER_LOG_FILE='log_name_on_master',
MASTER_LOG_POS=log_offset_on_master</code> on the slave after
restoring the snapshot. (Slave)</td>
</tr>

<tr>
<td><code>SHOW MASTER STATUS</code></td>
<td>Provides status information on the binlog of the master.
(Master)</td>
</tr>

<tr>
<td><code>SHOW SLAVE HOSTS</code></td>
<td>Available after 4.0.0. Gives a listing of slaves currently
registered with the master. (Master)</td>
</tr>

<tr>
<td><code>SHOW SLAVE STATUS</code></td>
<td>Provides status information on essential parameters of the
slave thread. (Slave)</td>
</tr>

<tr>
<td><code>SHOW MASTER LOGS</code></td>
<td>Only available starting in Version 3.23.28. Lists the binary
logs on the master. You should use this command prior to
<code>PURGE MASTER LOGS TO</code> to find out how far you should
go. (Master)</td>
</tr>

<tr>
<td><code>SHOW BINLOG EVENTS [ IN 'logname' ] [ FROM pos ] [ LIMIT
[offset,] rows ]</code></td>
<td>Shows the events in the binary update log. Primarily used for
testing/debugging, but can also be used by regular clients that for
some reason need to read the binary log contents. (Master)</td>
</tr>

<tr>
<td><code>SHOW NEW MASTER FOR SLAVE WITH MASTER_LOG_FILE='logfile'
AND MASTER_LOG_POS=pos AND MASTER_LOG_SEQ=log_seq AND
MASTER_SERVER_ID=server_id</code></td>
<td>This command is used when a slave of a possibly
dead/unavailable master needs to be switched to replicate off
another slave that has been replicating the same master. The
command will return recalculated replication coordinates (the
slave's current binary log file name and position within that
file). The output can be used in a subsequent <code>CHANGE MASTER
TO</code> command. Normal users should never need to run this
command. It is primarily reserved for internal use by the fail-safe
replication code. We may later change the syntax if we find a more
intuitive way to describe this operation.</td>
</tr>

<tr>
<td><code>PURGE MASTER LOGS TO 'logname'</code></td>
<td>Available starting in Version 3.23.28. Deletes all the
replication logs that are listed in the log index as being prior to
the specified log, and removes them from the log index, so that the
given log now becomes the first. Example: 

<pre>
PURGE MASTER LOGS TO 'mysql-bin.010'
</pre>

This command will do nothing and fail with an error if you have an
active slave that is currently reading one of the logs you are
trying to delete. However, if you have a dormant slave, and happen
to purge one of the logs it wants to read, the slave will be unable
to replicate once it comes up. The command is safe to run while
slaves are replicating -- you do not need to stop them. You must
first check all the slaves with <code>SHOW SLAVE STATUS</code> to
see which log they are on, then do a listing of the logs on the
master with <code>SHOW MASTER LOGS</code>, find the earliest log
among all the slaves (if all the slaves are up to date, this will
be the last log on the list), backup all the logs you are about to
delete (optional) and purge up to the target log.</td>
</tr>
</table>

<h3><a id="Replication_FAQ" name="Replication_FAQ"
href="manual_toc.html#Replication_FAQ">4.10.7 Replication
FAQ</a></h3>

<p><strong>Q</strong>: How do I configure a slave if the master is
already running and I do not want to stop it?</p>

<p><strong>A</strong>: There are several options. If you have taken
a backup of the master at some point and recorded the binlog name
and offset ( from the output of <code>SHOW MASTER STATUS</code> )
corresponding to the snapshot, do the following:</p>

<ul>
<li>Make sure unique server id is assigned to the slave.</li>

<li>Execute <code>CHANGE MASTER TO MASTER_HOST='master-host-name',
MASTER_USER='master-user-name', MASTER_PASSWORD='master-pass',
MASTER_LOG_FILE='recorded-log-name',
MASTER_LOG_POS=recorded_log_pos</code></li>

<li>Execute <code>SLAVE START</code></li>
</ul>

<p>If you do not have a backup of the master already, here is a
quick way to do it consistently:</p>

<ul>
<li><code>FLUSH TABLES WITH READ LOCK</code></li>

<li><code>gtar zcf /tmp/backup.tar.gz /var/lib/mysql</code> ( or a
variation of this)</li>

<li><code>SHOW MASTER STATUS</code> - make sure to record the
output - you will need it later</li>

<li><code>UNLOCK TABLES</code></li>
</ul>

<p>Afterwards, follow the instructions for the case when you have a
snapshot and have recorded the log name and offset. You can use the
same snapshot to set up several slaves. As long as the binary logs
of the master are left intact, you can wait as long as several days
or in some cases maybe a month to set up a slave once you have the
snapshot of the master. In theory the waiting gap can be infinite.
The two practical limitations is the diskspace of the master
getting filled with old logs, and the amount of time it will take
the slave to catch up.</p>

<p>In version 4.0.0 and newer, you can also use <code>LOAD DATA
FROM MASTER</code>. This is a convenient command that will take a
snapshot, restore it to the slave, and adjust the log name and
offset on the slave all at once. In the future, <code>LOAD DATA
FROM MASTER</code> will be the recommended way to set up a slave.
Be warned, howerver, that the read lock may be held for a long time
if you use this command. It is not yet implemented as efficiently
as we would like to have it. If you have large tables, the
preferred method at this time is still with a local
<code>tar</code> snapshot after executing <code>FLUSH TABLES WITH
READ LOCK</code>.</p>

<p><strong>Q</strong>: Does the slave need to be connected to the
master all the time?</p>

<p><strong>A</strong>: No, it does not. You can have the slave go
down or stay disconnected for hours or even days, then reconnect,
catch up on the updates, and then disconnect or go down for a while
again. So you can, for example, use master-slave setup over a
dial-up link that is up only for short periods of time. The
implications of that are that at any given time the slave is not
guaranteed to be in sync with the master unless you take some
special measures. In the future, we will have the option to block
the master until at least one slave is in sync.</p>

<p><strong>Q</strong>: How do I force the master to block updates
until the slave catches up?</p>

<p><strong>A</strong>: Execute the following commands:</p>

<ul>
<li>Master: <code>FLUSH TABLES WITH READ LOCK</code></li>

<li>Master: <code>SHOW MASTER STATUS</code> - record the log name
and the offset</li>

<li>Slave: <code>SELECT MASTER_POS_WAIT('recorded_log_name',
recorded_log_offset)</code> When the select returns, the slave is
currently in sync with the master</li>

<li>Master: <code>UNLOCK TABLES</code> - now the master will
continue updates.</li>
</ul>

<p><a id="IDX811" name="IDX811"></a> <strong>Q</strong>: Why do I
sometimes see more than one <code>Binlog_Dump</code> thread on the
master after I have restarted the slave?</p>

<p><strong>A</strong>: <code>Binlog_Dump</code> is a continuous
process that is handled by the server in the following way:</p>

<ul>
<li>Catch up on the updates.</li>

<li>Once there are no more updates left, go into
<code>pthread_cond_wait()</code>, from which we can be awakened
either by an update or a kill.</li>

<li>On wake up, check the reason. If we are not supposed to die,
continue the <code>Binlog_dump</code> loop.</li>

<li>If there is some fatal error, such as detecting a dead client,
terminate the loop.</li>
</ul>

<p>So if the slave thread stops on the slave, the corresponding
<code>Binlog_Dump</code> thread on the master will not notice it
until after at least one update to the master (or a kill), which is
needed to wake it up from <code>pthread_cond_wait()</code>. In the
meantime, the slave could have opened another connection, which
resulted in another <code>Binlog_Dump</code> thread.</p>

<p>The above problem should not be present in Version 3.23.26 and
later versions. In Version 3.23.26 we added <code>server-id</code>
to each replication server, and now all the old zombie threads are
killed on the master when a new replication thread connects from
the same slave</p>

<p><strong>Q</strong>: How do I rotate replication logs?</p>

<p><strong>A</strong>: In Version 3.23.28 you should use
<code>PURGE MASTER LOGS TO</code> command after determining which
logs can be deleted, and optionally backing them up first. In
earlier versions the process is much more painful, and cannot be
safely done without stopping all the slaves in the case that you
plan to re-use log names. You will need to stop the slave threads,
edit the binary log index file, delete all the old logs, restart
the master, start slave threads, and then remove the old log
files.</p>

<p><strong>Q</strong>: How do I upgrade on a hot replication
setup?</p>

<p><strong>A</strong>: If you are upgrading pre-3.23.26 versions,
you should just lock the master tables, let the slave catch up,
then run <code>FLUSH MASTER</code> on the master, and <code>FLUSH
SLAVE</code> on the slave to reset the logs, then restart new
versions of the master and the slave. Note that the slave can stay
down for some time -- since the master is logging all the updates,
the slave will be able to catch up once it is up and can
connect.</p>

<p>After 3.23.26, we have locked the replication protocol for
modifications, so you can upgrade masters and slave on the fly to a
newer 3.23 version and you can have different versions of MySQL
running on the slave and the master, as long as they are both newer
than 3.23.26.</p>

<p><a id="IDX812" name="IDX812"></a> <strong>Q</strong>: What
issues should I be aware of when setting up two-way
replication?</p>

<p><strong>A</strong>: MySQL replication currently does not support
any locking protocol between master and slave to guarantee the
atomicity of a distributed (cross-server) update. In other words,
it is possible for client A to make an update to co-master 1, and
in the meantime, before it propagates to co-master 2, client B
could make an update to co-master 2 that will make the update of
client A work differently than it did on co-master 1. Thus when the
update of client A will make it to co-master 2, it will produce
tables that will be different from what you have on co-master 1,
even after all the updates from co-master 2 have also propagated.
So you should not co-chain two servers in a two-way replication
relationship, unless you are sure that you updates can safely
happen in any order, or unless you take care of mis-ordered updates
somehow in the client code.</p>

<p>You must also realise that two-way replication actually does not
improve performance very much, if at all, as far as updates are
concerned. Both servers need to do the same amount of updates each,
as you would have one server do. The only difference is that there
will be a little less lock contention, because the updates
originating on another server will be serialised in one slave
thread. This benefit, though, might be offset by network
delays.</p>

<p><a id="IDX813" name="IDX813"></a> <a id="IDX814"
name="IDX814"></a> <strong>Q</strong>: How can I use replication to
improve performance of my system?</p>

<p><strong>A</strong>: You should set up one server as the master,
and direct all writes to it, and configure as many slaves as you
have the money and rackspace for, distributing the reads among the
master and the slaves. You can also start the slaves with
<code>--skip-bdb</code>, <code>--low-priority-updates</code> and
<code>--delay-key-write=ALL</code> to get speed improvements for
the slave. In this case the slave will use non-transactional
<code>MyISAM</code> tables instead of <code>BDB</code> tables to
get more speed.</p>

<p><strong>Q</strong>: What should I do to prepare my client code
to use performance-enhancing replication?</p>

<p><strong>A</strong>: If the part of your code that is responsible
for database access has been properly abstracted/modularised,
converting it to run with the replicated setup should be very
smooth and easy -- just change the implementation of your database
access to read from some slave or the master, and to always write
to the master. If your code does not have this level of
abstraction, setting up a replicated system will give you an
opportunity/motivation to it clean up. You should start by creating
a wrapper library /module with the following functions:</p>

<ul>
<li><code>safe_writer_connect()</code></li>

<li><code>safe_reader_connect()</code></li>

<li><code>safe_reader_query()</code></li>

<li><code>safe_writer_query()</code></li>
</ul>

<p><code>safe_</code> means that the function will take care of
handling all the error conditions.</p>

<p>You should then convert your client code to use the wrapper
library. It may be a painful and scary process at first, but it
will pay off in the long run. All applications that follow the
above pattern will be able to take advantage of one-master/many
slaves solution. The code will be a lot easier to maintain, and
adding troubleshooting options will be trivial. You will just need
to modify one or two functions, for example, to log how long each
query took, or which query, among your many thousands, gave you an
error. If you have written a lot of code already, you may want to
automate the conversion task by using Monty's <code>replace</code>
utility, which comes with the standard distribution of MySQL, or
just write your own Perl script. Hopefully, your code follows some
recognisable pattern. If not, then you are probably better off
rewriting it anyway, or at least going through and manually beating
it into a pattern.</p>

<p>Note that, of course, you can use different names for the
functions. What is important is having unified interface for
connecting for reads, connecting for writes, doing a read, and
doing a write.</p>

<p><strong>Q</strong>: When and how much can MySQL replication
improve the performance of my system?</p>

<p><strong>A</strong>: MySQL replication is most beneficial for a
system with frequent reads and not so frequent writes. In theory,
by using a one master/many slaves setup you can scale by adding
more slaves until you either run out of network bandwidth, or your
update load grows to the point that the master cannot handle
it.</p>

<p>In order to determine how many slaves you can get before the
added benefits begin to level out, and how much you can improve
performance of your site, you need to know your query patterns, and
empirically (by benchmarking) determine the relationship between
the throughput on reads (reads per second, or
<code>max_reads</code>) and on writes <code>max_writes</code>) on a
typical master and a typical slave. The example here will show you
a rather simplified calculation of what you can get with
replication for our imagined system.</p>

<p>Let's say our system load consists of 10% writes and 90% reads,
and we have determined that <code>max_reads</code> = 1200 - 2 *
<code>max_writes</code>, or in other words, our system can do 1200
reads per second with no writes, our average write is twice as slow
as average read, and the relationship is linear. Let us suppose
that our master and slave are of the same capacity, and we have N
slaves and 1 master. Then we have for each server (master or
slave):</p>

<p><code>reads = 1200 - 2 * writes</code> (from bencmarks)</p>

<p><code>reads = 9* writes / (N + 1)</code> (reads split, but
writes go to all servers)</p>

<p><code>9*writes/(N+1) + 2 * writes = 1200</code></p>

<p><code>writes = 1200/(2 + 9/(N+1)</code></p>

<p>So if N = 0, which means we have no replication, our system can
handle 1200/11, about 109 writes per second (which means we will
have 9 times as many reads due to the nature of our
application).</p>

<p>If N = 1, we can get up to 184 writes per second.</p>

<p>If N = 8, we get up to 400.</p>

<p>If N = 17, 480 writes.</p>

<p>Eventually as N approaches infinity (and our budget negative
infinity), we can get very close to 600 writes per second,
increasing system throughput about 5.5 times. However, with only 8
servers, we increased it almost 4 times already.</p>

<p>Note that our computations assumed infinite network bandwidth,
and neglected several other factors that could turn out to be
significant on your system. In many cases, you may not be able to
make a computation similar to the one above that will accurately
predict what will happen on your system if you add N replication
slaves. However, answering the following questions should help you
decided whether and how much, if at all, the replication will
improve the performance of your system:</p>

<ul>
<li>What is the read/write ratio on your system?</li>

<li>How much more write load can one server handle if you reduce
the reads?</li>

<li>How many slaves do you have bandwidth for on your network?</li>
</ul>

<p><strong>Q</strong>: How can I use replication to provide
redundancy/high availability?</p>

<p><strong>A</strong>: With the currently available features, you
would have to set up a master and a slave (or several slaves), and
write a script that will monitor the master to see if it is up, and
instruct your applications and the slaves of the master change in
case of failure. Some suggestions:</p>

<ul>
<li>To tell a slave to change the master use the <code>CHANGE
MASTER TO</code> command.</li>

<li>A good way to keep your applications informed as to the
location of the master is by having a dynamic DNS entry for the
master. With <code>bind</code> you can use <tt>`nsupdate'</tt> to
dynamically update your DNS.</li>

<li>You should run your slaves with the <code>log-bin</code> option
and without <code>log-slave-updates</code>. This way the slave will
be ready to become a master as soon as you issue <code>STOP
SLAVE</code>; <code>RESET MASTER</code>, and <code>CHANGE MASTER
TO</code> on the other slaves. It will also help you catch spurious
updates that may happen because of misconfiguration of the slave
(ideally, you want to configure access rights so that no client can
update the slave, except for the slave thread) combined with the
bugs in your client programs (they should never update the slave
directly).</li>
</ul>

<p>We are currently working on integrating an automatic master
election system into MySQL, but until it is ready, you will have to
create your own monitoring tools.</p>

<h3><a id="Replication_Problems" name="Replication_Problems"
href="manual_toc.html#Replication_Problems">4.10.8 Troubleshooting
Replication</a></h3>

<p>If you have followed the instructions, and your replication
setup is not working, first eliminate the user error factor by
checking the following:</p>

<ul>
<li>Is the master logging to the binary log? Check with <code>SHOW
MASTER STATUS</code>. If it is, <code>Position</code> will be
non-zero. If not, verify that you have given the master
<code>log-bin</code> option and have set
<code>server-id</code>.</li>

<li>Is the slave running? Check with <code>SHOW SLAVE
STATUS</code>. The answer is found in <code>Slave_running</code>
column. If not, verify slave options and check the error log for
messages.</li>

<li>If the slave is running, did it establish connection with the
master? Do <code>SHOW PROCESSLIST</code>, find the thread with
<code>system user</code> value in <code>User</code> column and
<code>none</code> in the <code>Host</code> column, and check the
<code>State</code> column. If it says <code>connecting to
master</code>, verify the privileges for the replication user on
the master, master host name, your DNS setup, whether the master is
actually running, whether it is reachable from the slave, and if
all that seems okay, read the error logs.</li>

<li>If the slave was running, but then stopped, look at SHOW SLAVE
STATUS output and check the error logs. It usually happens when
some query that succeeded on the master fails on the slave. This
should never happen if you have taken a proper snapshot of the
master, and never modify the data on the slave outside of the slave
thread. If it does, it is a bug, read below on how to report
it.</li>

<li>If a query on that succeeded on the master refuses to run on
the slave, and a full database resync ( the proper thing to do )
does not seem feasible, try the following: 

<ul>
<li>First see if there is some stray record in the way. Understand
how it got there, then delete it and run <code>SLAVE
START</code></li>

<li>If the above does not work or does not apply, try to understand
if it would be safe to make the update manually ( if needed) and
then ignore the next query from the master.</li>

<li>If you have decided you can skip the next query, do <code>SET
GLOBAL SQL_SLAVE_SKIP_COUNTER=1; SLAVE START;</code> to skip a
query that does not use <code>AUTO_INCREMENT</code> or
<code>LAST_INSERT_ID()</code>, or <code>SET GLOBAL
SQL_SLAVE_SKIP_COUNTER=2; SLAVE START;</code> otherwise. The reason
queries that use <code>AUTO_INCREMENT</code> or
<code>LAST_INSERT_ID()</code> are different is that they take two
events in the binary log of the master.</li>

<li>If you are sure the slave started out perfectly in sync with
the master, and no one has updated the tables involved outside of
slave thread, report the bug, so you will not have to do the above
tricks again.</li>
</ul>
</li>

<li>Make sure you are not running into an old bug by upgrading to
the most recent version.</li>

<li>If all else fails, read the error logs. If they are big,
<code>grep -i slave /path/to/your-log.err</code> on the slave.
There is no generic pattern to search for on the master, as the
only errors it logs are general system errors -- if it can, it will
send the error to the slave when things go wrong.</li>
</ul>

<p>When you have determined that there is no user error involved,
and replication still either does not work at all or is unstable,
it is time to start working on a bug report. We need to get as much
info as possible from you to be able to track down the bug. Please
do spend some time and effort preparing a good bug report. Ideally,
we would like to have a test case in the format found in
<code>mysql-test/t/rpl*</code> directory of the source tree. If you
submit a test case like that, you can expect a patch within a day
or two in most cases, although, of course, you mileage may vary
depending on a number of factors.</p>

<p>The second best option is to write a simple program with easily
configurable connection arguments for the master and the slave that
will demonstrate the problem on our systems. You can write one in
Perl or in C, depending on which language you know better.</p>

<p>If you have one of the above ways to demonstrate the bug, use
<code>mysqlbug</code> to prepare a bug report and send it to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a>. If you
have a phantom -- a problem that does occur but you cannot
duplicate "at will":</p>

<ul>
<li>Verify that there is no user error involved. For example, if
you update the slave outside of the slave thread, the data will be
out of sync, and you can have unique key violations on updates, in
which case the slave thread will stop and wait for you to clean up
the tables manually to bring them in sync.</li>

<li>Run slave with <code>log-slave-updates</code> and
<code>log-bin</code> -- this will keep a log of all updates on the
slave.</li>

<li>Save all evidence before resetting the replication. If we have
no or only sketchy information, it would take us a while to track
down the problem. The evidence you should collect is: 

<ul>
<li>All binary logs on the master</li>

<li>All binary log on the slave</li>

<li>The output of <code>SHOW MASTER STATUS</code> on the master at
the time you have discovered the problem</li>

<li>The output of <code>SHOW SLAVE STATUS</code> on the master at
the time you have discovered the problem</li>

<li>Error logs on the master and on the slave</li>
</ul>
</li>

<li>Use <code>mysqlbinlog</code> to examine the binary logs. The
following should be helpful to find the trouble query, for example:


<pre>
mysqlbinlog -j pos_from_slave_status /path/to/log_from_slave_status | head
</pre>
</li>
</ul>

<p>Once you have collected the evidence on the phantom problem, try
hard to isolate it into a separate test case first. Then report the
problem to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a> with as
much info as possible.</p>

<h1><a id="MySQL_Optimisation" name="MySQL_Optimisation"
href="manual_toc.html#MySQL_Optimisation">5 MySQL
Optimisation</a></h1>

<p>Optimisation is a complicated task because it ultimately
requires understanding of the whole system. While it may be
possible to do some local optimisations with small knowledge of
your system or application, the more optimal you want your system
to become the more you will have to know about it.</p>

<p>This chapter will try to explain and give some examples of
different ways to optimise MySQL. Remember, however, that there are
always some (increasingly harder) additional ways to make the
system even faster.</p>

<h2><a id="Optimise_Overview" name="Optimise_Overview"
href="manual_toc.html#Optimise_Overview">5.1 Optimisation
Overview</a></h2>

<p>The most important part for getting a system fast is of course
the basic design. You also need to know what kinds of things your
system will be doing, and what your bottlenecks are.</p>

<p>The most common bottlenecks are:</p>

<ul>
<li>Disk seeks. It takes time for the disk to find a piece of data.
With modern disks in 1999, the mean time for this is usually lower
than 10ms, so we can in theory do about 100 seeks a second. This
time improves slowly with new disks and is very hard to optimise
for a single table. The way to optimise this is to spread the data
on more than one disk.</li>

<li>Disk reading/writing. When the disk is at the correct position
we need to read the data. With modern disks in 1999, one disk
delivers something like 10-20MB/s. This is easier to optimise than
seeks because you can read in parallel from multiple disks.</li>

<li>CPU cycles. When we have the data in main memory (or if it
already were there) we need to process it to get to our result.
Having small tables compared to the memory is the most common
limiting factor. But then, with small tables speed is usually not
the problem.</li>

<li>Memory bandwidth. When the CPU needs more data than can fit in
the CPU cache the main memory bandwidth becomes a bottleneck. This
is an uncommon bottleneck for most systems, but one should be aware
of it.</li>
</ul>

<h3><a id="Design_Limitations" name="Design_Limitations"
href="manual_toc.html#Design_Limitations">5.1.1 MySQL Design
Limitations/Tradeoffs</a></h3>

<p><a id="IDX815" name="IDX815"></a> <a id="IDX816"
name="IDX816"></a></p>

<p>When using the MyISAM storage engine, MySQL uses extremely fast
table locking (multiple readers / single writers). The biggest
problem with this table type is a if you have a mix of a steady
stream of updates and slow selects on the same table. If this is a
problem with some tables, you can use another table type for these.
See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</p>

<p>MySQL can work with both transactional and not transactional
tables. To be able to work smoothly with not transactional tables
(which can't rollback if something goes wrong), MySQL has the
following rules:</p>

<p><a id="IDX817" name="IDX817"></a></p>

<ul>
<li>All columns has default values.</li>

<li>If you insert a 'wrong' value in a column like a
<code>NULL</code> in a <code>NOT NULL</code> column or a too big
numerical value in a numerical column, MySQL will instead of giving
an error instead set the column to the 'best possible value'. For
numerical values this is 0, the smallest possible values or the
largest possible value. For strings this is either the empty string
or the longest possible string that can be in the column.</li>

<li>All calculated expressions returns a value that can be used
instead of signaling an error condition. For example 1/0 returns
<code>NULL</code></li>
</ul>

<p>The reason for the above rules is that we can't check these
conditions before the query starts to execute. If we encounter a
problem after updating a few rows, we can't just rollback as the
table type may not support this. We can't stop because in that case
the update would be 'half done' which is probably the worst
possible scenario. In this case it's better to 'do the best you
can' and then continue as if nothing happened.</p>

<p>The above means that one should not use MySQL to check fields
content, but one should do this in the application.</p>

<h3><a id="Portability" name="Portability"
href="manual_toc.html#Portability">5.1.2 Portability</a></h3>

<p><a id="IDX818" name="IDX818"></a> <a id="IDX819"
name="IDX819"></a> <a id="IDX820" name="IDX820"></a></p>

<p>Because all SQL servers implement different parts of SQL, it
takes work to write portable SQL applications. For very simple
selects/inserts it is very easy, but the more you need the harder
it gets. If you want an application that is fast with many
databases it becomes even harder!</p>

<p>To make a complex application portable you need to choose a
number of SQL servers that it should work with.</p>

<p>You can use the MySQL <code>crash-me</code> program/web-page <a
href="http://www.mysql.com/information/crash-me.php">http://www.mysql.com/information/crash-me.php</a>
to find functions, types, and limits you can use with a selection
of database servers. Crash-me now tests far from everything
possible, but it is still comprehensive with about 450 things
tested.</p>

<p>For example, you shouldn't have column names longer than 18
characters if you want to be able to use Informix or DB2.</p>

<p>Both the MySQL benchmarks and <code>crash-me</code> programs are
very database-independent. By taking a look at how we have handled
this, you can get a feeling for what you have to do to write your
application database-independent. The benchmarks themselves can be
found in the <tt>`sql-bench'</tt> directory in the MySQL source
distribution. They are written in Perl with DBI database interface
(which solves the access part of the problem).</p>

<p>See <a
href="http://www.mysql.com/information/benchmarks.html">http://www.mysql.com/information/benchmarks.html</a>
for the results from this benchmark.</p>

<p>As you can see in these results, all databases have some weak
points. That is, they have different design compromises that lead
to different behaviour.</p>

<p>If you strive for database independence, you need to get a good
feeling for each SQL server's bottlenecks. MySQL is very fast in
retrieving and updating things, but will have a problem in mixing
slow readers/writers on the same table. Oracle, on the other hand,
has a big problem when you try to access rows that you have
recently updated (until they are flushed to disk). Transaction
databases in general are not very good at generating summary tables
from log tables, as in this case row locking is almost useless.</p>

<p>To get your application <em>really</em> database-independent,
you need to define an easy extendable interface through which you
manipulate your data. As C++ is available on most systems, it makes
sense to use a C++ classes interface to the databases.</p>

<p>If you use some specific feature for some database (like the
<code>REPLACE</code> command in MySQL), you should code a method
for the other SQL servers to implement the same feature (but
slower). With MySQL you can use the <code>/*! */</code> syntax to
add MySQL-specific keywords to a query. The code inside
<code>/**/</code> will be treated as a comment (ignored) by most
other SQL servers.</p>

<p>If high performance is more important than exactness, as in some
web applications, it is possibile to create an application layer
that caches all results to give you even higher performance. By
letting old results 'expire' after a while, you can keep the cache
reasonably fresh. This provides a method to handle high load
spikes, in which case you can dynamically increase the cache and
set the expire timeout higher until things get back to normal.</p>

<p>In this case the table creation information should contain
information of the initial size of the cache and how often the
table should normally be refreshed.</p>

<h3><a id="Internal_use" name="Internal_use"
href="manual_toc.html#Internal_use">5.1.3 What Have We Used MySQL
For?</a></h3>

<p><a id="IDX821" name="IDX821"></a> <a id="IDX822"
name="IDX822"></a></p>

<p>During MySQL initial development, the features of MySQL were
made to fit our largest customer. They handle data warehousing for
a couple of the biggest retailers in Sweden.</p>

<p>From all stores, we get weekly summaries of all bonus card
transactions, and we are expected to provide useful information for
the store owners to help them find how their advertisement
campaigns are affecting their customers.</p>

<p>The data is quite huge (about 7 million summary transactions per
month), and we have data for 4-10 years that we need to present to
the users. We got weekly requests from the customers that they want
to get 'instant' access to new reports from this data.</p>

<p>We solved this by storing all information per month in
compressed 'transaction' tables. We have a set of simple macros
(script) that generates summary tables grouped by different
criteria (product group, customer id, store ...) from the
transaction tables. The reports are web pages that are dynamically
generated by a small Perl script that parses a web page, executes
the SQL statements in it, and inserts the results. We would have
used PHP or mod_perl instead but they were not available at that
time.</p>

<p>For graphical data we wrote a simple tool in <code>C</code> that
can produce GIFs based on the result of a SQL query (with some
processing of the result). This is also dynamically executed from
the Perl script that parses the <code>HTML</code> files.</p>

<p>In most cases a new report can simply be done by copying an
existing script and modifying the SQL query in it. In some cases,
we will need to add more fields to an existing summary table or
generate a new one, but this is also quite simple, as we keep all
transactions tables on disk. (Currently we have at least 50G of
transactions tables and 200G of other customer data.)</p>

<p>We also let our customers access the summary tables directly
with ODBC so that the advanced users can themselves experiment with
the data.</p>

<p>We haven't had any problems handling this with quite modest Sun
Ultra SPARCstation (2x200 Mhz). We recently upgraded one of our
servers to a 2 CPU 400 Mhz UltraSPARC, and we are now planning to
start handling transactions on the product level, which would mean
a ten-fold increase of data. We think we can keep up with this by
just adding more disk to our systems.</p>

<p>We are also experimenting with Intel-Linux to be able to get
more CPU power cheaper. Now that we have the binary portable
database format (new in Version 3.23), we will start to use this
for some parts of the application.</p>

<p>Our initial feelings are that Linux will perform much better on
low-to-medium load and Solaris will perform better when you start
to get a high load because of extreme disk IO, but we don't yet
have anything conclusive about this. After some discussion with a
Linux Kernel developer, this might be a side effect of Linux giving
so much resources to the batch job that the interactive performance
gets very low. This makes the machine feel very slow and
unresponsive while big batches are going. Hopefully this will be
better handled in future Linux Kernels.</p>

<h3><a id="MySQL_Benchmarks" name="MySQL_Benchmarks"
href="manual_toc.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a></h3>

<p><a id="IDX823" name="IDX823"></a> <a id="IDX824"
name="IDX824"></a></p>

<p>This should contain a technical description of the MySQL
benchmark suite (and <code>crash-me</code>), but that description
is not written yet. Currently, you can get a good idea of the
benchmark by looking at the code and results in the
<tt>`sql-bench'</tt> directory in any MySQL source
distributions.</p>

<p>This benchmark suite is meant to be a benchmark that will tell
any user what things a given SQL implementation performs well or
poorly at.</p>

<p>Note that this benchmark is single threaded, so it measures the
minimum time for the operations. We plan to in the future add a lot
of multi-threaded tests to the benchmark suite.</p>

<p>For example, (run on the same NT 4.0 machine):</p>

<table border="1" width="100%">
<tr>
<td><strong>Reading 2000000 rows by index</strong></td>
<td><strong>Seconds</strong></td>
<td><strong>Seconds</strong></td>
</tr>

<tr>
<td>mysql</td>
<td>367</td>
<td>249</td>
</tr>

<tr>
<td>mysql_odbc</td>
<td>464</td>
<td></td>
</tr>

<tr>
<td>db2_odbc</td>
<td>1206</td>
<td></td>
</tr>

<tr>
<td>informix_odbc</td>
<td>121126</td>
<td></td>
</tr>

<tr>
<td>ms-sql_odbc</td>
<td>1634</td>
<td></td>
</tr>

<tr>
<td>oracle_odbc</td>
<td>20800</td>
<td></td>
</tr>

<tr>
<td>solid_odbc</td>
<td>877</td>
<td></td>
</tr>

<tr>
<td>sybase_odbc</td>
<td>17614</td>
<td></td>
</tr>
</table>

<table border="1" width="100%">
<tr>
<td><strong>Inserting (350768) rows</strong></td>
<td><strong>Seconds</strong></td>
<td><strong>Seconds</strong></td>
</tr>

<tr>
<td>mysql</td>
<td>381</td>
<td>206</td>
</tr>

<tr>
<td>mysql_odbc</td>
<td>619</td>
<td></td>
</tr>

<tr>
<td>db2_odbc</td>
<td>3460</td>
<td></td>
</tr>

<tr>
<td>informix_odbc</td>
<td>2692</td>
<td></td>
</tr>

<tr>
<td>ms-sql_odbc</td>
<td>4012</td>
<td></td>
</tr>

<tr>
<td>oracle_odbc</td>
<td>11291</td>
<td></td>
</tr>

<tr>
<td>solid_odbc</td>
<td>1801</td>
<td></td>
</tr>

<tr>
<td>sybase_odbc</td>
<td>4802</td>
<td></td>
</tr>
</table>

<p>In the above test MySQL was run with a 8M index cache.</p>

<p>We have gathered some more benchmark results at <a
href="http://www.mysql.com/information/benchmarks.html">http://www.mysql.com/information/benchmarks.html</a>.</p>

<p>Note that Oracle is not included because they asked to be
removed. All Oracle benchmarks have to be passed by Oracle! We
believe that makes Oracle benchmarks <strong>very</strong> biased
because the above benchmarks are supposed to show what a standard
installation can do for a single client.</p>

<p>To run the benchmark suite, you have to download a MySQL source
distribution, install the perl DBI driver, the perl DBD driver for
the database you want to test and then do:</p>

<pre>
cd sql-bench
perl run-all-tests --server=#
</pre>

<p>where # is one of supported servers. You can get a list of all
options and supported servers by doing <code>run-all-tests
--help</code>.</p>

<p><a id="IDX825" name="IDX825"></a> <code>crash-me</code> tries to
determine what features a database supports and what its
capabilities and limitations are by actually running queries. For
example, it determines:</p>

<ul>
<li>What column types are supported</li>

<li>How many indexes are supported</li>

<li>What functions are supported</li>

<li>How big a query can be</li>

<li>How big a <code>VARCHAR</code> column can be</li>
</ul>

<p>We can find the result from <code>crash-me</code> on a lot of
different databases at <a
href="http://www.mysql.com/information/crash-me.php">http://www.mysql.com/information/crash-me.php</a>.</p>

<h3><a id="Custom_Benchmarks" name="Custom_Benchmarks"
href="manual_toc.html#Custom_Benchmarks">5.1.5 Using Your Own
Benchmarks</a></h3>

<p><a id="IDX826" name="IDX826"></a> <a id="IDX827"
name="IDX827"></a></p>

<p>You should definitely benchmark your application and database to
find out where the bottlenecks are. By fixing it (or by replacing
the bottleneck with a 'dummy module') you can then easily identify
the next bottleneck (and so on). Even if the overall performance
for your application is sufficient, you should at least make a plan
for each bottleneck, and decide how to solve it if someday you
really need the extra performance.</p>

<p>For an example of portable benchmark programs, look at the MySQL
benchmark suite. See section <a
href="manual.html#MySQL_Benchmarks">5.1.4 The MySQL Benchmark
Suite</a>. You can take any program from this suite and modify it
for your needs. By doing this, you can try different solutions to
your problem and test which is really the fastest solution for
you.</p>

<p>It is very common that some problems only occur when the system
is very heavily loaded. We have had many customers who contact us
when they have a (tested) system in production and have encountered
load problems. In every one of these cases so far, it has been
problems with basic design (table scans are <strong>not
good</strong> at high load) or OS/Library issues. Most of this
would be a <strong>lot</strong> easier to fix if the systems were
not already in production.</p>

<p>To avoid problems like this, you should put some effort into
benchmarking your whole application under the worst possible load!
You can use Super Smack for this, and it is available at: <a
href="http://www.mysql.com/Downloads/super-smack/super-smack-1.0.tar.gz">
http://www.mysql.com/Downloads/super-smack/super-smack-1.0.tar.gz</a>.
As the name suggests, it can bring your system down to its knees if
you ask it, so make sure to use it only on your development
systems.</p>

<h2><a id="Query_Speed" name="Query_Speed"
href="manual_toc.html#Query_Speed">5.2 Optimising
<code>SELECT</code>s and Other Queries</a></h2>

<p><a id="IDX828" name="IDX828"></a> <a id="IDX829"
name="IDX829"></a> <a id="IDX830" name="IDX830"></a></p>

<p>First, one thing that affects all queries: The more complex
permission system setup you have, the more overhead you get.</p>

<p>If you do not have any <code>GRANT</code> statements done, MySQL
will optimise the permission checking somewhat. So if you have a
very high volume it may be worth the time to avoid grants.
Otherwise, more permission check results in a larger overhead.</p>

<p>If your problem is with some explicit MySQL function, you can
always time this in the MySQL client:</p>

<pre>
mysql&gt; SELECT BENCHMARK(1000000,1+1);
+------------------------+
| BENCHMARK(1000000,1+1) |
+------------------------+
|                      0 |
+------------------------+
1 row in set (0.32 sec)
</pre>

<p>The above shows that MySQL can execute 1,000,000 <code>+</code>
expressions in 0.32 seconds on a <code>PentiumII 400MHz</code>.</p>

<p>All MySQL functions should be very optimised, but there may be
some exceptions, and the
<code>BENCHMARK(loop_count,expression)</code> is a great tool to
find out if this is a problem with your query.</p>

<h3><a id="EXPLAIN" name="EXPLAIN"
href="manual_toc.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax
(Get Information About a <code>SELECT</code>)</a></h3>

<p><a id="IDX831" name="IDX831"></a> <a id="IDX832"
name="IDX832"></a></p>

<pre>
    EXPLAIN tbl_name
or  EXPLAIN SELECT select_options
</pre>

<p><code>EXPLAIN tbl_name</code> is a synonym for <code>DESCRIBE
tbl_name</code> or <code>SHOW COLUMNS FROM tbl_name</code>.</p>

<p>When you precede a <code>SELECT</code> statement with the
keyword <code>EXPLAIN</code>, MySQL explains how it would process
the <code>SELECT</code>, providing information about how tables are
joined and in which order.</p>

<p>With the help of <code>EXPLAIN</code>, you can see when you must
add indexes to tables to get a faster <code>SELECT</code> that uses
indexes to find the records.</p>

<p>You should frequently run <code>ANALYZE TABLE</code> to update
table statistics such as cardinality of keys which can affect the
choices the optimiser makes. See section <a
href="manual.html#ANALYZE_TABLE">4.5.2 <code>ANALYZE TABLE</code>
Syntax</a>.</p>

<p>You can also see if the optimiser joins the tables in an optimal
order. To force the optimiser to use a specific join order for a
<code>SELECT</code> statement, add a <code>STRAIGHT_JOIN</code>
clause.</p>

<p>For non-simple joins, <code>EXPLAIN</code> returns a row of
information for each table used in the <code>SELECT</code>
statement. The tables are listed in the order they would be read.
MySQL resolves all joins using a single-sweep multi-join method.
This means that MySQL reads a row from the first table, then finds
a matching row in the second table, then in the third table and so
on. When all tables are processed, it outputs the selected columns
and backtracks through the table list until a table is found for
which there are more matching rows. The next row is read from this
table and the process continues with the next table.</p>

<p>In MySQL version 4.1 the <code>EXPLAIN</code> output was changed
to work better with constructs like <code>UNION</code>s, subqueries
and derived tables. Most notable is the addition of two new
columns: <code>id</code> and <code>select_type</code>.</p>

<p>Output from <code>EXPLAIN</code> consists of the following
columns:</p>

<dl compact="compact">
<dt><code>id</code></dt>

<dd><code>SELECT</code> identifier, the sequential number of this
<code>SELECT</code> within the query.</dd>

<dt><code>select_type</code></dt>

<dd>Type of <code>SELECT</code> clause, which can be any of the
following: 

<dl compact="compact">
<dt><code>SIMPLE</code></dt>

<dd>Simple <code>SELECT</code> (without <code>UNION</code>s or
subqueries).</dd>

<dt><code>PRIMARY</code></dt>

<dd>Outermost <code>SELECT</code>.</dd>

<dt><code>UNION</code></dt>

<dd>Second and further <code>UNION</code>
<code>SELECT</code>s.</dd>

<dt><code>DEPENDENT UNION</code></dt>

<dd>Second and further <code>UNION</code> <code>SELECTS</code>s,
dependent on outer subquery.</dd>

<dt><code>SUBSELECT</code></dt>

<dd>First <code>SELECT</code> in subquery.</dd>

<dt><code>DEPENDENT SUBSELECT</code></dt>

<dd>First <code>SELECT</code>, dependent on outer subquery.</dd>

<dt><code>DERIVED</code></dt>

<dd>Derived table <code>SELECT</code>.</dd>
</dl>
</dd>

<dt><code>table</code></dt>

<dd>The table to which the row of output refers.</dd>

<dt><code>type</code></dt>

<dd>The join type. The different join types are listed here,
ordered from best to worst type: <a id="IDX833" name="IDX833"></a>
<a id="IDX834" name="IDX834"></a> 

<dl compact="compact">
<dt><code>system</code></dt>

<dd>The table has only one row (= system table). This is a special
case of the <code>const</code> join type. <a id="IDX835"
name="IDX835"></a> <a id="IDX836" name="IDX836"></a></dd>

<dt><code>const</code></dt>

<dd>The table has at most one matching row, which will be read at
the start of the query. Because there is only one row, values from
the column in this row can be regarded as constants by the rest of
the optimiser. <code>const</code> tables are very fast as they are
read only once!</dd>

<dt><code>eq_ref</code></dt>

<dd>One row will be read from this table for each combination of
rows from the previous tables. This is the best possible join type,
other than the <code>const</code> types. It is used when all parts
of an index are used by the join and the index is
<code>UNIQUE</code> or a <code>PRIMARY KEY</code>.</dd>

<dt><code>ref</code></dt>

<dd>All rows with matching index values will be read from this
table for each combination of rows from the previous tables.
<code>ref</code> is used if the join uses only a leftmost prefix of
the key, or if the key is not <code>UNIQUE</code> or a
<code>PRIMARY KEY</code> (in other words, if the join cannot select
a single row based on the key value). If the key that is used
matches only a few rows, this join type is good.</dd>

<dt><code>range</code></dt>

<dd>Only rows that are in a given range will be retrieved, using an
index to select the rows. The <code>key</code> column indicates
which index is used. The <code>key_len</code> contains the longest
key part that was used. The <code>ref</code> column will be
<code>NULL</code> for this type.</dd>

<dt><code>index</code></dt>

<dd>This is the same as <code>ALL</code>, except that only the
index tree is scanned. This is usually faster than
<code>ALL</code>, as the index file is usually smaller than the
datafile.</dd>

<dt><code>ALL</code></dt>

<dd>A full table scan will be done for each combination of rows
from the previous tables. This is normally not good if the table is
the first table not marked <code>const</code>, and usually
<strong>very</strong> bad in all other cases. You normally can
avoid <code>ALL</code> by adding more indexes, so that the row can
be retrieved based on constant values or column values from earlier
tables.</dd>
</dl>
</dd>

<dt><code>possible_keys</code></dt>

<dd>The <code>possible_keys</code> column indicates which indexes
MySQL could use to find the rows in this table. Note that this
column is totally independent of the order of the tables. That
means that some of the keys in possible_keys may not be usable in
practice with the generated table order. If this column is empty,
there are no relevant indexes. In this case, you may be able to
improve the performance of your query by examining the
<code>WHERE</code> clause to see if it refers to some column or
columns that would be suitable for indexing. If so, create an
appropriate index and check the query with <code>EXPLAIN</code>
again. See section <a href="manual.html#ALTER_TABLE">6.5.4
<code>ALTER TABLE</code> Syntax</a>. To see what indexes a table
has, use <code>SHOW INDEX FROM tbl_name</code>.</dd>

<dt><code>key</code></dt>

<dd>The <code>key</code> column indicates the key (index) that
MySQL actually decided to use. The key is <code>NULL</code> if no
index was chosen. To force MySQL to use an key listed in the
<code>possible_keys</code> column, use <code>USE KEY/IGNORE
KEY</code> in your query. See section <a
href="manual.html#SELECT">6.4.1 <code>SELECT</code> Syntax</a>.
Also, running <code>myisamchk --analyze</code> (see section <a
href="manual.html#myisamchk_syntax">4.4.6.1 <code>myisamchk</code>
Invocation Syntax</a>) or <code>ANALYZE TABLE</code> (see section
<a href="manual.html#ANALYZE_TABLE">4.5.2 <code>ANALYZE
TABLE</code> Syntax</a>) on the table will help the optimiser
choose better indexes.</dd>

<dt><code>key_len</code></dt>

<dd>The <code>key_len</code> column indicates the length of the key
that MySQL decided to use. The length is <code>NULL</code> if the
<code>key</code> is <code>NULL</code>. Note that this tells us how
many parts of a multi-part key MySQL will actually use.</dd>

<dt><code>ref</code></dt>

<dd>The <code>ref</code> column shows which columns or constants
are used with the <code>key</code> to select rows from the
table.</dd>

<dt><code>rows</code></dt>

<dd>The <code>rows</code> column indicates the number of rows MySQL
believes it must examine to execute the query.</dd>

<dt><code>Extra</code></dt>

<dd>This column contains additional information of how MySQL will
resolve the query. Here is an explanation of the different text
strings that can be found in this column: 

<dl compact="compact">
<dt><code>Distinct</code></dt>

<dd>MySQL will not continue searching for more rows for the current
row combination after it has found the first matching row.</dd>

<dt><code>Not exists</code></dt>

<dd>MySQL was able to do a <code>LEFT JOIN</code> optimisation on
the query and will not examine more rows in this table for the
previous row combination after it finds one row that matches the
<code>LEFT JOIN</code> criteria. Here is an example for this: 

<pre>
SELECT * FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;
</pre>

Assume that <code>t2.id</code> is defined with <code>NOT
NULL</code>. In this case MySQL will scan <code>t1</code> and look
up the rows in <code>t2</code> through <code>t1.id</code>. If MySQL
finds a matching row in <code>t2</code>, it knows that
<code>t2.id</code> can never be <code>NULL</code>, and will not
scan through the rest of the rows in <code>t2</code> that has the
same <code>id</code>. In other words, for each row in
<code>t1</code>, MySQL only needs to do a single lookup in
<code>t2</code>, independent of how many matching rows there are in
<code>t2</code>.</dd>

<dt><code><code>range checked for each record (index map:
#)</code></code></dt>

<dd>MySQL didn't find a real good index to use. It will, instead,
for each row combination in the preceding tables, do a check on
which index to use (if any), and use this index to retrieve the
rows from the table. This isn't very fast but is faster than having
to do a join without an index.</dd>

<dt><code>Using filesort</code></dt>

<dd>MySQL will need to do an extra pass to find out how to retrieve
the rows in sorted order. The sort is done by going through all
rows according to the <code>join type</code> and storing the sort
key + pointer to the row for all rows that match the
<code>WHERE</code>. Then the keys are sorted. Finally the rows are
retrieved in sorted order.</dd>

<dt><code>Using index</code></dt>

<dd>The column information is retrieved from the table using only
information in the index tree without having to do an additional
seek to read the actual row. This can be done when all the used
columns for the table are part of the same index.</dd>

<dt><code>Using temporary</code></dt>

<dd>To resolve the query MySQL will need to create a temporary
table to hold the result. This typically happens if you do an
<code>ORDER BY</code> on a different column set than you did a
<code>GROUP BY</code> on.</dd>

<dt><code>Using where</code></dt>

<dd>A <code>WHERE</code> clause will be used to restrict which rows
will be matched against the next table or sent to the client. If
you don't have this information and the table is of type
<code>ALL</code> or <code>index</code>, you may have something
wrong in your query (if you don't intend to fetch/examine all rows
from the table).</dd>
</dl>

If you want to get your queries as fast as possible, you should
look out for <code>Using filesort</code> and <code>Using
temporary</code>.</dd>
</dl>

<p>You can get a good indication of how good a join is by
multiplying all values in the <code>rows</code> column of the
<code>EXPLAIN</code> output. This should tell you roughly how many
rows MySQL must examine to execute the query. This number is also
used when you restrict queries with the <code>max_join_size</code>
variable. See section <a href="manual.html#Server_parameters">5.5.2
Tuning Server Parameters</a>.</p>

<p>The following example shows how a <code>JOIN</code> can be
optimised progressively using the information provided by
<code>EXPLAIN</code>.</p>

<p>Suppose you have the <code>SELECT</code> statement shown here,
that you examine using <code>EXPLAIN</code>:</p>

<pre>
EXPLAIN SELECT tt.TicketNumber, tt.TimeIn,
            tt.ProjectReference, tt.EstimatedShipDate,
            tt.ActualShipDate, tt.ClientID,
            tt.ServiceCodes, tt.RepetitiveID,
            tt.CurrentProcess, tt.CurrentDPPerson,
            tt.RecordVolume, tt.DPPrinted, et.COUNTRY,
            et_1.COUNTRY, do.CUSTNAME
        FROM tt, et, et AS et_1, do
        WHERE tt.SubmitTime IS NULL
            AND tt.ActualPC = et.EMPLOYID
            AND tt.AssignedPC = et_1.EMPLOYID
            AND tt.ClientID = do.CUSTNMBR;
</pre>

<p>For this example, assume that:</p>

<ul>
<li>The columns being compared have been declared as follows: 

<table border="1" width="100%">
<tr>
<td><strong>Table</strong></td>
<td><strong>Column</strong></td>
<td><strong>Column type</strong></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>ActualPC</code></td>
<td><code>CHAR(10)</code></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>AssignedPC</code></td>
<td><code>CHAR(10)</code></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>ClientID</code></td>
<td><code>CHAR(10)</code></td>
</tr>

<tr>
<td><code>et</code></td>
<td><code>EMPLOYID</code></td>
<td><code>CHAR(15)</code></td>
</tr>

<tr>
<td><code>do</code></td>
<td><code>CUSTNMBR</code></td>
<td><code>CHAR(15)</code></td>
</tr>
</table>
</li>

<li>The tables have the indexes shown here: 

<table border="1" width="100%">
<tr>
<td><strong>Table</strong></td>
<td><strong>Index</strong></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>ActualPC</code></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>AssignedPC</code></td>
</tr>

<tr>
<td><code>tt</code></td>
<td><code>ClientID</code></td>
</tr>

<tr>
<td><code>et</code></td>
<td><code>EMPLOYID</code> (primary key)</td>
</tr>

<tr>
<td><code>do</code></td>
<td><code>CUSTNMBR</code> (primary key)</td>
</tr>
</table>
</li>

<li>The <code>tt.ActualPC</code> values aren't evenly
distributed.</li>
</ul>

<p>Initially, before any optimisations have been performed, the
<code>EXPLAIN</code> statement produces the following
information:</p>

<pre>
table type possible_keys                key  key_len ref  rows  Extra
et    ALL  PRIMARY                      NULL NULL    NULL 74
do    ALL  PRIMARY                      NULL NULL    NULL 2135
et_1  ALL  PRIMARY                      NULL NULL    NULL 74
tt    ALL  AssignedPC,ClientID,ActualPC NULL NULL    NULL 3872
      range checked for each record (key map: 35)
</pre>

<p>Because <code>type</code> is <code>ALL</code> for each table,
this output indicates that MySQL is doing a full join for all
tables! This will take quite a long time, as the product of the
number of rows in each table must be examined! For the case at
hand, this is <code>74 * 2135 * 74 * 3872 = 45,268,558,720</code>
rows. If the tables were bigger, you can only imagine how long it
would take.</p>

<p>One problem here is that MySQL can't (yet) use indexes on
columns efficiently if they are declared differently. In this
context, <code>VARCHAR</code> and <code>CHAR</code> are the same
unless they are declared as different lengths. Because
<code>tt.ActualPC</code> is declared as <code>CHAR(10)</code> and
<code>et.EMPLOYID</code> is declared as <code>CHAR(15)</code>,
there is a length mismatch.</p>

<p>To fix this disparity between column lengths, use <code>ALTER
TABLE</code> to lengthen <code>ActualPC</code> from 10 characters
to 15 characters:</p>

<pre>
mysql&gt; ALTER TABLE tt MODIFY ActualPC VARCHAR(15);
</pre>

<p>Now <code>tt.ActualPC</code> and <code>et.EMPLOYID</code> are
both <code>VARCHAR(15)</code>. Executing the <code>EXPLAIN</code>
statement again produces this result:</p>

<pre>
table type   possible_keys   key     key_len ref         rows    Extra
tt    ALL    AssignedPC,ClientID,ActualPC NULL NULL NULL 3872    Using where
do    ALL    PRIMARY         NULL    NULL    NULL        2135
      range checked for each record (key map: 1)
et_1  ALL    PRIMARY         NULL    NULL    NULL        74
      range checked for each record (key map: 1)
et    eq_ref PRIMARY         PRIMARY 15      tt.ActualPC 1
</pre>

<p>This is not perfect, but is much better (the product of the
<code>rows</code> values is now less by a factor of 74). This
version is executed in a couple of seconds.</p>

<p>A second alteration can be made to eliminate the column length
mismatches for the <code>tt.AssignedPC = et_1.EMPLOYID</code> and
<code>tt.ClientID = do.CUSTNMBR</code> comparisons:</p>

<pre>
mysql&gt; ALTER TABLE tt MODIFY AssignedPC VARCHAR(15),
    -&gt;                MODIFY ClientID   VARCHAR(15);
</pre>

<p>Now <code>EXPLAIN</code> produces the output shown here:</p>

<pre>
table type   possible_keys   key      key_len ref           rows Extra
et    ALL    PRIMARY         NULL     NULL    NULL          74
tt    ref    AssignedPC,     ActualPC 15      et.EMPLOYID   52   where used
             ClientID,
             ActualPC
et_1  eq_ref PRIMARY         PRIMARY  15      tt.AssignedPC 1
do    eq_ref PRIMARY         PRIMARY  15      tt.ClientID   1
</pre>

<p>This is almost as good as it can get.</p>

<p>The remaining problem is that, by default, MySQL assumes that
values in the <code>tt.ActualPC</code> column are evenly
distributed, and that isn't the case for the <code>tt</code> table.
Fortunately, it is easy to tell MySQL about this:</p>

<pre>
shell&gt; myisamchk --analyze PATH_TO_MYSQL_DATABASE/tt
shell&gt; mysqladmin refresh
</pre>

<p>Now the join is perfect, and <code>EXPLAIN</code> produces this
result:</p>

<pre>
table type   possible_keys key     key_len ref           rows Extra
tt    ALL    AssignedPC    NULL    NULL    NULL          3872 where used
             ClientID,
             ActualPC
et    eq_ref PRIMARY       PRIMARY 15      tt.ActualPC   1
et_1  eq_ref PRIMARY       PRIMARY 15      tt.AssignedPC 1
do    eq_ref PRIMARY       PRIMARY 15      tt.ClientID   1
</pre>

<p>Note that the <code>rows</code> column in the output from
<code>EXPLAIN</code> is an educated guess from the MySQL join
optimiser. To optimise a query, you should check if the numbers are
even close to the truth. If not, you may get better performance by
using <code>STRAIGHT_JOIN</code> in your <code>SELECT</code>
statement and trying to list the tables in a different order in the
<code>FROM</code> clause.</p>

<h3><a id="Estimating_performance" name="Estimating_performance"
href="manual_toc.html#Estimating_performance">5.2.2 Estimating
Query Performance</a></h3>

<p><a id="IDX837" name="IDX837"></a> <a id="IDX838"
name="IDX838"></a> <a id="IDX839" name="IDX839"></a></p>

<p>In most cases you can estimate the performance by counting disk
seeks. For small tables, you can usually find the row in 1 disk
seek (as the index is probably cached). For bigger tables, you can
estimate that (using B++ tree indexes) you will need:
<code>log(row_count) / log(index_block_length / 3 * 2 /
(index_length + data_pointer_length)) + 1</code> seeks to find a
row.</p>

<p>In MySQL an index block is usually 1024 bytes and the data
pointer is usually 4 bytes. A 500,000 row table with an index
length of 3 (medium integer) gives you:
<code>log(500,000)/log(1024/3*2/(3+4)) + 1</code> = 4 seeks.</p>

<p>As the above index would require about 500,000 * 7 * 3/2 = 5.2M,
(assuming that the index buffers are filled to 2/3, which is
typical) you will probably have much of the index in memory and you
will probably only need 1-2 calls to read data from the OS to find
the row.</p>

<p>For writes, however, you will need 4 seek requests (as above) to
find where to place the new index and normally 2 seeks to update
the index and write the row.</p>

<p>Note that the above doesn't mean that your application will
slowly degenerate by log N! As long as everything is cached by the
OS or SQL server things will only go marginally slower while the
table gets bigger. After the data gets too big to be cached, things
will start to go much slower until your applications is only bound
by disk-seeks (which increase by log N). To avoid this, increase
the index cache as the data grows. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<h3><a id="SELECT_speed" name="SELECT_speed"
href="manual_toc.html#SELECT_speed">5.2.3 Speed of
<code>SELECT</code> Queries</a></h3>

<p><a id="IDX840" name="IDX840"></a></p>

<p><a id="IDX841" name="IDX841"></a></p>

<p>In general, when you want to make a slow <code>SELECT ...
WHERE</code> faster, the first thing to check is whether you can
add an index. See section <a href="manual.html#MySQL_indexes">5.4.3
How MySQL Uses Indexes</a>. All references between different tables
should usually be done with indexes. You can use the
<code>EXPLAIN</code> command to determine which indexes are used
for a <code>SELECT</code>. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</p>

<p>Some general tips:</p>

<ul>
<li>To help MySQL optimise queries better, run <code>myisamchk
--analyze</code> on a table after it has been loaded with relevant
data. This updates a value for each index part that indicates the
average number of rows that have the same value. (For unique
indexes, this is always 1, of course.) MySQL will use this to
decide which index to choose when you connect two tables with 'a
non-constant expression'. You can check the result from the
<code>analyze</code> run by doing <code>SHOW INDEX FROM
table_name</code> and examining the <code>Cardinality</code>
column.</li>

<li>To sort an index and data according to an index, use
<code>myisamchk --sort-index --sort-records=1</code> (if you want
to sort on index 1). If you have a unique index from which you want
to read all records in order according to that index, this is a
good way to make that faster. Note, however, that this sorting
isn't written optimally and will take a long time for a large
table!</li>
</ul>

<h3><a id="Where_optimisations" name="Where_optimisations"
href="manual_toc.html#Where_optimisations">5.2.4 How MySQL
Optimises <code>WHERE</code> Clauses</a></h3>

<p><a id="IDX842" name="IDX842"></a></p>

<p><a id="IDX843" name="IDX843"></a></p>

<p>The <code>WHERE</code> optimisations are put in the
<code>SELECT</code> part here because they are mostly used with
<code>SELECT</code>, but the same optimisations apply for
<code>WHERE</code> in <code>DELETE</code> and <code>UPDATE</code>
statements.</p>

<p>Also note that this section is incomplete. MySQL does many
optimisations, and we have not had time to document them all.</p>

<p>Some of the optimisations performed by MySQL are listed
here:</p>

<ul>
<li>Removal of unnecessary parentheses: 

<pre>
   ((a AND b) AND c OR (((a AND b) AND (c AND d))))
-&gt; (a AND b AND c) OR (a AND b AND c AND d)
</pre>
</li>

<li>Constant folding: 

<pre>
   (a&lt;b AND b=c) AND a=5
-&gt; b&gt;5 AND b=c AND a=5
</pre>
</li>

<li>Constant condition removal (needed because of constant
folding): 

<pre>
   (B&gt;=5 AND B=5) OR (B=6 AND 5=5) OR (B=7 AND 5=6)
-&gt; B=5 OR B=6
</pre>
</li>

<li>Constant expressions used by indexes are evaluated only
once.</li>

<li><code>COUNT(*)</code> on a single table without a
<code>WHERE</code> is retrieved directly from the table information
for <code>MyISAM</code> and <code>HEAP</code> tables. This is also
done for any <code>NOT NULL</code> expression when used with only
one table.</li>

<li>Early detection of invalid constant expressions. MySQL quickly
detects that some <code>SELECT</code> statements are impossible and
returns no rows.</li>

<li><code>HAVING</code> is merged with <code>WHERE</code> if you
don't use <code>GROUP BY</code> or group functions
(<code>COUNT()</code>, <code>MIN()</code>...).</li>

<li>For each sub-join, a simpler <code>WHERE</code> is constructed
to get a fast <code>WHERE</code> evaluation for each sub-join and
also to skip records as soon as possible. <a id="IDX844"
name="IDX844"></a> <a id="IDX845" name="IDX845"></a></li>

<li>All constant tables are read first, before any other tables in
the query. A constant table is: 

<ul>
<li>An empty table or a table with 1 row.</li>

<li>A table that is used with a <code>WHERE</code> clause on a
<code>UNIQUE</code> index, or a <code>PRIMARY KEY</code>, where all
index parts are used with constant expressions and the index parts
are defined as <code>NOT NULL</code>.</li>
</ul>

All the following tables are used as constant tables: 

<pre>
mysql&gt; SELECT * FROM t WHERE primary_key=1;
mysql&gt; SELECT * FROM t1,t2
    -&gt;          WHERE t1.primary_key=1 AND t2.primary_key=t1.id;
</pre>
</li>

<li>The best join combination to join the tables is found by trying
all possibilities. If all columns in <code>ORDER BY</code> and in
<code>GROUP BY</code> come from the same table, then this table is
preferred first when joining.</li>

<li>If there is an <code>ORDER BY</code> clause and a different
<code>GROUP BY</code> clause, or if the <code>ORDER BY</code> or
<code>GROUP BY</code> contains columns from tables other than the
first table in the join queue, a temporary table is created.</li>

<li>If you use <code>SQL_SMALL_RESULT</code>, MySQL will use an
in-memory temporary table.</li>

<li>Each table index is queried, and the best index that spans
fewer than 30% of the rows is used. If no such index can be found,
a quick table scan is used.</li>

<li>In some cases, MySQL can read rows from the index without even
consulting the datafile. If all columns used from the index are
numeric, then only the index tree is used to resolve the
query.</li>

<li>Before each record is output, those that do not match the
<code>HAVING</code> clause are skipped.</li>
</ul>

<p>Some examples of queries that are very fast:</p>

<pre>
mysql&gt; SELECT COUNT(*) FROM tbl_name;
mysql&gt; SELECT MIN(key_part1),MAX(key_part1) FROM tbl_name;
mysql&gt; SELECT MAX(key_part2) FROM tbl_name
    -&gt;        WHERE key_part_1=constant;
mysql&gt; SELECT ... FROM tbl_name
    -&gt;        ORDER BY key_part1,key_part2,... LIMIT 10;
mysql&gt; SELECT ... FROM tbl_name
    -&gt;        ORDER BY key_part1 DESC,key_part2 DESC,... LIMIT 10;
</pre>

<p>The following queries are resolved using only the index tree
(assuming the indexed columns are numeric):</p>

<pre>
mysql&gt; SELECT key_part1,key_part2 FROM tbl_name WHERE key_part1=val;
mysql&gt; SELECT COUNT(*) FROM tbl_name
    -&gt;        WHERE key_part1=val1 AND key_part2=val2;
mysql&gt; SELECT key_part2 FROM tbl_name GROUP BY key_part1;
</pre>

<p>The following queries use indexing to retrieve the rows in
sorted order without a separate sorting pass:</p>

<pre>
mysql&gt; SELECT ... FROM tbl_name
    -&gt;            ORDER BY key_part1,key_part2,... ;
mysql&gt; SELECT ... FROM tbl_name
    -&gt;            ORDER BY key_part1 DESC,key_part2 DESC,... ;
</pre>

<h3><a id="DISTINCT_optimisation" name="DISTINCT_optimisation"
href="manual_toc.html#DISTINCT_optimisation">5.2.5 How MySQL
Optimises <code>DISTINCT</code></a></h3>

<p><a id="IDX846" name="IDX846"></a></p>

<p><a id="IDX847" name="IDX847"></a></p>

<p><code>DISTINCT</code> is converted to a <code>GROUP BY</code> on
all columns, <code>DISTINCT</code> combined with <code>ORDER
BY</code> will in many cases also need a temporary table.</p>

<p>When combining <code>LIMIT #</code> with <code>DISTINCT</code>,
MySQL will stop as soon as it finds <code>#</code> unique rows.</p>

<p>If you don't use columns from all used tables, MySQL will stop
the scanning of the not used tables as soon as it has found the
first match.</p>

<pre>
SELECT DISTINCT t1.a FROM t1,t2 where t1.a=t2.a;
</pre>

<p>In the case, assuming <code>t1</code> is used before
<code>t2</code> (check with <code>EXPLAIN</code>), then MySQL will
stop reading from <code>t2</code> (for that particular row in
<code>t1</code>) when the first row in <code>t2</code> is
found.</p>

<h3><a id="LEFT_JOIN_optimisation" name="LEFT_JOIN_optimisation"
href="manual_toc.html#LEFT_JOIN_optimisation">5.2.6 How MySQL
Optimises <code>LEFT JOIN</code> and <code>RIGHT
JOIN</code></a></h3>

<p><a id="IDX848" name="IDX848"></a></p>

<p><a id="IDX849" name="IDX849"></a></p>

<p><code>A LEFT JOIN B</code> in MySQL is implemented as
follows:</p>

<ul>
<li>The table <code>B</code> is set to be dependent on table
<code>A</code> and all tables that <code>A</code> is dependent
on.</li>

<li>The table <code>A</code> is set to be dependent on all tables
(except <code>B</code>) that are used in the <code>LEFT JOIN</code>
condition.</li>

<li>All <code>LEFT JOIN</code> conditions are moved to the
<code>WHERE</code> clause.</li>

<li>All standard join optimisations are done, with the exception
that a table is always read after all tables it is dependent on. If
there is a circular dependence then MySQL will issue an error.</li>

<li>All standard <code>WHERE</code> optimisations are done.</li>

<li>If there is a row in <code>A</code> that matches the
<code>WHERE</code> clause, but there wasn't any row in
<code>B</code> that matched the <code>LEFT JOIN</code> condition,
then an extra <code>B</code> row is generated with all columns set
to <code>NULL</code>.</li>

<li>If you use <code>LEFT JOIN</code> to find rows that don't exist
in some table and you have the following test: <code>column_name IS
NULL</code> in the <code>WHERE</code> part, where column_name is a
column that is declared as <code>NOT NULL</code>, then MySQL will
stop searching after more rows (for a particular key combination)
after it has found one row that matches the <code>LEFT JOIN</code>
condition.</li>
</ul>

<p><code>RIGHT JOIN</code> is implemented analogously as <code>LEFT
JOIN</code>.</p>

<p>The table read order forced by <code>LEFT JOIN</code> and
<code>STRAIGHT JOIN</code> will help the join optimiser (which
calculates in which order tables should be joined) to do its work
much more quickly, as there are fewer table permutations to
check.</p>

<p>Note that the above means that if you do a query of type:</p>

<pre>
SELECT * FROM a,b LEFT JOIN c ON (c.key=a.key) LEFT JOIN d (d.key=a.key)
         WHERE b.key=d.key
</pre>

<p>MySQL will do a full scan on <code>b</code> as the <code>LEFT
JOIN</code> will force it to be read before <code>d</code>.</p>

<p>The fix in this case is to change the query to:</p>

<pre>
SELECT * FROM b,a LEFT JOIN c ON (c.key=a.key) LEFT JOIN d (d.key=a.key)
         WHERE b.key=d.key
</pre>

<h3><a id="ORDER_BY_optimisation" name="ORDER_BY_optimisation"
href="manual_toc.html#ORDER_BY_optimisation">5.2.7 How MySQL
Optimises <code>ORDER BY</code></a></h3>

<p>In some cases MySQL can uses index to satisfy an <code>ORDER
BY</code> or <code>GROUP BY</code> request without doing any extra
sorting.</p>

<p>The index can also be used even if the <code>ORDER BY</code>
doesn't match the index exactly, as long as all the unused index
parts and all the extra are <code>ORDER BY</code> columns are
constants in the <code>WHERE</code> clause. The following queries
will use the index to resolve the <code>ORDER BY</code> /
<code>GROUP BY</code> part:</p>

<pre>
SELECT * FROM t1 ORDER BY key_part1,key_part2,...
SELECT * FROM t1 WHERE key_part1=constant ORDER BY key_part2
SELECT * FROM t1 WHERE key_part1=constant GROUP BY key_part2
SELECT * FROM t1 ORDER BY key_part1 DESC,key_part2 DESC
SELECT * FROM t1 WHERE key_part1=1 ORDER BY key_part1 DESC,key_part2 DESC
</pre>

<p>Some cases where MySQL can <strong>not</strong> use indexes to
resolve the <code>ORDER BY</code>: (Note that MySQL will still use
indexes to find the rows that matches the <code>WHERE</code>
clause):</p>

<ul>
<li>You are doing an <code>ORDER BY</code> on different keys:
<code>SELECT * FROM t1 ORDER BY key1,key2</code></li>

<li>You are doing an <code>ORDER BY</code> using non-consecutive
key parts. <code>SELECT * FROM t1 WHERE key2=constant ORDER BY
key_part2</code></li>

<li>You are mixing <code>ASC</code> and <code>DESC</code>.
<code>SELECT * FROM t1 ORDER BY key_part1 DESC,key_part2
ASC</code></li>

<li>The key used to fetch the rows are not the same one that is
used to do the <code>ORDER BY</code>: <code>SELECT * FROM t1 WHERE
key2=constant ORDER BY key1</code></li>

<li>You are joining many tables and the columns you are doing an
<code>ORDER BY</code> on are not all from the first
not-<code>const</code> table that is used to retrieve rows (This is
the first table in the <code>EXPLAIN</code> output which doesn't
use a <code>const</code> row fetch method).</li>

<li>You have different <code>ORDER BY</code> and <code>GROUP
BY</code> expressions.</li>

<li>The used table index is an index type that doesn't store rows
in order. (Like the <code>HASH</code> index in <code>HEAP</code>
tables).</li>

<li>The index colum may contain <code>NULL</code> values and one is
using <code>ORDER BY ... DESC</code>. This is because in SQL
<code>NULL</code> values is always sorted before normal values,
independent of you are using <code>DESC</code> or not.</li>
</ul>

<p>In the cases where MySQL have to sort the result, it uses the
following algorithm:</p>

<ul>
<li>Read all rows according to key or by table scanning. Rows that
don't match the <code>WHERE</code> clause are skipped.</li>

<li>Store the sort-key in a buffer (of size
<code>sort_buffer</code>).</li>

<li>When the buffer gets full, run a qsort on it and store the
result in a temporary file. Save a pointer to the sorted block. (In
the case where all rows fits into the sort buffer, no temporary
file is created)</li>

<li>Repeat the above until all rows have been read.</li>

<li>Do a multi-merge of up to <code>MERGEBUFF</code> (7) regions to
one block in another temporary file. Repeat until all blocks from
the first file are in the second file.</li>

<li>Repeat the following until there is less than
<code>MERGEBUFF2</code> (15) blocks left.</li>

<li>On the last multi-merge, only the pointer to the row (last part
of the sort-key) is written to a result file.</li>

<li>Now the code in <tt>`sql/records.cc'</tt> will be used to read
through them in sorted order by using the row pointers in the
result file. To optimise this, we read in a big block of row
pointers, sort these and then we read the rows in the sorted order
into a row buffer (<code>record_rnd_buffer</code>) .</li>
</ul>

<p>You can with <code>EXPLAIN SELECT ... ORDER BY</code> check if
MySQL can use indexes to resolve the query. If you get <code>Using
filesort</code> in the <code>extra</code> column, then MySQL can't
use indexes to resolve the <code>ORDER BY</code>. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</p>

<p>If you want to have a higher <code>ORDER BY</code> speed, you
should first see if you can get MySQL to use indexes instead of
having to do an extra sorting phase. If this is not possible, then
you can do:</p>

<ul>
<li>Increase the size of the <code>sort_buffer</code>
variable.</li>

<li>Increase the size of the <code>record_rnd_buffer</code>
variable.</li>

<li>Change <code>tmpdir</code> to point to a dedicated disk with
lots of empty space.</li>
</ul>

<p>MySQL by default sorts all <code>GROUP BY x,y[,...]</code>
queries as if you would have specified <code>ORDER BY
x,y[,...]</code>. MySQL will optimise away any <code>ORDER
BY</code> as above without any speed penalty. If you by in some
cases don't want to have the result sorted you can specify
<code>ORDER BY NULL</code>:</p>

<pre>
INSERT INTO foo SELECT a,COUNT(*) FROM bar GROUP BY a ORDER BY NULL;
</pre>

<h3><a id="LIMIT_optimisation" name="LIMIT_optimisation"
href="manual_toc.html#LIMIT_optimisation">5.2.8 How MySQL Optimises
<code>LIMIT</code></a></h3>

<p><a id="IDX850" name="IDX850"></a></p>

<p><a id="IDX851" name="IDX851"></a></p>

<p>In some cases MySQL will handle the query differently when you
are using <code>LIMIT #</code> and not using
<code>HAVING</code>:</p>

<ul>
<li>If you are selecting only a few rows with <code>LIMIT</code>,
MySQL will use indexes in some cases when it normally would prefer
to do a full table scan.</li>

<li>If you use <code>LIMIT #</code> with <code>ORDER BY</code>,
MySQL will end the sorting as soon as it has found the first
<code>#</code> lines instead of sorting the whole table.</li>

<li>When combining <code>LIMIT #</code> with <code>DISTINCT</code>,
MySQL will stop as soon as it finds <code>#</code> unique
rows.</li>

<li>In some cases a <code>GROUP BY</code> can be resolved by
reading the key in order (or do a sort on the key) and then
calculate summaries until the key value changes. In this case
<code>LIMIT #</code> will not calculate any unnecessary <code>GROUP
BY</code>s.</li>

<li>As soon as MySQL has sent the first <code>#</code> rows to the
client, it will abort the query (if you are not using
<code>SQL_CALC_FOUND_ROWS</code>).</li>

<li><code>LIMIT 0</code> will always quickly return an empty set.
This is useful to check the query and to get the column types of
the result columns.</li>

<li>When the server uses temporary tables to resolve the query, the
<code>LIMIT #</code> is used to calculate how much space is
required.</li>
</ul>

<h3><a id="Insert_speed" name="Insert_speed"
href="manual_toc.html#Insert_speed">5.2.9 Speed of
<code>INSERT</code> Queries</a></h3>

<p><a id="IDX852" name="IDX852"></a></p>

<p><a id="IDX853" name="IDX853"></a> <a id="IDX854"
name="IDX854"></a></p>

<p>The time to insert a record consists approximately of:</p>

<ul>
<li>Connect: (3)</li>

<li>Sending query to server: (2)</li>

<li>Parsing query: (2)</li>

<li>Inserting record: (1 x size of record)</li>

<li>Inserting indexes: (1 x number of indexes)</li>

<li>Close: (1)</li>
</ul>

<p>where the numbers are somewhat proportional to the overall time.
This does not take into consideration the initial overhead to open
tables (which is done once for each concurrently running
query).</p>

<p>The size of the table slows down the insertion of indexes by log
N (B-trees).</p>

<p>Some ways to speed up inserts:</p>

<ul>
<li>If you are inserting many rows from the same client at the same
time, use multiple value lists <code>INSERT</code> statements. This
is much faster (many times in some cases) than using separate
<code>INSERT</code> statements. If you are adding data to non-empty
table, you may tune up
<code>bulk_insert_buffer_size</code>u<code>bulk_insert_buffer_size</code>
variable to make it even faster. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</li>

<li>If you are inserting a lot of rows from different clients, you
can get higher speed by using the <code>INSERT DELAYED</code>
statement. See section <a href="manual.html#INSERT">6.4.3
<code>INSERT</code> Syntax</a>.</li>

<li>Note that with <code>MyISAM</code> tables you can insert rows
at the same time <code>SELECT</code>s are running if there are no
deleted rows in the tables.</li>

<li>When loading a table from a text file, use <code>LOAD DATA
INFILE</code>. This is usually 20 times faster than using a lot of
<code>INSERT</code> statements. See section <a
href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>.</li>

<li>It is possible with some extra work to make <code>LOAD DATA
INFILE</code> run even faster when the table has many indexes. Use
the following procedure: 

<ol>
<li>Optionally create the table with <code>CREATE TABLE</code>. For
example, using <code>mysql</code> or Perl-DBI.</li>

<li>Execute a <code>FLUSH TABLES</code> statement or the shell
command <code>mysqladmin flush-tables</code>.</li>

<li>Use <code>myisamchk --keys-used=0 -rq
/path/to/db/tbl_name</code>. This will remove all usage of all
indexes from the table.</li>

<li>Insert data into the table with <code>LOAD DATA INFILE</code>.
This will not update any indexes and will therefore be very
fast.</li>

<li>If you are going to only read the table in the future, run
<code>myisampack</code> on it to make it smaller. See section <a
href="manual.html#Compressed_format">7.1.2.3 Compressed Table
Characteristics</a>.</li>

<li>Re-create the indexes with <code>myisamchk -r -q
/path/to/db/tbl_name</code>. This will create the index tree in
memory before writing it to disk, which is much faster because it
avoids lots of disk seeks. The resulting index tree is also
perfectly balanced.</li>

<li>Execute a <code>FLUSH TABLES</code> statement or the shell
command <code>mysqladmin flush-tables</code>.</li>
</ol>

Note that <code>LOAD DATA INFILE</code> also does the above
optimisation if you insert into an empty table; the main difference
with the above procedure is that you can let <code>myisamchk</code>
allocate much more temporary memory for the index creation that you
may want MySQL to allocate for every index recreation. Since MySQL
4.0 you can also use <code>ALTER TABLE tbl_name DISABLE KEYS</code>
instead of <code>myisamchk --keys-used=0 -rq
/path/to/db/tbl_name</code> and <code>ALTER TABLE tbl_name ENABLE
KEYS</code> instead of <code>myisamchk -r -q
/path/to/db/tbl_name</code>. This way you can also skip <code>FLUSH
TABLES</code> steps.</li>

<li>You can speed up insertions that is done over multiple
statements by locking your tables: 

<pre>
mysql&gt; LOCK TABLES a WRITE;
mysql&gt; INSERT INTO a VALUES (1,23),(2,34),(4,33);
mysql&gt; INSERT INTO a VALUES (8,26),(6,29);
mysql&gt; UNLOCK TABLES;
</pre>

The main speed difference is that the index buffer is flushed to
disk only once, after all <code>INSERT</code> statements have
completed. Normally there would be as many index buffer flushes as
there are different <code>INSERT</code> statements. Locking is not
needed if you can insert all rows with a single statement. For
transactional tables, you should use <code>BEGIN/COMMIT</code>
instead of <code>LOCK TABLES</code> to get a speedup. Locking will
also lower the total time of multi-connection tests, but the
maximum wait time for some threads will go up (because they wait
for locks). For example: 

<pre>
thread 1 does 1000 inserts
thread 2, 3, and 4 does 1 insert
thread 5 does 1000 inserts
</pre>

If you don't use locking, 2, 3, and 4 will finish before 1 and 5.
If you use locking, 2, 3, and 4 probably will not finish before 1
or 5, but the total time should be about 40% faster. As
<code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>
operations are very fast in MySQL, you will obtain better overall
performance by adding locks around everything that does more than
about 5 inserts or updates in a row. If you do very many inserts in
a row, you could do a <code>LOCK TABLES</code> followed by an
<code>UNLOCK TABLES</code> once in a while (about each 1000 rows)
to allow other threads access to the table. This would still result
in a nice performance gain. Of course, <code>LOAD DATA
INFILE</code> is much faster for loading data.</li>
</ul>

<p>To get some more speed for both <code>LOAD DATA INFILE</code>
and <code>INSERT</code>, enlarge the key buffer. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<h3><a id="Update_speed" name="Update_speed"
href="manual_toc.html#Update_speed">5.2.10 Speed of
<code>UPDATE</code> Queries</a></h3>

<p>Update queries are optimised as a <code>SELECT</code> query with
the additional overhead of a write. The speed of the write is
dependent on the size of the data that is being updated and the
number of indexes that are updated. Indexes that are not changed
will not be updated.</p>

<p>Also, another way to get fast updates is to delay updates and
then do many updates in a row later. Doing many updates in a row is
much quicker than doing one at a time if you lock the table.</p>

<p>Note that, with dynamic record format, updating a record to a
longer total length may split the record. So if you do this often,
it is very important to <code>OPTIMIZE TABLE</code> sometimes. See
section <a href="manual.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE
TABLE</code> Syntax</a>.</p>

<h3><a id="Delete_speed" name="Delete_speed"
href="manual_toc.html#Delete_speed">5.2.11 Speed of
<code>DELETE</code> Queries</a></h3>

<p>If you want to delete all rows in the table, you should use
<code>TRUNCATE TABLE table_name</code>. See section <a
href="manual.html#TRUNCATE">6.4.7 <code>TRUNCATE</code>
Syntax</a>.</p>

<p>The time to delete a record is exactly proportional to the
number of indexes. To delete records more quickly, you can increase
the size of the index cache. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<h3><a id="Tips" name="Tips" href="manual_toc.html#Tips">5.2.12
Other Optimisation Tips</a></h3>

<p><a id="IDX855" name="IDX855"></a> <a id="IDX856"
name="IDX856"></a></p>

<p>Unsorted tips for faster systems:</p>

<ul>
<li>Use persistent connections to the database to avoid the
connection overhead. If you can't use persistent connections and
you are doing a lot of new connections to the database, you may
want to change the value of the <code>thread_cache_size</code>
variable. See section <a href="manual.html#Server_parameters">5.5.2
Tuning Server Parameters</a>.</li>

<li>Always check that all your queries really use the indexes you
have created in the tables. In MySQL you can do this with the
<code>EXPLAIN</code> command. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</li>

<li>Try to avoid complex <code>SELECT</code> queries on
<code>MyISAM</code> tables that are updated a lot. This is to avoid
problems with table locking.</li>

<li>The new <code>MyISAM</code> tables can insert rows in a table
without deleted rows at the same time another table is reading from
it. If this is important for you, you should consider methods where
you don't have to delete rows or run <code>OPTIMIZE TABLE</code>
after you have deleted a lot of rows.</li>

<li>Use <code>ALTER TABLE ... ORDER BY expr1,expr2...</code> if you
mostly retrieve rows in <code>expr1,expr2...</code> order. By using
this option after big changes to the table, you may be able to get
higher performance.</li>

<li>In some cases it may make sense to introduce a column that is
'hashed' based on information from other columns. If this column is
short and reasonably unique it may be much faster than a big index
on many columns. In MySQL it's very easy to use this extra column:
<code>SELECT * FROM table_name WHERE hash=MD5(CONCAT(col1,col2))
AND col_1='constant' AND col_2='constant'</code></li>

<li>For tables that change a lot you should try to avoid all
<code>VARCHAR</code> or <code>BLOB</code> columns. You will get
dynamic row length as soon as you are using a single
<code>VARCHAR</code> or <code>BLOB</code> column. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</li>

<li>It's not normally useful to split a table into different tables
just because the rows gets 'big'. To access a row, the biggest
performance hit is the disk seek to find the first byte of the row.
After finding the data most new disks can read the whole row fast
enough for most applications. The only cases where it really
matters to split up a table is if it's a dynamic row size table
(see above) that you can change to a fixed row size, or if you very
often need to scan the table and don't need most of the columns.
See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</li>

<li>If you very often need to calculate things based on information
from a lot of rows (like counts of things), it's probably much
better to introduce a new table and update the counter in real
time. An update of type <code>UPDATE table set count=count+1 where
index_column=constant</code> is very fast! This is really important
when you use MySQL table types like MyISAM and ISAM that only have
table locking (multiple readers / single writers). This will also
give better performance with most databases, as the row locking
manager in this case will have less to do.</li>

<li>If you need to collect statistics from big log tables, use
summary tables instead of scanning the whole table. Maintaining the
summaries should be much faster than trying to do statistics
'live'. It's much faster to regenerate new summary tables from the
logs when things change (depending on business decisions) than to
have to change the running application!</li>

<li>If possible, one should classify reports as 'live' or
'statistical', where data needed for statistical reports are only
generated based on summary tables that are generated from the
actual data.</li>

<li>Take advantage of the fact that columns have default values.
Insert values explicitly only when the value to be inserted differs
from the default. This reduces the parsing that MySQL need to do
and improves the insert speed.</li>

<li>In some cases it's convenient to pack and store data into a
blob. In this case you have to add some extra code in your
application to pack/unpack things in the blob, but this may save a
lot of accesses at some stage. This is practical when you have data
that doesn't conform to a static table structure.</li>

<li>Normally you should try to keep all data non-redundant (what is
called 3rd normal form in database theory), but you should not be
afraid of duplicating things or creating summary tables if you need
these to gain more speed.</li>

<li>Stored procedures or UDF (user-defined functions) may be a good
way to get more performance. In this case you should, however,
always have a way to do this some other (slower) way if you use
some database that doesn't support this.</li>

<li>You can always gain something by caching queries/answers in
your application and trying to do many inserts/updates at the same
time. If your database supports lock tables (like MySQL and
Oracle), this should help to ensure that the index cache is only
flushed once after all updates.</li>

<li>Use <code>INSERT /*! DELAYED */</code> when you do not need to
know when your data is written. This speeds things up because many
records can be written with a single disk write.</li>

<li>Use <code>INSERT /*! LOW_PRIORITY */</code> when you want your
selects to be more important.</li>

<li>Use <code>SELECT /*! HIGH_PRIORITY */</code> to get selects
that jump the queue. That is, the select is done even if there is
somebody waiting to do a write.</li>

<li>Use the multi-line <code>INSERT</code> statement to store many
rows with one SQL command (many SQL servers supports this).</li>

<li>Use <code>LOAD DATA INFILE</code> to load bigger amounts of
data. This is faster than normal inserts and will be even faster
when <code>myisamchk</code> is integrated in
<code>mysqld</code>.</li>

<li>Use <code>AUTO_INCREMENT</code> columns to make unique
values.</li>

<li>Use <code>OPTIMIZE TABLE</code> once in a while to avoid
fragmentation when using a dynamic table format. See section <a
href="manual.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE TABLE</code>
Syntax</a>.</li>

<li>Use <code>HEAP</code> tables to get more speed when possible.
See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</li>

<li>When using a normal web server setup, images should be stored
as files. That is, store only a file reference in the database. The
main reason for this is that a normal web server is much better at
caching files than database contents. So it it's much easier to get
a fast system if you are using files.</li>

<li>Use in memory tables for non-critical data that are accessed
often (like information about the last shown banner for users that
don't have cookies).</li>

<li>Columns with identical information in different tables should
be declared identical and have identical names. Before Version 3.23
you got slow joins otherwise. Try to keep the names simple (use
<code>name</code> instead of <code>customer_name</code> in the
customer table). To make your names portable to other SQL servers
you should keep them shorter than 18 characters.</li>

<li>If you need really high speed, you should take a look at the
low-level interfaces for data storage that the different SQL
servers support! For example, by accessing the MySQL
<code>MyISAM</code> directly, you could get a speed increase of 2-5
times compared to using the SQL interface. To be able to do this
the data must be on the same server as the application, and usually
it should only be accessed by one process (because external file
locking is really slow). One could eliminate the above problems by
introducing low-level <code>MyISAM</code> commands in the MySQL
server (this could be one easy way to get more performance if
needed). By carefully designing the database interface, it should
be quite easy to support this types of optimisation.</li>

<li>In many cases it's faster to access data from a database (using
a live connection) than accessing a text file, just because the
database is likely to be more compact than the text file (if you
are using numerical data), and this will involve fewer disk
accesses. You will also save code because you don't have to parse
your text files to find line and column boundaries.</li>

<li>You can also use replication to speed things up. See section <a
href="manual.html#Replication">4.10 Replication in MySQL</a>.</li>

<li>Declaring a table with <code>DELAY_KEY_WRITE=1</code> will make
the updating of indexes faster, as these are not logged to disk
until the file is closed. The downside is that you should run
<code>myisamchk</code> on these tables before you start
<code>mysqld</code> to ensure that they are okay if something
killed <code>mysqld</code> in the middle. As the key information
can always be generated from the data, you should not lose anything
by using <code>DELAY_KEY_WRITE</code>.</li>
</ul>

<h2><a id="Locking_Issues" name="Locking_Issues"
href="manual_toc.html#Locking_Issues">5.3 Locking Issues</a></h2>

<h3><a id="Internal_locking" name="Internal_locking"
href="manual_toc.html#Internal_locking">5.3.1 How MySQL Locks
Tables</a></h3>

<p><a id="IDX857" name="IDX857"></a> <a id="IDX858"
name="IDX858"></a> <a id="IDX859" name="IDX859"></a></p>

<p>You can find a discussion about different locking methods in the
appendix. See section <a href="manual.html#Locking_methods">E.4
Locking methods</a>.</p>

<p>All locking in MySQL is deadlock-free, except for
<code>InnoDB</code> and <code>BDB</code> type tables. This is
managed by always requesting all needed locks at once at the
beginning of a query and always locking the tables in the same
order.</p>

<p><code>InnoDB</code> type tables automatically acquire their row
locks and <code>BDB</code> type tables their page locks during the
processing of SQL statements, not at the start of the
transaction.</p>

<p>The locking method MySQL uses for <code>WRITE</code> locks works
as follows:</p>

<ul>
<li>If there are no locks on the table, put a write lock on
it.</li>

<li>Otherwise, put the lock request in the write lock queue.</li>
</ul>

<p>The locking method MySQL uses for <code>READ</code> locks works
as follows:</p>

<ul>
<li>If there are no write locks on the table, put a read lock on
it.</li>

<li>Otherwise, put the lock request in the read lock queue.</li>
</ul>

<p>When a lock is released, the lock is made available to the
threads in the write lock queue, then to the threads in the read
lock queue.</p>

<p>This means that if you have many updates on a table,
<code>SELECT</code> statements will wait until there are no more
updates.</p>

<p>To work around this for the case where you want to do many
<code>INSERT</code> and <code>SELECT</code> operations on a table,
you can insert rows in a temporary table and update the real table
with the records from the temporary table once in a while.</p>

<p>This can be done with the following code:</p>

<pre>
mysql&gt; LOCK TABLES real_table WRITE, insert_table WRITE;
mysql&gt; INSERT INTO real_table SELECT * FROM insert_table;
mysql&gt; TRUNCATE TABLE insert_table;
mysql&gt; UNLOCK TABLES;
</pre>

<p>You can use the <code>LOW_PRIORITY</code> options with
<code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code> or
<code>HIGH_PRIORITY</code> with <code>SELECT</code> if you want to
prioritise retrieval in some specific cases. You can also start
<code>mysqld</code> with <code>--low-priority-updates</code> to get
the same behaveour.</p>

<p>Using <code>SQL_BUFFER_RESULT</code> can also help making table
locks shorter. See section <a href="manual.html#SELECT">6.4.1
<code>SELECT</code> Syntax</a>.</p>

<p>You could also change the locking code in
<tt>`mysys/thr_lock.c'</tt> to use a single queue. In this case,
write locks and read locks would have the same priority, which
might help some applications.</p>

<h3><a id="Table_locking" name="Table_locking"
href="manual_toc.html#Table_locking">5.3.2 Table Locking
Issues</a></h3>

<p><a id="IDX860" name="IDX860"></a></p>

<p>The table locking code in MySQL is deadlock free.</p>

<p>MySQL uses table locking (instead of row locking or column
locking) on all table types, except <code>InnoDB</code> and
<code>BDB</code> tables, to achieve a very high lock speed. For
large tables, table locking is much better than row locking for
most applications, but there are, of course, some pitfalls.</p>

<p>For <code>InnoDB</code> and <code>BDB</code> tables, MySQL only
uses table locking if you explicitly lock the table with <code>LOCK
TABLES</code>. For these table types we recommend you to not use
<code>LOCK TABLES</code> at all, because <code>InnoDB</code> uses
automatic row level locking and <code>BDB</code> uses page level
locking to ensure transaction isolation.</p>

<p>In MySQL Version 3.23.7 and above, you can insert rows into
<code>MyISAM</code> tables at the same time other threads are
reading from the table. Note that currently this only works if
there are no holes after deleted rows in the table at the time the
insert is made. When all holes has been filled with new data,
concurrent inserts will automatically be enabled again.</p>

<p>Table locking enables many threads to read from a table at the
same time, but if a thread wants to write to a table, it must first
get exclusive access. During the update, all other threads that
want to access this particular table will wait until the update is
ready.</p>

<p>As updates on tables normally are considered to be more
important than <code>SELECT</code>, all statements that update a
table have higher priority than statements that retrieve
information from a table. This should ensure that updates are not
'starved' because one issues a lot of heavy queries against a
specific table. (You can change this by using
<code>LOW_PRIORITY</code> with the statement that does the update
or <code>HIGH_PRIORITY</code> with the <code>SELECT</code>
statement.)</p>

<p>Starting from MySQL Version 3.23.7 one can use the
<code>max_write_lock_count</code> variable to force MySQL to
temporary give all <code>SELECT</code> statements, that wait for a
table, a higher priority after a specific number of inserts on a
table.</p>

<p>Table locking is, however, not very good under the following
senario:</p>

<ul>
<li>A client issues a <code>SELECT</code> that takes a long time to
run.</li>

<li>Another client then issues an <code>UPDATE</code> on a used
table. This client will wait until the <code>SELECT</code> is
finished.</li>

<li>Another client issues another <code>SELECT</code> statement on
the same table. As <code>UPDATE</code> has higher priority than
<code>SELECT</code>, this <code>SELECT</code> will wait for the
<code>UPDATE</code> to finish. It will also wait for the first
<code>SELECT</code> to finish!</li>

<li>A thread is waiting for something like <code>full disk</code>,
in which case all threads that wants to access the problem table
will also be put in a waiting state until more disk space is made
available.</li>
</ul>

<p>Some possible solutions to this problem are:</p>

<ul>
<li>Try to get the <code>SELECT</code> statements to run faster.
You may have to create some summary tables to do this.</li>

<li>Start <code>mysqld</code> with
<code>--low-priority-updates</code>. This will give all statements
that update (modify) a table lower priority than a
<code>SELECT</code> statement. In this case the last
<code>SELECT</code> statement in the previous scenario would
execute before the <code>INSERT</code> statement.</li>

<li>You can give a specific <code>INSERT</code>,
<code>UPDATE</code>, or <code>DELETE</code> statement lower
priority with the <code>LOW_PRIORITY</code> attribute.</li>

<li>Start <code>mysqld</code> with a low value for
<code>max_write_lock_count</code> to give <code>READ</code> locks
after a certain number of <code>WRITE</code> locks.</li>

<li>You can specify that all updates from a specific thread should
be done with low priority by using the SQL command: <code>SET
LOW_PRIORITY_UPDATES=1</code>. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</li>

<li>You can specify that a specific <code>SELECT</code> is very
important with the <code>HIGH_PRIORITY</code> attribute. See
section <a href="manual.html#SELECT">6.4.1 <code>SELECT</code>
Syntax</a>.</li>

<li>If you have problems with <code>INSERT</code> combined with
<code>SELECT</code>, switch to use the new <code>MyISAM</code>
tables as these support concurrent <code>SELECT</code>s and
<code>INSERT</code>s.</li>

<li>If you mainly mix <code>INSERT</code> and <code>SELECT</code>
statements, the <code>DELAYED</code> attribute to
<code>INSERT</code> will probably solve your problems. See section
<a href="manual.html#INSERT">6.4.3 <code>INSERT</code>
Syntax</a>.</li>

<li>If you have problems with <code>SELECT</code> and
<code>DELETE</code>, the <code>LIMIT</code> option to
<code>DELETE</code> may help. See section <a
href="manual.html#DELETE">6.4.6 <code>DELETE</code>
Syntax</a>.</li>
</ul>

<h2><a id="Optimising_Database_Structure"
name="Optimising_Database_Structure"
href="manual_toc.html#Optimising_Database_Structure">5.4 Optimising
Database Structure</a></h2>

<h3><a id="Design" name="Design"
href="manual_toc.html#Design">5.4.1 Design Choices</a></h3>

<p><a id="IDX861" name="IDX861"></a> <a id="IDX862"
name="IDX862"></a> <a id="IDX863" name="IDX863"></a></p>

<p>MySQL keeps row data and index data in separate files. Many
(almost all) other databases mix row and index data in the same
file. We believe that the MySQL choice is better for a very wide
range of modern systems.</p>

<p>Another way to store the row data is to keep the information for
each column in a separate area (examples are SDBM and Focus). This
will cause a performance hit for every query that accesses more
than one column. Because this degenerates so quickly when more than
one column is accessed, we believe that this model is not good for
general purpose databases.</p>

<p>The more common case is that the index and data are stored
together (like in Oracle/Sybase et al). In this case you will find
the row information at the leaf page of the index. The good thing
with this layout is that it, in many cases, depending on how well
the index is cached, saves a disk read. The bad things with this
layout are:</p>

<ul>
<li>Table scanning is much slower because you have to read through
the indexes to get at the data.</li>

<li>You can't use only the index table to retrieve data for a
query.</li>

<li>You lose a lot of space, as you must duplicate indexes from the
nodes (as you can't store the row in the nodes).</li>

<li>Deletes will degenerate the table over time (as indexes in
nodes are usually not updated on delete).</li>

<li>It's harder to cache only the index data.</li>
</ul>

<h3><a id="Data_size" name="Data_size"
href="manual_toc.html#Data_size">5.4.2 Get Your Data as Small as
Possible</a></h3>

<p><a id="IDX864" name="IDX864"></a> <a id="IDX865"
name="IDX865"></a> <a id="IDX866" name="IDX866"></a> <a id="IDX867"
name="IDX867"></a> <a id="IDX868" name="IDX868"></a></p>

<p>One of the most basic optimisation is to get your data (and
indexes) to take as little space on the disk (and in memory) as
possible. This can give huge improvements because disk reads are
faster and normally less main memory will be used. Indexing also
takes less resources if done on smaller columns.</p>

<p>MySQL supports a lot of different table types and row formats.
Choosing the right table format may give you a big performance
gain. See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</p>

<p>You can get better performance on a table and minimise storage
space using the techniques listed here:</p>

<ul>
<li>Use the most efficient (smallest) types possible. MySQL has
many specialised types that save disk space and memory.</li>

<li>Use the smaller integer types if possible to get smaller
tables. For example, <code>MEDIUMINT</code> is often better than
<code>INT</code>.</li>

<li>Declare columns to be <code>NOT NULL</code> if possible. It
makes everything faster and you save one bit per column. Note that
if you really need <code>NULL</code> in your application you should
definitely use it. Just avoid having it on all columns by
default.</li>

<li>If you don't have any variable-length columns
(<code>VARCHAR</code>, <code>TEXT</code>, or <code>BLOB</code>
columns), a fixed-size record format is used. This is faster but
unfortunately may waste some space. See section <a
href="manual.html#MyISAM_table_formats">7.1.2 <code>MyISAM</code>
Table Formats</a>.</li>

<li>The primary index of a table should be as short as possible.
This makes identification of one row easy and efficient.</li>

<li>For each table, you have to decide which storage/index method
to use. See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>.</li>

<li>Only create the indexes that you really need. Indexes are good
for retrieval but bad when you need to store things fast. If you
mostly access a table by searching on a combination of columns,
make an index on them. The first index part should be the most used
column. If you are <strong>always</strong> using many columns, you
should use the column with more duplicates first to get better
compression of the index.</li>

<li>If it's very likely that a column has a unique prefix on the
first number of characters, it's better to only index this prefix.
MySQL supports an index on a part of a character column. Shorter
indexes are faster not only because they take less disk space but
also because they will give you more hits in the index cache and
thus fewer disk seeks. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</li>

<li>In some circumstances it can be beneficial to split into two a
table that is scanned very often. This is especially true if it is
a dynamic format table and it is possible to use a smaller static
format table that can be used to find the relevant rows when
scanning the table.</li>
</ul>

<h3><a id="MySQL_indexes" name="MySQL_indexes"
href="manual_toc.html#MySQL_indexes">5.4.3 How MySQL Uses
Indexes</a></h3>

<p><a id="IDX869" name="IDX869"></a></p>

<p>Indexes are used to find rows with a specific value of one
column fast. Without an index MySQL has to start with the first
record and then read through the whole table until it finds the
relevant rows. The bigger the table, the more this costs. If the
table has an index for the columns in question, MySQL can quickly
get a position to seek to in the middle of the datafile without
having to look at all the data. If a table has 1000 rows, this is
at least 100 times faster than reading sequentially. Note that if
you need to access almost all 1000 rows it is faster to read
sequentially because we then avoid disk seeks.</p>

<p>All MySQL indexes (<code>PRIMARY</code>, <code>UNIQUE</code>,
and <code>INDEX</code>) are stored in B-trees. Strings are
automatically prefix- and end-space compressed. See section <a
href="manual.html#CREATE_INDEX">6.5.7 <code>CREATE INDEX</code>
Syntax</a>.</p>

<p>Indexes are used to:</p>

<ul>
<li>Quickly find the rows that match a <code>WHERE</code>
clause.</li>

<li>Retrieve rows from other tables when performing joins.</li>

<li>Find the <code>MAX()</code> or <code>MIN()</code> value for a
specific indexed column. This is optimised by a preprocessor that
checks if you are using <code>WHERE</code> key_part_# = constant on
all key parts &lt; N. In this case MySQL will do a single key
lookup and replace the <code>MIN()</code> expression with a
constant. If all expressions are replaced with constants, the query
will return at once: 

<pre>
SELECT MIN(key_part2),MAX(key_part2) FROM table_name where key_part1=10
</pre>
</li>

<li>Sort or group a table if the sorting or grouping is done on a
leftmost prefix of a usable key (for example, <code>ORDER BY
key_part_1,key_part_2</code> ). The key is read in reverse order if
all key parts are followed by <code>DESC</code>. See section <a
href="manual.html#ORDER_BY_optimisation">5.2.7 How MySQL Optimises
<code>ORDER BY</code></a>.</li>

<li>In some cases a query can be optimised to retrieve values
without consulting the datafile. If all used columns for some table
are numeric and form a leftmost prefix for some key, the values may
be retrieved from the index tree for greater speed: 

<pre>
SELECT key_part3 FROM table_name WHERE key_part1=1
</pre>
</li>
</ul>

<p>Suppose you issue the following <code>SELECT</code>
statement:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE col1=val1 AND col2=val2;
</pre>

<p>If a multiple-column index exists on <code>col1</code> and
<code>col2</code>, the appropriate rows can be fetched directly. If
separate single-column indexes exist on <code>col1</code> and
<code>col2</code>, the optimiser tries to find the most restrictive
index by deciding which index will find fewer rows and using that
index to fetch the rows.</p>

<p><a id="IDX870" name="IDX870"></a> <a id="IDX871"
name="IDX871"></a> If the table has a multiple-column index, any
leftmost prefix of the index can be used by the optimiser to find
rows. For example, if you have a three-column index on
<code>(col1,col2,col3)</code>, you have indexed search capabilities
on <code>(col1)</code>, <code>(col1,col2)</code>, and
<code>(col1,col2,col3)</code>.</p>

<p>MySQL can't use a partial index if the columns don't form a
leftmost prefix of the index. Suppose you have the
<code>SELECT</code> statements shown here:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE col1=val1;
mysql&gt; SELECT * FROM tbl_name WHERE col2=val2;
mysql&gt; SELECT * FROM tbl_name WHERE col2=val2 AND col3=val3;
</pre>

<p>If an index exists on <code>(col1,col2,col3)</code>, only the
first query shown above uses the index. The second and third
queries do involve indexed columns, but <code>(col2)</code> and
<code>(col2,col3)</code> are not leftmost prefixes of
<code>(col1,col2,col3)</code>.</p>

<p><a id="IDX872" name="IDX872"></a> <a id="IDX873"
name="IDX873"></a> <a id="IDX874" name="IDX874"></a> <a id="IDX875"
name="IDX875"></a> MySQL also uses indexes for <code>LIKE</code>
comparisons if the argument to <code>LIKE</code> is a constant
string that doesn't start with a wildcard character. For example,
the following <code>SELECT</code> statements use indexes:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE key_col LIKE "Patrick%";
mysql&gt; SELECT * FROM tbl_name WHERE key_col LIKE "Pat%_ck%";
</pre>

<p>In the first statement, only rows with <code>"Patrick" &lt;=
key_col &lt; "Patricl"</code> are considered. In the second
statement, only rows with <code>"Pat" &lt;= key_col &lt;
"Pau"</code> are considered.</p>

<p>The following <code>SELECT</code> statements will not use
indexes:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE key_col LIKE "%Patrick%";
mysql&gt; SELECT * FROM tbl_name WHERE key_col LIKE other_col;
</pre>

<p>In the first statement, the <code>LIKE</code> value begins with
a wildcard character. In the second statement, the
<code>LIKE</code> value is not a constant.</p>

<p>MySQL 4.0 does another optimisation on <code>LIKE</code>. If you
use <code>... LIKE "%string%"</code> and <code>string</code> is
longer than 3 characters, MySQL will use the <code>Turbo
Boyer-Moore</code> algorithm to initialise the pattern for the
string and then use this pattern to perform the search quicker.</p>

<p><a id="IDX876" name="IDX876"></a> <a id="IDX877"
name="IDX877"></a> Searching using <code>column_name IS NULL</code>
will use indexes if column_name is an index.</p>

<p>MySQL normally uses the index that finds the least number of
rows. An index is used for columns that you compare with the
following operators: <code>=</code>, <code>&gt;</code>,
<code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>BETWEEN</code>, and a <code>LIKE</code> with a non-wildcard
prefix like <code>'something%'</code>.</p>

<p>Any index that doesn't span all <code>AND</code> levels in the
<code>WHERE</code> clause is not used to optimise the query. In
other words: To be able to use an index, a prefix of the index must
be used in every <code>AND</code> group.</p>

<p>The following <code>WHERE</code> clauses use indexes:</p>

<pre>
... WHERE index_part1=1 AND index_part2=2 AND other_column=3
... WHERE index=1 OR A=10 AND index=2      /* index = 1 OR index = 2 */
... WHERE index_part1='hello' AND index_part_3=5
          /* optimised like "index_part1='hello'" */
... WHERE index1=1 and index2=2 or index1=3 and index3=3;
          /* Can use index on index1 but not on index2 or index 3 */
</pre>

<p>These <code>WHERE</code> clauses do <strong>NOT</strong> use
indexes:</p>

<pre>
... WHERE index_part2=1 AND index_part3=2  /* index_part_1 is not used */
... WHERE index=1 OR A=10                  /* Index is not used in
                                                        both AND parts */
... WHERE index_part1=1 OR index_part2=10  /* No index spans all rows  */
</pre>

<p>Note that in some cases MySQL will not use an index, even if one
would be available. Some of the cases where this happens are:</p>

<ul>
<li>If the use of the index would require MySQL to access more than
30% of the rows in the table. (In this case a table scan is
probably much faster, as this will require us to do much fewer
seeks.) Note that if such a query uses <code>LIMIT</code> to only
retrieve part of the rows, MySQL will use an index anyway, as it
can much more quickly find the few rows to return in the
result.</li>

<li>If the index range may contain <code>NULL</code> values and you
are using <code>ORDER BY ... DESC</code></li>
</ul>

<h3><a id="Indexes" name="Indexes"
href="manual_toc.html#Indexes">5.4.4 Column Indexes</a></h3>

<p><a id="IDX878" name="IDX878"></a> <a id="IDX879"
name="IDX879"></a> <a id="IDX880" name="IDX880"></a></p>

<p>All MySQL column types can be indexed. Use of indexes on the
relevant columns is the best way to improve the performance of
<code>SELECT</code> operations.</p>

<p>The maximum number of keys and the maximum index length is
defined per storage engine. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>. You can
with all storage engines have at least 16 keys and a total index
length of at least 256 bytes.</p>

<p>For <code>CHAR</code> and <code>VARCHAR</code> columns, you can
index a prefix of a column. This is much faster and requires less
disk space than indexing the whole column. The syntax to use in the
<code>CREATE TABLE</code> statement to index a column prefix looks
like this:</p>

<pre>
KEY index_name (col_name(length))
</pre>

<p>The example here creates an index for the first 10 characters of
the <code>name</code> column:</p>

<pre>
mysql&gt; CREATE TABLE test (
    -&gt;        name CHAR(200) NOT NULL,
    -&gt;        KEY index_name (name(10)));
</pre>

<p>For <code>BLOB</code> and <code>TEXT</code> columns, you must
index a prefix of the column. You cannot index the entire
column.</p>

<p>In MySQL Version 3.23.23 or later, you can also create special
<code>FULLTEXT</code> indexes. They are used for full-text search.
Only the <code>MyISAM</code> table type supports
<code>FULLTEXT</code> indexes. They can be created only from
<code>CHAR</code>, <code>VARCHAR</code>, and <code>TEXT</code>
columns. Indexing always happens over the entire column and partial
indexing is not supported. See section <a
href="manual.html#Fulltext_Search">6.8 MySQL Full-text Search</a>
for details.</p>

<h3><a id="Multiple-column_indexes" name="Multiple-column_indexes"
href="manual_toc.html#Multiple-column_indexes">5.4.5
Multiple-Column Indexes</a></h3>

<p><a id="IDX881" name="IDX881"></a> <a id="IDX882"
name="IDX882"></a> <a id="IDX883" name="IDX883"></a></p>

<p>MySQL can create indexes on multiple columns. An index may
consist of up to 15 columns. (On <code>CHAR</code> and
<code>VARCHAR</code> columns you can also use a prefix of the
column as a part of an index.)</p>

<p>A multiple-column index can be considered a sorted array
containing values that are created by concatenating the values of
the indexed columns.</p>

<p>MySQL uses multiple-column indexes in such a way that queries
are fast when you specify a known quantity for the first column of
the index in a <code>WHERE</code> clause, even if you don't specify
values for the other columns.</p>

<p>Suppose a table is created using the following
specification:</p>

<pre>
mysql&gt; CREATE TABLE test (
    -&gt;       id INT NOT NULL,
    -&gt;       last_name CHAR(30) NOT NULL,
    -&gt;       first_name CHAR(30) NOT NULL,
    -&gt;       PRIMARY KEY (id),
    -&gt;       INDEX name (last_name,first_name));
</pre>

<p>Then the index <code>name</code> is an index over
<code>last_name</code> and <code>first_name</code>. The index will
be used for queries that specify values in a known range for
<code>last_name</code>, or for both <code>last_name</code> and
<code>first_name</code>. Therefore, the <code>name</code> index
will be used in the following queries:</p>

<pre>
mysql&gt; SELECT * FROM test WHERE last_name="Widenius";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
    -&gt;                    AND first_name="Michael";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
    -&gt;                    AND (first_name="Michael" OR first_name="Monty");

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
    -&gt;                    AND first_name &gt;="M" AND first_name &lt; "N";
</pre>

<p>However, the <code>name</code> index will NOT be used in the
following queries:</p>

<pre>
mysql&gt; SELECT * FROM test WHERE first_name="Michael";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
    -&gt;                    OR first_name="Michael";
</pre>

<p>For more information on the manner in which MySQL uses indexes
to improve query performance, see section <a
href="manual.html#MySQL_indexes">5.4.3 How MySQL Uses
Indexes</a>.</p>

<h3><a id="Open_tables" name="Open_tables"
href="manual_toc.html#Open_tables">5.4.6 Why So Many Open
tables?</a></h3>

<p><a id="IDX884" name="IDX884"></a> <a id="IDX885"
name="IDX885"></a></p>

<p>When you run <code>mysqladmin status</code>, you'll see
something like this:</p>

<pre>
Uptime: 426 Running threads: 1 Questions: 11082 Reloads: 1 Open tables: 12
</pre>

<p>This can be somewhat perplexing if you only have 6 tables.</p>

<p>MySQL is multi-threaded, so it may have many queries on the same
table simultaneously. To minimise the problem with two threads
having different states on the same file, the table is opened
independently by each concurrent thread. This takes some memory but
will normaly increase performance. Wth <code>ISAM</code> and
<code>MyISAM</code> tables this also requires one extra file
descriptor for the datafile. With these table types the index file
descriptor is shared between all threads.</p>

<p>You can read more about this topic in the next section. See
section <a href="manual.html#Table_cache">5.4.7 How MySQL Opens and
Closes Tables</a>.</p>

<h3><a id="Table_cache" name="Table_cache"
href="manual_toc.html#Table_cache">5.4.7 How MySQL Opens and Closes
Tables</a></h3>

<p><a id="IDX886" name="IDX886"></a></p>

<p><a id="IDX887" name="IDX887"></a> <a id="IDX888"
name="IDX888"></a> <a id="IDX889" name="IDX889"></a> <a id="IDX890"
name="IDX890"></a> <a id="IDX891" name="IDX891"></a></p>

<p><code>table_cache</code>, <code>max_connections</code>, and
<code>max_tmp_tables</code> affect the maximum number of files the
server keeps open. If you increase one or both of these values, you
may run up against a limit imposed by your operating system on the
per-process number of open file descriptors. However, you can
increase the limit on many systems. Consult your OS documentation
to find out how to do this, because the method for changing the
limit varies widely from system to system.</p>

<p><code>table_cache</code> is related to
<code>max_connections</code>. For example, for 200 concurrent
running connections, you should have a table cache of at least
<code>200 * n</code>, where <code>n</code> is the maximum number of
tables in a join. You also need to reserve some extra file
descriptors for temporary tables and files.</p>

<p>Make sure that your operating system can handle the number of
open file descriptors implied by the <code>table_cache</code>
setting. If <code>table_cache</code> is set too high, MySQL may run
out of file descriptors and refuse connections, fail to perform
queries, and be very unreliable. You also have to take into account
that the <code>MyISAM</code> storage engine needs two file
descriptors for each unique open table. You can in increase the
number of file descriptors available for MySQL with the
<code>--open-files-limit=#</code> startup option. See section <a
href="manual.html#Not_enough_file_handles">A.2.16 File Not
Found</a>.</p>

<p>The cache of open tables will be keept at a level of
<code>table_cache</code> entries (default 64; this can be changed
with the <code>-O table_cache=#</code> option to
<code>mysqld</code>). Note that in MySQL may temporarly open even
more tables to be able to execute queries.</p>

<p>A not used table is closed and removed from the table cache
under the following circumstances:</p>

<ul>
<li>When the cache is full and a thread tries to open a table that
is not in the cache.</li>

<li>When the cache contains more than <code>table_cache</code>
entries and a thread is no longer using a table.</li>

<li>When someone executes <code>mysqladmin refresh</code> or
<code>mysqladmin flush-tables</code>.</li>

<li>When someone executes a <code>FLUSH TABLES</code>
statement.</li>
</ul>

<p>When the table cache fills up, the server uses the following
procedure to locate a cache entry to use:</p>

<ul>
<li>Tables that are not currently in use are released, in
least-recently-used order.</li>

<li>If the cache is full and no tables can be released, but a new
table needs to be opened, the cache is temporarily extended as
necessary.</li>

<li>If the cache is in a temporarily-extended state and a table
goes from in-use to not-in-use state, the table is closed and
released from the cache.</li>
</ul>

<p>A table is opened for each concurrent access. This means that if
you have two threads accessing the same table or access the table
twice in the same query (with <code>AS</code>) the table needs to
be opened twice. The first open of any table takes two file
descriptors; each additional use of the table takes only one file
descriptor. The extra descriptor for the first open is used for the
index file; this descriptor is shared among all threads.</p>

<p>If you are opening a table with the <code>HANDLER table_name
OPEN</code> statement, a dedicated table object is allocated for
the thread. This table object is not shared by other threads an
will not be closed until the thread calls <code>HANDLER table_name
CLOSE</code> or the thread dies. See section <a
href="manual.html#HANDLER">6.4.2 <code>HANDLER</code> Syntax</a>.
When this happens, the table is put back in the table cache (if it
isn't full).</p>

<p>You can check if your table cache is too small by checking the
<code>mysqld</code> variable <code>Opened_tables</code>. If this is
quite big, even if you haven't done a lot of <code>FLUSH
TABLES</code>, you should increase your table cache. See section <a
href="manual.html#SHOW_STATUS">4.5.6.3 <code>SHOW
STATUS</code></a>.</p>

<h3><a id="Creating_many_tables" name="Creating_many_tables"
href="manual_toc.html#Creating_many_tables">5.4.8 Drawbacks to
Creating Large Numbers of Tables in the Same Database</a></h3>

<p><a id="IDX892" name="IDX892"></a></p>

<p>If you have many files in a directory, open, close, and create
operations will be slow. If you execute <code>SELECT</code>
statements on many different tables, there will be a little
overhead when the table cache is full, because for every table that
has to be opened, another must be closed. You can reduce this
overhead by making the table cache larger.</p>

<h2><a id="Optimising_the_Server" name="Optimising_the_Server"
href="manual_toc.html#Optimising_the_Server">5.5 Optimising the
MySQL Server</a></h2>

<h3><a id="System" name="System"
href="manual_toc.html#System">5.5.1 System/Compile Time and Startup
Parameter Tuning</a></h3>

<p><a id="IDX893" name="IDX893"></a> <a id="IDX894"
name="IDX894"></a> <a id="IDX895" name="IDX895"></a></p>

<p>We start with the system level things since some of these
decisions have to be made very early. In other cases a fast look at
this part may suffice because it not that important for the big
gains. However, it is always nice to have a feeling about how much
one could gain by changing things at this level.</p>

<p>The default OS to use is really important! To get the most use
of multiple-CPU machines one should use Solaris (because the
threads works really nice) or Linux (because the 2.2 kernel has
really good SMP support). Also on 32-bit machines Linux has a 2G
file-size limit by default. Hopefully this will be fixed soon when
new filesystems are released (XFS/Reiserfs). If you have a
desperate need for files bigger than 2G on Linux-intel 32 bit, you
should get the LFS patch for the ext2 filesystem.</p>

<p>Because we have not run MySQL in production on that many
platforms, we advice you to test your intended platform before
choosing it, if possible.</p>

<p><a id="IDX896" name="IDX896"></a> Other tips:</p>

<ul>
<li>If you have enough RAM, you could remove all swap devices. Some
operating systems will use a swap device in some contexts even if
you have free memory.</li>

<li>Use the <code>--skip-external-locking</code> MySQL option to
avoid external locking. Note that this will not impact MySQL's
functionality as long as you only run one server. Just remember to
take down the server (or lock relevant parts) before you run
<code>myisamchk</code>. On some system this switch is mandatory
because the external locking does not work in any case. The
<code>--skip-external-locking</code> option is on by default when
compiling with MIT-pthreads, because <code>flock()</code> isn't
fully supported by MIT-pthreads on all platforms. It's also on
default for Linux as Linux file locking are not yet safe. The only
case when you can't use <code>--skip-external-locking</code> is if
you run multiple MySQL <em>servers</em> (not clients) on the same
data, or run <code>myisamchk</code> on the table without first
flushing and locking the <code>mysqld</code> server tables first.
You can still use <code>LOCK TABLES</code>/<code>UNLOCK
TABLES</code> even if you are using
<code>--skip-external-locking</code></li>
</ul>

<h3><a id="Server_parameters" name="Server_parameters"
href="manual_toc.html#Server_parameters">5.5.2 Tuning Server
Parameters</a></h3>

<p><a id="IDX897" name="IDX897"></a> <a id="IDX898"
name="IDX898"></a> <a id="IDX899" name="IDX899"></a> <a id="IDX900"
name="IDX900"></a></p>

<p>You can get the default buffer sizes used by the
<code>mysqld</code> server with this command:</p>

<pre>
shell&gt; mysqld --help
</pre>

<p><a id="IDX901" name="IDX901"></a> <a id="IDX902"
name="IDX902"></a> This command produces a list of all
<code>mysqld</code> options and configurable variables. The output
includes the default values and looks something like this:</p>

<pre>
Possible variables for option --set-variable (-O) are:
back_log                 current value: 5
bdb_cache_size           current value: 1048540
binlog_cache_size        current value: 32768
connect_timeout          current value: 5
delayed_insert_timeout   current value: 300
delayed_insert_limit     current value: 100
delayed_queue_size       current value: 1000
flush_time               current value: 0
interactive_timeout      current value: 28800
join_buffer_size         current value: 131072
key_buffer_size          current value: 1048540
lower_case_table_names   current value: 0
long_query_time          current value: 10
max_allowed_packet       current value: 1048576
max_binlog_cache_size    current value: 4294967295
max_connections          current value: 100
max_connect_errors       current value: 10
max_delayed_threads      current value: 20
max_heap_table_size      current value: 16777216
max_join_size            current value: 4294967295
max_sort_length          current value: 1024
max_tmp_tables           current value: 32
max_write_lock_count     current value: 4294967295
myisam_sort_buffer_size  current value: 8388608
net_buffer_length        current value: 16384
net_retry_count          current value: 10
net_read_timeout         current value: 30
net_write_timeout        current value: 60
read_buffer_size         current value: 131072
record_rnd_buffer_size   current value: 131072
slow_launch_time         current value: 2
sort_buffer              current value: 2097116
table_cache              current value: 64
thread_concurrency       current value: 10
tmp_table_size           current value: 1048576
thread_stack             current value: 131072
wait_timeout             current value: 28800
</pre>

<p>Please note that <code>--set-variable</code> is deprecated since
MySQL 4.0, just use <code>--var=option</code> on its own.</p>

<p>If there is a <code>mysqld</code> server currently running, you
can see what values it actually is using for the variables by
executing this command:</p>

<pre>
shell&gt; mysqladmin variables
</pre>

<p>You can find a full description for all variables in the
<code>SHOW VARIABLES</code> section in this manual. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</p>

<p>You can also see some statistics from a running server by
issuing the command <code>SHOW STATUS</code>. See section <a
href="manual.html#SHOW_STATUS">4.5.6.3 <code>SHOW
STATUS</code></a>.</p>

<p>MySQL uses algorithms that are very scalable, so you can usually
run with very little memory. If you, however, give MySQL more
memory, you will normally also get better performance.</p>

<p>When tuning a MySQL server, the two most important variables to
use are <code>key_buffer_size</code> and <code>table_cache</code>.
You should first feel confident that you have these right before
trying to change any of the other variables.</p>

<p>If you have much memory (&gt;=256M) and many tables and want
maximum performance with a moderate number of clients, you should
use something like this:</p>

<pre>
shell&gt; safe_mysqld -O key_buffer=64M -O table_cache=256 \
           -O sort_buffer=4M -O read_buffer_size=1M &amp;
</pre>

<p>If you have only 128M and only a few tables, but you still do a
lot of sorting, you can use something like:</p>

<pre>
shell&gt; safe_mysqld -O key_buffer=16M -O sort_buffer=1M
</pre>

<p>If you have little memory and lots of connections, use something
like this:</p>

<pre>
shell&gt; safe_mysqld -O key_buffer=512k -O sort_buffer=100k \
           -O read_buffer_size=100k &amp;
</pre>

<p>or even:</p>

<pre>
shell&gt; safe_mysqld -O key_buffer=512k -O sort_buffer=16k \
           -O table_cache=32 -O read_buffer_size=8k -O net_buffer_length=1K &amp;
</pre>

<p>If you are doing a <code>GROUP BY</code> or <code>ORDER
BY</code> on files that are much bigger than your available memory
you should increase the value of <code>record_rnd_buffer</code> to
speed up the reading of rows after the sorting is done.</p>

<p>When you have installed MySQL, the <tt>`support-files'</tt>
directory will contain some different <tt>`my.cnf'</tt> example
files, <tt>`my-huge.cnf'</tt>, <tt>`my-large.cnf'</tt>,
<tt>`my-medium.cnf'</tt>, and <tt>`my-small.cnf'</tt>, you can use
as a base to optimise your system.</p>

<p>If there are very many connections, ``swapping problems'' may
occur unless <code>mysqld</code> has been configured to use very
little memory for each connection. <code>mysqld</code> performs
better if you have enough memory for all connections, of
course.</p>

<p>Note that if you change an option to <code>mysqld</code>, it
remains in effect only for that instance of the server.</p>

<p>To see the effects of a parameter change, do something like
this:</p>

<pre>
shell&gt; mysqld -O key_buffer=32m --help
</pre>

<p>Make sure that the <code>--help</code> option is last;
otherwise, the effect of any options listed after it on the
command-line will not be reflected in the output.</p>

<h3><a id="Compile_and_link_options"
name="Compile_and_link_options"
href="manual_toc.html#Compile_and_link_options">5.5.3 How Compiling
and Linking Affects the Speed of MySQL</a></h3>

<p><a id="IDX903" name="IDX903"></a> <a id="IDX904"
name="IDX904"></a> <a id="IDX905" name="IDX905"></a> <a id="IDX906"
name="IDX906"></a></p>

<p>Most of the following tests are done on Linux with the MySQL
benchmarks, but they should give some indication for other
operating systems and workloads.</p>

<p>You get the fastest executable when you link with
<code>-static</code>.</p>

<p>On Linux, you will get the fastest code when compiling with
<code>pgcc</code> and <code>-O3</code>. To compile
<tt>`sql_yacc.cc'</tt> with these options, you need about 200M
memory because <code>gcc/pgcc</code> needs a lot of memory to make
all functions inline. You should also set <code>CXX=gcc</code> when
configuring MySQL to avoid inclusion of the <code>libstdc++</code>
library (it is not needed). Note that with some versions of
<code>pgcc</code>, the resulting code will only run on true Pentium
processors, even if you use the compiler option that you want the
resulting code to be working on all x586 type processors (like
AMD).</p>

<p>By just using a better compiler and/or better compiler options
you can get a 10-30% speed increase in your application. This is
particularly important if you compile the SQL server yourself!</p>

<p>We have tested both the Cygnus CodeFusion and Fujitsu compilers,
but when we tested them, neither was sufficiently bug free to allow
MySQL to be compiled with optimisations on.</p>

<p>When you compile MySQL you should only include support for the
character sets that you are going to use. (Option
<code>--with-charset=xxx</code>.) The standard MySQL binary
distributions are compiled with support for all character sets.</p>

<p>Here is a list of some measurements that we have done:</p>

<ul>
<li>If you use <code>pgcc</code> and compile everything with
<code>-O6</code>, the <code>mysqld</code> server is 1% faster than
with <code>gcc</code> 2.95.2.</li>

<li>If you link dynamically (without <code>-static</code>), the
result is 13% slower on Linux. Note that you still can use a
dynamic linked MySQL library. It is only the server that is
critical for performance.</li>

<li>If you strip your <code>mysqld</code> binary with <code>strip
libexec/mysqld</code>, the resulting binary can be up to 4%
faster.</li>

<li>If you connect using TCP/IP rather than Unix sockets, the
result is 7.5% slower on the same computer. (If you are connection
to <code>localhost</code>, MySQL will, by default, use
sockets.)</li>

<li>If you connect using TCP/IP from another computer over a 100M
Ethernet, things will be 8-11% slower.</li>

<li>When running our benchmark tests using secure connections (all
data encrypted with internal SSL support) things were 55%
slower.</li>

<li>If you compile with <code>--with-debug=full</code>, then you
will lose 20% for most queries, but some queries may take
substantially longer (The MySQL benchmarks ran 35% slower) If you
use <code>--with-debug</code>, then you will only lose 15%. By
starting a <code>mysqld</code> version compiled with
<code>--with-debug=full</code> with <code>--skip-safemalloc</code>
the end result should be close to when configuring with
<code>--with-debug</code>.</li>

<li>On a Sun UltraSPARC-IIe, Forte 5.0 is 4% faster than
<code>gcc</code> 3.2</li>

<li>On a Sun UltraSPARC-IIe, Forte 5.0 is 4% faster in 32 bit mode
than in 64 bit mode.</li>

<li>Compiling with <code>gcc</code> 2.95.2 for UltraSPARC with the
option <code>-mcpu=v8 -Wa,-xarch=v8plusa</code> gives 4% more
performance.</li>

<li>On Solaris 2.5.1, MIT-pthreads is 8-12% slower than Solaris
native threads on a single processor. With more load/CPUs the
difference should get bigger.</li>

<li>Running with <code>--log-bin</code> makes mysqld 1%
slower.</li>

<li>Compiling on Linux-x86 using gcc without frame pointers
<code>-fomit-frame-pointer</code> or <code>-fomit-frame-pointer
-ffixed-ebp</code> makes <code>mysqld</code> 1-4% faster.</li>
</ul>

<p>The MySQL-Linux distribution provided by MySQL AB used to be
compiled with <code>pgcc</code>, but we had to go back to regular
gcc because of a bug in <code>pgcc</code> that would generate the
code that does not run on AMD. We will continue using gcc until
that bug is resolved. In the meantime, if you have a non-AMD
machine, you can get a faster binary by compiling with
<code>pgcc</code>. The standard MySQL Linux binary is linked
statically to get it faster and more portable.</p>

<h3><a id="Memory_use" name="Memory_use"
href="manual_toc.html#Memory_use">5.5.4 How MySQL Uses
Memory</a></h3>

<p><a id="IDX907" name="IDX907"></a></p>

<p>The following list indicates some of the ways that the
<code>mysqld</code> server uses memory. Where applicable, the name
of the server variable relevant to the memory use is given:</p>

<ul>
<li>The key buffer (variable <code>key_buffer_size</code>) is
shared by all threads; other buffers used by the server are
allocated as needed. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</li>

<li>Each connection uses some thread-specific space: A stack
(default 64K, variable <code>thread_stack</code>), a connection
buffer (variable <code>net_buffer_length</code>), and a result
buffer (variable <code>net_buffer_length</code>). The connection
buffer and result buffer are dynamically enlarged up to
<code>max_allowed_packet</code> when needed. When a query is
running, a copy of the current query string is also allocated.</li>

<li>All threads share the same base memory.</li>

<li>Only the compressed <code>ISAM</code> / <code>MyISAM</code>
tables are memory mapped. This is because the 32-bit memory space
of 4GB is not large enough for most big tables. When systems with a
64-bit address space become more common we may add general support
for memory mapping.</li>

<li>Each request doing a sequential scan over a table allocates a
read buffer (variable <code>record_buffer</code>).</li>

<li>When reading rows in 'random' order (for example after a sort)
a random-read buffer is allocated to avoid disk seeks. (variable
<code>record_rnd_buffer</code>).</li>

<li>All joins are done in one pass, and most joins can be done
without even using a temporary table. Most temporary tables are
memory-based (<code>HEAP</code>) tables. Temporary tables with a
big record length (calculated as the sum of all column lengths) or
that contain <code>BLOB</code> columns are stored on disk. One
problem in MySQL versions before Version 3.23.2 is that if a
<code>HEAP</code> table exceeds the size of
<code>tmp_table_size</code>, you get the error <code>The table
tbl_name is full</code>. In newer versions this is handled by
automatically changing the in-memory (<code>HEAP</code>) table to a
disk-based (<code>MyISAM</code>) table as necessary. To work around
this problem, you can increase the temporary table size by setting
the <code>tmp_table_size</code> option to <code>mysqld</code>, or
by setting the SQL option <code>BIG_TABLES</code> in the client
program. See section <a href="manual.html#SET_OPTION">5.5.6
<code>SET</code> Syntax</a>. In MySQL Version 3.20, the maximum
size of the temporary table was <code>record_buffer*16</code>, so
if you are using this version, you have to increase the value of
<code>record_buffer</code>. You can also start <code>mysqld</code>
with the <code>--big-tables</code> option to always store temporary
tables on disk. However, this will affect the speed of many
complicated queries.</li>

<li>Most requests doing a sort allocates a sort buffer and 0-2
temporary files depending on the result set size. See section <a
href="manual.html#Temporary_files">A.4.4 Where MySQL Stores
Temporary Files</a>.</li>

<li>Almost all parsing and calculating is done in a local memory
store. No memory overhead is needed for small items and the normal
slow memory allocation and freeing is avoided. Memory is allocated
only for unexpectedly large strings (this is done with
<code>malloc()</code> and <code>free()</code>).</li>

<li>Each index file is opened once and the datafile is opened once
for each concurrently running thread. For each concurrent thread, a
table structure, column structures for each column, and a buffer of
size <code>3 * n</code> is allocated (where <code>n</code> is the
maximum row length, not counting <code>BLOB</code> columns). A
<code>BLOB</code> uses 5 to 8 bytes plus the length of the
<code>BLOB</code> data. The <code>ISAM</code>/<code>MyISAM</code>
storage engines will use one extra row buffer for internal
usage.</li>

<li>For each table having <code>BLOB</code> columns, a buffer is
enlarged dynamically to read in larger <code>BLOB</code> values. If
you scan a table, a buffer as large as the largest
<code>BLOB</code> value is allocated.</li>

<li>Storage engines for all in-use tables are saved in a cache and
managed as a FIFO. Normally the cache has 64 entries. If a table
has been used by two running threads at the same time, the cache
contains two entries for the table. See section <a
href="manual.html#Table_cache">5.4.7 How MySQL Opens and Closes
Tables</a>.</li>

<li>A <code>mysqladmin flush-tables</code> command closes all
tables that are not in use and marks all in-use tables to be closed
when the currently executing thread finishes. This will effectively
free most in-use memory.</li>
</ul>

<p><code>ps</code> and other system status programs may report that
<code>mysqld</code> uses a lot of memory. This may be caused by
thread-stacks on different memory addresses. For example, the
Solaris version of <code>ps</code> counts the unused memory between
stacks as used memory. You can verify this by checking available
swap with <code>swap -s</code>. We have tested <code>mysqld</code>
with commercial memory-leakage detectors, so there should be no
memory leaks.</p>

<h3><a id="DNS" name="DNS" href="manual_toc.html#DNS">5.5.5 How
MySQL uses DNS</a></h3>

<p><a id="IDX908" name="IDX908"></a> <a id="IDX909"
name="IDX909"></a></p>

<p>When a new thread connects to <code>mysqld</code>,
<code>mysqld</code> will span a new thread to handle the request.
This thread will first check if the hostname is in the hostname
cache. If not the thread will call <code>gethostbyaddr_r()</code>
and <code>gethostbyname_r()</code> to resolve the hostname.</p>

<p>If the operating system doesn't support the above thread-safe
calls, the thread will lock a mutex and call
<code>gethostbyaddr()</code> and <code>gethostbyname()</code>
instead. Note that in this case no other thread can resolve other
hostnames that is not in the hostname cache until the first thread
is ready.</p>

<p>You can disable DNS host lookup by starting <code>mysqld</code>
with <code>--skip-name-resolve</code>. In this case you can however
only use IP names in the MySQL privilege tables.</p>

<p>If you have a very slow DNS and many hosts, you can get more
performance by either disabling DNS lookop with
<code>--skip-name-resolve</code> or by increasing the
<code>HOST_CACHE_SIZE</code> define (default: 128) and recompile
<code>mysqld</code>.</p>

<p>You can disable the hostname cache with
<code>--skip-host-cache</code>. You can clear the hostname cache
with <code>FLUSH HOSTS</code> or <code>mysqladmin
flush-hosts</code>.</p>

<p>If you don't want to allow connections over <code>TCP/IP</code>,
you can do this by starting <code>mysqld</code> with
<code>--skip-networking</code>.</p>

<h3><a id="SET_OPTION" name="SET_OPTION"
href="manual_toc.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a></h3>

<p><a id="IDX910" name="IDX910"></a></p>

<pre>
SET [GLOBAL | SESSION] sql_variable=expression, [[GLOBAL | SESSION] sql_variable=expression...]
</pre>

<p><code>SET</code> sets various options that affect the operation
of the server or your client.</p>

<p>The following examples shows the different syntaxes one can use
to set variables:</p>

<p>In old MySQL versions we allowed the use of the <code>SET
OPTION</code> syntax, but this syntax is now deprecated.</p>

<p>In MySQL 4.0.3 we added the <code>GLOBAL</code> and
<code>SESSION</code> options and access to most important startup
variables.</p>

<p><code>LOCAL</code> can be used as a synonym for
<code>SESSION</code>.</p>

<p>If you set several variables on the same command line, the last
used <code>GLOBAL | SESSION</code> mode is used.</p>

<pre>
SET sort_buffer_size=10000;
SET @@local.sort_buffer_size=10000;
SET GLOBAL sort_buffer_size=1000000, SESSION sort_buffer_size=1000000;
SET @@sort_buffer_size=1000000;
SET @@global.sort_buffer_size=1000000, @@local.sort_buffer_size=1000000;
</pre>

<p>The <code>@@variable_name</code> syntax is supported to make
MySQL syntax compatible with some other databases.</p>

<p>The different system variables one can set are described in the
system variable section of this manual. See section <a
href="manual.html#System_Variables">6.1.5 System Variables</a>.</p>

<p>If you are using <code>SESSION</code> (the default) the option
you set remains in effect until the current session ends, or until
you set the option to a different value. If you use
<code>GLOBAL</code>, which require the <code>SUPER</code>
privilege, the option is remembered and used for new connections
until the server restarts. If you want to make an option permanent,
you should set it in one of the MySQL option files. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</p>

<p>To avoid wrong usage MySQL will give an error if you use
<code>SET GLOBAL</code> with a variable that can only be used with
<code>SET SESSION</code> or if you are not using <code>SET
GLOBAL</code> with a global variable.</p>

<p>If you want to set a <code>SESSION</code> variable to the
<code>GLOBAL</code> value or a <code>GLOBAL</code> value to the
MySQL default value, you can set it to <code>DEFAULT</code>.</p>

<pre>
SET max_join_size=DEFAULT;
</pre>

<p>This is identical to:</p>

<pre>
SET @@session.max_join_size=@@global.max_join_size;
</pre>

<p>If you want to restrict the maximum value a startup option can
be set to with the <code>SET</code> command, you can specify this
by using the <code>--maximum-variable-name</code> command line
option. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</p>

<p>You can get a list of most variables with <code>SHOW
VARIABLES</code>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. You can get the value for a specific value
with the <code>@@[global.|local.]variable_name</code> syntax:</p>

<pre>
SHOW VARIABLES like "max_join_size";
SHOW GLOBAL VARIABLES like "max_join_size";
SELECT @@max_join_size, @@global.max_join_size;
</pre>

<p>Here follows a description of the variables that uses a the
variables that uses a non-standard <code>SET</code> syntax and some
of the other variables. The other variable definitions can be found
in the system variable section, among the startup options or in the
description of <code>SHOW VARIABLES</code>. See section <a
href="manual.html#System_Variables">6.1.5 System Variables</a>. See
section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</p>

<dl compact="compact">
<dt><code>CHARACTER SET character_set_name | DEFAULT</code></dt>

<dd>This maps all strings from and to the client with the given
mapping. Currently the only option for
<code>character_set_name</code> is <code>cp1251_koi8</code>, but
you can easily add new mappings by editing the
<tt>`sql/convert.cc'</tt> file in the MySQL source distribution.
The default mapping can be restored by using a
<code>character_set_name</code> value of <code>DEFAULT</code>. Note
that the syntax for setting the <code>CHARACTER SET</code> option
differs from the syntax for setting the other options.</dd>

<dt><code>PASSWORD = PASSWORD('some password')</code></dt>

<dd><a id="IDX911" name="IDX911"></a> Set the password for the
current user. Any non-anonymous user can change his own
password!</dd>

<dt><code>PASSWORD FOR user = PASSWORD('some password')</code></dt>

<dd>Set the password for a specific user on the current server
host. Only a user with access to the <code>mysql</code> database
can do this. The user should be given in <code>user@hostname</code>
format, where <code>user</code> and <code>hostname</code> are
exactly as they are listed in the <code>User</code> and
<code>Host</code> columns of the <code>mysql.user</code> table
entry. For example, if you had an entry with <code>User</code> and
<code>Host</code> fields of <code>'bob'</code> and
<code>'%.loc.gov'</code>, you would write: 

<pre>
mysql&gt; SET PASSWORD FOR bob@"%.loc.gov" = PASSWORD("newpass");
</pre>

Which is equivalent to: 

<pre>
mysql&gt; UPDATE mysql.user SET password=PASSWORD("newpass")
    -&gt;                   WHERE user="bob" AND host="%.loc.gov";
</pre>
</dd>

<dt><code>SQL_AUTO_IS_NULL = 0 | 1</code></dt>

<dd>If set to <code>1</code> (default) then one can find the last
inserted row for a table with an <code>AUTO_INCREMENT</code> column
with the following construct: <code>WHERE auto_increment_column IS
NULL</code>. This is used by some ODBC programs like Access.</dd>

<dt><code>AUTOCOMMIT= 0 | 1</code></dt>

<dd>If set to <code>1</code> all changes to a table will be done at
once. To start a multi-command transaction, you have to use the
<code>BEGIN</code> statement. See section <a
href="manual.html#COMMIT">6.7.1 <code>BEGIN/COMMIT/ROLLBACK</code>
Syntax</a>. If set to <code>0</code> you have to use
<code>COMMIT</code> / <code>ROLLBACK</code> to accept/revoke that
transaction. See section <a href="manual.html#COMMIT">6.7.1
<code>BEGIN/COMMIT/ROLLBACK</code> Syntax</a>. Note that when you
change from not <code>AUTOCOMMIT</code> mode to
<code>AUTOCOMMIT</code> mode, MySQL will do an automatic
<code>COMMIT</code> on any open transactions.</dd>

<dt><code>BIG_TABLES = 0 | 1</code></dt>

<dd><a id="IDX912" name="IDX912"></a> If set to <code>1</code>, all
temporary tables are stored on disk rather than in memory. This
will be a little slower, but you will not get the error <code>The
table tbl_name is full</code> for big <code>SELECT</code>
operations that require a large temporary table. The default value
for a new connection is <code>0</code> (that is, use in-memory
temporary tables). This option was before named
<code>SQL_BIG_TABLES</code>.</dd>

<dt><code>SQL_BIG_SELECTS = 0 | 1</code></dt>

<dd>If set to <code>0</code>, MySQL will abort if a
<code>SELECT</code> is attempted that probably will take a very
long time. This is useful when an inadvisable <code>WHERE</code>
statement has been issued. A big query is defined as a
<code>SELECT</code> that probably will have to examine more than
<code>max_join_size</code> rows. The default value for a new
connection is <code>1</code> (which will allow all
<code>SELECT</code> statements).</dd>

<dt><code>SQL_BUFFER_RESULT = 0 | 1</code></dt>

<dd><code>SQL_BUFFER_RESULT</code> will force the result from
<code>SELECT</code>s to be put into a temporary table. This will
help MySQL free the table locks early and will help in cases where
it takes a long time to send the result set to the client.</dd>

<dt><code>LOW_PRIORITY_UPDATES = 0 | 1</code></dt>

<dd>If set to <code>1</code>, all <code>INSERT</code>,
<code>UPDATE</code>, <code>DELETE</code>, and <code>LOCK TABLE
WRITE</code> statements wait until there is no pending
<code>SELECT</code> or <code>LOCK TABLE READ</code> on the affected
table. This option was before named
<code>SQL_LOW_PRIORITY_UPDATES</code>.</dd>

<dt><code>MAX_JOIN_SIZE = value | DEFAULT</code></dt>

<dd>Don't allow <code>SELECT</code>s that will probably need to
examine more than <code>value</code> row combinations. By setting
this value, you can catch <code>SELECT</code>s where keys are not
used properly and that would probably take a long time. Setting
this to a value other than <code>DEFAULT</code> will reset the
<code>SQL_BIG_SELECTS</code> flag. If you set the
<code>SQL_BIG_SELECTS</code> flag again, the
<code>SQL_MAX_JOIN_SIZE</code> variable will be ignored. You can
set a default value for this variable by starting
<code>mysqld</code> with <code>-O max_join_size=#</code>. This
option was before named <code>SQL_MAX_JOIN_SIZE</code>. Note that
if the result of the query is already in the query cache, the above
check will not be made. Instead, MySQL will send the result to the
client. Since the query result is already computed and it will not
burden the server to send the result to the client.</dd>

<dt><code>QUERY_CACHE_TYPE = OFF | ON | DEMAND</code></dt>

<dt><code>QUERY_CACHE_TYPE = 0 | 1 | 2</code></dt>

<dd>Set query cache setting for this thread. 

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>0 or OFF</td>
<td>Don't cache or retrieve results.</td>
</tr>

<tr>
<td>1 or ON</td>
<td>Cache all results except <code>SELECT SQL_NO_CACHE ...</code>
queries.</td>
</tr>

<tr>
<td>2 or DEMAND</td>
<td>Cache only <code>SELECT SQL_CACHE ...</code> queries.</td>
</tr>
</table>
</dd>

<dt><code>SQL_SAFE_UPDATES = 0 | 1</code></dt>

<dd>If set to <code>1</code>, MySQL will abort if an
<code>UPDATE</code> or <code>DELETE</code> is attempted that
doesn't use a key or <code>LIMIT</code> in the <code>WHERE</code>
clause. This makes it possible to catch wrong updates when creating
SQL commands by hand.</dd>

<dt><code>SQL_SELECT_LIMIT = value | DEFAULT</code></dt>

<dd>The maximum number of records to return from
<code>SELECT</code> statements. If a <code>SELECT</code> has a
<code>LIMIT</code> clause, the <code>LIMIT</code> takes precedence
over the value of <code>SQL_SELECT_LIMIT</code>. The default value
for a new connection is ``unlimited.'' If you have changed the
limit, the default value can be restored by using a
<code>SQL_SELECT_LIMIT</code> value of <code>DEFAULT</code>.</dd>

<dt><code>SQL_LOG_OFF = 0 | 1</code></dt>

<dd>If set to <code>1</code>, no logging will be done to the
standard log for this client, if the client has the
<code>SUPER</code> privilege. This does not affect the update
log!</dd>

<dt><code>SQL_LOG_UPDATE = 0 | 1</code></dt>

<dd>If set to <code>0</code>, no logging will be done to the update
log for the client, if the client has the <code>SUPER</code>
privilege. This does not affect the standard log!</dd>

<dt><code>SQL_QUOTE_SHOW_CREATE = 0 | 1</code></dt>

<dd>If set to <code>1</code>, <code>SHOW CREATE TABLE</code> will
quote table and column names. This is <strong>on</strong> by
default, for replication of tables with fancy column names to work.
section <a href="manual.html#SHOW_CREATE_TABLE">4.5.6.8 <code>SHOW
CREATE TABLE</code></a>.</dd>

<dt><code>TIMESTAMP = timestamp_value | DEFAULT</code></dt>

<dd>Set the time for this client. This is used to get the original
timestamp if you use the update log to restore rows.
<code>timestamp_value</code> should be a Unix epoch timestamp, not
a MySQL timestamp.</dd>

<dt><code>LAST_INSERT_ID = #</code></dt>

<dd>Set the value to be returned from
<code>LAST_INSERT_ID()</code>. This is stored in the update log
when you use <code>LAST_INSERT_ID()</code> in a command that
updates a table.</dd>

<dt><code>INSERT_ID = #</code></dt>

<dd>Set the value to be used by the following <code>INSERT</code>
or <code>ALTER TABLE</code> command when inserting an
<code>AUTO_INCREMENT</code> value. This is mainly used with the
update log.</dd>
</dl>

<h2><a id="Disk_issues" name="Disk_issues"
href="manual_toc.html#Disk_issues">5.6 Disk Issues</a></h2>

<p><a id="IDX913" name="IDX913"></a> <a id="IDX914"
name="IDX914"></a></p>

<ul>
<li>As mentioned before, disks seeks are a big performance
bottleneck. This problems gets more and more apparent when the data
starts to grow so large that effective caching becomes impossible.
For large databases, where you access data more or less randomly,
you can be sure that you will need at least one disk seek to read
and a couple of disk seeks to write things. To minimise this
problem, use disks with low seek times.</li>

<li>Increase the number of available disk spindles (and thereby
reduce the seek overhead) by either symlink files to different
disks or striping the disks. 

<dl compact="compact">
<dt><strong>Using symbolic links</strong></dt>

<dd>This means that you symlink the index and/or datafile(s) from
the normal data directory to another disk (that may also be
striped). This makes both the seek and read times better (if the
disks are not used for other things). See section <a
href="manual.html#Symbolic_links">5.6.1 Using Symbolic Links</a>.
<a id="IDX915" name="IDX915"></a></dd>

<dt><strong>Striping</strong></dt>

<dd>Striping means that you have many disks and put the first block
on the first disk, the second block on the second disk, and the Nth
on the (N mod number_of_disks) disk, and so on. This means if your
normal data size is less than the stripe size (or perfectly
aligned) you will get much better performance. Note that striping
is very dependent on the OS and stripe-size. So benchmark your
application with different stripe-sizes. See section <a
href="manual.html#Custom_Benchmarks">5.1.5 Using Your Own
Benchmarks</a>. Note that the speed difference for striping is
<strong>very</strong> dependent on the parameters. Depending on how
you set the striping parameters and number of disks you may get a
difference in orders of magnitude. Note that you have to choose to
optimise for random or sequential access.</dd>
</dl>
</li>

<li>For reliability you may want to use RAID 0+1 (striping +
mirroring), but in this case you will need 2*N drives to hold N
drives of data. This is probably the best option if you have the
money for it! You may, however, also have to invest in some
volume-management software to handle it efficiently.</li>

<li>A good option is to have semi-important data (that can be
regenerated) on RAID 0 disk while storing really important data
(like host information and logs) on a RAID 0+1 or RAID N disk. RAID
N can be a problem if you have many writes because of the time to
update the parity bits.</li>

<li>You may also set the parameters for the filesystem that the
database uses. One easy change is to mount the filesystem with the
noatime option. That makes it skip the updating of the last access
time in the inode and by this will avoid some disk seeks.</li>

<li>On Linux, you can get much more performance (up to 100% under
load is not uncommon) by using <code>hdparm</code> to configure
your disk's interface! The following should be quite good
<code>hdparm</code> options for MySQL (and probably many other
applications): 

<pre>
hdparm -m 16 -d 1
</pre>

Note that the performance/reliability when using the above depends
on your hardware, so we strongly suggest that you test your system
thoroughly after using <code>hdparm</code>! Please consult the
<code>hdparm</code> man page for more information! If
<code>hdparm</code> is not used wisely, filesystem corruption may
result. Backup everything before experimenting!</li>

<li>On many operating systems you can mount the disks with the
<code>-o async</code> option to set the filesystem to be updated
asynchronously. If your computer is reasonably stable, this should
give you more performance without sacrificing too much reliability.
(This flag is on by default on Linux.)</li>

<li>If you don't need to know when a file was last accessed (which
is not really useful on a database server), you can mount your
filesystems with the <code>-o noatime</code> option.</li>
</ul>

<h3><a id="Symbolic_links" name="Symbolic_links"
href="manual_toc.html#Symbolic_links">5.6.1 Using Symbolic
Links</a></h3>

<p><a id="IDX916" name="IDX916"></a> <a id="IDX917"
name="IDX917"></a></p>

<p>You can move tables and databases from the database directory to
other locations and replace them with symbolic links to the new
locations. You might want to do this, for example, to move a
database to a file system with more free space or increase the
speed of your system by spreading your tables to different
disk.</p>

<p>The recommended way to do this, is to just symlink databases to
a different disk and only symlink tables as a last resort.</p>

<h4><a id="Symbolic_links_to_databases"
name="Symbolic_links_to_databases"
href="manual_toc.html#Symbolic_links_to_databases">5.6.1.1 Using
Symbolic Links for Databases</a></h4>

<p><a id="IDX918" name="IDX918"></a></p>

<p>The way to symlink a database is to first create a directory on
some disk where you have free space and then create a symlink to it
from the MySQL database directory.</p>

<pre>
shell&gt; mkdir /dr1/databases/test
shell&gt; ln -s /dr1/databases/test mysqld-datadir
</pre>

<p>MySQL doesn't support that you link one directory to multiple
databases. Replacing a database directory with a symbolic link will
work fine as long as you don't make a symbolic link between
databases. Suppose you have a database <code>db1</code> under the
MySQL data directory, and then make a symlink <code>db2</code> that
points to <code>db1</code>:</p>

<pre>
shell&gt; cd /path/to/datadir
shell&gt; ln -s db1 db2
</pre>

<p>Now, for any table <code>tbl_a</code> in <code>db1</code>, there
also appears to be a table <code>tbl_a</code> in <code>db2</code>.
If one thread updates <code>db1.tbl_a</code> and another thread
updates <code>db2.tbl_a</code>, there will be problems.</p>

<p>If you really need this, you must change the following code in
<tt>`mysys/mf_format.c'</tt>:</p>

<pre>
if (flag &amp; 32 || (!lstat(to,&amp;stat_buff) &amp;&amp; S_ISLNK(stat_buff.st_mode)))
</pre>

<p>to</p>

<pre>
if (1)
</pre>

<p>On Windows you can use internal symbolic links to directories by
compiling MySQL with <code>-DUSE_SYMDIR</code>. This allows you to
put different databases on different disks. See section <a
href="manual.html#Windows_symbolic_links">2.6.2.5 Splitting Data
Across Different Disks on Windows</a>.</p>

<h4><a id="Symbolic_links_to_tables"
name="Symbolic_links_to_tables"
href="manual_toc.html#Symbolic_links_to_tables">5.6.1.2 Using
Symbolic Links for Tables</a></h4>

<p><a id="IDX919" name="IDX919"></a></p>

<p>Before MySQL 4.0 you should not symlink tables, if you are not
very careful with them. The problem is that if you run <code>ALTER
TABLE</code>, <code>REPAIR TABLE</code> or <code>OPTIMIZE
TABLE</code> on a symlinked table, the symlinks will be removed and
replaced by the original files. This happens because the above
command works by creating a temporary file in the database
directory and when the command is complete, replace the original
file with the temporary file.</p>

<p>You should not symlink tables on systems that don't have a fully
working <code>realpath()</code> call. (At least Linux and Solaris
support <code>realpath()</code>)</p>

<p>In MySQL 4.0 symlinks are fully supported only for
<code>MyISAM</code> tables. For other table types you will probably
get strange problems when doing any of the above mentioned
commands.</p>

<p>The handling of symbolic links in MySQL 4.0 works the following
way (this is mostly relevant only for <code>MyISAM</code>
tables).</p>

<ul>
<li>In the data directory you will always have the table definition
file and the data and index files.</li>

<li>You can symlink the index file and the data file to different
directories independently of the other.</li>

<li>The symlinking can be done from the operating system (if
<code>mysqld</code> is not running) or with the <code>INDEX/DATA
DIRECTORY="path-to-dir"</code> command in <code>CREATE
TABLE</code>. See section <a href="manual.html#CREATE_TABLE">6.5.3
<code>CREATE TABLE</code> Syntax</a>.</li>

<li><code>myisamchk</code> will not replace a symlink with the data
or index file but work directly on the file the symlink points to.
Any temporary files will be created in the same directory where the
data or index file is located.</li>

<li>When you drop a table that is using symlinks, both the symlink
and the file the symlink points to are dropped. This is a good
reason to why you should <strong>not</strong> run
<code>mysqld</code> as <code>root</code> or allow persons to have
write access to the MySQL database directories.</li>

<li>If you rename a table with <code>ALTER TABLE RENAME</code> and
you don't move the table to another database, the symlinks in the
database directory will be renamed to the new names and the data
and index files will be renamed accordingly.</li>

<li>If you use <code>ALTER TABLE RENAME</code> to move a table to
another database, the table will be moved to the other database
directory and the old symlinks and the files they pointed to will
be deleted. (In other words, the new table will not be
symlinked.)</li>

<li>If you are not using symlinks, you should use the
<code>--skip-symlink</code> option to <code>mysqld</code> to ensure
that no one can drop or rename a file outside of the
<code>mysqld</code> data directory.</li>
</ul>

<p>Things that are not yet supported:</p>

<p><a id="IDX920" name="IDX920"></a></p>

<ul>
<li><code>ALTER TABLE</code> ignores all <code>INDEX/DATA
DIRECTORY="path"</code> options.</li>

<li><code>CREATE TABLE</code> doesn't report if the table has
symbolic links.</li>

<li><code>mysqldump</code> doesn't include the symbolic link
information in the output.</li>

<li><code>BACKUP TABLE</code> and <code>RESTORE TABLE</code> don't
respect symbolic links.</li>
</ul>

<h1><a id="Reference" name="Reference"
href="manual_toc.html#Reference">6 MySQL Language
Reference</a></h1>

<p>MySQL has a very complex, but intuitive and easy to learn SQL
interface. This chapter describes the various commands, types, and
functions you will need to know in order to use MySQL efficiently
and effectively. This chapter also serves as a reference to all
functionality included in MySQL. In order to use this chapter
effectively, you may find it useful to refer to the various
indexes.</p>

<h2><a id="Language_Structure" name="Language_Structure"
href="manual_toc.html#Language_Structure">6.1 Language
Structure</a></h2>

<h3><a id="Literals" name="Literals"
href="manual_toc.html#Literals">6.1.1 Literals: How to Write
Strings and Numbers</a></h3>

<p><a id="IDX921" name="IDX921"></a> <a id="IDX922"
name="IDX922"></a> <a id="IDX923" name="IDX923"></a> <a id="IDX924"
name="IDX924"></a> <a id="IDX925" name="IDX925"></a></p>

<p>This section describes the various ways to write strings and
numbers in MySQL. It also covers the various nuances and
``gotchas'' that you may run into when dealing with these basic
types in MySQL.</p>

<h4><a id="String_syntax" name="String_syntax"
href="manual_toc.html#String_syntax">6.1.1.1 Strings</a></h4>

<p>A string is a sequence of characters, surrounded by either
single quote (<samp>`''</samp>) or double quote (<samp>`"'</samp>)
characters (only the single quote if you run in ANSI mode).
Examples:</p>

<pre>
'a string'
"another string"
</pre>

<p>Within a string, certain sequences have special meaning. Each of
these sequences begins with a backslash (<samp>`\'</samp>), known
as the <em>escape character</em>. MySQL recognises the following
escape sequences:</p>

<dl compact="compact">
<dt><code>\0</code></dt>

<dd><a id="IDX926" name="IDX926"></a> <a id="IDX927"
name="IDX927"></a> An ASCII 0 (<code>NUL</code>) character. <a
id="IDX928" name="IDX928"></a> <a id="IDX929"
name="IDX929"></a></dd>

<dt><code>\'</code></dt>

<dd>A single quote (<samp>`''</samp>) character. <a id="IDX930"
name="IDX930"></a> <a id="IDX931" name="IDX931"></a></dd>

<dt><code>\"</code></dt>

<dd>A double quote (<samp>`"'</samp>) character. <a id="IDX932"
name="IDX932"></a> <a id="IDX933" name="IDX933"></a></dd>

<dt><code>\b</code></dt>

<dd>A backspace character. <a id="IDX934" name="IDX934"></a> <a
id="IDX935" name="IDX935"></a></dd>

<dt><code>\n</code></dt>

<dd>A newline character. <a id="IDX936" name="IDX936"></a> <a
id="IDX937" name="IDX937"></a> <a id="IDX938"
name="IDX938"></a></dd>

<dt><code>\r</code></dt>

<dd>A carriage return character. <a id="IDX939" name="IDX939"></a>
<a id="IDX940" name="IDX940"></a></dd>

<dt><code>\t</code></dt>

<dd>A tab character. <a id="IDX941" name="IDX941"></a> <a
id="IDX942" name="IDX942"></a></dd>

<dt><code>\z</code></dt>

<dd>ASCII(26) (Control-Z). This character can be encoded to allow
you to work around the problem that ASCII(26) stands for
END-OF-FILE on Windows. (ASCII(26) will cause problems if you try
to use <code>mysql database &lt; filename</code>.) <a id="IDX943"
name="IDX943"></a> <a id="IDX944" name="IDX944"></a></dd>

<dt><code>\\</code></dt>

<dd>A backslash (<samp>`\'</samp>) character. <a id="IDX945"
name="IDX945"></a> <a id="IDX946" name="IDX946"></a></dd>

<dt><code>\%</code></dt>

<dd>A <samp>`%'</samp> character. This is used to search for
literal instances of <samp>`%'</samp> in contexts where
<samp>`%'</samp> would otherwise be interpreted as a wildcard
character. See section <a
href="manual.html#String_comparison_functions">6.3.2.1 String
Comparison Functions</a>. <a id="IDX947" name="IDX947"></a> <a
id="IDX948" name="IDX948"></a></dd>

<dt><code>\_</code></dt>

<dd>A <samp>`_'</samp> character. This is used to search for
literal instances of <samp>`_'</samp> in contexts where
<samp>`_'</samp> would otherwise be interpreted as a wildcard
character. See section <a
href="manual.html#String_comparison_functions">6.3.2.1 String
Comparison Functions</a>.</dd>
</dl>

<p>Note that if you use <samp>`\%'</samp> or <samp>`\_'</samp> in
some string contexts, these will return the strings
<samp>`\%'</samp> and <samp>`\_'</samp> and not <samp>`%'</samp>
and <samp>`_'</samp>.</p>

<p><a id="IDX949" name="IDX949"></a> There are several ways to
include quotes within a string:</p>

<ul>
<li>A <samp>`''</samp> inside a string quoted with <samp>`''</samp>
may be written as <samp>`'''</samp>.</li>

<li>A <samp>`"'</samp> inside a string quoted with <samp>`"'</samp>
may be written as <samp>`""'</samp>.</li>

<li>You can precede the quote character with an escape character
(<samp>`\'</samp>).</li>

<li>A <samp>`''</samp> inside a string quoted with <samp>`"'</samp>
needs no special treatment and need not be doubled or escaped. In
the same way, <samp>`"'</samp> inside a string quoted with
<samp>`''</samp> needs no special treatment.</li>
</ul>

<p>The <code>SELECT</code> statements shown here demonstrate how
quoting and escaping work:</p>

<pre>
mysql&gt; SELECT 'hello', '"hello"', '""hello""', 'hel''lo', '\'hello';
+-------+---------+-----------+--------+--------+
| hello | "hello" | ""hello"" | hel'lo | 'hello |
+-------+---------+-----------+--------+--------+

mysql&gt; SELECT "hello", "'hello'", "''hello''", "hel""lo", "\"hello";
+-------+---------+-----------+--------+--------+
| hello | 'hello' | ''hello'' | hel"lo | "hello |
+-------+---------+-----------+--------+--------+

mysql&gt; SELECT "This\nIs\nFour\nlines";
+--------------------+
| This
Is
Four
lines |
+--------------------+
</pre>

<p><a id="IDX950" name="IDX950"></a></p>

<p>If you want to insert binary data into a string column (such as
a <code>BLOB</code>), the following characters must be represented
by escape sequences:</p>

<dl compact="compact">
<dt><code>NUL</code></dt>

<dd>ASCII 0. You should represent this by <samp>`\0'</samp> (a
backslash and an ASCII <samp>`0'</samp> character).</dd>

<dt><code>\</code></dt>

<dd>ASCII 92, backslash. Represent this by <samp>`\\'</samp>.</dd>

<dt><code>'</code></dt>

<dd>ASCII 39, single quote. Represent this by
<samp>`\''</samp>.</dd>

<dt><code>"</code></dt>

<dd>ASCII 34, double quote. Represent this by
<samp>`\"'</samp>.</dd>
</dl>

<p><a id="IDX951" name="IDX951"></a> <a id="IDX952"
name="IDX952"></a> <a id="IDX953" name="IDX953"></a> <a id="IDX954"
name="IDX954"></a> If you write C code, you can use the C API
function <code>mysql_real_escape_string()</code> to escape
characters for the <code>INSERT</code> statement. See section <a
href="manual.html#C_API_function_overview">8.4.2 C API Function
Overview</a>. In Perl, you can use the <code>quote</code> method of
the <code>DBI</code> package to convert special characters to the
proper escape sequences. See section <a
href="manual.html#Perl_DBI_Class">8.2.2 The <code>DBI</code>
Interface</a>.</p>

<p>You should use an escape function on any string that might
contain any of the special characters listed above!</p>

<p>Alternatively, many MySQL APIs provide some sort of placeholder
capability that allows you to insert special markers into a query
string, and then bind data values to them when you issue the query.
In this case, the API takes case of escaping special characters in
the values for you automatically.</p>

<h4><a id="Number_syntax" name="Number_syntax"
href="manual_toc.html#Number_syntax">6.1.1.2 Numbers</a></h4>

<p><a id="IDX955" name="IDX955"></a> <a id="IDX956"
name="IDX956"></a> <a id="IDX957" name="IDX957"></a> <a id="IDX958"
name="IDX958"></a> <a id="IDX959" name="IDX959"></a></p>

<p>Integers are represented as a sequence of digits. Floats use
<samp>`.'</samp> as a decimal separator. Either type of number may
be preceded by <samp>`-'</samp> to indicate a negative value.</p>

<p>Examples of valid integers:</p>

<pre>
1221
0
-32
</pre>

<p>Examples of valid floating-point numbers:</p>

<pre>
294.42
-32032.6809e+10
148.00
</pre>

<p>An integer may be used in a floating-point context; it is
interpreted as the equivalent floating-point number.</p>

<h4><a id="Hexadecimal_values" name="Hexadecimal_values"
href="manual_toc.html#Hexadecimal_values">6.1.1.3 Hexadecimal
Values</a></h4>

<p><a id="IDX960" name="IDX960"></a></p>

<p>MySQL supports hexadecimal values. In numeric context these act
like an integer (64-bit precision). In string context these act
like a binary string where each pair of hex digits is converted to
a character:</p>

<pre>
mysql&gt; SELECT x'4D7953514C';
         -&gt; MySQL
mysql&gt; SELECT 0xa+0;
         -&gt; 10
mysql&gt; SELECT 0x5061756c;
         -&gt; Paul
</pre>

<p>The <code>x'hexstring'</code> syntax (new in 4.0) is based on
ANSI SQL and the <code>0x</code> syntax is based on ODBC.
Hexadecimal strings are often used by ODBC to supply values for
<code>BLOB</code> columns. You can convert a string or a number to
hexadecimal with the <code>HEX()</code> function.</p>

<h4><a id="NULL_values" name="NULL_values"
href="manual_toc.html#NULL_values">6.1.1.4 <code>NULL</code>
Values</a></h4>

<p><a id="IDX961" name="IDX961"></a></p>

<p>The <code>NULL</code> value means ``no data'' and is different
from values such as <code>0</code> for numeric types or the empty
string for string types. See section <a
href="manual.html#Problems_with_NULL">A.5.3 Problems with
<code>NULL</code> Values</a>.</p>

<p><code>NULL</code> may be represented by <code>\N</code> when
using the text file import or export formats (<code>LOAD DATA
INFILE</code>, <code>SELECT ... INTO OUTFILE</code>). See section
<a href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>.</p>

<h3><a id="Legal_names" name="Legal_names"
href="manual_toc.html#Legal_names">6.1.2 Database, Table, Index,
Column, and Alias Names</a></h3>

<p><a id="IDX962" name="IDX962"></a> <a id="IDX963"
name="IDX963"></a> <a id="IDX964" name="IDX964"></a> <a id="IDX965"
name="IDX965"></a> <a id="IDX966" name="IDX966"></a> <a id="IDX967"
name="IDX967"></a> <a id="IDX968" name="IDX968"></a></p>

<p>Database, table, index, column, and alias names all follow the
same rules in MySQL.</p>

<p><a id="IDX969" name="IDX969"></a> <a id="IDX970"
name="IDX970"></a> <a id="IDX971" name="IDX971"></a> <a id="IDX972"
name="IDX972"></a> Note that the rules changed starting with MySQL
Version 3.23.6 when we introduced quoting of identifiers (database,
table, and column names) with <samp>``'</samp>. <samp>`"'</samp>
will also work to quote identifiers if you run in ANSI mode. See
section <a href="manual.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a>.</p>

<table border="1" width="100%">
<tr>
<td><strong>Identifier</strong></td>
<td><strong>Max length</strong></td>
<td><strong>Allowed characters</strong></td>
</tr>

<tr>
<td>Database</td>
<td>64</td>
<td>Any character that is allowed in a directory name except
<samp>`/'</samp>, <samp>`\'</samp> or <samp>`.'</samp>.</td>
</tr>

<tr>
<td>Table</td>
<td>64</td>
<td>Any character that is allowed in a file name, except
<samp>`/'</samp> or <samp>`.'</samp>.</td>
</tr>

<tr>
<td>Column</td>
<td>64</td>
<td>All characters.</td>
</tr>

<tr>
<td>Alias</td>
<td>255</td>
<td>All characters.</td>
</tr>
</table>

<p>Note that in addition to the above, you can't have ASCII(0) or
ASCII(255) or the quoting character in an identifier.</p>

<p>Note that if the identifier is a restricted word or contains
special characters you must always quote it with a <code>`</code>
(backtick) when you use it:</p>

<pre>
mysql&gt; SELECT * FROM `select` WHERE `select`.id &gt; 100;
</pre>

<p>See section <a href="manual.html#Reserved_words">6.1.7 Is MySQL
Picky About Reserved Words?</a>.</p>

<p>In MySQL versions prior to 3.23.6, the name rules are as
follows:</p>

<ul>
<li>A name may consist of alphanumeric characters from the current
character set and also <samp>`_'</samp> and <samp>`$'</samp>. The
default character set is ISO-8859-1 Latin1; this may be changed
with the <code>--default-character-set</code> option to
<code>mysqld</code>. See section <a
href="manual.html#Character_sets">4.6.1 The Character Set Used for
Data and Sorting</a>.</li>

<li>A name may start with any character that is legal in a name. In
particular, a name may start with a digit (this differs from many
other database systems!). However, a name cannot consist
<em>only</em> of digits.</li>

<li>You cannot use the <samp>`.'</samp> character in names because
it is used to extend the format by which you can refer to columns
(see immediately below).</li>
</ul>

<p>It is recommended that you do not use names like
<code>1e</code>, because an expression like <code>1e+1</code> is
ambiguous. It may be interpreted as the expression <code>1e +
1</code> or as the number <code>1e+1</code>.</p>

<p>In MySQL you can refer to a column using any of the following
forms:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column reference</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>col_name</code></td>
<td>Column <code>col_name</code> from whichever table used in the
query contains a column of that name.</td>
</tr>

<tr>
<td><code>tbl_name.col_name</code></td>
<td>Column <code>col_name</code> from table <code>tbl_name</code>
of the current database.</td>
</tr>

<tr>
<td><code>db_name.tbl_name.col_name</code></td>
<td>Column <code>col_name</code> from table <code>tbl_name</code>
of the database <code>db_name</code>. This form is available in
MySQL Version 3.22 or later.</td>
</tr>

<tr>
<td><code>`column_name`</code></td>
<td>A column that is a keyword or contains special characters.</td>
</tr>
</table>

<p>You need not specify a <code>tbl_name</code> or
<code>db_name.tbl_name</code> prefix for a column reference in a
statement unless the reference would be ambiguous. For example,
suppose tables <code>t1</code> and <code>t2</code> each contain a
column <code>c</code>, and you retrieve <code>c</code> in a
<code>SELECT</code> statement that uses both <code>t1</code> and
<code>t2</code>. In this case, <code>c</code> is ambiguous because
it is not unique among the tables used in the statement, so you
must indicate which table you mean by writing <code>t1.c</code> or
<code>t2.c</code>. Similarly, if you are retrieving from a table
<code>t</code> in database <code>db1</code> and from a table
<code>t</code> in database <code>db2</code>, you must refer to
columns in those tables as <code>db1.t.col_name</code> and
<code>db2.t.col_name</code>.</p>

<p><a id="IDX973" name="IDX973"></a> <a id="IDX974"
name="IDX974"></a> The syntax <code>.tbl_name</code> means the
table <code>tbl_name</code> in the current database. This syntax is
accepted for ODBC compatibility, because some ODBC programs prefix
table names with a <samp>`.'</samp> character.</p>

<h3><a id="Name_case_sensitivity" name="Name_case_sensitivity"
href="manual_toc.html#Name_case_sensitivity">6.1.3 Case Sensitivity
in Names</a></h3>

<p><a id="IDX975" name="IDX975"></a> <a id="IDX976"
name="IDX976"></a> <a id="IDX977" name="IDX977"></a> <a id="IDX978"
name="IDX978"></a> <a id="IDX979" name="IDX979"></a> <a id="IDX980"
name="IDX980"></a></p>

<p>In MySQL, databases and tables correspond to directories and
files within those directories. Consequently, the case-sensitivity
of the underlying operating system determines the case-sensitivity
of database and table names. This means database and table names
are case-insensitive in Windows, and case-sensitive in most
varieties of Unix (Mac OS X being an exception). See section <a
href="manual.html#Extensions_to_ANSI">1.7.3 MySQL Extensions to
ANSI SQL92</a>.</p>

<p><strong>Note</strong>: although database and table names are
case-insensitive for Windows, you should not refer to a given
database or table using different cases within the same query. The
following query would not work because it refers to a table both as
<code>my_table</code> and as <code>MY_TABLE</code>:</p>

<pre>
mysql&gt; SELECT * FROM my_table WHERE MY_TABLE.col=1;
</pre>

<p>Column names and column aliases are case-insensitive in all
cases.</p>

<p>Aliases on tables are case-sensitive. The following query would
not work because it refers to the alias both as <code>a</code> and
as <code>A</code>:</p>

<pre>
mysql&gt; SELECT col_name FROM tbl_name AS a
    -&gt;                 WHERE a.col_name = 1 OR A.col_name = 2;
</pre>

<p>If you have trouble remembering the lettercase for database and
table names, adopt a consistent convention, such as always creating
databases and tables using lowercase names.</p>

<p>One way to avoid this problem is to start <code>mysqld</code>
with <code>-O lower_case_table_names=1</code>. By default this
option is 1 on Windows and 0 on Unix.</p>

<p>If <code>lower_case_table_names</code> is 1 MySQL will convert
all table names to lowercase on storage and lookup. (From version
4.0.2, this option also applies to database names.) Note that if
you change this option, you need to first convert your old table
names to lower case before starting <code>mysqld</code>.</p>

<p>If you move <code>MyISAM</code> files from a Windows to a Unix
disk, you may in some cases need to use the
<tt>`mysql_fix_extensions'</tt> tool to fix-up the case of the file
extensions in each specified database directory (lowercase
<tt>`.frm'</tt>, uppercase <tt>`.MYI'</tt> and <tt>`.MYD'</tt>).
<tt>`mysql_fix_extensions'</tt> can be found in the
<tt>`script'</tt> subdirectory.</p>

<h3><a id="Variables" name="Variables"
href="manual_toc.html#Variables">6.1.4 User Variables</a></h3>

<p><a id="IDX981" name="IDX981"></a> <a id="IDX982"
name="IDX982"></a> <a id="IDX983" name="IDX983"></a></p>

<p>MySQL supports connection-specific user variables with the
<code>@variablename</code> syntax. A variable name may consist of
alphanumeric characters from the current character set and also
<samp>`_'</samp>, <samp>`$'</samp>, and <samp>`.'</samp> . The
default character set is ISO-8859-1 Latin1; this may be changed
with the <code>--default-character-set</code> option to
<code>mysqld</code>. See section <a
href="manual.html#Character_sets">4.6.1 The Character Set Used for
Data and Sorting</a>.</p>

<p>Variables don't have to be initialised. They contain
<code>NULL</code> by default and can store an integer, real, or
string value. All variables for a thread are automatically freed
when the thread exits.</p>

<p>You can set a variable with the <code>SET</code> syntax:</p>

<pre>
SET @variable= { integer expression | real expression | string expression }
[,@variable= ...].
</pre>

<p>You can also assign a value to a variable in statements other
than <code>SET</code>. However, in this case the assignment
operator is <code>:=</code> rather than <code>=</code>, because
<code>=</code> is reserved for comparisons in non-<code>SET</code>
statements:</p>

<pre>
mysql&gt; SELECT @t1:=(@t2:=1)+@t3:=4,@t1,@t2,@t3;
+----------------------+------+------+------+
| @t1:=(@t2:=1)+@t3:=4 | @t1  | @t2  | @t3  |
+----------------------+------+------+------+
|                    5 |    5 |    1 |    4 |
+----------------------+------+------+------+
</pre>

<p>User variables may be used where expressions are allowed. Note
that this does not currently include contexts where a number is
explicitly required, such as in the <code>LIMIT</code> clause of a
<code>SELECT</code> statement, or the <code>IGNORE number
LINES</code> clause of a <code>LOAD DATA</code> statement.</p>

<p><strong>Note</strong>: in a <code>SELECT</code> statement, each
expression is evaluated only when it's sent to the client. This
means that in the <code>HAVING</code>, <code>GROUP BY</code>, or
<code>ORDER BY</code> clause, you can't refer to an expression that
involves variables that are set in the <code>SELECT</code> part.
For example, the following statement will NOT work as expected:</p>

<pre>
mysql&gt; SELECT (@aa:=id) AS a, (@aa+3) AS b FROM table_name HAVING b=5;
</pre>

<p>The reason is that <code>@aa</code> will not contain the value
of the current row, but the value of <code>id</code> for the
previous accepted row.</p>

<h3><a id="System_Variables" name="System_Variables"
href="manual_toc.html#System_Variables">6.1.5 System
Variables</a></h3>

<p><a id="IDX984" name="IDX984"></a> <a id="IDX985"
name="IDX985"></a></p>

<p>Starting from MySQL 4.0.3 we provide better access to a lot of
system and connection variables. One can change most of them
without having to take down the server.</p>

<p>There are two kind of system variables: Thread-specific (or
connection-specific) variables that are unique to the current
connection and global variables that are used to configure global
events. Global variables also are used to set up the initial values
of the corresponding thread-specific variables for new
connections.</p>

<p>When <code>mysqld</code> starts, all global variables are
initialised from command line arguments and option files. You can
change the value with the <code>SET GLOBAL</code> command. When a
new thread is created, the thread-specific variables are
initialised from the global variables and they will not change even
if you issue a new <code>SET GLOBAL</code> command.</p>

<p>To set the value for a <code>GLOBAL</code> variable, you should
use one of the following syntaxes: (Here we use
<code>sort_buffer_size</code> as an example variable)</p>

<pre>
SET GLOBAL sort_buffer_size=value;
SET @@global.sort_buffer_size=value;
</pre>

<p>To set the value for a <code>SESSION</code> variable, you can
use one of the following syntaxes:</p>

<pre>
SET SESSION sort_buffer_size=value;
SET @@session.sort_buffer_size=value;
SET sort_buffer_size=value;
</pre>

<p>If you don't specify <code>GLOBAL</code> or <code>SESSION</code>
then <code>SESSION</code> is used. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<p><code>LOCAL</code> is a synonym for <code>SESSION</code>.</p>

<p>To retrieve the value for a <code>GLOBAL</code> variable you can
use one of the following commands:</p>

<pre>
SELECT @@global.sort_buffer_size;
SHOW GLOBAL VARIABLES like 'sort_buffer_size';
</pre>

<p>To retrieve the value for a <code>SESSION</code> variable you
can use one of the following commands:</p>

<pre>
SELECT @@session.sort_buffer_size;
SHOW SESSION VARIABLES like 'sort_buffer_size';
</pre>

<p>When you <strong>retrieve</strong> a variable value with the
<code>@@variable_name</code> syntax and you don't specify
<code>GLOBAL</code> or <code>SESSION</code> then MySQL will return
the thread-specific (<code>SESSION</code>) value if it exists. If
not, MySQL will return the global value.</p>

<p>The reason for requiring <code>GLOBAL</code> for setting
<code>GLOBAL</code> only variables but not for retrieving them is
to ensure that we don't later run into problems if we later would
introduce a thread-specific variable with the same name or remove a
thread-specific variable. In this case, you could accidentally
change the state for the server as a whole, rather than just for
your own connection.</p>

<p>The following is a full list of all variables that you change
and retrieve and if you can use <code>GLOBAL</code> or
<code>SESSION</code> with them.</p>

<table border="1" width="100%">
<tr>
<td><strong>Variable name</strong></td>
<td><strong>Value type</strong></td>
<td><strong>Type</strong></td>
</tr>

<tr>
<td>autocommit</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>big_tables</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>binlog_cache_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>bulk_insert_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>concurrent_insert</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>connect_timeout</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>convert_character_set</td>
<td>string</td>
<td>SESSION</td>
</tr>

<tr>
<td>delay_key_write</td>
<td>OFF | ON | ALL</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>delayed_insert_limit</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>delayed_insert_timeout</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>delayed_queue_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>error_count</td>
<td>num</td>
<td>LOCAL</td>
</tr>

<tr>
<td>flush</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>flush_time</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>foreign_key_checks</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>identity</td>
<td>num</td>
<td>SESSION</td>
</tr>

<tr>
<td>insert_id</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>interactive_timeout</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>join_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>key_buffer_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>last_insert_id</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>local_infile</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>log_warnings</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>long_query_time</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>low_priority_updates</td>
<td>bool</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_allowed_packet</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_binlog_cache_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_binlog_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_connect_errors</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_connections</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_error_count</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_delayed_threads</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_heap_table_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_join_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_sort_length</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>max_tmp_tables</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_user_connections</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>max_write_lock_count</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>myisam_max_extra_sort_file_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>myisam_max_sort_file_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>myisam_sort_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>net_buffer_length</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>net_read_timeout</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>net_retry_count</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>net_write_timeout</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>query_cache_limit</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>query_cache_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>query_cache_type</td>
<td>enum</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>read_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>read_rnd_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>rpl_recovery_rank</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>safe_show_database</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>server_id</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>slave_compressed_protocol</td>
<td>bool</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>slave_net_timeout</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>slow_launch_time</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>sort_buffer_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>sql_auto_is_null</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_big_selects</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_big_tables</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_buffer_result</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_log_binlog</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_log_off</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_log_update</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_low_priority_updates</td>
<td>bool</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>sql_max_join_size</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>sql_quote_show_create</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_safe_updates</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_select_limit</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>sql_slave_skip_counter</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>sql_warnings</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>table_cache</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>table_type</td>
<td>enum</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>thread_cache_size</td>
<td>num</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>timestamp</td>
<td>bool</td>
<td>SESSION</td>
</tr>

<tr>
<td>tmp_table_size</td>
<td>enum</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>tx_isolation</td>
<td>enum</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>version</td>
<td>string</td>
<td>GLOBAL</td>
</tr>

<tr>
<td>wait_timeout</td>
<td>num</td>
<td>GLOBAL | SESSION</td>
</tr>

<tr>
<td>warning_count</td>
<td>num</td>
<td>LOCAL</td>
</tr>

<tr>
<td>unique_checks</td>
<td>bool</td>
<td>SESSION</td>
</tr>
</table>

<p>Variables that are marked with <code>num</code> can be given a
numerical value. Variables that are marked with <code>bool</code>
can be set to 0, 1, <code>ON</code> or <code>OFF</code>. Variables
that are of type <code>enum</code> should normally be set to one of
the available values for the variable, but can also be set to the
number that correspond to the enum value. (The first enum value is
0).</p>

<p>Here is a description of some of the variables:</p>

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>identity</td>
<td>Alias for last_insert_id (Sybase compatiblity)</td>
</tr>

<tr>
<td>sql_low_priority_updates</td>
<td>Alias for low_priority_updates</td>
</tr>

<tr>
<td>sql_max_join_size</td>
<td>Alias for max_join_size</td>
</tr>

<tr>
<td>delay_key_write_for_all_tables</td>
<td>If this and delay_key_write are set, then all new MyISAM tables
that are opened will use delayed key writes.</td>
</tr>

<tr>
<td>version</td>
<td>Alias for VERSION() (Sybase (?) compatability)</td>
</tr>
</table>

<p>A description of the other variable definitions can be found in
the startup options section, the description of <code>SHOW
VARIABLES</code> and in the <code>SET</code> section. See section
<a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<h3><a id="Comments" name="Comments"
href="manual_toc.html#Comments">6.1.6 Comment Syntax</a></h3>

<p><a id="IDX986" name="IDX986"></a></p>

<p><a id="IDX987" name="IDX987"></a></p>

<p>The MySQL server supports the <code># to end of line</code>,
<code>-- to end of line</code> and <code>/* in-line or
multiple-line */</code> comment styles:</p>

<pre>
mysql&gt; SELECT 1+1;     # This comment continues to the end of line
mysql&gt; SELECT 1+1;     -- This comment continues to the end of line
mysql&gt; SELECT 1 /* this is an in-line comment */ + 1;
mysql&gt; SELECT 1+
/*
this is a
multiple-line comment
*/
1;
</pre>

<p>Note that the <code>--</code> (double-dash) comment style
requires you to have at least one space after the second dash!</p>

<p>Although the server understands the comment syntax just
described, there are some limitations on the way that the
<code>mysql</code> client parses <code>/* ... */</code>
comments:</p>

<ul>
<li>Single-quote and double-quote characters are taken to indicate
the beginning of a quoted string, even within a comment. If the
quote is not matched by a second quote within the comment, the
parser doesn't realise the comment has ended. If you are running
<code>mysql</code> interactively, you can tell that it has gotten
confused like this because the prompt changes from
<code>mysql&gt;</code> to <code>'&gt;</code> or
<code>"&gt;</code>.</li>

<li>A semicolon is taken to indicate the end of the current SQL
statement and anything following it to indicate the beginning of
the next statement.</li>
</ul>

<p>These limitations apply both when you run <code>mysql</code>
interactively and when you put commands in a file and tell
<code>mysql</code> to read its input from that file with
<code>mysql &lt; some-file</code>.</p>

<p>MySQL supports the <samp>`--'</samp> ANSI SQL comment style only
if the second dash is followed by a space. See section <a
href="manual.html#ANSI_diff_comments">1.7.4.7 <samp>`--'</samp> as
the Start of a Comment</a>.</p>

<h3><a id="Reserved_words" name="Reserved_words"
href="manual_toc.html#Reserved_words">6.1.7 Is MySQL Picky About
Reserved Words?</a></h3>

<p><a id="IDX988" name="IDX988"></a> <a id="IDX989"
name="IDX989"></a></p>

<p>A common problem stems from trying to create a table with column
names that use the names of datatypes or functions built into
MySQL, such as <code>TIMESTAMP</code> or <code>GROUP</code>. You're
allowed to do it (for example, <code>ABS</code> is an allowed
column name), but whitespace is not allowed between a function name
and the immediately following <samp>`('</samp> when using functions
whose names are also column names.</p>

<p>The following words are explicitly reserved in MySQL. Most of
them are forbidden by ANSI SQL92 as column and/or table names (for
example, <code>GROUP</code>). A few are reserved because MySQL
needs them and is (currently) using a <code>yacc</code> parser:</p>

<table border="1" width="100%">
<tr>
<td><strong>Word</strong></td>
<td><strong>Word</strong></td>
<td><strong>Word</strong></td>
</tr>

<tr>
<td><code>ADD</code></td>
<td><code>ALL</code></td>
<td><code>ALTER</code></td>
</tr>

<tr>
<td><code>ANALYZE</code></td>
<td><code>AND</code></td>
<td><code>AS</code></td>
</tr>

<tr>
<td><code>ASC</code></td>
<td><code>AUTO_INCREMENT</code></td>
<td><code>BDB</code></td>
</tr>

<tr>
<td><code>BERKELEYDB</code></td>
<td><code>BETWEEN</code></td>
<td><code>BIGINT</code></td>
</tr>

<tr>
<td><code>BINARY</code></td>
<td><code>BLOB</code></td>
<td><code>BOTH</code></td>
</tr>

<tr>
<td><code>BTREE</code></td>
<td><code>BY</code></td>
<td><code>CASCADE</code></td>
</tr>

<tr>
<td><code>CASE</code></td>
<td><code>CHANGE</code></td>
<td><code>CHAR</code></td>
</tr>

<tr>
<td><code>CHARACTER</code></td>
<td><code>CHECK</code></td>
<td><code>COLLATE</code></td>
</tr>

<tr>
<td><code>COLUMN</code></td>
<td><code>COLUMNS</code></td>
<td><code>CONSTRAINT</code></td>
</tr>

<tr>
<td><code>CREATE</code></td>
<td><code>CROSS</code></td>
<td><code>CURRENT_DATE</code></td>
</tr>

<tr>
<td><code>CURRENT_TIME</code></td>
<td><code>CURRENT_TIMESTAMP</code></td>
<td><code>DATABASE</code></td>
</tr>

<tr>
<td><code>DATABASES</code></td>
<td><code>DAY_HOUR</code></td>
<td><code>DAY_MINUTE</code></td>
</tr>

<tr>
<td><code>DAY_SECOND</code></td>
<td><code>DEC</code></td>
<td><code>DECIMAL</code></td>
</tr>

<tr>
<td><code>DEFAULT</code></td>
<td><code>DELAYED</code></td>
<td><code>DELETE</code></td>
</tr>

<tr>
<td><code>DESC</code></td>
<td><code>DESCRIBE</code></td>
<td><code>DISTINCT</code></td>
</tr>

<tr>
<td><code>DISTINCTROW</code></td>
<td><code>DIV</code></td>
<td><code>DOUBLE</code></td>
</tr>

<tr>
<td><code>DROP</code></td>
<td><code>ELSE</code></td>
<td><code>ENCLOSED</code></td>
</tr>

<tr>
<td><code>ERRORS</code></td>
<td><code>ESCAPED</code></td>
<td><code>EXISTS</code></td>
</tr>

<tr>
<td><code>EXPLAIN</code></td>
<td><code>FALSE</code></td>
<td><code>FIELDS</code></td>
</tr>

<tr>
<td><code>FLOAT</code></td>
<td><code>FOR</code></td>
<td><code>FORCE</code></td>
</tr>

<tr>
<td><code>FOREIGN</code></td>
<td><code>FROM</code></td>
<td><code>FULLTEXT</code></td>
</tr>

<tr>
<td><code>FUNCTION</code></td>
<td><code>GEOMETRY</code></td>
<td><code>GRANT</code></td>
</tr>

<tr>
<td><code>GROUP</code></td>
<td><code>HASH</code></td>
<td><code>HAVING</code></td>
</tr>

<tr>
<td><code>HELP</code></td>
<td><code>HIGH_PRIORITY</code></td>
<td><code>HOUR_MINUTE</code></td>
</tr>

<tr>
<td><code>HOUR_SECOND</code></td>
<td><code>IF</code></td>
<td><code>IGNORE</code></td>
</tr>

<tr>
<td><code>IN</code></td>
<td><code>INDEX</code></td>
<td><code>INFILE</code></td>
</tr>

<tr>
<td><code>INNER</code></td>
<td><code>INNODB</code></td>
<td><code>INSERT</code></td>
</tr>

<tr>
<td><code>INT</code></td>
<td><code>INTEGER</code></td>
<td><code>INTERVAL</code></td>
</tr>

<tr>
<td><code>INTO</code></td>
<td><code>IS</code></td>
<td><code>JOIN</code></td>
</tr>

<tr>
<td><code>KEY</code></td>
<td><code>KEYS</code></td>
<td><code>KILL</code></td>
</tr>

<tr>
<td><code>LEADING</code></td>
<td><code>LEFT</code></td>
<td><code>LIKE</code></td>
</tr>

<tr>
<td><code>LIMIT</code></td>
<td><code>LINES</code></td>
<td><code>LOAD</code></td>
</tr>

<tr>
<td><code>LOCALTIME</code></td>
<td><code>LOCALTIMESTAMP</code></td>
<td><code>LOCK</code></td>
</tr>

<tr>
<td><code>LONG</code></td>
<td><code>LONGBLOB</code></td>
<td><code>LONGTEXT</code></td>
</tr>

<tr>
<td><code>LOW_PRIORITY</code></td>
<td><code>MASTER_SERVER_ID</code></td>
<td><code>MATCH</code></td>
</tr>

<tr>
<td><code>MEDIUMBLOB</code></td>
<td><code>MEDIUMINT</code></td>
<td><code>MEDIUMTEXT</code></td>
</tr>

<tr>
<td><code>MIDDLEINT</code></td>
<td><code>MINUTE_SECOND</code></td>
<td><code>MOD</code></td>
</tr>

<tr>
<td><code>MRG_MYISAM</code></td>
<td><code>NATURAL</code></td>
<td><code>NOT</code></td>
</tr>

<tr>
<td><code>NULL</code></td>
<td><code>NUMERIC</code></td>
<td><code>ON</code></td>
</tr>

<tr>
<td><code>OPTIMIZE</code></td>
<td><code>OPTION</code></td>
<td><code>OPTIONALLY</code></td>
</tr>

<tr>
<td><code>OR</code></td>
<td><code>ORDER</code></td>
<td><code>OUTER</code></td>
</tr>

<tr>
<td><code>OUTFILE</code></td>
<td><code>PRECISION</code></td>
<td><code>PRIMARY</code></td>
</tr>

<tr>
<td><code>PRIVILEGES</code></td>
<td><code>PROCEDURE</code></td>
<td><code>PURGE</code></td>
</tr>

<tr>
<td><code>READ</code></td>
<td><code>REAL</code></td>
<td><code>REFERENCES</code></td>
</tr>

<tr>
<td><code>REGEXP</code></td>
<td><code>RENAME</code></td>
<td><code>REPLACE</code></td>
</tr>

<tr>
<td><code>REQUIRE</code></td>
<td><code>RESTRICT</code></td>
<td><code>RETURNS</code></td>
</tr>

<tr>
<td><code>REVOKE</code></td>
<td><code>RIGHT</code></td>
<td><code>RLIKE</code></td>
</tr>

<tr>
<td><code>RTREE</code></td>
<td><code>SELECT</code></td>
<td><code>SET</code></td>
</tr>

<tr>
<td><code>SHOW</code></td>
<td><code>SMALLINT</code></td>
<td><code>SOME</code></td>
</tr>

<tr>
<td><code>SONAME</code></td>
<td><code>SPATIAL</code></td>
<td><code>SQL_BIG_RESULT</code></td>
</tr>

<tr>
<td><code>SQL_CALC_FOUND_ROWS</code></td>
<td><code>SQL_SMALL_RESULT</code></td>
<td><code>SSL</code></td>
</tr>

<tr>
<td><code>STARTING</code></td>
<td><code>STRAIGHT_JOIN</code></td>
<td><code>STRIPED</code></td>
</tr>

<tr>
<td><code>TABLE</code></td>
<td><code>TABLES</code></td>
<td><code>TERMINATED</code></td>
</tr>

<tr>
<td><code>THEN</code></td>
<td><code>TINYBLOB</code></td>
<td><code>TINYINT</code></td>
</tr>

<tr>
<td><code>TINYTEXT</code></td>
<td><code>TO</code></td>
<td><code>TRAILING</code></td>
</tr>

<tr>
<td><code>TRUE</code></td>
<td><code>TYPES</code></td>
<td><code>UNION</code></td>
</tr>

<tr>
<td><code>UNIQUE</code></td>
<td><code>UNLOCK</code></td>
<td><code>UNSIGNED</code></td>
</tr>

<tr>
<td><code>UPDATE</code></td>
<td><code>USAGE</code></td>
<td><code>USE</code></td>
</tr>

<tr>
<td><code>USER_RESOURCES</code></td>
<td><code>USING</code></td>
<td><code>VALUES</code></td>
</tr>

<tr>
<td><code>VARBINARY</code></td>
<td><code>VARCHAR</code></td>
<td><code>VARCHARACTER</code></td>
</tr>

<tr>
<td><code>VARYING</code></td>
<td><code>WARNINGS</code></td>
<td><code>WHEN</code></td>
</tr>

<tr>
<td><code>WHERE</code></td>
<td><code>WITH</code></td>
<td><code>WRITE</code></td>
</tr>

<tr>
<td><code>XOR</code></td>
<td><code>YEAR_MONTH</code></td>
<td><code>ZEROFILL</code></td>
</tr>
</table>

<p>The following symbols (from the table above) are disallowed by
ANSI SQL but allowed by MySQL as column/table names. This is
because some of these names are very natural names and a lot of
people have already used them.</p>

<ul>
<li><code>ACTION</code></li>

<li><code>BIT</code></li>

<li><code>DATE</code></li>

<li><code>ENUM</code></li>

<li><code>NO</code></li>

<li><code>TEXT</code></li>

<li><code>TIME</code></li>

<li><code>TIMESTAMP</code></li>
</ul>

<h2><a id="Column_types" name="Column_types"
href="manual_toc.html#Column_types">6.2 Column Types</a></h2>

<p><a id="IDX990" name="IDX990"></a> <a id="IDX991"
name="IDX991"></a></p>

<p>MySQL supports a number of column types, which may be grouped
into three categories: numeric types, date and time types, and
string (character) types. This section first gives an overview of
the types available and summarises the storage requirements for
each column type, then provides a more detailed description of the
properties of the types in each category. The overview is
intentionally brief. The more detailed descriptions should be
consulted for additional information about particular column types,
such as the allowable formats in which you can specify values.</p>

<p>The column types supported by MySQL are listed below. The
following code letters are used in the descriptions:</p>

<p><a id="IDX992" name="IDX992"></a> <a id="IDX993"
name="IDX993"></a> <a id="IDX994" name="IDX994"></a> <a id="IDX995"
name="IDX995"></a> <a id="IDX996" name="IDX996"></a> <a id="IDX997"
name="IDX997"></a></p>

<dl compact="compact">
<dt><code>M</code></dt>

<dd>Indicates the maximum display size. The maximum legal display
size is 255.</dd>

<dt><code>D</code></dt>

<dd>Applies to floating-point types and indicates the number of
digits following the decimal point. The maximum possible value is
30, but should be no greater than <code>M</code>-2.</dd>
</dl>

<p>Square brackets (<samp>`['</samp> and <samp>`]'</samp>) indicate
parts of type specifiers that are optional.</p>

<p><a id="IDX998" name="IDX998"></a></p>

<p>Note that if you specify <code>ZEROFILL</code> for a column,
MySQL will automatically add the <code>UNSIGNED</code> attribute to
the column.</p>

<p><strong>Warning</strong>: you should be aware that when you use
subtraction between integer values where one is of type
<code>UNSIGNED</code>, the result will be unsigned! See section <a
href="manual.html#Cast_Functions">6.3.5 Cast Functions</a>.</p>

<dl compact="compact">
<dt><code>TINYINT[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd><a id="IDX999" name="IDX999"></a> A very small integer. The
signed range is <code>-128</code> to <code>127</code>. The unsigned
range is <code>0</code> to <code>255</code>. <a id="IDX1000"
name="IDX1000"></a> <a id="IDX1001" name="IDX1001"></a></dd>

<dt><code>BIT</code></dt>

<dt><code>BOOL</code></dt>

<dd>These are synonyms for <code>TINYINT(1)</code>. <a id="IDX1002"
name="IDX1002"></a></dd>

<dt><code>SMALLINT[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A small integer. The signed range is <code>-32768</code> to
<code>32767</code>. The unsigned range is <code>0</code> to
<code>65535</code>. <a id="IDX1003" name="IDX1003"></a></dd>

<dt><code>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A medium-size integer. The signed range is
<code>-8388608</code> to <code>8388607</code>. The unsigned range
is <code>0</code> to <code>16777215</code>. <a id="IDX1004"
name="IDX1004"></a></dd>

<dt><code>INT[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A normal-size integer. The signed range is
<code>-2147483648</code> to <code>2147483647</code>. The unsigned
range is <code>0</code> to <code>4294967295</code>. <a id="IDX1005"
name="IDX1005"></a></dd>

<dt><code>INTEGER[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>This is a synonym for <code>INT</code>. <a id="IDX1006"
name="IDX1006"></a></dd>

<dt><code>BIGINT[(M)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A large integer. The signed range is
<code>-9223372036854775808</code> to
<code>9223372036854775807</code>. The unsigned range is
<code>0</code> to <code>18446744073709551615</code>. Some things
you should be aware of with respect to <code>BIGINT</code> columns:


<ul>
<li><a id="IDX1007" name="IDX1007"></a> All arithmetic is done
using signed <code>BIGINT</code> or <code>DOUBLE</code> values, so
you shouldn't use unsigned big integers larger than
<code>9223372036854775807</code> (63 bits) except with bit
functions! If you do that, some of the last digits in the result
may be wrong because of rounding errors when converting the
<code>BIGINT</code> to a <code>DOUBLE</code>. MySQL 4.0 can handle
<code>BIGINT</code> in the following cases: 

<ul>
<li>Use integers to store big unsigned values in a
<code>BIGINT</code> column.</li>

<li>In <code>MIN(big_int_column)</code> and
<code>MAX(big_int_column)</code>.</li>

<li>When using operators (<code>+</code>, <code>-</code>,
<code>*</code>, etc.) where both operands are integers.</li>
</ul>
</li>

<li>You can always store an exact integer value in a
<code>BIGINT</code> column by storing it as a string. In this case,
MySQL will perform a string-to-number conversion that involves no
intermediate double representation.</li>

<li><samp>`-'</samp>, <samp>`+'</samp>, and <samp>`*'</samp> will
use <code>BIGINT</code> arithmetic when both arguments are integer
values! This means that if you multiply two big integers (or
results from functions that return integers) you may get unexpected
results when the result is larger than
<code>9223372036854775807</code>.</li>
</ul>

<a id="IDX1008" name="IDX1008"></a> <a id="IDX1009"
name="IDX1009"></a> <a id="IDX1010" name="IDX1010"></a></dd>

<dt><code>FLOAT(precision) [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A floating-point number. <code>precision</code> can be
<code>&lt;=24</code> for a single-precision floating-point number
and between 25 and 53 for a double-precision floating-point number.
These types are like the <code>FLOAT</code> and <code>DOUBLE</code>
types described immediately below. <code>FLOAT(X)</code> has the
same range as the corresponding <code>FLOAT</code> and
<code>DOUBLE</code> types, but the display size and number of
decimals are undefined. In MySQL Version 3.23, this is a true
floating-point value. In earlier MySQL versions,
<code>FLOAT(precision)</code> always has 2 decimals. Note that
using <code>FLOAT</code> may give you some unexpected problems as
all calculations in MySQL are done with double precision. See
section <a href="manual.html#No_matching_rows">A.5.6 Solving
Problems with No Matching Rows</a>. <a id="IDX1011"
name="IDX1011"></a> <a id="IDX1012" name="IDX1012"></a> This syntax
is provided for ODBC compatibility. <a id="IDX1013"
name="IDX1013"></a> <a id="IDX1014" name="IDX1014"></a></dd>

<dt><code>FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A small (single-precision) floating-point number. Allowable
values are <code>-3.402823466E+38</code> to
<code>-1.175494351E-38</code>, <code>0</code>, and
<code>1.175494351E-38</code> to <code>3.402823466E+38</code>. If
<code>UNSIGNED</code> is specified, negative values are disallowed.
The <code>M</code> is the display width and <code>D</code> is the
number of decimals. <code>FLOAT</code> without arguments or
<code>FLOAT(X)</code> where <code>X</code> &lt;= 24 stands for a
single-precision floating-point number. <a id="IDX1015"
name="IDX1015"></a> <a id="IDX1016" name="IDX1016"></a></dd>

<dt><code>DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>A normal-size (double-precision) floating-point number.
Allowable values are <code>-1.7976931348623157E+308</code> to
<code>-2.2250738585072014E-308</code>, <code>0</code>, and
<code>2.2250738585072014E-308</code> to
<code>1.7976931348623157E+308</code>. If <code>UNSIGNED</code> is
specified, negative values are disallowed. The <code>M</code> is
the display width and <code>D</code> is the number of decimals.
<code>DOUBLE</code> without arguments or <code>FLOAT(X)</code>
where 25 &lt;= <code>X</code> &lt;= 53 stands for a
double-precision floating-point number. <a id="IDX1017"
name="IDX1017"></a> <a id="IDX1018" name="IDX1018"></a></dd>

<dt><code>DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL]</code></dt>

<dt><code>REAL[(M,D)] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>These are synonyms for <code>DOUBLE</code>. <a id="IDX1019"
name="IDX1019"></a></dd>

<dt><code>DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>An unpacked floating-point number. Behaves like a
<code>CHAR</code> column: ``unpacked'' means the number is stored
as a string, using one character for each digit of the value. The
decimal point and, for negative numbers, the <samp>`-'</samp> sign,
are not counted in <code>M</code> (but space for these is
reserved). If <code>D</code> is 0, values will have no decimal
point or fractional part. The maximum range of <code>DECIMAL</code>
values is the same as for <code>DOUBLE</code>, but the actual range
for a given <code>DECIMAL</code> column may be constrained by the
choice of <code>M</code> and <code>D</code>. If
<code>UNSIGNED</code> is specified, negative values are disallowed.
If <code>D</code> is omitted, the default is 0. If <code>M</code>
is omitted, the default is 10. Prior to MySQL Version 3.23, the
<code>M</code> argument must include the space needed for the sign
and the decimal point. <a id="IDX1020" name="IDX1020"></a> <a
id="IDX1021" name="IDX1021"></a></dd>

<dt><code>DEC[(M[,D])] [UNSIGNED] [ZEROFILL]</code></dt>

<dt><code>NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL]</code></dt>

<dd>These are synonyms for <code>DECIMAL</code>. <a id="IDX1022"
name="IDX1022"></a></dd>

<dt><code>DATE</code></dt>

<dd>A date. The supported range is <code>'1000-01-01'</code> to
<code>'9999-12-31'</code>. MySQL displays <code>DATE</code> values
in <code>'YYYY-MM-DD'</code> format, but allows you to assign
values to <code>DATE</code> columns using either strings or
numbers. See section <a href="manual.html#DATETIME">6.2.2.2 The
<code>DATETIME</code>, <code>DATE</code>, and
<code>TIMESTAMP</code> Types</a>. <a id="IDX1023"
name="IDX1023"></a></dd>

<dt><code>DATETIME</code></dt>

<dd>A date and time combination. The supported range is
<code>'1000-01-01 00:00:00'</code> to <code>'9999-12-31
23:59:59'</code>. MySQL displays <code>DATETIME</code> values in
<code>'YYYY-MM-DD HH:MM:SS'</code> format, but allows you to assign
values to <code>DATETIME</code> columns using either strings or
numbers. See section <a href="manual.html#DATETIME">6.2.2.2 The
<code>DATETIME</code>, <code>DATE</code>, and
<code>TIMESTAMP</code> Types</a>. <a id="IDX1024"
name="IDX1024"></a></dd>

<dt><code>TIMESTAMP[(M)]</code></dt>

<dd>A timestamp. The range is <code>'1970-01-01 00:00:00'</code> to
sometime in the year <code>2037</code>. MySQL displays
<code>TIMESTAMP</code> values in <code>YYYYMMDDHHMMSS</code>,
<code>YYMMDDHHMMSS</code>, <code>YYYYMMDD</code>, or
<code>YYMMDD</code> format, depending on whether <code>M</code> is
<code>14</code> (or missing), <code>12</code>, <code>8</code>, or
<code>6</code>, but allows you to assign values to
<code>TIMESTAMP</code> columns using either strings or numbers. A
<code>TIMESTAMP</code> column is useful for recording the date and
time of an <code>INSERT</code> or <code>UPDATE</code> operation
because it is automatically set to the date and time of the most
recent operation if you don't give it a value yourself. You can
also set it to the current date and time by assigning it a
<code>NULL</code> value. See section <a
href="manual.html#Date_and_time_types">6.2.2 Date and Time
Types</a>. The <code>M</code> argument affects only how a
<code>TIMESTAMP</code> column is displayed; its values always are
stored using 4 bytes each. Note that <code>TIMESTAMP(M)</code>
columns where <code>M</code> is 8 or 14 are reported to be numbers
while other <code>TIMESTAMP(M)</code> columns are reported to be
strings. This is just to ensure that one can reliably dump and
restore the table with these types! See section <a
href="manual.html#DATETIME">6.2.2.2 The <code>DATETIME</code>,
<code>DATE</code>, and <code>TIMESTAMP</code> Types</a>. <a
id="IDX1025" name="IDX1025"></a></dd>

<dt><code>TIME</code></dt>

<dd>A time. The range is <code>'-838:59:59'</code> to
<code>'838:59:59'</code>. MySQL displays <code>TIME</code> values
in <code>'HH:MM:SS'</code> format, but allows you to assign values
to <code>TIME</code> columns using either strings or numbers. See
section <a href="manual.html#TIME">6.2.2.3 The <code>TIME</code>
Type</a>. <a id="IDX1026" name="IDX1026"></a></dd>

<dt><code>YEAR[(2|4)]</code></dt>

<dd>A year in 2- or 4-digit format (default is 4-digit). The
allowable values are <code>1901</code> to <code>2155</code>,
<code>0000</code> in the 4-digit year format, and 1970-2069 if you
use the 2-digit format (70-69). MySQL displays <code>YEAR</code>
values in <code>YYYY</code> format, but allows you to assign values
to <code>YEAR</code> columns using either strings or numbers. (The
<code>YEAR</code> type is unavailable prior to MySQL Version 3.22.)
See section <a href="manual.html#YEAR">6.2.2.4 The
<code>YEAR</code> Type</a>. <a id="IDX1027" name="IDX1027"></a> <a
id="IDX1028" name="IDX1028"></a> <a id="IDX1029"
name="IDX1029"></a> <a id="IDX1030" name="IDX1030"></a></dd>

<dt><code>[NATIONAL] CHAR(M) [BINARY]</code></dt>

<dd>A fixed-length string that is always right-padded with spaces
to the specified length when stored. The range of <code>M</code> is
0 to 255 characters (1 to 255 prior to MySQL Version 3.23).
Trailing spaces are removed when the value is retrieved.
<code>CHAR</code> values are sorted and compared in
case-insensitive fashion according to the default character set
unless the <code>BINARY</code> keyword is given. <code>NATIONAL
CHAR</code> (or its equivalent short form, <code>NCHAR</code>) is
the ANSI SQL way to define that a <code>CHAR</code> column should
use the default CHARACTER set. This is the default in MySQL.
<code>CHAR</code> is a shorthand for <code>CHARACTER</code>. MySQL
allows you to create a column of type <code>CHAR(0)</code>. This is
mainly useful when you have to be compliant with some old
applications that depend on the existence of a column but that do
not actually use the value. This is also quite nice when you need a
column that only can take 2 values: A <code>CHAR(0)</code>, that is
not defined as <code>NOT NULL</code>, will occupy only one bit and
can take only 2 values: <code>NULL</code> or <code>""</code>. See
section <a href="manual.html#CHAR">6.2.3.1 The <code>CHAR</code>
and <code>VARCHAR</code> Types</a>.</dd>

<dt><code>CHAR</code></dt>

<dd>This is a synonym for <code>CHAR(1)</code>. <a id="IDX1031"
name="IDX1031"></a> <a id="IDX1032" name="IDX1032"></a> <a
id="IDX1033" name="IDX1033"></a></dd>

<dt><code>[NATIONAL] VARCHAR(M) [BINARY]</code></dt>

<dd>A variable-length string. <strong>Note</strong>: trailing
spaces are removed when the value is stored (this differs from the
ANSI SQL specification). The range of <code>M</code> is 0 to 255
characters (1 to 255 prior to MySQL Version 4.0.2).
<code>VARCHAR</code> values are sorted and compared in
case-insensitive fashion unless the <code>BINARY</code> keyword is
given. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. <code>VARCHAR</code> is a shorthand for
<code>CHARACTER VARYING</code>. See section <a
href="manual.html#CHAR">6.2.3.1 The <code>CHAR</code> and
<code>VARCHAR</code> Types</a>. <a id="IDX1034" name="IDX1034"></a>
<a id="IDX1035" name="IDX1035"></a></dd>

<dt><code>TINYBLOB</code></dt>

<dt><code>TINYTEXT</code></dt>

<dd>A <code>BLOB</code> or <code>TEXT</code> column with a maximum
length of 255 (2^8 - 1) characters. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. See section <a
href="manual.html#BLOB">6.2.3.2 The <code>BLOB</code> and
<code>TEXT</code> Types</a>. <a id="IDX1036" name="IDX1036"></a> <a
id="IDX1037" name="IDX1037"></a></dd>

<dt><code>BLOB</code></dt>

<dt><code>TEXT</code></dt>

<dd>A <code>BLOB</code> or <code>TEXT</code> column with a maximum
length of 65535 (2^16 - 1) characters. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. See section <a
href="manual.html#BLOB">6.2.3.2 The <code>BLOB</code> and
<code>TEXT</code> Types</a>. <a id="IDX1038" name="IDX1038"></a> <a
id="IDX1039" name="IDX1039"></a></dd>

<dt><code>MEDIUMBLOB</code></dt>

<dt><code>MEDIUMTEXT</code></dt>

<dd>A <code>BLOB</code> or <code>TEXT</code> column with a maximum
length of 16777215 (2^24 - 1) characters. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. See section <a
href="manual.html#BLOB">6.2.3.2 The <code>BLOB</code> and
<code>TEXT</code> Types</a>. <a id="IDX1040" name="IDX1040"></a> <a
id="IDX1041" name="IDX1041"></a></dd>

<dt><code>LONGBLOB</code></dt>

<dt><code>LONGTEXT</code></dt>

<dd>A <code>BLOB</code> or <code>TEXT</code> column with a maximum
length of 4294967295 (2^32 - 1) characters. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. Note that because the server/client
protocol and MyISAM tables has currently a limit of 16M per
communication packet / table row, you can't yet use this the whole
range of this type. See section <a href="manual.html#BLOB">6.2.3.2
The <code>BLOB</code> and <code>TEXT</code> Types</a>. <a
id="IDX1042" name="IDX1042"></a></dd>

<dt><code>ENUM('value1','value2',...)</code></dt>

<dd>An enumeration. A string object that can have only one value,
chosen from the list of values <code>'value1'</code>,
<code>'value2'</code>, <code>...</code>, <code>NULL</code> or the
special <code>""</code> error value. An <code>ENUM</code> can have
a maximum of 65535 distinct values. See section <a
href="manual.html#ENUM">6.2.3.3 The <code>ENUM</code> Type</a>. <a
id="IDX1043" name="IDX1043"></a></dd>

<dt><code>SET('value1','value2',...)</code></dt>

<dd>A set. A string object that can have zero or more values, each
of which must be chosen from the list of values
<code>'value1'</code>, <code>'value2'</code>, <code>...</code> A
<code>SET</code> can have a maximum of 64 members. See section <a
href="manual.html#SET">6.2.3.4 The <code>SET</code> Type</a>.</dd>
</dl>

<h3><a id="Numeric_types" name="Numeric_types"
href="manual_toc.html#Numeric_types">6.2.1 Numeric Types</a></h3>

<p>MySQL supports all of the ANSI/ISO SQL92 numeric types. These
types include the exact numeric data types (<code>NUMERIC</code>,
<code>DECIMAL</code>, <code>INTEGER</code>, and
<code>SMALLINT</code>), as well as the approximate numeric data
types (<code>FLOAT</code>, <code>REAL</code>, and <code>DOUBLE
PRECISION</code>). The keyword <code>INT</code> is a synonym for
<code>INTEGER</code>, and the keyword <code>DEC</code> is a synonym
for <code>DECIMAL</code>.</p>

<p>The <code>NUMERIC</code> and <code>DECIMAL</code> types are
implemented as the same type by MySQL, as permitted by the SQL92
standard. They are used for values for which it is important to
preserve exact precision, for example with monetary data. When
declaring a column of one of these types the precision and scale
can be (and usually is) specified; for example:</p>

<pre>
    salary DECIMAL(5,2)
</pre>

<p>In this example, <code>5</code> (<code>precision</code>)
represents the number of significant decimal digits that will be
stored for values, and <code>2</code> (<code>scale</code>)
represents the number of digits that will be stored following the
decimal point. In this case, therefore, the range of values that
can be stored in the <code>salary</code> column is from
<code>-99.99</code> to <code>99.99</code>. (MySQL can actually
store numbers up to <code>999.99</code> in this column because it
doesn't have to store the sign for positive numbers)</p>

<p>In ANSI/ISO SQL92, the syntax <code>DECIMAL(p)</code> is
equivalent to <code>DECIMAL(p,0)</code>. Similarly, the syntax
<code>DECIMAL</code> is equivalent to <code>DECIMAL(p,0)</code>,
where the implementation is allowed to decide the value of
<code>p</code>. MySQL does not currently support either of these
variant forms of the <code>DECIMAL</code>/<code>NUMERIC</code> data
types. This is not generally a serious problem, as the principal
benefits of these types derive from the ability to control both
precision and scale explicitly.</p>

<p><code>DECIMAL</code> and <code>NUMERIC</code> values are stored
as strings, rather than as binary floating-point numbers, in order
to preserve the decimal precision of those values. One character is
used for each digit of the value, the decimal point (if
<code>scale</code> &gt; 0), and the <samp>`-'</samp> sign (for
negative numbers). If <code>scale</code> is 0, <code>DECIMAL</code>
and <code>NUMERIC</code> values contain no decimal point or
fractional part.</p>

<p>The maximum range of <code>DECIMAL</code> and
<code>NUMERIC</code> values is the same as for <code>DOUBLE</code>,
but the actual range for a given <code>DECIMAL</code> or
<code>NUMERIC</code> column can be constrained by the
<code>precision</code> or <code>scale</code> for a given column.
When such a column is assigned a value with more digits following
the decimal point than are allowed by the specified
<code>scale</code>, the value is rounded to that
<code>scale</code>. When a <code>DECIMAL</code> or
<code>NUMERIC</code> column is assigned a value whose magnitude
exceeds the range implied by the specified (or defaulted)
<code>precision</code> and <code>scale</code>, MySQL stores the
value representing the corresponding end point of that range.</p>

<p>As an extension to the ANSI/ISO SQL92 standard, MySQL also
supports the integer types <code>TINYINT</code>,
<code>MEDIUMINT</code>, and <code>BIGINT</code> as listed in the
tables above. Another extension is supported by MySQL for
optionally specifying the display width of an integer value in
parentheses following the base keyword for the type (for example,
<code>INT(4)</code>). This optional width specification is used to
left-pad the display of values whose width is less than the width
specified for the column, but does not constrain the range of
values that can be stored in the column, nor the number of digits
that will be displayed for values whose width exceeds that
specified for the column. When used in conjunction with the
optional extension attribute <code>ZEROFILL</code>, the default
padding of spaces is replaced with zeroes. For example, for a
column declared as <code>INT(5) ZEROFILL</code>, a value of
<code>4</code> is retrieved as <code>00004</code>. Note that if you
store larger values than the display width in an integer column,
you may experience problems when MySQL generates temporary tables
for some complicated joins, as in these cases MySQL trusts that the
data did fit into the original column width.</p>

<p>All integer types can have an optional (non-standard) attribute
<code>UNSIGNED</code>. Unsigned values can be used when you want to
allow only positive numbers in a column and you need a little
bigger numeric range for the column.</p>

<p>As of MySQL 4.0.2, floating-point types also can be
<code>UNSIGNED</code>. As with integer types, this attribute
prevents negative values from being stored in the column. Unlike
the integer types, the upper range of column values remains the
same.</p>

<p>The <code>FLOAT</code> type is used to represent approximate
numeric data types. The ANSI/ISO SQL92 standard allows an optional
specification of the precision (but not the range of the exponent)
in bits following the keyword <code>FLOAT</code> in parentheses.
The MySQL implementation also supports this optional precision
specification. When the keyword <code>FLOAT</code> is used for a
column type without a precision specification, MySQL uses four
bytes to store the values. A variant syntax is also supported, with
two numbers given in parentheses following the <code>FLOAT</code>
keyword. With this option, the first number continues to represent
the storage requirements for the value in bytes, and the second
number specifies the number of digits to be stored and displayed
following the decimal point (as with <code>DECIMAL</code> and
<code>NUMERIC</code>). When MySQL is asked to store a number for
such a column with more decimal digits following the decimal point
than specified for the column, the value is rounded to eliminate
the extra digits when the value is stored.</p>

<p>The <code>REAL</code> and <code>DOUBLE PRECISION</code> types do
not accept precision specifications. As an extension to the
ANSI/ISO SQL92 standard, MySQL recognises <code>DOUBLE</code> as a
synonym for the <code>DOUBLE PRECISION</code> type. In contrast
with the standard's requirement that the precision for
<code>REAL</code> be smaller than that used for <code>DOUBLE
PRECISION</code>, MySQL implements both as 8-byte double-precision
floating-point values (when not running in ``ANSI mode''). For
maximum portability, code requiring storage of approximate numeric
data values should use <code>FLOAT</code> or <code>DOUBLE
PRECISION</code> with no specification of precision or number of
decimal points.</p>

<p>When asked to store a value in a numeric column that is outside
the column type's allowable range, MySQL clips the value to the
appropriate endpoint of the range and stores the resulting value
instead.</p>

<p>For example, the range of an <code>INT</code> column is
<code>-2147483648</code> to <code>2147483647</code>. If you try to
insert <code>-9999999999</code> into an <code>INT</code> column,
the value is clipped to the lower endpoint of the range, and
<code>-2147483648</code> is stored instead. Similarly, if you try
to insert <code>9999999999</code>, <code>2147483647</code> is
stored instead.</p>

<p>If the <code>INT</code> column is <code>UNSIGNED</code>, the
size of the column's range is the same but its endpoints shift up
to <code>0</code> and <code>4294967295</code>. If you try to store
<code>-9999999999</code> and <code>9999999999</code>, the values
stored in the column become <code>0</code> and
<code>4294967296</code>.</p>

<p>Conversions that occur due to clipping are reported as
``warnings'' for <code>ALTER TABLE</code>, <code>LOAD DATA
INFILE</code>, <code>UPDATE</code>, and multi-row
<code>INSERT</code> statements.</p>

<table border="1" width="100%">
<tr>
<td><strong>Type</strong></td>
<td><strong>Bytes</strong></td>
<td><strong>From</strong></td>
<td><strong>To</strong></td>
</tr>

<tr>
<td><code>TINYINT</code></td>
<td>1</td>
<td>-128</td>
<td>127</td>
</tr>

<tr>
<td><code>SMALLINT</code></td>
<td>2</td>
<td>-32768</td>
<td>32767</td>
</tr>

<tr>
<td><code>MEDIUMINT</code></td>
<td>3</td>
<td>-8388608</td>
<td>8388607</td>
</tr>

<tr>
<td><code>INT</code></td>
<td>4</td>
<td>-2147483648</td>
<td>2147483647</td>
</tr>

<tr>
<td><code>BIGINT</code></td>
<td>8</td>
<td>-9223372036854775808</td>
<td>9223372036854775807</td>
</tr>
</table>

<h3><a id="Date_and_time_types" name="Date_and_time_types"
href="manual_toc.html#Date_and_time_types">6.2.2 Date and Time
Types</a></h3>

<p><a id="IDX1044" name="IDX1044"></a> <a id="IDX1045"
name="IDX1045"></a></p>

<p>The date and time types are <code>DATETIME</code>,
<code>DATE</code>, <code>TIMESTAMP</code>, <code>TIME</code>, and
<code>YEAR</code>. Each of these has a range of legal values, as
well as a ``zero'' value that is used when you specify a really
illegal value. Note that MySQL allows you to store certain 'not
strictly' legal date values, for example <code>1999-11-31</code>.
The reason for this is that we think it's the responsibility of the
application to handle date checking, not the SQL servers. To make
the date checking 'fast', MySQL only checks that the month is in
the range of 0-12 and the day is in the range of 0-31. The above
ranges are defined this way because MySQL allows you to store, in a
<code>DATE</code> or <code>DATETIME</code> column, dates where the
day or month-day is zero. This is extremely useful for applications
that need to store a birth-date for which you don't know the exact
date. In this case you simply store the date like
<code>1999-00-00</code> or <code>1999-01-00</code>. (You cannot
expect to get a correct value from functions like
<code>DATE_SUB()</code> or <code>DATE_ADD</code> for dates like
these.)</p>

<p>Here are some general considerations to keep in mind when
working with date and time types:</p>

<ul>
<li>MySQL retrieves values for a given date or time type in a
standard format, but it attempts to interpret a variety of formats
for values that you supply (for example, when you specify a value
to be assigned to or compared to a date or time type).
Nevertheless, only the formats described in the following sections
are supported. It is expected that you will supply legal values,
and unpredictable results may occur if you use values in other
formats.</li>

<li>Although MySQL tries to interpret values in several formats, it
always expects the year part of date values to be leftmost. Dates
must be given in year-month-day order (for example,
<code>'98-09-04'</code>), rather than in the month-day-year or
day-month-year orders commonly used elsewhere (for example,
<code>'09-04-98'</code>, <code>'04-09-98'</code>).</li>

<li>MySQL automatically converts a date or time type value to a
number if the value is used in a numeric context, and vice
versa.</li>

<li>When MySQL encounters a value for a date or time type that is
out of range or otherwise illegal for the type (see the start of
this section), it converts the value to the ``zero'' value for that
type. (The exception is that out-of-range <code>TIME</code> values
are clipped to the appropriate endpoint of the <code>TIME</code>
range.) The following table shows the format of the ``zero'' value
for each type: 

<table border="1" width="100%">
<tr>
<td><strong>Column type</strong></td>
<td><strong>``Zero'' value</strong></td>
</tr>

<tr>
<td><code>DATETIME</code></td>
<td><code>'0000-00-00 00:00:00'</code></td>
</tr>

<tr>
<td><code>DATE</code></td>
<td><code>'0000-00-00'</code></td>
</tr>

<tr>
<td><code>TIMESTAMP</code></td>
<td><code>00000000000000</code> (length depends on display
size)</td>
</tr>

<tr>
<td><code>TIME</code></td>
<td><code>'00:00:00'</code></td>
</tr>

<tr>
<td><code>YEAR</code></td>
<td><code>0000</code></td>
</tr>
</table>
</li>

<li>The ``zero'' values are special, but you can store or refer to
them explicitly using the values shown in the table. You can also
do this using the values <code>'0'</code> or <code>0</code>, which
are easier to write.</li>

<li>``Zero'' date or time values used through <code>MyODBC</code>
are converted automatically to <code>NULL</code> in
<code>MyODBC</code> Version 2.50.12 and above, because ODBC can't
handle such values.</li>
</ul>

<h4><a id="Y2K_issues" name="Y2K_issues"
href="manual_toc.html#Y2K_issues">6.2.2.1 Y2K Issues and Date
Types</a></h4>

<p><a id="IDX1046" name="IDX1046"></a> <a id="IDX1047"
name="IDX1047"></a></p>

<p>MySQL itself is Y2K-safe (see section <a
href="manual.html#Year_2000_compliance">1.2.5 Year 2000
Compliance</a>), but input values presented to MySQL may not be.
Any input containing 2-digit year values is ambiguous, because the
century is unknown. Such values must be interpreted into 4-digit
form because MySQL stores years internally using four digits.</p>

<p>For <code>DATETIME</code>, <code>DATE</code>,
<code>TIMESTAMP</code>, and <code>YEAR</code> types, MySQL
interprets dates with ambiguous year values using the following
rules:</p>

<ul>
<li>Year values in the range <code>00-69</code> are converted to
<code>2000-2069</code>.</li>

<li>Year values in the range <code>70-99</code> are converted to
<code>1970-1999</code>.</li>
</ul>

<p>Remember that these rules provide only reasonable guesses as to
what your data mean. If the heuristics used by MySQL don't produce
the correct values, you should provide unambiguous input containing
4-digit year values.</p>

<p><code>ORDER BY</code> will sort 2-digit
<code>YEAR/DATE/DATETIME</code> types properly.</p>

<p>Note also that some functions like <code>MIN()</code> and
<code>MAX()</code> will convert a <code>TIMESTAMP/DATE</code> to a
number. This means that a timestamp with a 2-digit year will not
work properly with these functions. The fix in this case is to
convert the <code>TIMESTAMP/DATE</code> to 4-digit year format or
use something like <code>MIN(DATE_ADD(timestamp,INTERVAL 0
DAYS))</code>.</p>

<h4><a id="DATETIME" name="DATETIME"
href="manual_toc.html#DATETIME">6.2.2.2 The <code>DATETIME</code>,
<code>DATE</code>, and <code>TIMESTAMP</code> Types</a></h4>

<p><a id="IDX1048" name="IDX1048"></a> <a id="IDX1049"
name="IDX1049"></a> <a id="IDX1050" name="IDX1050"></a></p>

<p>The <code>DATETIME</code>, <code>DATE</code>, and
<code>TIMESTAMP</code> types are related. This section describes
their characteristics, how they are similar, and how they
differ.</p>

<p>The <code>DATETIME</code> type is used when you need values that
contain both date and time information. MySQL retrieves and
displays <code>DATETIME</code> values in <code>'YYYY-MM-DD
HH:MM:SS'</code> format. The supported range is <code>'1000-01-01
00:00:00'</code> to <code>'9999-12-31 23:59:59'</code>.
(``Supported'' means that although earlier values might work, there
is no guarantee that they will.)</p>

<p>The <code>DATE</code> type is used when you need only a date
value, without a time part. MySQL retrieves and displays
<code>DATE</code> values in <code>'YYYY-MM-DD'</code> format. The
supported range is <code>'1000-01-01'</code> to
<code>'9999-12-31'</code>.</p>

<p>The <code>TIMESTAMP</code> column type provides a type that you
can use to automatically mark <code>INSERT</code> or
<code>UPDATE</code> operations with the current date and time. If
you have multiple <code>TIMESTAMP</code> columns, only the first
one is updated automatically.</p>

<p>Automatic updating of the first <code>TIMESTAMP</code> column
occurs under any of the following conditions:</p>

<ul>
<li>The column is not specified explicitly in an
<code>INSERT</code> or <code>LOAD DATA INFILE</code>
statement.</li>

<li>The column is not specified explicitly in an
<code>UPDATE</code> statement and some other column changes value.
(Note that an <code>UPDATE</code> that sets a column to the value
it already has will not cause the <code>TIMESTAMP</code> column to
be updated, because if you set a column to its current value, MySQL
ignores the update for efficiency.)</li>

<li>You explicitly set the <code>TIMESTAMP</code> column to
<code>NULL</code>.</li>
</ul>

<p><code>TIMESTAMP</code> columns other than the first may also be
set to the current date and time. Just set the column to
<code>NULL</code> or to <code>NOW()</code>.</p>

<p>You can set any <code>TIMESTAMP</code> column to a value
different from the current date and time by setting it explicitly
to the desired value. This is true even for the first
<code>TIMESTAMP</code> column. You can use this property if, for
example, you want a <code>TIMESTAMP</code> to be set to the current
date and time when you create a row, but not to be changed whenever
the row is updated later:</p>

<ul>
<li>Let MySQL set the column when the row is created. This will
initialise it to the current date and time.</li>

<li>When you perform subsequent updates to other columns in the
row, set the <code>TIMESTAMP</code> column explicitly to its
current value.</li>
</ul>

<p>On the other hand, you may find it just as easy to use a
<code>DATETIME</code> column that you initialise to
<code>NOW()</code> when the row is created and leave alone for
subsequent updates.</p>

<p><code>TIMESTAMP</code> values may range from the beginning of
1970 to sometime in the year 2037, with a resolution of one second.
Values are displayed as numbers.</p>

<p>The format in which MySQL retrieves and displays
<code>TIMESTAMP</code> values depends on the display size, as
illustrated by the following table. The `full'
<code>TIMESTAMP</code> format is 14 digits, but
<code>TIMESTAMP</code> columns may be created with shorter display
sizes:</p>

<table border="1" width="100%">
<tr>
<td><strong>Column type</strong></td>
<td><strong>Display format</strong></td>
</tr>

<tr>
<td><code>TIMESTAMP(14)</code></td>
<td><code>YYYYMMDDHHMMSS</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(12)</code></td>
<td><code>YYMMDDHHMMSS</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(10)</code></td>
<td><code>YYMMDDHHMM</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(8)</code></td>
<td><code>YYYYMMDD</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(6)</code></td>
<td><code>YYMMDD</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(4)</code></td>
<td><code>YYMM</code></td>
</tr>

<tr>
<td><code>TIMESTAMP(2)</code></td>
<td><code>YY</code></td>
</tr>
</table>

<p>All <code>TIMESTAMP</code> columns have the same storage size,
regardless of display size. The most common display sizes are 6, 8,
12, and 14. You can specify an arbitrary display size at table
creation time, but values of 0 or greater than 14 are coerced to
14. Odd-valued sizes in the range from 1 to 13 are coerced to the
next higher even number.</p>

<p>You can specify <code>DATETIME</code>, <code>DATE</code>, and
<code>TIMESTAMP</code> values using any of a common set of
formats:</p>

<ul>
<li>As a string in either <code>'YYYY-MM-DD HH:MM:SS'</code> or
<code>'YY-MM-DD HH:MM:SS'</code> format. A ``relaxed'' syntax is
allowed--any punctuation character may be used as the delimiter
between date parts or time parts. For example, <code>'98-12-31
11:30:45'</code>, <code>'98.12.31 11+30+45'</code>, <code>'98/12/31
11*30*45'</code>, and <code>'98@12@31 11^30^45'</code> are
equivalent.</li>

<li>As a string in either <code>'YYYY-MM-DD'</code> or
<code>'YY-MM-DD'</code> format. A ``relaxed'' syntax is allowed
here, too. For example, <code>'98-12-31'</code>,
<code>'98.12.31'</code>, <code>'98/12/31'</code>, and
<code>'98@12@31'</code> are equivalent.</li>

<li>As a string with no delimiters in either
<code>'YYYYMMDDHHMMSS'</code> or <code>'YYMMDDHHMMSS'</code>
format, provided that the string makes sense as a date. For
example, <code>'19970523091528'</code> and
<code>'970523091528'</code> are interpreted as <code>'1997-05-23
09:15:28'</code>, but <code>'971122129015'</code> is illegal (it
has a nonsensical minute part) and becomes <code>'0000-00-00
00:00:00'</code>.</li>

<li>As a string with no delimiters in either
<code>'YYYYMMDD'</code> or <code>'YYMMDD'</code> format, provided
that the string makes sense as a date. For example,
<code>'19970523'</code> and <code>'970523'</code> are interpreted
as <code>'1997-05-23'</code>, but <code>'971332'</code> is illegal
(it has nonsensical month and day parts) and becomes
<code>'0000-00-00'</code>.</li>

<li>As a number in either <code>YYYYMMDDHHMMSS</code> or
<code>YYMMDDHHMMSS</code> format, provided that the number makes
sense as a date. For example, <code>19830905132800</code> and
<code>830905132800</code> are interpreted as <code>'1983-09-05
13:28:00'</code>.</li>

<li>As a number in either <code>YYYYMMDD</code> or
<code>YYMMDD</code> format, provided that the number makes sense as
a date. For example, <code>19830905</code> and <code>830905</code>
are interpreted as <code>'1983-09-05'</code>.</li>

<li>As the result of a function that returns a value that is
acceptable in a <code>DATETIME</code>, <code>DATE</code>, or
<code>TIMESTAMP</code> context, such as <code>NOW()</code> or
<code>CURRENT_DATE</code>.</li>
</ul>

<p>Illegal <code>DATETIME</code>, <code>DATE</code>, or
<code>TIMESTAMP</code> values are converted to the ``zero'' value
of the appropriate type (<code>'0000-00-00 00:00:00'</code>,
<code>'0000-00-00'</code>, or <code>00000000000000</code>).</p>

<p>For values specified as strings that include date part
delimiters, it is not necessary to specify two digits for month or
day values that are less than <code>10</code>.
<code>'1979-6-9'</code> is the same as <code>'1979-06-09'</code>.
Similarly, for values specified as strings that include time part
delimiters, it is not necessary to specify two digits for hour,
minute, or second values that are less than <code>10</code>.
<code>'1979-10-30 1:2:3'</code> is the same as <code>'1979-10-30
01:02:03'</code>.</p>

<p>Values specified as numbers should be 6, 8, 12, or 14 digits
long. If the number is 8 or 14 digits long, it is assumed to be in
<code>YYYYMMDD</code> or <code>YYYYMMDDHHMMSS</code> format and
that the year is given by the first 4 digits. If the number is 6 or
12 digits long, it is assumed to be in <code>YYMMDD</code> or
<code>YYMMDDHHMMSS</code> format and that the year is given by the
first 2 digits. Numbers that are not one of these lengths are
interpreted as though padded with leading zeros to the closest
length.</p>

<p><a id="IDX1051" name="IDX1051"></a> <a id="IDX1052"
name="IDX1052"></a> Values specified as non-delimited strings are
interpreted using their length as given. If the string is 8 or 14
characters long, the year is assumed to be given by the first 4
characters. Otherwise, the year is assumed to be given by the first
2 characters. The string is interpreted from left to right to find
year, month, day, hour, minute, and second values, for as many
parts as are present in the string. This means you should not use
strings that have fewer than 6 characters. For example, if you
specify <code>'9903'</code>, thinking that will represent March,
1999, you will find that MySQL inserts a ``zero'' date into your
table. This is because the year and month values are
<code>99</code> and <code>03</code>, but the day part is missing
(zero), so the value is not a legal date.</p>

<p><code>TIMESTAMP</code> columns store legal values using the full
precision with which the value was specified, regardless of the
display size. This has several implications:</p>

<ul>
<li>Always specify year, month, and day, even if your column types
are <code>TIMESTAMP(4)</code> or <code>TIMESTAMP(2)</code>.
Otherwise, the value will not be a legal date and <code>0</code>
will be stored.</li>

<li>If you use <code>ALTER TABLE</code> to widen a narrow
<code>TIMESTAMP</code> column, information will be displayed that
previously was ``hidden''.</li>

<li>Similarly, narrowing a <code>TIMESTAMP</code> column does not
cause information to be lost, except in the sense that less
information is shown when the values are displayed.</li>

<li>Although <code>TIMESTAMP</code> values are stored to full
precision, the only function that operates directly on the
underlying stored value is <code>UNIX_TIMESTAMP()</code>. Other
functions operate on the formatted retrieved value. This means you
cannot use functions such as <code>HOUR()</code> or
<code>SECOND()</code> unless the relevant part of the
<code>TIMESTAMP</code> value is included in the formatted value.
For example, the <code>HH</code> part of a <code>TIMESTAMP</code>
column is not displayed unless the display size is at least 10, so
trying to use <code>HOUR()</code> on shorter <code>TIMESTAMP</code>
values produces a meaningless result.</li>
</ul>

<p>You can to some extent assign values of one date type to an
object of a different date type. However, there may be some
alteration of the value or loss of information:</p>

<ul>
<li>If you assign a <code>DATE</code> value to a
<code>DATETIME</code> or <code>TIMESTAMP</code> object, the time
part of the resulting value is set to <code>'00:00:00'</code>,
because the <code>DATE</code> value contains no time
information.</li>

<li>If you assign a <code>DATETIME</code> or <code>TIMESTAMP</code>
value to a <code>DATE</code> object, the time part of the resulting
value is deleted, because the <code>DATE</code> type stores no time
information.</li>

<li>Remember that although <code>DATETIME</code>,
<code>DATE</code>, and <code>TIMESTAMP</code> values all can be
specified using the same set of formats, the types do not all have
the same range of values. For example, <code>TIMESTAMP</code>
values cannot be earlier than <code>1970</code> or later than
<code>2037</code>. This means that a date such as
<code>'1968-01-01'</code>, while legal as a <code>DATETIME</code>
or <code>DATE</code> value, is not a valid <code>TIMESTAMP</code>
value and will be converted to <code>0</code> if assigned to such
an object.</li>
</ul>

<p><a id="IDX1053" name="IDX1053"></a> <a id="IDX1054"
name="IDX1054"></a> Be aware of certain pitfalls when specifying
date values:</p>

<ul>
<li>The relaxed format allowed for values specified as strings can
be deceiving. For example, a value such as <code>'10:11:12'</code>
might look like a time value because of the <samp>`:'</samp>
delimiter, but if used in a date context will be interpreted as the
year <code>'2010-11-12'</code>. The value <code>'10:45:15'</code>
will be converted to <code>'0000-00-00'</code> because
<code>'45'</code> is not a legal month.</li>

<li>The MySQL server only performs basic checking on the validity
of a date: days <code>00-31</code>, months <code>00-12</code>,
years <code>1000-9999</code>. Any date not within this range will
revert to <code>0000-00-00</code>. Please note that this still
allows you to store invalid dates such as <code>2002-04-31</code>.
It allows web applications to store data from a form without
further checking. To ensure a date is valid, perform a check in
your application.</li>

<li>Year values specified as two digits are ambiguous, because the
century is unknown. MySQL interprets 2-digit year values using the
following rules: 

<ul>
<li>Year values in the range <code>00-69</code> are converted to
<code>2000-2069</code>.</li>

<li>Year values in the range <code>70-99</code> are converted to
<code>1970-1999</code>.</li>
</ul>
</li>
</ul>

<h4><a id="TIME" name="TIME" href="manual_toc.html#TIME">6.2.2.3
The <code>TIME</code> Type</a></h4>

<p><a id="IDX1055" name="IDX1055"></a></p>

<p>MySQL retrieves and displays <code>TIME</code> values in
<code>'HH:MM:SS'</code> format (or <code>'HHH:MM:SS'</code> format
for large hours values). <code>TIME</code> values may range from
<code>'-838:59:59'</code> to <code>'838:59:59'</code>. The reason
the hours part may be so large is that the <code>TIME</code> type
may be used not only to represent a time of day (which must be less
than 24 hours), but also elapsed time or a time interval between
two events (which may be much greater than 24 hours, or even
negative).</p>

<p>You can specify <code>TIME</code> values in a variety of
formats:</p>

<ul>
<li>As a string in <code>'D HH:MM:SS.fraction'</code> format. (Note
that MySQL doesn't yet store the fraction for the time column.) One
can also use one of the following ``relaxed'' syntax:
<code>HH:MM:SS.fraction</code>, <code>HH:MM:SS</code>,
<code>HH:MM</code>, <code>D HH:MM:SS</code>, <code>D HH:MM</code>,
<code>D HH</code> or <code>SS</code>. Here <code>D</code> is days
between 0-33.</li>

<li>As a string with no delimiters in <code>'HHMMSS'</code> format,
provided that it makes sense as a time. For example,
<code>'101112'</code> is understood as <code>'10:11:12'</code>, but
<code>'109712'</code> is illegal (it has a nonsensical minute part)
and becomes <code>'00:00:00'</code>.</li>

<li>As a number in <code>HHMMSS</code> format, provided that it
makes sense as a time. For example, <code>101112</code> is
understood as <code>'10:11:12'</code>. The following alternative
formats are also understood: <code>SS</code>,
<code>MMSS</code>,<code>HHMMSS</code>,
<code>HHMMSS.fraction</code>. Note that MySQL doesn't yet store the
fraction part.</li>

<li>As the result of a function that returns a value that is
acceptable in a <code>TIME</code> context, such as
<code>CURRENT_TIME</code>.</li>
</ul>

<p>For <code>TIME</code> values specified as strings that include a
time part delimiter, it is not necessary to specify two digits for
hours, minutes, or seconds values that are less than
<code>10</code>. <code>'8:3:2'</code> is the same as
<code>'08:03:02'</code>.</p>

<p>Be careful about assigning ``short'' <code>TIME</code> values to
a <code>TIME</code> column. Without colons, MySQL interprets values
using the assumption that the rightmost digits represent seconds.
(MySQL interprets <code>TIME</code> values as elapsed time rather
than as time of day.) For example, you might think of
<code>'1112'</code> and <code>1112</code> as meaning
<code>'11:12:00'</code> (12 minutes after 11 o'clock), but MySQL
interprets them as <code>'00:11:12'</code> (11 minutes, 12
seconds). Similarly, <code>'12'</code> and <code>12</code> are
interpreted as <code>'00:00:12'</code>. <code>TIME</code> values
with colons, by contrast, are always treated as time of the day.
That is <code>'11:12'</code> will mean <code>'11:12:00'</code>, not
<code>'00:11:12'</code>.</p>

<p>Values that lie outside the <code>TIME</code> range but are
otherwise legal are clipped to the appropriate endpoint of the
range. For example, <code>'-850:00:00'</code> and
<code>'850:00:00'</code> are converted to <code>'-838:59:59'</code>
and <code>'838:59:59'</code>.</p>

<p>Illegal <code>TIME</code> values are converted to
<code>'00:00:00'</code>. Note that because <code>'00:00:00'</code>
is itself a legal <code>TIME</code> value, there is no way to tell,
from a value of <code>'00:00:00'</code> stored in a table, whether
the original value was specified as <code>'00:00:00'</code> or
whether it was illegal.</p>

<h4><a id="YEAR" name="YEAR" href="manual_toc.html#YEAR">6.2.2.4
The <code>YEAR</code> Type</a></h4>

<p><a id="IDX1056" name="IDX1056"></a></p>

<p>The <code>YEAR</code> type is a 1-byte type used for
representing years.</p>

<p>MySQL retrieves and displays <code>YEAR</code> values in
<code>YYYY</code> format. The range is <code>1901</code> to
<code>2155</code>.</p>

<p>You can specify <code>YEAR</code> values in a variety of
formats:</p>

<ul>
<li>As a four-digit string in the range <code>'1901'</code> to
<code>'2155'</code>.</li>

<li>As a four-digit number in the range <code>1901</code> to
<code>2155</code>.</li>

<li>As a two-digit string in the range <code>'00'</code> to
<code>'99'</code>. Values in the ranges <code>'00'</code> to
<code>'69'</code> and <code>'70'</code> to <code>'99'</code> are
converted to <code>YEAR</code> values in the ranges
<code>2000</code> to <code>2069</code> and <code>1970</code> to
<code>1999</code>.</li>

<li>As a two-digit number in the range <code>1</code> to
<code>99</code>. Values in the ranges <code>1</code> to
<code>69</code> and <code>70</code> to <code>99</code> are
converted to <code>YEAR</code> values in the ranges
<code>2001</code> to <code>2069</code> and <code>1970</code> to
<code>1999</code>. Note that the range for two-digit numbers is
slightly different from the range for two-digit strings, because
you cannot specify zero directly as a number and have it be
interpreted as <code>2000</code>. You <strong>must</strong> specify
it as a string <code>'0'</code> or <code>'00'</code> or it will be
interpreted as <code>0000</code>.</li>

<li>As the result of a function that returns a value that is
acceptable in a <code>YEAR</code> context, such as
<code>NOW()</code>.</li>
</ul>

<p>Illegal <code>YEAR</code> values are converted to
<code>0000</code>.</p>

<h3><a id="String_types" name="String_types"
href="manual_toc.html#String_types">6.2.3 String Types</a></h3>

<p><a id="IDX1057" name="IDX1057"></a> <a id="IDX1058"
name="IDX1058"></a></p>

<p><a id="IDX1059" name="IDX1059"></a> <a id="IDX1060"
name="IDX1060"></a></p>

<p>The string types are <code>CHAR</code>, <code>VARCHAR</code>,
<code>BLOB</code>, <code>TEXT</code>, <code>ENUM</code>, and
<code>SET</code>. This section describes how these types work,
their storage requirements, and how to use them in your
queries.</p>

<table border="1" width="100%">
<tr>
<td><strong>Type</strong></td>
<td><strong>Max.size</strong></td>
<td><strong>Bytes</strong></td>
</tr>

<tr>
<td><code>TINYTEXT</code> or <code>TINYBLOB</code></td>
<td>2^8-1</td>
<td>255</td>
</tr>

<tr>
<td><code>TEXT</code> or <code>BLOB</code></td>
<td>2^16-1 (64K-1)</td>
<td>65535</td>
</tr>

<tr>
<td><code>MEDIUMTEXT</code> or <code>MEDIUMBLOB</code></td>
<td>2^24-1 (16M-1)</td>
<td>16777215</td>
</tr>

<tr>
<td><code>LONGBLOB</code></td>
<td>2^32-1 (4G-1)</td>
<td>4294967295</td>
</tr>
</table>

<h4><a id="CHAR" name="CHAR" href="manual_toc.html#CHAR">6.2.3.1
The <code>CHAR</code> and <code>VARCHAR</code> Types</a></h4>

<p>The <code>CHAR</code> and <code>VARCHAR</code> types are
similar, but differ in the way they are stored and retrieved.</p>

<p>The length of a <code>CHAR</code> column is fixed to the length
that you declare when you create the table. The length can be any
value between 1 and 255. (As of MySQL Version 3.23, the length of
<code>CHAR</code> may be 0 to 255.) When <code>CHAR</code> values
are stored, they are right-padded with spaces to the specified
length. When <code>CHAR</code> values are retrieved, trailing
spaces are removed.</p>

<p>Values in <code>VARCHAR</code> columns are variable-length
strings. You can declare a <code>VARCHAR</code> column to be any
length between 1 and 255, just as for <code>CHAR</code> columns.
However, in contrast to <code>CHAR</code>, <code>VARCHAR</code>
values are stored using only as many characters as are needed, plus
one byte to record the length. Values are not padded; instead,
trailing spaces are removed when values are stored. (This space
removal differs from the ANSI SQL specification.)</p>

<p>If you assign a value to a <code>CHAR</code> or
<code>VARCHAR</code> column that exceeds the column's maximum
length, the value is truncated to fit.</p>

<p>The following table illustrates the differences between the two
types of columns by showing the result of storing various string
values into <code>CHAR(4)</code> and <code>VARCHAR(4)</code>
columns:</p>

<table border="1" width="100%">
<tr>
<td><strong>Value</strong></td>
<td><code>CHAR(4)</code></td>
<td><strong>Storage required</strong></td>
<td><code>VARCHAR(4)</code></td>
<td><strong>Storage required</strong></td>
</tr>

<tr>
<td><code>''</code></td>
<td><code>' '</code></td>
<td>4 bytes</td>
<td><code>''</code></td>
<td>1 byte</td>
</tr>

<tr>
<td><code>'ab'</code></td>
<td><code>'ab '</code></td>
<td>4 bytes</td>
<td><code>'ab'</code></td>
<td>3 bytes</td>
</tr>

<tr>
<td><code>'abcd'</code></td>
<td><code>'abcd'</code></td>
<td>4 bytes</td>
<td><code>'abcd'</code></td>
<td>5 bytes</td>
</tr>

<tr>
<td><code>'abcdefgh'</code></td>
<td><code>'abcd'</code></td>
<td>4 bytes</td>
<td><code>'abcd'</code></td>
<td>5 bytes</td>
</tr>
</table>

<p>The values retrieved from the <code>CHAR(4)</code> and
<code>VARCHAR(4)</code> columns will be the same in each case,
because trailing spaces are removed from <code>CHAR</code> columns
upon retrieval.</p>

<p>Values in <code>CHAR</code> and <code>VARCHAR</code> columns are
sorted and compared in case-insensitive fashion, unless the
<code>BINARY</code> attribute was specified when the table was
created. The <code>BINARY</code> attribute means that column values
are sorted and compared in case-sensitive fashion according to the
ASCII order of the machine where the MySQL server is running.
<code>BINARY</code> doesn't affect how the column is stored or
retrieved.</p>

<p>The <code>BINARY</code> attribute is sticky. This means that if
a column marked <code>BINARY</code> is used in an expression, the
whole expression is compared as a <code>BINARY</code> value.</p>

<p>MySQL may silently change the type of a <code>CHAR</code> or
<code>VARCHAR</code> column at table creation time. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>.</p>

<h4><a id="BLOB" name="BLOB" href="manual_toc.html#BLOB">6.2.3.2
The <code>BLOB</code> and <code>TEXT</code> Types</a></h4>

<p><a id="IDX1061" name="IDX1061"></a> <a id="IDX1062"
name="IDX1062"></a></p>

<p>A <code>BLOB</code> is a binary large object that can hold a
variable amount of data. The four <code>BLOB</code> types
<code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>,
and <code>LONGBLOB</code> differ only in the maximum length of the
values they can hold. See section <a
href="manual.html#Storage_requirements">6.2.6 Column Type Storage
Requirements</a>.</p>

<p>The four <code>TEXT</code> types <code>TINYTEXT</code>,
<code>TEXT</code>, <code>MEDIUMTEXT</code>, and
<code>LONGTEXT</code> correspond to the four <code>BLOB</code>
types and have the same maximum lengths and storage requirements.
The only difference between <code>BLOB</code> and <code>TEXT</code>
types is that sorting and comparison is performed in case-sensitive
fashion for <code>BLOB</code> values and case-insensitive fashion
for <code>TEXT</code> values. In other words, a <code>TEXT</code>
is a case-insensitive <code>BLOB</code>.</p>

<p>If you assign a value to a <code>BLOB</code> or
<code>TEXT</code> column that exceeds the column type's maximum
length, the value is truncated to fit.</p>

<p>In most respects, you can regard a <code>TEXT</code> column as a
<code>VARCHAR</code> column that can be as big as you like.
Similarly, you can regard a <code>BLOB</code> column as a
<code>VARCHAR BINARY</code> column. The differences are:</p>

<ul>
<li>You can have indexes on <code>BLOB</code> and <code>TEXT</code>
columns with MySQL Version 3.23.2 and newer. Older versions of
MySQL did not support this.</li>

<li>There is no trailing-space removal for <code>BLOB</code> and
<code>TEXT</code> columns when values are stored, as there is for
<code>VARCHAR</code> columns.</li>

<li><a id="IDX1063" name="IDX1063"></a> <a id="IDX1064"
name="IDX1064"></a> <a id="IDX1065" name="IDX1065"></a>
<code>BLOB</code> and <code>TEXT</code> columns cannot have
<code>DEFAULT</code> values.</li>
</ul>

<p><code>MyODBC</code> defines <code>BLOB</code> values as
<code>LONGVARBINARY</code> and <code>TEXT</code> values as
<code>LONGVARCHAR</code>.</p>

<p>Because <code>BLOB</code> and <code>TEXT</code> values may be
extremely long, you may run up against some constraints when using
them:</p>

<ul>
<li>If you want to use <code>GROUP BY</code> or <code>ORDER
BY</code> on a <code>BLOB</code> or <code>TEXT</code> column, you
must convert the column value into a fixed-length object. The
standard way to do this is with the <code>SUBSTRING</code>
function. For example: 

<pre>
mysql&gt; SELECT comment FROM tbl_name,SUBSTRING(comment,20) AS substr
    -&gt;                 ORDER BY substr;
</pre>

If you don't do this, only the first <code>max_sort_length</code>
bytes of the column are used when sorting. The default value of
<code>max_sort_length</code> is 1024; this value can be changed
using the <code>-O</code> option when starting the
<code>mysqld</code> server. You can group on an expression
involving <code>BLOB</code> or <code>TEXT</code> values by
specifying the column position or by using an alias: 

<pre>
mysql&gt; SELECT id,SUBSTRING(blob_col,1,100) FROM tbl_name GROUP BY 2;
mysql&gt; SELECT id,SUBSTRING(blob_col,1,100) AS b FROM tbl_name GROUP BY b;
</pre>
</li>

<li>The maximum size of a <code>BLOB</code> or <code>TEXT</code>
object is determined by its type, but the largest value you can
actually transmit between the client and server is determined by
the amount of available memory and the size of the communications
buffers. You can change the message buffer size, but you must do so
on both the server and client ends. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</li>
</ul>

<p>Note that each <code>BLOB</code> or <code>TEXT</code> value is
represented internally by a separately allocated object. This is in
contrast to all other column types, for which storage is allocated
once per column when the table is opened.</p>

<h4><a id="ENUM" name="ENUM" href="manual_toc.html#ENUM">6.2.3.3
The <code>ENUM</code> Type</a></h4>

<p><a id="IDX1066" name="IDX1066"></a></p>

<p>An <code>ENUM</code> is a string object whose value normally is
chosen from a list of allowed values that are enumerated explicitly
in the column specification at table creation time.</p>

<p>The value may also be the empty string (<code>""</code>) or
<code>NULL</code> under certain circumstances:</p>

<ul>
<li>If you insert an invalid value into an <code>ENUM</code> (that
is, a string not present in the list of allowed values), the empty
string is inserted instead as a special error value. This string
can be distinguished from a 'normal' empty string by the fact that
this string has the numerical value 0. More about this later.</li>

<li>If an <code>ENUM</code> is declared <code>NULL</code>,
<code>NULL</code> is also a legal value for the column, and the
default value is <code>NULL</code>. If an <code>ENUM</code> is
declared <code>NOT NULL</code>, the default value is the first
element of the list of allowed values.</li>
</ul>

<p>Each enumeration value has an index:</p>

<ul>
<li>Values from the list of allowable elements in the column
specification are numbered beginning with 1.</li>

<li>The index value of the empty string error value is 0. This
means that you can use the following <code>SELECT</code> statement
to find rows into which invalid <code>ENUM</code> values were
assigned: 

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE enum_col=0;
</pre>
</li>

<li>The index of the <code>NULL</code> value is
<code>NULL</code>.</li>
</ul>

<p>For example, a column specified as <code>ENUM("one", "two",
"three")</code> can have any of the values shown here. The index of
each value is also shown:</p>

<table border="1" width="100%">
<tr>
<td><strong>Value</strong></td>
<td><strong>Index</strong></td>
</tr>

<tr>
<td><code>NULL</code></td>
<td><code>NULL</code></td>
</tr>

<tr>
<td><code>""</code></td>
<td>0</td>
</tr>

<tr>
<td><code>"one"</code></td>
<td>1</td>
</tr>

<tr>
<td><code>"two"</code></td>
<td>2</td>
</tr>

<tr>
<td><code>"three"</code></td>
<td>3</td>
</tr>
</table>

<p>An enumeration can have a maximum of 65535 elements.</p>

<p>Starting from 3.23.51 trailing spaces are automatically deleted
from <code>ENUM</code> values when the table is created.</p>

<p>Lettercase is irrelevant when you assign values to an
<code>ENUM</code> column. However, values retrieved from the column
later have lettercase matching the values that were used to specify
the allowable values at table creation time.</p>

<p>If you retrieve an <code>ENUM</code> in a numeric context, the
column value's index is returned. For example, you can retrieve
numeric values from an <code>ENUM</code> column like this:</p>

<pre>
mysql&gt; SELECT enum_col+0 FROM tbl_name;
</pre>

<p>If you store a number into an <code>ENUM</code>, the number is
treated as an index, and the value stored is the enumeration member
with that index. (However, this will not work with <code>LOAD
DATA</code>, which treats all input as strings.) It's not advisable
to store numbers in an <code>ENUM</code> string because it will
make things confusing.</p>

<p><code>ENUM</code> values are sorted according to the order in
which the enumeration members were listed in the column
specification. (In other words, <code>ENUM</code> values are sorted
according to their index numbers.) For example, <code>"a"</code>
sorts before <code>"b"</code> for <code>ENUM("a", "b")</code>, but
<code>"b"</code> sorts before <code>"a"</code> for <code>ENUM("b",
"a")</code>. The empty string sorts before non-empty strings, and
<code>NULL</code> values sort before all other enumeration values.
To prevent unexpected results, specify the <code>ENUM</code> list
in alphabetical order. You can also use <code>GROUP BY
CONCAT(col)</code> to make sure the column is sorted alphabetically
rather than by index number.</p>

<p>If you want to get all possible values for an <code>ENUM</code>
column, you should use: <code>SHOW COLUMNS FROM table_name LIKE
enum_column_name</code> and parse the <code>ENUM</code> definition
in the second column.</p>

<h4><a id="SET" name="SET" href="manual_toc.html#SET">6.2.3.4 The
<code>SET</code> Type</a></h4>

<p><a id="IDX1067" name="IDX1067"></a></p>

<p>A <code>SET</code> is a string object that can have zero or more
values, each of which must be chosen from a list of allowed values
specified when the table is created. <code>SET</code> column values
that consist of multiple set members are specified with members
separated by commas (<samp>`,'</samp>). A consequence of this is
that <code>SET</code> member values cannot themselves contain
commas.</p>

<p>For example, a column specified as <code>SET("one", "two") NOT
NULL</code> can have any of these values:</p>

<pre>
""
"one"
"two"
"one,two"
</pre>

<p>A <code>SET</code> can have a maximum of 64 different
members.</p>

<p>Starting from 3.23.51 trailing spaces are automatically deleted
from <code>SET</code> values when the table is created.</p>

<p>MySQL stores <code>SET</code> values numerically, with the
low-order bit of the stored value corresponding to the first set
member. If you retrieve a <code>SET</code> value in a numeric
context, the value retrieved has bits set corresponding to the set
members that make up the column value. For example, you can
retrieve numeric values from a <code>SET</code> column like
this:</p>

<pre>
mysql&gt; SELECT set_col+0 FROM tbl_name;
</pre>

<p>If a number is stored into a <code>SET</code> column, the bits
that are set in the binary representation of the number determine
the set members in the column value. Suppose a column is specified
as <code>SET("a","b","c","d")</code>. Then the members have the
following bit values:</p>

<table border="1" width="100%">
<tr>
<td><code>SET</code> <strong>member</strong></td>
<td><strong>Decimal value</strong></td>
<td><strong>Binary value</strong></td>
</tr>

<tr>
<td><code>a</code></td>
<td><code>1</code></td>
<td><code>0001</code></td>
</tr>

<tr>
<td><code>b</code></td>
<td><code>2</code></td>
<td><code>0010</code></td>
</tr>

<tr>
<td><code>c</code></td>
<td><code>4</code></td>
<td><code>0100</code></td>
</tr>

<tr>
<td><code>d</code></td>
<td><code>8</code></td>
<td><code>1000</code></td>
</tr>
</table>

<p>If you assign a value of <code>9</code> to this column, that is
<code>1001</code> in binary, so the first and fourth
<code>SET</code> value members <code>"a"</code> and
<code>"d"</code> are selected and the resulting value is
<code>"a,d"</code>.</p>

<p>For a value containing more than one <code>SET</code> element,
it does not matter what order the elements are listed in when you
insert the value. It also does not matter how many times a given
element is listed in the value. When the value is retrieved later,
each element in the value will appear once, with elements listed
according to the order in which they were specified at table
creation time. For example, if a column is specified as
<code>SET("a","b","c","d")</code>, then <code>"a,d"</code>,
<code>"d,a"</code>, and <code>"d,a,a,d,d"</code> will all appear as
<code>"a,d"</code> when retrieved.</p>

<p>If you set a <code>SET</code> column to an unsupported value,
the value will be ignored.</p>

<p><code>SET</code> values are sorted numerically.
<code>NULL</code> values sort before non-<code>NULL</code>
<code>SET</code> values.</p>

<p>Normally, you perform a <code>SELECT</code> on a
<code>SET</code> column using the <code>LIKE</code> operator or the
<code>FIND_IN_SET()</code> function:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE set_col LIKE '%value%';
mysql&gt; SELECT * FROM tbl_name WHERE FIND_IN_SET('value',set_col)&gt;0;
</pre>

<p>But the following will also work:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE set_col = 'val1,val2';
mysql&gt; SELECT * FROM tbl_name WHERE set_col &amp; 1;
</pre>

<p>The first of these statements looks for an exact match. The
second looks for values containing the first set member.</p>

<p>If you want to get all possible values for a <code>SET</code>
column, you should use: <code>SHOW COLUMNS FROM table_name LIKE
set_column_name</code> and parse the <code>SET</code> definition in
the second column.</p>

<h3><a id="Choosing_types" name="Choosing_types"
href="manual_toc.html#Choosing_types">6.2.4 Choosing the Right Type
for a Column</a></h3>

<p><a id="IDX1068" name="IDX1068"></a> <a id="IDX1069"
name="IDX1069"></a></p>

<p>For the most efficient use of storage, try to use the most
precise type in all cases. For example, if an integer column will
be used for values in the range between <code>1</code> and
<code>99999</code>, <code>MEDIUMINT UNSIGNED</code> is the best
type.</p>

<p>Accurate representation of monetary values is a common problem.
In MySQL, you should use the <code>DECIMAL</code> type. This is
stored as a string, so no loss of accuracy should occur. If
accuracy is not too important, the <code>DOUBLE</code> type may
also be good enough.</p>

<p>For high precision, you can always convert to a fixed-point type
stored in a <code>BIGINT</code>. This allows you to do all
calculations with integers and convert results back to
floating-point values only when necessary.</p>

<h3><a id="Other-vendor_column_types"
name="Other-vendor_column_types"
href="manual_toc.html#Other-vendor_column_types">6.2.5 Using Column
Types from Other Database Engines</a></h3>

<p><a id="IDX1070" name="IDX1070"></a> <a id="IDX1071"
name="IDX1071"></a> <a id="IDX1072" name="IDX1072"></a></p>

<p>To make it easier to use code written for SQL implementations
from other vendors, MySQL maps column types as shown in the
following table. These mappings make it easier to move table
definitions from other database engines to MySQL:</p>

<table border="1" width="100%">
<tr>
<td><strong>Other vendor type</strong></td>
<td><strong>MySQL type</strong></td>
</tr>

<tr>
<td><code>BINARY(NUM)</code></td>
<td><code>CHAR(NUM) BINARY</code></td>
</tr>

<tr>
<td><code>CHAR VARYING(NUM)</code></td>
<td><code>VARCHAR(NUM)</code></td>
</tr>

<tr>
<td><code>FLOAT4</code></td>
<td><code>FLOAT</code></td>
</tr>

<tr>
<td><code>FLOAT8</code></td>
<td><code>DOUBLE</code></td>
</tr>

<tr>
<td><code>INT1</code></td>
<td><code>TINYINT</code></td>
</tr>

<tr>
<td><code>INT2</code></td>
<td><code>SMALLINT</code></td>
</tr>

<tr>
<td><code>INT3</code></td>
<td><code>MEDIUMINT</code></td>
</tr>

<tr>
<td><code>INT4</code></td>
<td><code>INT</code></td>
</tr>

<tr>
<td><code>INT8</code></td>
<td><code>BIGINT</code></td>
</tr>

<tr>
<td><code>LONG VARBINARY</code></td>
<td><code>MEDIUMBLOB</code></td>
</tr>

<tr>
<td><code>LONG VARCHAR</code></td>
<td><code>MEDIUMTEXT</code></td>
</tr>

<tr>
<td><code>MIDDLEINT</code></td>
<td><code>MEDIUMINT</code></td>
</tr>

<tr>
<td><code>VARBINARY(NUM)</code></td>
<td><code>VARCHAR(NUM) BINARY</code></td>
</tr>
</table>

<p>Column type mapping occurs at table creation time. If you create
a table with types used by other vendors and then issue a
<code>DESCRIBE tbl_name</code> statement, MySQL reports the table
structure using the equivalent MySQL types.</p>

<h3><a id="Storage_requirements" name="Storage_requirements"
href="manual_toc.html#Storage_requirements">6.2.6 Column Type
Storage Requirements</a></h3>

<p><a id="IDX1073" name="IDX1073"></a> <a id="IDX1074"
name="IDX1074"></a></p>

<p>The storage requirements for each of the column types supported
by MySQL are listed by category.</p>

<p><a id="IDX1075" name="IDX1075"></a> <a id="IDX1076"
name="IDX1076"></a></p>

<h4>6.2.6.1 Storage requirements for numeric types</h4>

<table border="1" width="100%">
<tr>
<td><strong>Column type</strong></td>
<td><strong>Storage required</strong></td>
</tr>

<tr>
<td><code>TINYINT</code></td>
<td>1 byte</td>
</tr>

<tr>
<td><code>SMALLINT</code></td>
<td>2 bytes</td>
</tr>

<tr>
<td><code>MEDIUMINT</code></td>
<td>3 bytes</td>
</tr>

<tr>
<td><code>INT</code></td>
<td>4 bytes</td>
</tr>

<tr>
<td><code>INTEGER</code></td>
<td>4 bytes</td>
</tr>

<tr>
<td><code>BIGINT</code></td>
<td>8 bytes</td>
</tr>

<tr>
<td><code>FLOAT(X)</code></td>
<td>4 if X &lt;= 24 or 8 if 25 &lt;= X &lt;= 53</td>
</tr>

<tr>
<td><code>FLOAT</code></td>
<td>4 bytes</td>
</tr>

<tr>
<td><code>DOUBLE</code></td>
<td>8 bytes</td>
</tr>

<tr>
<td><code>DOUBLE PRECISION</code></td>
<td>8 bytes</td>
</tr>

<tr>
<td><code>REAL</code></td>
<td>8 bytes</td>
</tr>

<tr>
<td><code>DECIMAL(M,D)</code></td>
<td><code>M+2</code> bytes if D &gt; 0, <code>M+1</code> bytes if D
= 0 (<code>D</code>+2, if <code>M &lt; D</code>)</td>
</tr>

<tr>
<td><code>NUMERIC(M,D)</code></td>
<td><code>M+2</code> bytes if D &gt; 0, <code>M+1</code> bytes if D
= 0 (<code>D</code>+2, if <code>M &lt; D</code>)</td>
</tr>
</table>

<p><a id="IDX1077" name="IDX1077"></a> <a id="IDX1078"
name="IDX1078"></a> <a id="IDX1079" name="IDX1079"></a> <a
id="IDX1080" name="IDX1080"></a></p>

<h4>6.2.6.2 Storage requirements for date and time types</h4>

<table border="1" width="100%">
<tr>
<td><strong>Column type</strong></td>
<td><strong>Storage required</strong></td>
</tr>

<tr>
<td><code>DATE</code></td>
<td>3 bytes</td>
</tr>

<tr>
<td><code>DATETIME</code></td>
<td>8 bytes</td>
</tr>

<tr>
<td><code>TIMESTAMP</code></td>
<td>4 bytes</td>
</tr>

<tr>
<td><code>TIME</code></td>
<td>3 bytes</td>
</tr>

<tr>
<td><code>YEAR</code></td>
<td>1 byte</td>
</tr>
</table>

<h4>6.2.6.3 Storage requirements for string types</h4>

<table border="1" width="100%">
<tr>
<td><strong>Column type</strong></td>
<td><strong>Storage required</strong></td>
</tr>

<tr>
<td><code>CHAR(M)</code></td>
<td><code>M</code> bytes, <code>1 &lt;= M &lt;= 255</code></td>
</tr>

<tr>
<td><code>VARCHAR(M)</code></td>
<td><code>L</code>+1 bytes, where <code>L &lt;= M</code> and
<code>1 &lt;= M &lt;= 255</code></td>
</tr>

<tr>
<td><code>TINYBLOB</code>, <code>TINYTEXT</code></td>
<td><code>L</code>+1 bytes, where <code>L</code> &lt; 2^8</td>
</tr>

<tr>
<td><code>BLOB</code>, <code>TEXT</code></td>
<td><code>L</code>+2 bytes, where <code>L</code> &lt; 2^16</td>
</tr>

<tr>
<td><code>MEDIUMBLOB</code>, <code>MEDIUMTEXT</code></td>
<td><code>L</code>+3 bytes, where <code>L</code> &lt; 2^24</td>
</tr>

<tr>
<td><code>LONGBLOB</code>, <code>LONGTEXT</code></td>
<td><code>L</code>+4 bytes, where <code>L</code> &lt; 2^32</td>
</tr>

<tr>
<td><code>ENUM('value1','value2',...)</code></td>
<td>1 or 2 bytes, depending on the number of enumeration values
(65535 values maximum)</td>
</tr>

<tr>
<td><code>SET('value1','value2',...)</code></td>
<td>1, 2, 3, 4 or 8 bytes, depending on the number of set members
(64 members maximum)</td>
</tr>
</table>

<p><a id="IDX1081" name="IDX1081"></a> <a id="IDX1082"
name="IDX1082"></a> <a id="IDX1083" name="IDX1083"></a>
<code>VARCHAR</code> and the <code>BLOB</code> and
<code>TEXT</code> types are variable-length types, for which the
storage requirements depend on the actual length of column values
(represented by <code>L</code> in the preceding table), rather than
on the type's maximum possible size. For example, a
<code>VARCHAR(10)</code> column can hold a string with a maximum
length of 10 characters. The actual storage required is the length
of the string (<code>L</code>), plus 1 byte to record the length of
the string. For the string <code>'abcd'</code>, <code>L</code> is 4
and the storage requirement is 5 bytes.</p>

<p>The <code>BLOB</code> and <code>TEXT</code> types require 1, 2,
3, or 4 bytes to record the length of the column value, depending
on the maximum possible length of the type. See section <a
href="manual.html#BLOB">6.2.3.2 The <code>BLOB</code> and
<code>TEXT</code> Types</a>.</p>

<p>If a table includes any variable-length column types, the record
format will also be variable-length. Note that when a table is
created, MySQL may, under certain conditions, change a column from
a variable-length type to a fixed-length type, or vice-versa. See
section <a href="manual.html#Silent_column_changes">6.5.3.1 Silent
Column Specification Changes</a>.</p>

<p><a id="IDX1084" name="IDX1084"></a> The size of an
<code>ENUM</code> object is determined by the number of different
enumeration values. One byte is used for enumerations with up to
255 possible values. Two bytes are used for enumerations with up to
65535 values. See section <a href="manual.html#ENUM">6.2.3.3 The
<code>ENUM</code> Type</a>.</p>

<p><a id="IDX1085" name="IDX1085"></a> The size of a
<code>SET</code> object is determined by the number of different
set members. If the set size is <code>N</code>, the object occupies
<code>(N+7)/8</code> bytes, rounded up to 1, 2, 3, 4, or 8 bytes. A
<code>SET</code> can have a maximum of 64 members. See section <a
href="manual.html#SET">6.2.3.4 The <code>SET</code> Type</a>.</p>

<h2><a id="Functions" name="Functions"
href="manual_toc.html#Functions">6.3 Functions for Use in
<code>SELECT</code> and <code>WHERE</code> Clauses</a></h2>

<p><a id="IDX1086" name="IDX1086"></a></p>

<p>A <code>select_expression</code> or
<code>where_definition</code> in a SQL statement can consist of any
expression using the functions described below.</p>

<p>An expression that contains <code>NULL</code> always produces a
<code>NULL</code> value unless otherwise indicated in the
documentation for the operators and functions involved in the
expression.</p>

<p><strong>Note</strong>: there must be no whitespace between a
function name and the parentheses following it. This helps the
MySQL parser distinguish between function calls and references to
tables or columns that happen to have the same name as a function.
Spaces around arguments are permitted, though.</p>

<p>You can force MySQL to accept spaces after the function name by
starting <code>mysqld</code> with <code>--ansi</code> or using the
<code>CLIENT_IGNORE_SPACE</code> to <code>mysql_connect()</code>,
but in this case all function names will become reserved words. See
section <a href="manual.html#ANSI_mode">1.7.2 Running MySQL in ANSI
Mode</a>.</p>

<p>For the sake of brevity, examples display the output from the
<code>mysql</code> program in abbreviated form. So this:</p>

<pre>
mysql&gt; SELECT MOD(29,9);
1 rows in set (0.00 sec)

+-----------+
| mod(29,9) |
+-----------+
|         2 |
+-----------+
</pre>

<p>is displayed like this:</p>

<pre>
mysql&gt; SELECT MOD(29,9);
        -&gt; 2
</pre>

<h3><a id="Non-typed_Operators" name="Non-typed_Operators"
href="manual_toc.html#Non-typed_Operators">6.3.1 Non-Type-Specific
Operators and Functions</a></h3>

<h4><a id="Parentheses" name="Parentheses"
href="manual_toc.html#Parentheses">6.3.1.1 Parentheses</a></h4>

<p><a id="IDX1087" name="IDX1087"></a> <a id="IDX1088"
name="IDX1088"></a></p>

<p><a id="IDX1089" name="IDX1089"></a> <a id="IDX1090"
name="IDX1090"></a></p>

<pre>
( ... )
</pre>

<p>Use parentheses to force the order of evaluation in an
expression. For example:</p>

<pre>
mysql&gt; SELECT 1+2*3;
        -&gt; 7
mysql&gt; SELECT (1+2)*3;
        -&gt; 9
</pre>

<h4><a id="Comparison_Operators" name="Comparison_Operators"
href="manual_toc.html#Comparison_Operators">6.3.1.2 Comparison
Operators</a></h4>

<p><a id="IDX1091" name="IDX1091"></a></p>

<p><a id="IDX1092" name="IDX1092"></a> <a id="IDX1093"
name="IDX1093"></a></p>

<p>Comparison operations result in a value of <code>1</code>
(TRUE), <code>0</code> (FALSE), or <code>NULL</code>. These
functions work for both numbers and strings. Strings are
automatically converted to numbers and numbers to strings as needed
(as in Perl).</p>

<p>MySQL performs comparisons using the following rules:</p>

<ul>
<li>If one or both arguments are <code>NULL</code>, the result of
the comparison is <code>NULL</code>, except for the
<code>&lt;=&gt;</code> operator.</li>

<li>If both arguments in a comparison operation are strings, they
are compared as strings.</li>

<li>If both arguments are integers, they are compared as
integers.</li>

<li>Hexadecimal values are treated as binary strings if not
compared to a number.</li>

<li><a id="IDX1094" name="IDX1094"></a> <a id="IDX1095"
name="IDX1095"></a> If one of the arguments is a
<code>TIMESTAMP</code> or <code>DATETIME</code> column and the
other argument is a constant, the constant is converted to a
timestamp before the comparison is performed. This is done to be
more ODBC-friendly.</li>

<li>In all other cases, the arguments are compared as
floating-point (real) numbers.</li>
</ul>

<p>By default, string comparisons are done in case-independent
fashion using the current character set (ISO-8859-1 Latin1 by
default, which also works excellently for English).</p>

<p>The following examples illustrate conversion of strings to
numbers for comparison operations:</p>

<pre>
mysql&gt; SELECT 1 &gt; '6x';
         -&gt; 0
mysql&gt; SELECT 7 &gt; '6x';
         -&gt; 1
mysql&gt; SELECT 0 &gt; 'x6';
         -&gt; 0
mysql&gt; SELECT 0 = 'x6';
         -&gt; 1
</pre>

<dl compact="compact">
<dt><code>=</code></dt>

<dd><a id="IDX1096" name="IDX1096"></a> <a id="IDX1097"
name="IDX1097"></a> Equal: 

<pre>
mysql&gt; SELECT 1 = 0;
        -&gt; 0
mysql&gt; SELECT '0' = 0;
        -&gt; 1
mysql&gt; SELECT '0.0' = 0;
        -&gt; 1
mysql&gt; SELECT '0.01' = 0;
        -&gt; 0
mysql&gt; SELECT '.01' = 0.01;
        -&gt; 1
</pre>

<a id="IDX1098" name="IDX1098"></a> <a id="IDX1099"
name="IDX1099"></a> <a id="IDX1100" name="IDX1100"></a> <a
id="IDX1101" name="IDX1101"></a></dd>

<dt><code>&lt;&gt;</code></dt>

<dt><code>!=</code></dt>

<dd>Not equal: 

<pre>
mysql&gt; SELECT '.01' &lt;&gt; '0.01';
        -&gt; 1
mysql&gt; SELECT .01 &lt;&gt; '0.01';
        -&gt; 0
mysql&gt; SELECT 'zapp' &lt;&gt; 'zappp';
        -&gt; 1
</pre>

<a id="IDX1102" name="IDX1102"></a> <a id="IDX1103"
name="IDX1103"></a></dd>

<dt><code>&lt;=</code></dt>

<dd>Less than or equal: 

<pre>
mysql&gt; SELECT 0.1 &lt;= 2;
        -&gt; 1
</pre>

<a id="IDX1104" name="IDX1104"></a> <a id="IDX1105"
name="IDX1105"></a></dd>

<dt><code>&lt;</code></dt>

<dd>Less than: 

<pre>
mysql&gt; SELECT 2 &lt; 2;
        -&gt; 0
</pre>

<a id="IDX1106" name="IDX1106"></a> <a id="IDX1107"
name="IDX1107"></a></dd>

<dt><code>&gt;=</code></dt>

<dd>Greater than or equal: 

<pre>
mysql&gt; SELECT 2 &gt;= 2;
        -&gt; 1
</pre>

<a id="IDX1108" name="IDX1108"></a> <a id="IDX1109"
name="IDX1109"></a></dd>

<dt><code>&gt;</code></dt>

<dd>Greater than: 

<pre>
mysql&gt; SELECT 2 &gt; 2;
        -&gt; 0
</pre>

<a id="IDX1110" name="IDX1110"></a> <a id="IDX1111"
name="IDX1111"></a></dd>

<dt><code>&lt;=&gt;</code></dt>

<dd>NULL safe equal: 

<pre>
mysql&gt; SELECT 1 &lt;=&gt; 1, NULL &lt;=&gt; NULL, 1 &lt;=&gt; NULL;
        -&gt; 1 1 0
</pre>

<a id="IDX1112" name="IDX1112"></a> <a id="IDX1113"
name="IDX1113"></a> <a id="IDX1114" name="IDX1114"></a></dd>

<dt><code>IS NULL</code></dt>

<dt><code>IS NOT NULL</code></dt>

<dd>Test whether a value is or is not <code>NULL</code>: 

<pre>
mysql&gt; SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;
        -&gt; 0 0 1
mysql&gt; SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;
        -&gt; 1 1 0
</pre>

<a id="IDX1115" name="IDX1115"></a> <a id="IDX1116"
name="IDX1116"></a> To be able to work good with other programs,
MySQL supports the following extra features when using <code>IS
NULL</code>: 

<ul>
<li>You can find the last inserted row with: 

<pre>
SELECT * FROM tbl_name WHERE auto_col IS NULL
</pre>

This can be disabled by setting <code>SQL_AUTO_IS_NULL=0</code>.
See section <a href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</li>

<li>For <code>NOT NULL</code> <code>DATE</code> and
<code>DATETIME</code> columns you can find the special date
<code>0000-00-00</code> by using: 

<pre>
SELECT * FROM tbl_name WHERE date_column IS NULL
</pre>

This is needed to get some ODBC applications to work (as ODBC
doesn't support a <code>0000-00-00</code> date)</li>
</ul>

<a id="IDX1117" name="IDX1117"></a></dd>

<dt><code>expr BETWEEN min AND max</code></dt>

<dd>If <code>expr</code> is greater than or equal to
<code>min</code> and <code>expr</code> is less than or equal to
<code>max</code>, <code>BETWEEN</code> returns <code>1</code>,
otherwise it returns <code>0</code>. This is equivalent to the
expression <code>(min &lt;= expr AND expr &lt;= max)</code> if all
the arguments are of the same type. Otherwise type conversion takes
place, according to the rules above, but applied to all the three
arguments. <strong>Note</strong> that before 4.0.5 arguments were
converted to the type of <code>expr</code> instead. 

<pre>
mysql&gt; SELECT 1 BETWEEN 2 AND 3;
        -&gt; 0
mysql&gt; SELECT 'b' BETWEEN 'a' AND 'c';
        -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND '3';
        -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND 'x-3';
        -&gt; 0
</pre>

<a id="IDX1118" name="IDX1118"></a></dd>

<dt><code>expr NOT BETWEEN min AND max</code></dt>

<dd>Same as <code>NOT (expr BETWEEN min AND max)</code>. <a
id="IDX1119" name="IDX1119"></a></dd>

<dt><code>expr IN (value,...)</code></dt>

<dd>Returns <code>1</code> if <code>expr</code> is any of the
values in the <code>IN</code> list, else returns <code>0</code>. If
all values are constants, then all values are evaluated according
to the type of <code>expr</code> and sorted. The search for the
item is then done using a binary search. This means <code>IN</code>
is very quick if the <code>IN</code> value list consists entirely
of constants. If <code>expr</code> is a case-sensitive string
expression, the string comparison is performed in case-sensitive
fashion: 

<pre>
mysql&gt; SELECT 2 IN (0,3,5,'wefwf');
        -&gt; 0
mysql&gt; SELECT 'wefwf' IN (0,3,5,'wefwf');
        -&gt; 1
</pre>

From 4.1 (in line with the SQL-99 standard), <code>IN</code>
returns <code>NULL</code> not only if the expression on the left
hand side is <code>NULL</code>, but also if no match is found in
the list and one of the expressions in the list is
<code>NULL</code>. <a id="IDX1120" name="IDX1120"></a></dd>

<dt><code>expr NOT IN (value,...)</code></dt>

<dd>Same as <code>NOT (expr IN (value,...))</code>. <a id="IDX1121"
name="IDX1121"></a></dd>

<dt><code>ISNULL(expr)</code></dt>

<dd>If <code>expr</code> is <code>NULL</code>,
<code>ISNULL()</code> returns <code>1</code>, otherwise it returns
<code>0</code>: 

<pre>
mysql&gt; SELECT ISNULL(1+1);
        -&gt; 0
mysql&gt; SELECT ISNULL(1/0);
        -&gt; 1
</pre>

Note that a comparison of <code>NULL</code> values using
<code>=</code> will always be false! <a id="IDX1122"
name="IDX1122"></a> <a id="IDX1123" name="IDX1123"></a></dd>

<dt><code>COALESCE(list)</code></dt>

<dd>Returns first non-<code>NULL</code> element in list: 

<pre>
mysql&gt; SELECT COALESCE(NULL,1);
        -&gt; 1
mysql&gt; SELECT COALESCE(NULL,NULL,NULL);
        -&gt; NULL
</pre>

<a id="IDX1124" name="IDX1124"></a></dd>

<dt><code>INTERVAL(N,N1,N2,N3,...)</code></dt>

<dd>Returns <code>0</code> if <code>N</code> &lt; <code>N1</code>,
<code>1</code> if <code>N</code> &lt; <code>N2</code> and so on.
All arguments are treated as integers. It is required that
<code>N1</code> &lt; <code>N2</code> &lt; <code>N3</code> &lt;
<code>...</code> &lt; <code>Nn</code> for this function to work
correctly. This is because a binary search is used (very fast): 

<pre>
mysql&gt; SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);
        -&gt; 3
mysql&gt; SELECT INTERVAL(10, 1, 10, 100, 1000);
        -&gt; 2
mysql&gt; SELECT INTERVAL(22, 23, 30, 44, 200);
        -&gt; 0
</pre>
</dd>
</dl>

<p>If you are comparing case-insensitive strings with any of the
standard operators (<code>=</code>, <code>&lt;&gt;</code>..., but
not <code>LIKE</code>) trailing whitespace (spaces, tabs and
newlines) will be ignored.</p>

<pre>
mysql&gt; SELECT "a" ="A \n";
        -&gt; 1
</pre>

<h4><a id="Logical_Operators" name="Logical_Operators"
href="manual_toc.html#Logical_Operators">6.3.1.3 Logical
Operators</a></h4>

<p><a id="IDX1125" name="IDX1125"></a> <a id="IDX1126"
name="IDX1126"></a></p>

<p>In SQL, all logical operators evaluate to TRUE, FALSE or NULL
(UNKNOWN). In MySQL, this is implemented as <code>1</code> (TRUE),
<code>0</code> (FALSE), and <code>NULL</code>. Most of this is
common between different SQL databases, however some may return any
non-zero value for TRUE.</p>

<dl compact="compact">
<dt><code>NOT</code></dt>

<dd><a id="IDX1127" name="IDX1127"></a> <a id="IDX1128"
name="IDX1128"></a></dd>

<dt><code>!</code></dt>

<dd>Logical NOT. Evaluates to <code>1</code> if the operand is
<code>0</code>, to <code>0</code> if the operand is non-zero, and
<code>NOT NULL</code> returns <code>NULL</code>. 

<pre>
mysql&gt; SELECT NOT 10;
        -&gt; 0
mysql&gt; SELECT NOT 0;
        -&gt; 1
mysql&gt; SELECT NOT NULL;
        -&gt; NULL
mysql&gt; SELECT ! (1+1);
        -&gt; 0
mysql&gt; SELECT ! 1+1;
        -&gt; 1
</pre>

The last example produces <code>1</code> because the expression
evaluates the same way as <code>(!1)+1</code>. <a id="IDX1129"
name="IDX1129"></a> <a id="IDX1130" name="IDX1130"></a></dd>

<dt><code>AND</code></dt>

<dt><code>&amp;&amp;</code></dt>

<dd>Logical AND. Evaluates to <code>1</code> if all operands are
non-zero and not <code>NULL</code>, to <code>0</code> if one or
more operands are <code>0</code>, otherwise <code>NULL</code> is
returned. 

<pre>
mysql&gt; SELECT 1 &amp;&amp; 1;
        -&gt; 1
mysql&gt; SELECT 1 &amp;&amp; 0;
        -&gt; 0
mysql&gt; SELECT 1 &amp;&amp; NULL;
        -&gt; NULL
mysql&gt; SELECT 0 &amp;&amp; NULL;
        -&gt; 0
mysql&gt; SELECT NULL &amp;&amp; 0;
        -&gt; 0
</pre>

Please note that MySQL versions prior to 4.0.5 stop evaluation when
a <code>NULL</code> is encountered, rather than continuing the
process to check for possible <code>0</code>s. This means that in
these versions, <code>SELECT (NULL AND 0)</code> returns
<code>NULL</code> instead of <code>0</code>. In 4.0.5 the code has
been re-engineered so that the result will always be as prescribed
by ANSI while still using the optimisation wherever possible. <a
id="IDX1131" name="IDX1131"></a> <a id="IDX1132"
name="IDX1132"></a></dd>

<dt><code>OR</code></dt>

<dt><code>||</code></dt>

<dd>Logical OR. Evaluates to <code>1</code> if any operand is
non-zero, to <code>NULL</code> if any operand is <code>NULL</code>,
otherwise <code>0</code> is returned. 

<pre>
mysql&gt; SELECT 1 || 1;
        -&gt; 1
mysql&gt; SELECT 1 || 0;
        -&gt; 1
mysql&gt; SELECT 0 || 0;
        -&gt; 0
mysql&gt; SELECT 0 || NULL;
        -&gt; NULL
mysql&gt; SELECT 1 || NULL;
        -&gt; 1
</pre>

<a id="IDX1133" name="IDX1133"></a></dd>

<dt><code>XOR</code></dt>

<dd>Logical XOR. Returns <code>NULL</code> if either operand is
<code>NULL</code>. For non-<code>NULL</code> operands, evaluates to
<code>1</code> if an odd number of operands is non-zero, otherwise
<code>0</code> is returned. 

<pre>
mysql&gt; SELECT 1 XOR 1;
        -&gt; 0
mysql&gt; SELECT 1 XOR 0;
        -&gt; 1
mysql&gt; SELECT 1 XOR NULL;
        -&gt; NULL
mysql&gt; SELECT 1 XOR 1 XOR 1;
        -&gt; 1
</pre>

<code>a XOR b</code> is mathematically equal to <code>(a AND (NOT
b)) OR ((NOT a) and b)</code>.</dd>
</dl>

<h4><a id="Control_flow_functions" name="Control_flow_functions"
href="manual_toc.html#Control_flow_functions">6.3.1.4 Control Flow
Functions</a></h4>

<p><a id="IDX1134" name="IDX1134"></a> <a id="IDX1135"
name="IDX1135"></a></p>

<dl compact="compact">
<dt><code>IFNULL(expr1,expr2)</code></dt>

<dd><a id="IDX1136" name="IDX1136"></a> <a id="IDX1137"
name="IDX1137"></a> If <code>expr1</code> is not <code>NULL</code>,
<code>IFNULL()</code> returns <code>expr1</code>, else it returns
<code>expr2</code>. <code>IFNULL()</code> returns a numeric or
string value, depending on the context in which it is used: 

<pre>
mysql&gt; SELECT IFNULL(1,0);
        -&gt; 1
mysql&gt; SELECT IFNULL(NULL,10);
        -&gt; 10
mysql&gt; SELECT IFNULL(1/0,10);
        -&gt; 10
mysql&gt; SELECT IFNULL(1/0,'yes');
        -&gt; 'yes'
</pre>

In 4.0.6 and above the default result value of
<code>IFNULL(expr1,expr2)</code> is the more 'general' of the two
expressions, in the order <code>STRING</code>, <code>REAL</code> or
<code>INTEGER</code>.The difference to earlier MySQL versions are
mostly notable when you create a table based on expressions or
MySQL has to internally store a value from <code>IFNULL()</code> in
a temporary table. 

<pre>
CREATE TABLE foo SELECT IFNULL(1,"test") as test;
</pre>

In MySQL 4.0.6 the type for column 'test' is <code>CHAR(4)</code>
while in earlier versions you would get <code>BIGINT</code>. <a
id="IDX1138" name="IDX1138"></a></dd>

<dt><code>NULLIF(expr1,expr2)</code></dt>

<dd>If <code>expr1 = expr2</code> is true, return <code>NULL</code>
else return <code>expr1</code>. This is the same as <code>CASE WHEN
x = y THEN NULL ELSE x END</code>: 

<pre>
mysql&gt; SELECT NULLIF(1,1);
        -&gt; NULL
mysql&gt; SELECT NULLIF(1,2);
        -&gt; 1
</pre>

Note that <code>expr1</code> is evaluated twice in MySQL if the
arguments are not equal. <a id="IDX1139" name="IDX1139"></a></dd>

<dt><code>IF(expr1,expr2,expr3)</code></dt>

<dd>If <code>expr1</code> is TRUE (<code>expr1 &lt;&gt; 0</code>
and <code>expr1 &lt;&gt; NULL</code>) then <code>IF()</code>
returns <code>expr2</code>, else it returns <code>expr3</code>.
<code>IF()</code> returns a numeric or string value, depending on
the context in which it is used: 

<pre>
mysql&gt; SELECT IF(1&gt;2,2,3);
        -&gt; 3
mysql&gt; SELECT IF(1&lt;2,'yes','no');
        -&gt; 'yes'
mysql&gt; SELECT IF(STRCMP('test','test1'),'no','yes');
        -&gt; 'no'
</pre>

If <code>expr2</code> or <code>expr3</code> is explicitely
<code>NULL</code> then the result type of the <code>IF()</code>
function is the type of the not <code>NULL</code> column. (This
behaviour is new in MySQL 4.0.3). <code>expr1</code> is evaluated
as an integer value, which means that if you are testing
floating-point or string values, you should do so using a
comparison operation: 

<pre>
mysql&gt; SELECT IF(0.1,1,0);
        -&gt; 0
mysql&gt; SELECT IF(0.1&lt;&gt;0,1,0);
        -&gt; 1
</pre>

In the first case above, <code>IF(0.1)</code> returns
<code>0</code> because <code>0.1</code> is converted to an integer
value, resulting in a test of <code>IF(0)</code>. This may not be
what you expect. In the second case, the comparison tests the
original floating-point value to see whether it is non-zero. The
result of the comparison is used as an integer. The default return
type of <code>IF()</code> (which may matter when it is stored into
a temporary table) is calculated in MySQL Version 3.23 as follows: 

<table border="1" width="100%">
<tr>
<td><strong>Expression</strong></td>
<td><strong>Return value</strong></td>
</tr>

<tr>
<td>expr2 or expr3 returns string</td>
<td>string</td>
</tr>

<tr>
<td>expr2 or expr3 returns a floating-point value</td>
<td>floating-point</td>
</tr>

<tr>
<td>expr2 or expr3 returns an integer</td>
<td>integer</td>
</tr>
</table>

If expr2 and expr3 are strings, then the result is case-insensitive
if both strings are case-insensitive. (Starting from 3.23.51) <a
id="IDX1140" name="IDX1140"></a></dd>

<dt><code>CASE value WHEN [compare-value] THEN result [WHEN
[compare-value] THEN result ...] [ELSE result] END</code></dt>

<dt><code>CASE WHEN [condition] THEN result [WHEN [condition] THEN
result ...] [ELSE result] END</code></dt>

<dd>The first version returns the <code>result</code> where
<code>value=compare-value</code>. The second version returns the
result for the first condition, which is true. If there was no
matching result value, then the result after <code>ELSE</code> is
returned. If there is no <code>ELSE</code> part then
<code>NULL</code> is returned: 

<pre>
mysql&gt; SELECT CASE 1 WHEN 1 THEN "one"
           WHEN 2 THEN "two" ELSE "more" END;
       -&gt; "one"
mysql&gt; SELECT CASE WHEN 1&gt;0 THEN "true" ELSE "false" END;
       -&gt; "true"
mysql&gt; SELECT CASE BINARY "B" WHEN "a" THEN 1 WHEN "b" THEN 2 END;
       -&gt; NULL
</pre>
</dd>
</dl>

<p>The type of the return value (<code>INTEGER</code>,
<code>DOUBLE</code> or <code>STRING</code>) is the same as the type
of the first returned value (the expression after the first
<code>THEN</code>).</p>

<h3><a id="String_functions" name="String_functions"
href="manual_toc.html#String_functions">6.3.2 String
Functions</a></h3>

<p><a id="IDX1141" name="IDX1141"></a> <a id="IDX1142"
name="IDX1142"></a></p>

<p>String-valued functions return <code>NULL</code> if the length
of the result would be greater than the
<code>max_allowed_packet</code> server parameter. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<p>For functions that operate on string positions, the first
position is numbered 1.</p>

<dl compact="compact">
<dt><code>ASCII(str)</code></dt>

<dd><a id="IDX1143" name="IDX1143"></a> Returns the ASCII code
value of the leftmost character of the string <code>str</code>.
Returns <code>0</code> if <code>str</code> is the empty string.
Returns <code>NULL</code> if <code>str</code> is <code>NULL</code>:


<pre>
mysql&gt; SELECT ASCII('2');
        -&gt; 50
mysql&gt; SELECT ASCII(2);
        -&gt; 50
mysql&gt; SELECT ASCII('dx');
        -&gt; 100
</pre>

See also the <code>ORD()</code> function. <a id="IDX1144"
name="IDX1144"></a></dd>

<dt><code>ORD(str)</code></dt>

<dd>If the leftmost character of the string <code>str</code> is a
multi-byte character, returns the code for that character,
calculated from the ASCII code values of its constituent characters
using this formula: <code>((first byte ASCII code)*256+(second byte
ASCII code))[*256+third byte ASCII code...]</code>. If the leftmost
character is not a multi-byte character, returns the same value
that the <code>ASCII()</code> function does: 

<pre>
mysql&gt; SELECT ORD('2');
        -&gt; 50
</pre>

<a id="IDX1145" name="IDX1145"></a></dd>

<dt><code>CONV(N,from_base,to_base)</code></dt>

<dd>Converts numbers between different number bases. Returns a
string representation of the number <code>N</code>, converted from
base <code>from_base</code> to base <code>to_base</code>. Returns
<code>NULL</code> if any argument is <code>NULL</code>. The
argument <code>N</code> is interpreted as an integer, but may be
specified as an integer or a string. The minimum base is
<code>2</code> and the maximum base is <code>36</code>. If
<code>to_base</code> is a negative number, <code>N</code> is
regarded as a signed number. Otherwise, <code>N</code> is treated
as unsigned. <code>CONV</code> works with 64-bit precision: 

<pre>
mysql&gt; SELECT CONV("a",16,2);
        -&gt; '1010'
mysql&gt; SELECT CONV("6E",18,8);
        -&gt; '172'
mysql&gt; SELECT CONV(-17,10,-18);
        -&gt; '-H'
mysql&gt; SELECT CONV(10+"10"+'10'+0xa,10,10);
        -&gt; '40'
</pre>

<a id="IDX1146" name="IDX1146"></a></dd>

<dt><code>BIN(N)</code></dt>

<dd>Returns a string representation of the binary value of
<code>N</code>, where <code>N</code> is a longlong
(<code>BIGINT</code>) number. This is equivalent to
<code>CONV(N,10,2)</code>. Returns <code>NULL</code> if
<code>N</code> is <code>NULL</code>: 

<pre>
mysql&gt; SELECT BIN(12);
        -&gt; '1100'
</pre>

<a id="IDX1147" name="IDX1147"></a></dd>

<dt><code>OCT(N)</code></dt>

<dd>Returns a string representation of the octal value of
<code>N</code>, where <code>N</code> is a longlong number. This is
equivalent to <code>CONV(N,10,8)</code>. Returns <code>NULL</code>
if <code>N</code> is <code>NULL</code>: 

<pre>
mysql&gt; SELECT OCT(12);
        -&gt; '14'
</pre>

<a id="IDX1148" name="IDX1148"></a></dd>

<dt><code>HEX(N_or_S)</code></dt>

<dd>If N_OR_S is a number, returns a string representation of the
hexadecimal value of <code>N</code>, where <code>N</code> is a
longlong (<code>BIGINT</code>) number. This is equivalent to
<code>CONV(N,10,16)</code>. If N_OR_S is a string, returns a
hexadecimal string of N_OR_S where each character in N_OR_S is
converted to 2 hexadecimal digits. This is the invers of the
<code>0xff</code> strings. 

<pre>
mysql&gt; SELECT HEX(255);
        -&gt; 'FF'
mysql&gt; SELECT HEX("abc");
        -&gt; 616263
mysql&gt; SELECT 0x616263;
        -&gt; "abc"
</pre>

<a id="IDX1149" name="IDX1149"></a></dd>

<dt><code>CHAR(N,...)</code></dt>

<dd><code>CHAR()</code> interprets the arguments as integers and
returns a string consisting of the characters given by the ASCII
code values of those integers. <code>NULL</code> values are
skipped: 

<pre>
mysql&gt; SELECT CHAR(77,121,83,81,'76');
        -&gt; 'MySQL'
mysql&gt; SELECT CHAR(77,77.3,'77.3');
        -&gt; 'MMM'
</pre>

<a id="IDX1150" name="IDX1150"></a></dd>

<dt><code>CONCAT(str1,str2,...)</code></dt>

<dd>Returns the string that results from concatenating the
arguments. Returns <code>NULL</code> if any argument is
<code>NULL</code>. May have more than 2 arguments. A numeric
argument is converted to the equivalent string form: 

<pre>
mysql&gt; SELECT CONCAT('My', 'S', 'QL');
        -&gt; 'MySQL'
mysql&gt; SELECT CONCAT('My', NULL, 'QL');
        -&gt; NULL
mysql&gt; SELECT CONCAT(14.3);
        -&gt; '14.3'
</pre>

<a id="IDX1151" name="IDX1151"></a></dd>

<dt><code>CONCAT_WS(separator, str1, str2,...)</code></dt>

<dd><code>CONCAT_WS()</code> stands for CONCAT With Separator and
is a special form of <code>CONCAT()</code>. The first argument is
the separator for the rest of the arguments. The separator can be a
string as well as the rest of the arguments. If the separator is
<code>NULL</code>, the result will be <code>NULL</code>. The
function will skip any <code>NULL</code>s and empty strings, after
the separator argument. The separator will be added between the
strings to be concatenated: 

<pre>
mysql&gt; SELECT CONCAT_WS(",","First name","Second name","Last Name");
       -&gt; 'First name,Second name,Last Name'
mysql&gt; SELECT CONCAT_WS(",","First name",NULL,"Last Name");
       -&gt; 'First name,Last Name'
</pre>

<a id="IDX1152" name="IDX1152"></a> <a id="IDX1153"
name="IDX1153"></a> <a id="IDX1154" name="IDX1154"></a> <a
id="IDX1155" name="IDX1155"></a></dd>

<dt><code>LENGTH(str)</code></dt>

<dt><code>OCTET_LENGTH(str)</code></dt>

<dt><code>CHAR_LENGTH(str)</code></dt>

<dt><code>CHARACTER_LENGTH(str)</code></dt>

<dd>Returns the length of the string <code>str</code>: 

<pre>
mysql&gt; SELECT LENGTH('text');
        -&gt; 4
mysql&gt; SELECT OCTET_LENGTH('text');
        -&gt; 4
</pre>

Note that for <code>CHAR_LENGTH()</code> and
<code>CHARACTER_LENGTH()</code>, multi-byte characters are only
counted once. <a id="IDX1156" name="IDX1156"></a></dd>

<dt><code>BIT_LENGTH(str)</code></dt>

<dd>Returns the length of the string <code>str</code> in bits: 

<pre>
mysql&gt; SELECT BIT_LENGTH('text');
        -&gt; 32
</pre>

<a id="IDX1157" name="IDX1157"></a> <a id="IDX1158"
name="IDX1158"></a></dd>

<dt><code>LOCATE(substr,str)</code></dt>

<dt><code>POSITION(substr IN str)</code></dt>

<dd>Returns the position of the first occurrence of substring
<code>substr</code> in string <code>str</code>. Returns
<code>0</code> if <code>substr</code> is not in <code>str</code>: 

<pre>
mysql&gt; SELECT LOCATE('bar', 'foobarbar');
        -&gt; 4
mysql&gt; SELECT LOCATE('xbar', 'foobar');
        -&gt; 0
</pre>

This function is multi-byte safe. In MySQL 3.23 this function is
case sensitive, while in 4.0 it's only case-sensitive if either
argument is a binary string. <a id="IDX1159"
name="IDX1159"></a></dd>

<dt><code>LOCATE(substr,str,pos)</code></dt>

<dd>Returns the position of the first occurrence of substring
<code>substr</code> in string <code>str</code>, starting at
position <code>pos</code>. Returns <code>0</code> if
<code>substr</code> is not in <code>str</code>: 

<pre>
mysql&gt; SELECT LOCATE('bar', 'foobarbar',5);
        -&gt; 7
</pre>

This function is multi-byte safe. In MySQL 3.23 this function is
case sensitive, while in 4.0 it's only case-sensitive if either
argument is a binary string. <a id="IDX1160"
name="IDX1160"></a></dd>

<dt><code>INSTR(str,substr)</code></dt>

<dd>Returns the position of the first occurrence of substring
<code>substr</code> in string <code>str</code>. This is the same as
the two-argument form of <code>LOCATE()</code>, except that the
arguments are swapped: 

<pre>
mysql&gt; SELECT INSTR('foobarbar', 'bar');
        -&gt; 4
mysql&gt; SELECT INSTR('xbar', 'foobar');
        -&gt; 0
</pre>

This function is multi-byte safe. In MySQL 3.23 this function is
case sensitive, while in 4.0 it's only case-sensitive if either
argument is a binary string. <a id="IDX1161"
name="IDX1161"></a></dd>

<dt><code>LPAD(str,len,padstr)</code></dt>

<dd>Returns the string <code>str</code>, left-padded with the
string <code>padstr</code> until <code>str</code> is
<code>len</code> characters long. If <code>str</code> is longer
than <code>len'</code> then it will be shortened to
<code>len</code> characters. 

<pre>
mysql&gt; SELECT LPAD('hi',4,'??');
        -&gt; '??hi'
</pre>

<a id="IDX1162" name="IDX1162"></a></dd>

<dt><code>RPAD(str,len,padstr)</code></dt>

<dd>Returns the string <code>str</code>, right-padded with the
string <code>padstr</code> until <code>str</code> is
<code>len</code> characters long. If <code>str</code> is longer
than <code>len'</code> then it will be shortened to
<code>len</code> characters. 

<pre>
mysql&gt; SELECT RPAD('hi',5,'?');
        -&gt; 'hi???'
</pre>

<a id="IDX1163" name="IDX1163"></a></dd>

<dt><code>LEFT(str,len)</code></dt>

<dd>Returns the leftmost <code>len</code> characters from the
string <code>str</code>: 

<pre>
mysql&gt; SELECT LEFT('foobarbar', 5);
        -&gt; 'fooba'
</pre>

This function is multi-byte safe. <a id="IDX1164"
name="IDX1164"></a></dd>

<dt><code>RIGHT(str,len)</code></dt>

<dd>Returns the rightmost <code>len</code> characters from the
string <code>str</code>: 

<pre>
mysql&gt; SELECT RIGHT('foobarbar', 4);
        -&gt; 'rbar'
</pre>

This function is multi-byte safe. <a id="IDX1165"
name="IDX1165"></a> <a id="IDX1166" name="IDX1166"></a></dd>

<dt><code>SUBSTRING(str,pos,len)</code></dt>

<dt><code>SUBSTRING(str FROM pos FOR len)</code></dt>

<dt><code>MID(str,pos,len)</code></dt>

<dd>Returns a substring <code>len</code> characters long from
string <code>str</code>, starting at position <code>pos</code>. The
variant form that uses <code>FROM</code> is ANSI SQL92 syntax: 

<pre>
mysql&gt; SELECT SUBSTRING('Quadratically',5,6);
        -&gt; 'ratica'
</pre>

This function is multi-byte safe. <a id="IDX1167"
name="IDX1167"></a></dd>

<dt><code>SUBSTRING(str,pos)</code></dt>

<dt><code>SUBSTRING(str FROM pos)</code></dt>

<dd>Returns a substring from string <code>str</code> starting at
position <code>pos</code>: 

<pre>
mysql&gt; SELECT SUBSTRING('Quadratically',5);
        -&gt; 'ratically'
mysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);
        -&gt; 'barbar'
</pre>

This function is multi-byte safe. <a id="IDX1168"
name="IDX1168"></a></dd>

<dt><code>SUBSTRING_INDEX(str,delim,count)</code></dt>

<dd>Returns the substring from string <code>str</code> before
<code>count</code> occurrences of the delimiter <code>delim</code>.
If <code>count</code> is positive, everything to the left of the
final delimiter (counting from the left) is returned. If
<code>count</code> is negative, everything to the right of the
final delimiter (counting from the right) is returned: 

<pre>
mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);
        -&gt; 'www.mysql'
mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);
        -&gt; 'mysql.com'
</pre>

This function is multi-byte safe. <a id="IDX1169"
name="IDX1169"></a></dd>

<dt><code>LTRIM(str)</code></dt>

<dd>Returns the string <code>str</code> with leading space
characters removed: 

<pre>
mysql&gt; SELECT LTRIM('  barbar');
        -&gt; 'barbar'
</pre>

<a id="IDX1170" name="IDX1170"></a></dd>

<dt><code>RTRIM(str)</code></dt>

<dd>Returns the string <code>str</code> with trailing space
characters removed: 

<pre>
mysql&gt; SELECT RTRIM('barbar   ');
        -&gt; 'barbar'
</pre>

This function is multi-byte safe. <a id="IDX1171"
name="IDX1171"></a></dd>

<dt><code>TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM]
str)</code></dt>

<dd>Returns the string <code>str</code> with all
<code>remstr</code> prefixes and/or suffixes removed. If none of
the specifiers <code>BOTH</code>, <code>LEADING</code> or
<code>TRAILING</code> are given, <code>BOTH</code> is assumed. If
<code>remstr</code> is not specified, spaces are removed: 

<pre>
mysql&gt; SELECT TRIM('  bar   ');
        -&gt; 'bar'
mysql&gt; SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
        -&gt; 'barxxx'
mysql&gt; SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
        -&gt; 'bar'
mysql&gt; SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
        -&gt; 'barx'
</pre>

This function is multi-byte safe. <a id="IDX1172"
name="IDX1172"></a></dd>

<dt><code>SOUNDEX(str)</code></dt>

<dd>Returns a soundex string from <code>str</code>. Two strings
that sound almost the same should have identical soundex strings. A
standard soundex string is 4 characters long, but the
<code>SOUNDEX()</code> function returns an arbitrarily long string.
You can use <code>SUBSTRING()</code> on the result to get a
standard soundex string. All non-alphanumeric characters are
ignored in the given string. All international alpha characters
outside the A-Z range are treated as vowels: 

<pre>
mysql&gt; SELECT SOUNDEX('Hello');
        -&gt; 'H400'
mysql&gt; SELECT SOUNDEX('Quadratically');
        -&gt; 'Q36324'
</pre>

<a id="IDX1173" name="IDX1173"></a></dd>

<dt><code>SPACE(N)</code></dt>

<dd>Returns a string consisting of <code>N</code> space characters:


<pre>
mysql&gt; SELECT SPACE(6);
        -&gt; '      '
</pre>

<a id="IDX1174" name="IDX1174"></a></dd>

<dt><code>REPLACE(str,from_str,to_str)</code></dt>

<dd>Returns the string <code>str</code> with all occurrences of the
string <code>from_str</code> replaced by the string
<code>to_str</code>: 

<pre>
mysql&gt; SELECT REPLACE('www.mysql.com', 'w', 'Ww');
        -&gt; 'WwWwWw.mysql.com'
</pre>

This function is multi-byte safe. <a id="IDX1175"
name="IDX1175"></a></dd>

<dt><code>REPEAT(str,count)</code></dt>

<dd>Returns a string consisting of the string <code>str</code>
repeated <code>count</code> times. If <code>count &lt;= 0</code>,
returns an empty string. Returns <code>NULL</code> if
<code>str</code> or <code>count</code> are <code>NULL</code>: 

<pre>
mysql&gt; SELECT REPEAT('MySQL', 3);
        -&gt; 'MySQLMySQLMySQL'
</pre>

<a id="IDX1176" name="IDX1176"></a></dd>

<dt><code>REVERSE(str)</code></dt>

<dd>Returns the string <code>str</code> with the order of the
characters reversed: 

<pre>
mysql&gt; SELECT REVERSE('abc');
        -&gt; 'cba'
</pre>

This function is multi-byte safe. <a id="IDX1177"
name="IDX1177"></a></dd>

<dt><code>INSERT(str,pos,len,newstr)</code></dt>

<dd>Returns the string <code>str</code>, with the substring
beginning at position <code>pos</code> and <code>len</code>
characters long replaced by the string <code>newstr</code>: 

<pre>
mysql&gt; SELECT INSERT('Quadratic', 3, 4, 'What');
        -&gt; 'QuWhattic'
</pre>

This function is multi-byte safe. <a id="IDX1178"
name="IDX1178"></a></dd>

<dt><code>ELT(N,str1,str2,str3,...)</code></dt>

<dd>Returns <code>str1</code> if <code>N</code> = <code>1</code>,
<code>str2</code> if <code>N</code> = <code>2</code>, and so on.
Returns <code>NULL</code> if <code>N</code> is less than
<code>1</code> or greater than the number of arguments.
<code>ELT()</code> is the complement of <code>FIELD()</code>: 

<pre>
mysql&gt; SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');
        -&gt; 'ej'
mysql&gt; SELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');
        -&gt; 'foo'
</pre>

<a id="IDX1179" name="IDX1179"></a></dd>

<dt><code>FIELD(str,str1,str2,str3,...)</code></dt>

<dd>Returns the index of <code>str</code> in the <code>str1</code>,
<code>str2</code>, <code>str3</code>, <code>...</code> list.
Returns <code>0</code> if <code>str</code> is not found.
<code>FIELD()</code> is the complement of <code>ELT()</code>: 

<pre>
mysql&gt; SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo');
        -&gt; 2
mysql&gt; SELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo');
        -&gt; 0
</pre>

<a id="IDX1180" name="IDX1180"></a></dd>

<dt><code>FIND_IN_SET(str,strlist)</code></dt>

<dd>Returns a value <code>1</code> to <code>N</code> if the string
<code>str</code> is in the list <code>strlist</code> consisting of
<code>N</code> substrings. A string list is a string composed of
substrings separated by <samp>`,'</samp> characters. If the first
argument is a constant string and the second is a column of type
<code>SET</code>, the <code>FIND_IN_SET()</code> function is
optimised to use bit arithmetic! Returns <code>0</code> if
<code>str</code> is not in <code>strlist</code> or if
<code>strlist</code> is the empty string. Returns <code>NULL</code>
if either argument is <code>NULL</code>. This function will not
work properly if the first argument contains a <samp>`,'</samp>: 

<pre>
mysql&gt; SELECT FIND_IN_SET('b','a,b,c,d');
        -&gt; 2
</pre>

<a id="IDX1181" name="IDX1181"></a></dd>

<dt><code>MAKE_SET(bits,str1,str2,...)</code></dt>

<dd>Returns a set (a string containing substrings separated by
<samp>`,'</samp> characters) consisting of the strings that have
the corresponding bit in <code>bits</code> set. <code>str1</code>
corresponds to bit 0, <code>str2</code> to bit 1, etc.
<code>NULL</code> strings in <code>str1</code>, <code>str2</code>,
<code>...</code> are not appended to the result: 

<pre>
mysql&gt; SELECT MAKE_SET(1,'a','b','c');
        -&gt; 'a'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice','world');
        -&gt; 'hello,world'
mysql&gt; SELECT MAKE_SET(0,'a','b','c');
        -&gt; ''
</pre>

<a id="IDX1182" name="IDX1182"></a></dd>

<dt>
<code>EXPORT_SET(bits,on,off,[separator,[number_of_bits]])</code></dt>

<dd>Returns a string where for every bit set in 'bit', you get an
'on' string and for every reset bit you get an 'off' string. Each
string is separated with 'separator' (default ',') and only
'number_of_bits' (default 64) of 'bits' is used: 

<pre>
mysql&gt; SELECT EXPORT_SET(5,'Y','N',',',4)
        -&gt; Y,N,Y,N
</pre>

<a id="IDX1183" name="IDX1183"></a> <a id="IDX1184"
name="IDX1184"></a></dd>

<dt><code>LCASE(str)</code></dt>

<dt><code>LOWER(str)</code></dt>

<dd>Returns the string <code>str</code> with all characters changed
to lowercase according to the current character set mapping (the
default is ISO-8859-1 Latin1): 

<pre>
mysql&gt; SELECT LCASE('QUADRATICALLY');
        -&gt; 'quadratically'
</pre>

This function is multi-byte safe. <a id="IDX1185"
name="IDX1185"></a> <a id="IDX1186" name="IDX1186"></a></dd>

<dt><code>UCASE(str)</code></dt>

<dt><code>UPPER(str)</code></dt>

<dd>Returns the string <code>str</code> with all characters changed
to uppercase according to the current character set mapping (the
default is ISO-8859-1 Latin1): 

<pre>
mysql&gt; SELECT UCASE('Hej');
        -&gt; 'HEJ'
</pre>

This function is multi-byte safe. <a id="IDX1187"
name="IDX1187"></a> <a id="IDX1188" name="IDX1188"></a></dd>

<dt><code>LOAD_FILE(file_name)</code></dt>

<dd>Reads the file and returns the file contents as a string. The
file must be on the server, you must specify the full pathname to
the file, and you must have the <code>FILE</code> privilege. The
file must be readable by all and be smaller than
<code>max_allowed_packet</code>. If the file doesn't exist or can't
be read due to one of the above reasons, the function returns
<code>NULL</code>: 

<pre>
mysql&gt; UPDATE tbl_name
           SET blob_column=LOAD_FILE("/tmp/picture")
           WHERE id=1;
</pre>

If you are not using MySQL Version 3.23, you have to do the reading
of the file inside your application and create an
<code>INSERT</code> statement to update the database with the file
information. One way to do this, if you are using the MySQL++
library, can be found at <a
href="http://www.mysql.com/documentation/mysql++/mysql++-examples.html">
http://www.mysql.com/documentation/mysql++/mysql++-examples.html</a>.
<a id="IDX1189" name="IDX1189"></a></dd>

<dt><code>QUOTE(str)</code></dt>

<dd>Quotes a string to produce a result that can be used as a
properly-escaped data value in a SQL statement. The string is
returned surrounded by single quotes and with each instance of
single quote (<samp>`''</samp>), backslash (<samp>`\'</samp>),
ASCII NUL, and Control-Z preceded by a backslash. If the argument
is <code>NULL</code>, the return value is the word ``NULL'' without
surrounding single quotes. 

<pre>
mysql&gt; SELECT QUOTE("Don't");
        -&gt; 'Don\'t!'
mysql&gt; SELECT QUOTE(NULL);
        -&gt; NULL
</pre>
</dd>
</dl>

<p>MySQL automatically converts numbers to strings as necessary,
and vice-versa:</p>

<pre>
mysql&gt; SELECT 1+"1";
        -&gt; 2
mysql&gt; SELECT CONCAT(2,' test');
        -&gt; '2 test'
</pre>

<p>If you want to convert a number to a string explicitly, pass it
as the argument to <code>CONCAT()</code>.</p>

<p>If a string function is given a binary string as an argument,
the resulting string is also a binary string. A number converted to
a string is treated as a binary string. This only affects
comparisons.</p>

<h4><a id="String_comparison_functions"
name="String_comparison_functions"
href="manual_toc.html#String_comparison_functions">6.3.2.1 String
Comparison Functions</a></h4>

<p><a id="IDX1190" name="IDX1190"></a> <a id="IDX1191"
name="IDX1191"></a></p>

<p><a id="IDX1192" name="IDX1192"></a> <a id="IDX1193"
name="IDX1193"></a></p>

<p>Normally, if any expression in a string comparison is
case-sensitive, the comparison is performed in case-sensitive
fashion.</p>

<dl compact="compact">
<dt><code>expr LIKE pat [ESCAPE 'escape-char']</code></dt>

<dd><a id="IDX1194" name="IDX1194"></a> Pattern matching using SQL
simple regular expression comparison. Returns <code>1</code> (TRUE)
or <code>0</code> (FALSE). With <code>LIKE</code> you can use the
following two wildcard characters in the pattern: 

<table border="1" width="100%">
<tr>
<td><strong>Char</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>%</code></td>
<td>Matches any number of characters, even zero characters</td>
</tr>

<tr>
<td><code>_</code></td>
<td>Matches exactly one character</td>
</tr>
</table>

<pre>
mysql&gt; SELECT 'David!' LIKE 'David_';
        -&gt; 1
mysql&gt; SELECT 'David!' LIKE '%D%v%';
        -&gt; 1
</pre>

To test for literal instances of a wildcard character, precede the
character with the escape character. If you don't specify the
<code>ESCAPE</code> character, <samp>`\'</samp> is assumed: 

<table border="1" width="100%">
<tr>
<td><strong>String</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>\%</code></td>
<td>Matches one <code>%</code> character</td>
</tr>

<tr>
<td><code>\_</code></td>
<td>Matches one <code>_</code> character</td>
</tr>
</table>

<pre>
mysql&gt; SELECT 'David!' LIKE 'David\_';
        -&gt; 0
mysql&gt; SELECT 'David_' LIKE 'David\_';
        -&gt; 1
</pre>

To specify a different escape character, use the
<code>ESCAPE</code> clause: 

<pre>
mysql&gt; SELECT 'David_' LIKE 'David|_' ESCAPE '|';
        -&gt; 1
</pre>

The following two statements illustrate that string comparisons are
case-insensitive unless one of the operands is a binary string: 

<pre>
mysql&gt; SELECT 'abc' LIKE 'ABC';
        -&gt; 1
mysql&gt; SELECT 'abc' LIKE BINARY 'ABC';
        -&gt; 0
</pre>

<code>LIKE</code> is allowed on numeric expressions! (This is a
MySQL extension to the ANSI SQL <code>LIKE</code>.) 

<pre>
mysql&gt; SELECT 10 LIKE '1%';
        -&gt; 1
</pre>

Note: Because MySQL uses the C escape syntax in strings (for
example, <samp>`\n'</samp>), you must double any <samp>`\'</samp>
that you use in your <code>LIKE</code> strings. For example, to
search for <samp>`\n'</samp>, specify it as <samp>`\\n'</samp>. To
search for <samp>`\'</samp>, specify it as <samp>`\\\\'</samp> (the
backslashes are stripped once by the parser and another time when
the pattern match is done, leaving a single backslash to be
matched). <a id="IDX1195" name="IDX1195"></a></dd>

<dt><code>expr NOT LIKE pat [ESCAPE 'escape-char']</code></dt>

<dd>Same as <code>NOT (expr LIKE pat [ESCAPE
'escape-char'])</code>. <a id="IDX1196" name="IDX1196"></a></dd>

<dt><code>expr SOUNDS LIKE expr</code></dt>

<dd>Same as <code>SOUNDEX(expr)=SOUNDEX(expr)</code> (available
only in version 4.1 or later). <a id="IDX1197" name="IDX1197"></a>
<a id="IDX1198" name="IDX1198"></a> <a id="IDX1199"
name="IDX1199"></a> <a id="IDX1200" name="IDX1200"></a></dd>

<dt><code>expr REGEXP pat</code></dt>

<dt><code>expr RLIKE pat</code></dt>

<dd>Performs a pattern match of a string expression
<code>expr</code> against a pattern <code>pat</code>. The pattern
can be an extended regular expression. See section <a
href="manual.html#Regexp">G MySQL Regular Expressions</a>. Returns
<code>1</code> if <code>expr</code> matches <code>pat</code>,
otherwise returns <code>0</code>. <code>RLIKE</code> is a synonym
for <code>REGEXP</code>, provided for <code>mSQL</code>
compatibility. Note: Because MySQL uses the C escape syntax in
strings (for example, <samp>`\n'</samp>), you must double any
<samp>`\'</samp> that you use in your <code>REGEXP</code> strings.
As of MySQL Version 3.23.4, <code>REGEXP</code> is case-insensitive
for normal (not binary) strings: 

<pre>
mysql&gt; SELECT 'Monty!' REGEXP 'm%y%%';
        -&gt; 0
mysql&gt; SELECT 'Monty!' REGEXP '.*';
        -&gt; 1
mysql&gt; SELECT 'new*\n*line' REGEXP 'new\\*.\\*line';
        -&gt; 1
mysql&gt; SELECT "a" REGEXP "A", "a" REGEXP BINARY "A";
        -&gt; 1  0
mysql&gt; SELECT "a" REGEXP "^[a-d]";
        -&gt; 1
</pre>

<code>REGEXP</code> and <code>RLIKE</code> use the current
character set (ISO-8859-1 Latin1 by default) when deciding the type
of a character. <a id="IDX1201" name="IDX1201"></a></dd>

<dt><code>expr NOT REGEXP pat</code></dt>

<dt><code>expr NOT RLIKE pat</code></dt>

<dd>Same as <code>NOT (expr REGEXP pat)</code>. <a id="IDX1202"
name="IDX1202"></a></dd>

<dt><code>STRCMP(expr1,expr2)</code></dt>

<dd><code>STRCMP()</code> returns <code>0</code> if the strings are
the same, <code>-1</code> if the first argument is smaller than the
second according to the current sort order, and <code>1</code>
otherwise: 

<pre>
mysql&gt; SELECT STRCMP('text', 'text2');
        -&gt; -1
mysql&gt; SELECT STRCMP('text2', 'text');
        -&gt; 1
mysql&gt; SELECT STRCMP('text', 'text');
        -&gt; 0
</pre>

<a id="IDX1203" name="IDX1203"></a></dd>

<dt><code>MATCH (col1,col2,...) AGAINST (expr)</code></dt>

<dt><code>MATCH (col1,col2,...) AGAINST (expr IN BOOLEAN
MODE)</code></dt>

<dd><code>MATCH ... AGAINST()</code> is used for full-text search
and returns relevance - similarity measure between the text in
columns <code>(col1,col2,...)</code> and the query
<code>expr</code>. Relevance is a positive floating-point number.
Zero relevance means no similarity. <code>MATCH ...
AGAINST()</code> is available in MySQL version 3.23.23 or later.
<code>IN BOOLEAN MODE</code> extension was added in version 4.0.1.
For details and usage examples, see section <a
href="manual.html#Fulltext_Search">6.8 MySQL Full-text
Search</a>.</dd>
</dl>

<h4><a id="Case_Sensitivity_Operators"
name="Case_Sensitivity_Operators"
href="manual_toc.html#Case_Sensitivity_Operators">6.3.2.2
Case-Sensitivity</a></h4>

<p><a id="IDX1204" name="IDX1204"></a></p>

<p><a id="IDX1205" name="IDX1205"></a> <a id="IDX1206"
name="IDX1206"></a></p>

<dl compact="compact">
<dt><code><code>BINARY</code></code></dt>

<dd><a id="IDX1207" name="IDX1207"></a> The <code>BINARY</code>
operator casts the string following it to a binary string. This is
an easy way to force a column comparison to be case-sensitive even
if the column isn't defined as <code>BINARY</code> or
<code>BLOB</code>: 

<pre>
mysql&gt; SELECT "a" = "A";
        -&gt; 1
mysql&gt; SELECT BINARY "a" = "A";
        -&gt; 0
</pre>

<code>BINARY string</code> is a shorthand for <code>CAST(string AS
BINARY)</code>. See section <a
href="manual.html#Cast_Functions">6.3.5 Cast Functions</a>.
<code>BINARY</code> was introduced in MySQL Version 3.23.0. Note
that in some context MySQL will not be able to use the index
efficiently when you cast an indexed column to
<code>BINARY</code>.</dd>
</dl>

<p>If you want to compare a blob case-insensitively you can always
convert the blob to upper case before doing the comparison:</p>

<pre>
SELECT 'A' LIKE UPPER(blob_col) FROM table_name;
</pre>

<p>We plan to soon introduce casting between different character
sets to make string comparison even more flexible.</p>

<h3><a id="Numeric_Functions" name="Numeric_Functions"
href="manual_toc.html#Numeric_Functions">6.3.3 Numeric
Functions</a></h3>

<h4><a id="Arithmetic_functions" name="Arithmetic_functions"
href="manual_toc.html#Arithmetic_functions">6.3.3.1 Arithmetic
Operations</a></h4>

<p><a id="IDX1208" name="IDX1208"></a> The usual arithmetic
operators are available. Note that in the case of <samp>`-'</samp>,
<samp>`+'</samp>, and <samp>`*'</samp>, the result is calculated
with <code>BIGINT</code> (64-bit) precision if both arguments are
integers! If one of the argument is an unsigned integer, and the
other argument is also an integer, the result will be an unsigned
integer. See section <a href="manual.html#Cast_Functions">6.3.5
Cast Functions</a>.</p>

<p><a id="IDX1209" name="IDX1209"></a> <a id="IDX1210"
name="IDX1210"></a></p>

<dl compact="compact">
<dt><code>+</code></dt>

<dd><a id="IDX1211" name="IDX1211"></a> <a id="IDX1212"
name="IDX1212"></a> Addition: 

<pre>
mysql&gt; SELECT 3+5;
        -&gt; 8
</pre>

<a id="IDX1213" name="IDX1213"></a> <a id="IDX1214"
name="IDX1214"></a></dd>

<dt><code>-</code></dt>

<dd>Subtraction: 

<pre>
mysql&gt; SELECT 3-5;
        -&gt; -2
</pre>

<a id="IDX1215" name="IDX1215"></a> <a id="IDX1216"
name="IDX1216"></a></dd>

<dt><code>*</code></dt>

<dd>Multiplication: 

<pre>
mysql&gt; SELECT 3*5;
        -&gt; 15
mysql&gt; SELECT 18014398509481984*18014398509481984.0;
        -&gt; 324518553658426726783156020576256.0
mysql&gt; SELECT 18014398509481984*18014398509481984;
        -&gt; 0
</pre>

The result of the last expression is incorrect because the result
of the integer multiplication exceeds the 64-bit range of
<code>BIGINT</code> calculations. <a id="IDX1217"
name="IDX1217"></a> <a id="IDX1218" name="IDX1218"></a></dd>

<dt><code>/</code></dt>

<dd>Division: 

<pre>
mysql&gt; SELECT 3/5;
        -&gt; 0.60
</pre>

Division by zero produces a <code>NULL</code> result: 

<pre>
mysql&gt; SELECT 102/(1-1);
        -&gt; NULL
</pre>

A division will be calculated with <code>BIGINT</code> arithmetic
only if performed in a context where its result is converted to an
integer!</dd>
</dl>

<h4><a id="Mathematical_functions" name="Mathematical_functions"
href="manual_toc.html#Mathematical_functions">6.3.3.2 Mathematical
Functions</a></h4>

<p>All mathematical functions return <code>NULL</code> in case of
an error.</p>

<p><a id="IDX1219" name="IDX1219"></a> <a id="IDX1220"
name="IDX1220"></a></p>

<dl compact="compact">
<dt><code>-</code></dt>

<dd><a id="IDX1221" name="IDX1221"></a> <a id="IDX1222"
name="IDX1222"></a> <a id="IDX1223" name="IDX1223"></a> Unary
minus. Changes the sign of the argument: 

<pre>
mysql&gt; SELECT - 2;
        -&gt; -2
</pre>

Note that if this operator is used with a <code>BIGINT</code>, the
return value is a <code>BIGINT</code>! This means that you should
avoid using <code>-</code> on integers that may have the value of
<code>-2^63</code>! <a id="IDX1224" name="IDX1224"></a></dd>

<dt><code>ABS(X)</code></dt>

<dd>Returns the absolute value of <code>X</code>: 

<pre>
mysql&gt; SELECT ABS(2);
        -&gt; 2
mysql&gt; SELECT ABS(-32);
        -&gt; 32
</pre>

This function is safe to use with <code>BIGINT</code> values. <a
id="IDX1225" name="IDX1225"></a></dd>

<dt><code>SIGN(X)</code></dt>

<dd>Returns the sign of the argument as <code>-1</code>,
<code>0</code>, or <code>1</code>, depending on whether
<code>X</code> is negative, zero, or positive: 

<pre>
mysql&gt; SELECT SIGN(-32);
        -&gt; -1
mysql&gt; SELECT SIGN(0);
        -&gt; 0
mysql&gt; SELECT SIGN(234);
        -&gt; 1
</pre>

<a id="IDX1226" name="IDX1226"></a> <a id="IDX1227"
name="IDX1227"></a> <a id="IDX1228" name="IDX1228"></a></dd>

<dt><code>MOD(N,M)</code></dt>

<dt><code>%</code></dt>

<dd>Modulo (like the <code>%</code> operator in C). Returns the
remainder of <code>N</code> divided by <code>M</code>: 

<pre>
mysql&gt; SELECT MOD(234, 10);
        -&gt; 4
mysql&gt; SELECT 253 % 7;
        -&gt; 1
mysql&gt; SELECT MOD(29,9);
        -&gt; 2
</pre>

This function is safe to use with <code>BIGINT</code> values. <a
id="IDX1229" name="IDX1229"></a></dd>

<dt><code>FLOOR(X)</code></dt>

<dd>Returns the largest integer value not greater than
<code>X</code>: 

<pre>
mysql&gt; SELECT FLOOR(1.23);
        -&gt; 1
mysql&gt; SELECT FLOOR(-1.23);
        -&gt; -2
</pre>

Note that the return value is converted to a <code>BIGINT</code>!
<a id="IDX1230" name="IDX1230"></a></dd>

<dt><code>CEILING(X)</code></dt>

<dd>Returns the smallest integer value not less than
<code>X</code>: 

<pre>
mysql&gt; SELECT CEILING(1.23);
        -&gt; 2
mysql&gt; SELECT CEILING(-1.23);
        -&gt; -1
</pre>

Note that the return value is converted to a <code>BIGINT</code>!
<a id="IDX1231" name="IDX1231"></a></dd>

<dt><code>ROUND(X)</code></dt>

<dd>Returns the argument <code>X</code>, rounded to the nearest
integer: 

<pre>
mysql&gt; SELECT ROUND(-1.23);
        -&gt; -1
mysql&gt; SELECT ROUND(-1.58);
        -&gt; -2
mysql&gt; SELECT ROUND(1.58);
        -&gt; 2
</pre>

Note that the behaviour of <code>ROUND()</code> when the argument
is half way between two integers depends on the C library
implementation. Some round to the nearest even number, always up,
always down, or always toward zero. If you need one kind of
rounding, you should use a well-defined function like
<code>TRUNCATE()</code> or <code>FLOOR()</code> instead. <a
id="IDX1232" name="IDX1232"></a></dd>

<dt><code>ROUND(X,D)</code></dt>

<dd>Returns the argument <code>X</code>, rounded to a number with
<code>D</code> decimals. If <code>D</code> is <code>0</code>, the
result will have no decimal point or fractional part: 

<pre>
mysql&gt; SELECT ROUND(1.298, 1);
        -&gt; 1.3
mysql&gt; SELECT ROUND(1.298, 0);
        -&gt; 1
</pre>

<a id="IDX1233" name="IDX1233"></a></dd>

<dt><code>EXP(X)</code></dt>

<dd>Returns the value of <code>e</code> (the base of natural
logarithms) raised to the power of <code>X</code>: 

<pre>
mysql&gt; SELECT EXP(2);
        -&gt; 7.389056
mysql&gt; SELECT EXP(-2);
        -&gt; 0.135335
</pre>

<a id="IDX1234" name="IDX1234"></a></dd>

<dt><code>LN(X)</code></dt>

<dd>Returns the natural logarithm of <code>X</code>: 

<pre>
mysql&gt; SELECT LN(2);
        -&gt; 0.693147
mysql&gt; SELECT LN(-2);
        -&gt; NULL
</pre>

This function was added in MySQL version 4.0.3. It is synonymous
with <code>LOG(X)</code> in MySQL. <a id="IDX1235"
name="IDX1235"></a></dd>

<dt><code>LOG(X)</code></dt>

<dt><code>LOG(B,X)</code></dt>

<dd>If called with one parameter, this function returns the natural
logarithm of <code>X</code>: 

<pre>
mysql&gt; SELECT LOG(2);
        -&gt; 0.693147
mysql&gt; SELECT LOG(-2);
        -&gt; NULL
</pre>

If called with two parameters, this function returns the logarithm
of <code>X</code> for an arbitary base <code>B</code>: 

<pre>
mysql&gt; SELECT LOG(2,65536);
        -&gt; 16.000000
mysql&gt; SELECT LOG(1,100);
        -&gt; NULL
</pre>

The arbitrary base option was added in MySQL version 4.0.3.
<code>LOG(B,X)</code> is equivalent to <code>LOG(X)/LOG(B)</code>.
<a id="IDX1236" name="IDX1236"></a></dd>

<dt><code>LOG2(X)</code></dt>

<dd>Returns the base-2 logarithm of <code>X</code>: 

<pre>
mysql&gt; SELECT LOG2(65536);
        -&gt; 16.000000
mysql&gt; SELECT LOG2(-100);
        -&gt; NULL
</pre>

<code>LOG2()</code> is useful for finding out how many bits a
number would require for storage. This function was added in MySQL
version 4.0.3. In earlier versions, you can use
<code>LOG(X)/LOG(2)</code> instead. <a id="IDX1237"
name="IDX1237"></a></dd>

<dt><code>LOG10(X)</code></dt>

<dd>Returns the base-10 logarithm of <code>X</code>: 

<pre>
mysql&gt; SELECT LOG10(2);
        -&gt; 0.301030
mysql&gt; SELECT LOG10(100);
        -&gt; 2.000000
mysql&gt; SELECT LOG10(-100);
        -&gt; NULL
</pre>

<a id="IDX1238" name="IDX1238"></a> <a id="IDX1239"
name="IDX1239"></a></dd>

<dt><code>POW(X,Y)</code></dt>

<dt><code>POWER(X,Y)</code></dt>

<dd>Returns the value of <code>X</code> raised to the power of
<code>Y</code>: 

<pre>
mysql&gt; SELECT POW(2,2);
        -&gt; 4.000000
mysql&gt; SELECT POW(2,-2);
        -&gt; 0.250000
</pre>

<a id="IDX1240" name="IDX1240"></a></dd>

<dt><code>SQRT(X)</code></dt>

<dd>Returns the non-negative square root of <code>X</code>: 

<pre>
mysql&gt; SELECT SQRT(4);
        -&gt; 2.000000
mysql&gt; SELECT SQRT(20);
        -&gt; 4.472136
</pre>

<a id="IDX1241" name="IDX1241"></a></dd>

<dt><code>PI()</code></dt>

<dd>Returns the value of PI. The default shown number of decimals
is 5, but MySQL internally uses the full double precession for PI. 

<pre>
mysql&gt; SELECT PI();
        -&gt; 3.141593
mysql&gt; SELECT PI()+0.000000000000000000;
        -&gt; 3.141592653589793116
</pre>

<a id="IDX1242" name="IDX1242"></a></dd>

<dt><code>COS(X)</code></dt>

<dd>Returns the cosine of <code>X</code>, where <code>X</code> is
given in radians: 

<pre>
mysql&gt; SELECT COS(PI());
        -&gt; -1.000000
</pre>

<a id="IDX1243" name="IDX1243"></a></dd>

<dt><code>SIN(X)</code></dt>

<dd>Returns the sine of <code>X</code>, where <code>X</code> is
given in radians: 

<pre>
mysql&gt; SELECT SIN(PI());
        -&gt; 0.000000
</pre>

<a id="IDX1244" name="IDX1244"></a></dd>

<dt><code>TAN(X)</code></dt>

<dd>Returns the tangent of <code>X</code>, where <code>X</code> is
given in radians: 

<pre>
mysql&gt; SELECT TAN(PI()+1);
        -&gt; 1.557408
</pre>

<a id="IDX1245" name="IDX1245"></a></dd>

<dt><code>ACOS(X)</code></dt>

<dd>Returns the arc cosine of <code>X</code>, that is, the value
whose cosine is <code>X</code>. Returns <code>NULL</code> if
<code>X</code> is not in the range <code>-1</code> to
<code>1</code>: 

<pre>
mysql&gt; SELECT ACOS(1);
        -&gt; 0.000000
mysql&gt; SELECT ACOS(1.0001);
        -&gt; NULL
mysql&gt; SELECT ACOS(0);
        -&gt; 1.570796
</pre>

<a id="IDX1246" name="IDX1246"></a></dd>

<dt><code>ASIN(X)</code></dt>

<dd>Returns the arc sine of <code>X</code>, that is, the value
whose sine is <code>X</code>. Returns <code>NULL</code> if
<code>X</code> is not in the range <code>-1</code> to
<code>1</code>: 

<pre>
mysql&gt; SELECT ASIN(0.2);
        -&gt; 0.201358
mysql&gt; SELECT ASIN('foo');
        -&gt; 0.000000
</pre>

<a id="IDX1247" name="IDX1247"></a></dd>

<dt><code>ATAN(X)</code></dt>

<dd>Returns the arc tangent of <code>X</code>, that is, the value
whose tangent is <code>X</code>: 

<pre>
mysql&gt; SELECT ATAN(2);
        -&gt; 1.107149
mysql&gt; SELECT ATAN(-2);
        -&gt; -1.107149
</pre>

<a id="IDX1248" name="IDX1248"></a></dd>

<dt><code>ATAN(Y,X)</code></dt>

<dt><code>ATAN2(Y,X)</code></dt>

<dd>Returns the arc tangent of the two variables <code>X</code> and
<code>Y</code>. It is similar to calculating the arc tangent of
<code>Y / X</code>, except that the signs of both arguments are
used to determine the quadrant of the result: 

<pre>
mysql&gt; SELECT ATAN(-2,2);
        -&gt; -0.785398
mysql&gt; SELECT ATAN2(PI(),0);
        -&gt; 1.570796
</pre>

<a id="IDX1249" name="IDX1249"></a></dd>

<dt><code>COT(X)</code></dt>

<dd>Returns the cotangent of <code>X</code>: 

<pre>
mysql&gt; SELECT COT(12);
        -&gt; -1.57267341
mysql&gt; SELECT COT(0);
        -&gt; NULL
</pre>

<a id="IDX1250" name="IDX1250"></a></dd>

<dt><code>RAND()</code></dt>

<dt><code>RAND(N)</code></dt>

<dd>Returns a random floating-point value in the range
<code>0</code> to <code>1.0</code>. If an integer argument
<code>N</code> is specified, it is used as the seed value: 

<pre>
mysql&gt; SELECT RAND();
        -&gt; 0.9233482386203
mysql&gt; SELECT RAND(20);
        -&gt; 0.15888261251047
mysql&gt; SELECT RAND(20);
        -&gt; 0.15888261251047
mysql&gt; SELECT RAND();
        -&gt; 0.63553050033332
mysql&gt; SELECT RAND();
        -&gt; 0.70100469486881
</pre>

You can't use a column with <code>RAND()</code> values in an
<code>ORDER BY</code> clause, because <code>ORDER BY</code> would
evaluate the column multiple times. In MySQL Version 3.23, you can,
however, do: <code>SELECT * FROM table_name ORDER BY RAND()</code>
This is useful to get a random sample of a set <code>SELECT * FROM
table1,table2 WHERE a=b AND c&lt;d ORDER BY RAND() LIMIT
1000</code>. Note that a <code>RAND()</code> in a
<code>WHERE</code> clause will be re-evaluated every time the
<code>WHERE</code> is executed. <code>RAND()</code> is not meant to
be a perfect random generator, but instead a fast way to generate
ad hoc random numbers that will be portable between platforms for
the same MySQL version. <a id="IDX1251" name="IDX1251"></a></dd>

<dt><code>LEAST(X,Y,...)</code></dt>

<dd>With two or more arguments, returns the smallest
(minimum-valued) argument. The arguments are compared using the
following rules: 

<ul>
<li>If the return value is used in an <code>INTEGER</code> context,
or all arguments are integer-valued, they are compared as
integers.</li>

<li>If the return value is used in a <code>REAL</code> context, or
all arguments are real-valued, they are compared as reals.</li>

<li>If any argument is a case-sensitive string, the arguments are
compared as case-sensitive strings.</li>

<li>In other cases, the arguments are compared as case-insensitive
strings:</li>
</ul>

<pre>
mysql&gt; SELECT LEAST(2,0);
        -&gt; 0
mysql&gt; SELECT LEAST(34.0,3.0,5.0,767.0);
        -&gt; 3.0
mysql&gt; SELECT LEAST("B","A","C");
        -&gt; "A"
</pre>

In MySQL versions prior to Version 3.22.5, you can use
<code>MIN()</code> instead of <code>LEAST</code>. <a id="IDX1252"
name="IDX1252"></a></dd>

<dt><code>GREATEST(X,Y,...)</code></dt>

<dd>Returns the largest (maximum-valued) argument. The arguments
are compared using the same rules as for <code>LEAST</code>: 

<pre>
mysql&gt; SELECT GREATEST(2,0);
        -&gt; 2
mysql&gt; SELECT GREATEST(34.0,3.0,5.0,767.0);
        -&gt; 767.0
mysql&gt; SELECT GREATEST("B","A","C");
        -&gt; "C"
</pre>

In MySQL versions prior to Version 3.22.5, you can use
<code>MAX()</code> instead of <code>GREATEST</code>. <a
id="IDX1253" name="IDX1253"></a></dd>

<dt><code>DEGREES(X)</code></dt>

<dd>Returns the argument <code>X</code>, converted from radians to
degrees: 

<pre>
mysql&gt; SELECT DEGREES(PI());
        -&gt; 180.000000
</pre>

<a id="IDX1254" name="IDX1254"></a></dd>

<dt><code>RADIANS(X)</code></dt>

<dd>Returns the argument <code>X</code>, converted from degrees to
radians: 

<pre>
mysql&gt; SELECT RADIANS(90);
        -&gt; 1.570796
</pre>

<a id="IDX1255" name="IDX1255"></a></dd>

<dt><code>TRUNCATE(X,D)</code></dt>

<dd>Returns the number <code>X</code>, truncated to <code>D</code>
decimals. If <code>D</code> is <code>0</code>, the result will have
no decimal point or fractional part: 

<pre>
mysql&gt; SELECT TRUNCATE(1.223,1);
        -&gt; 1.2
mysql&gt; SELECT TRUNCATE(1.999,1);
        -&gt; 1.9
mysql&gt; SELECT TRUNCATE(1.999,0);
        -&gt; 1
mysql&gt; SELECT TRUNCATE(-1.999,1);
        -&gt; -1.9
</pre>

Starting from MySQL 3.23.51 all numbers are rounded towards zero.
If <code>D</code> is negative, then the whole part of the number is
zeroed out: 

<pre>
mysql&gt; SELECT TRUNCATE(122,-2);
       -&gt; 100
</pre>

Note that as decimal numbers are normally not stored as exact
numbers in computers, but as double values, you may be fooled by
the following result: <a id="IDX1256" name="IDX1256"></a> 

<pre>
mysql&gt; SELECT TRUNCATE(10.28*100,0);
       -&gt; 1027
</pre>

The above happens because 10.28 is actually stored as something
like 10.2799999999999999.</dd>
</dl>

<h3><a id="Date_and_time_functions" name="Date_and_time_functions"
href="manual_toc.html#Date_and_time_functions">6.3.4 Date and Time
Functions</a></h3>

<p><a id="IDX1257" name="IDX1257"></a> <a id="IDX1258"
name="IDX1258"></a></p>

<p>See section <a href="manual.html#Date_and_time_types">6.2.2 Date
and Time Types</a> for a description of the range of values each
type has and the valid formats in which date and time values may be
specified.</p>

<p>Here is an example that uses date functions. The following query
selects all records with a <code>date_col</code> value from within
the last 30 days:</p>

<pre>
mysql&gt; SELECT something FROM tbl_name
           WHERE TO_DAYS(NOW()) - TO_DAYS(date_col) &lt;= 30;
</pre>

<dl compact="compact">
<dt><code>DAYOFWEEK(date)</code></dt>

<dd><a id="IDX1259" name="IDX1259"></a> Returns the weekday index
for <code>date</code> (<code>1</code> = Sunday, <code>2</code> =
Monday, ... <code>7</code> = Saturday). These index values
correspond to the ODBC standard. 

<pre>
mysql&gt; SELECT DAYOFWEEK('1998-02-03');
        -&gt; 3
</pre>

<a id="IDX1260" name="IDX1260"></a></dd>

<dt><code>WEEKDAY(date)</code></dt>

<dd>Returns the weekday index for <code>date</code> (<code>0</code>
= Monday, <code>1</code> = Tuesday, ... <code>6</code> = Sunday): 

<pre>
mysql&gt; SELECT WEEKDAY('1998-02-03 22:23:00');
        -&gt; 1
mysql&gt; SELECT WEEKDAY('1997-11-05');
        -&gt; 2
</pre>

<a id="IDX1261" name="IDX1261"></a></dd>

<dt><code>DAYOFMONTH(date)</code></dt>

<dd>Returns the day of the month for <code>date</code>, in the
range <code>1</code> to <code>31</code>: 

<pre>
mysql&gt; SELECT DAYOFMONTH('1998-02-03');
        -&gt; 3
</pre>

<a id="IDX1262" name="IDX1262"></a></dd>

<dt><code>DAYOFYEAR(date)</code></dt>

<dd>Returns the day of the year for <code>date</code>, in the range
<code>1</code> to <code>366</code>: 

<pre>
mysql&gt; SELECT DAYOFYEAR('1998-02-03');
        -&gt; 34
</pre>

<a id="IDX1263" name="IDX1263"></a></dd>

<dt><code>MONTH(date)</code></dt>

<dd>Returns the month for <code>date</code>, in the range
<code>1</code> to <code>12</code>: 

<pre>
mysql&gt; SELECT MONTH('1998-02-03');
        -&gt; 2
</pre>

<a id="IDX1264" name="IDX1264"></a></dd>

<dt><code>DAYNAME(date)</code></dt>

<dd>Returns the name of the weekday for <code>date</code>: 

<pre>
mysql&gt; SELECT DAYNAME("1998-02-05");
        -&gt; 'Thursday'
</pre>

<a id="IDX1265" name="IDX1265"></a></dd>

<dt><code>MONTHNAME(date)</code></dt>

<dd>Returns the name of the month for <code>date</code>: 

<pre>
mysql&gt; SELECT MONTHNAME("1998-02-05");
        -&gt; 'February'
</pre>

<a id="IDX1266" name="IDX1266"></a></dd>

<dt><code>QUARTER(date)</code></dt>

<dd>Returns the quarter of the year for <code>date</code>, in the
range <code>1</code> to <code>4</code>: 

<pre>
mysql&gt; SELECT QUARTER('98-04-01');
        -&gt; 2
</pre>

<a id="IDX1267" name="IDX1267"></a></dd>

<dt><code>WEEK(date)</code></dt>

<dt><code>WEEK(date,first)</code></dt>

<dd>With a single argument, returns the week for <code>date</code>,
in the range <code>0</code> to <code>53</code> (yes, there may be
the beginnings of a week 53), for locations where Sunday is the
first day of the week. The two-argument form of <code>WEEK()</code>
allows you to specify whether the week starts on Sunday or Monday
and if you the return value should be in range <code>0-53</code> or
<code>1-52</code>. Here is a table for how the second arguments
work: 

<table border="1" width="100%">
<tr>
<td><strong>Value</strong></td>
<td><code>Meaning</code></td>
</tr>

<tr>
<td>0</td>
<td>Week starts on Sunday and return value is in range 0-53</td>
</tr>

<tr>
<td>1</td>
<td>Week starts on Monday and return value is in range 0-53</td>
</tr>

<tr>
<td>2</td>
<td>Week starts on Sunday and return value is in range 1-53</td>
</tr>

<tr>
<td>3</td>
<td>Week starts on Monday and return value is in range 1-53 (ISO
8601)</td>
</tr>
</table>

<pre>
mysql&gt; SELECT WEEK('1998-02-20');
        -&gt; 7
mysql&gt; SELECT WEEK('1998-02-20',0);
        -&gt; 7
mysql&gt; SELECT WEEK('1998-02-20',1);
        -&gt; 8
mysql&gt; SELECT WEEK('1998-12-31',1);
        -&gt; 53
</pre>

Note: in Version 4.0, <code>WEEK(#,0)</code> was changed to match
the calendar in the USA. Note that if a week is the last week of
the previous year, MySQL will return 0 if you don't use 2 or 3 as
the optional argument: 

<pre>
mysql&gt; SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);
        -&gt; 2000, 0
mysql&gt; SELECT WEEK('2000-01-01',2);
        -&gt; 52
</pre>

One could argue that MySQL should return <code>52</code> for the
<code>WEEK()</code> function as the given date is actually the 52
second week of 1999. We decided to return 0 instead as we want the
function to return 'the week number in the given year'. This makes
the usage of the <code>WEEK()</code> function reliable when
combined with other functions that extracts a date part from a
date. If you would prefer to know the correct year-week, then you
should use the 2 or 3 as the optional argument or use the
<code>YEARWEEK()</code> function: 

<pre>
mysql&gt; SELECT YEARWEEK('2000-01-01');
        -&gt; 199952
mysql&gt; SELECT MID(YEARWEEK('2000-01-01'),5,2);
        -&gt; 52
</pre>

<a id="IDX1268" name="IDX1268"></a></dd>

<dt><code>YEAR(date)</code></dt>

<dd>Returns the year for <code>date</code>, in the range
<code>1000</code> to <code>9999</code>: 

<pre>
mysql&gt; SELECT YEAR('98-02-03');
        -&gt; 1998
</pre>
</dd>

<dt><code>YEARWEEK(date)</code></dt>

<dt><code>YEARWEEK(date,first)</code></dt>

<dd>Returns year and week for a date. The second arguments works
exactly like the second argument to <code>WEEK()</code>. Note that
the year may be different from the year in the date argument for
the first and the last week of the year: 

<pre>
mysql&gt; SELECT YEARWEEK('1987-01-01');
        -&gt; 198653
</pre>

Note that the week number is different from what the
<code>WEEK()</code> function would return (<code>0</code>) for
optional arguments 0 or 1, as <code>WEEK()</code> then returns the
week in the context of the given year. <a id="IDX1269"
name="IDX1269"></a></dd>

<dt><code>HOUR(time)</code></dt>

<dd>Returns the hour for <code>time</code>, in the range
<code>0</code> to <code>23</code>: 

<pre>
mysql&gt; SELECT HOUR('10:05:03');
        -&gt; 10
</pre>

<a id="IDX1270" name="IDX1270"></a></dd>

<dt><code>MINUTE(time)</code></dt>

<dd>Returns the minute for <code>time</code>, in the range
<code>0</code> to <code>59</code>: 

<pre>
mysql&gt; SELECT MINUTE('98-02-03 10:05:03');
        -&gt; 5
</pre>

<a id="IDX1271" name="IDX1271"></a></dd>

<dt><code>SECOND(time)</code></dt>

<dd>Returns the second for <code>time</code>, in the range
<code>0</code> to <code>59</code>: 

<pre>
mysql&gt; SELECT SECOND('10:05:03');
        -&gt; 3
</pre>

<a id="IDX1272" name="IDX1272"></a></dd>

<dt><code>PERIOD_ADD(P,N)</code></dt>

<dd>Adds <code>N</code> months to period <code>P</code> (in the
format <code>YYMM</code> or <code>YYYYMM</code>). Returns a value
in the format <code>YYYYMM</code>. Note that the period argument
<code>P</code> is <strong>not</strong> a date value: 

<pre>
mysql&gt; SELECT PERIOD_ADD(9801,2);
        -&gt; 199803
</pre>

<a id="IDX1273" name="IDX1273"></a></dd>

<dt><code>PERIOD_DIFF(P1,P2)</code></dt>

<dd>Returns the number of months between periods <code>P1</code>
and <code>P2</code>. <code>P1</code> and <code>P2</code> should be
in the format <code>YYMM</code> or <code>YYYYMM</code>. Note that
the period arguments <code>P1</code> and <code>P2</code> are
<strong>not</strong> date values: 

<pre>
mysql&gt; SELECT PERIOD_DIFF(9802,199703);
        -&gt; 11
</pre>

<a id="IDX1274" name="IDX1274"></a> <a id="IDX1275"
name="IDX1275"></a> <a id="IDX1276" name="IDX1276"></a> <a
id="IDX1277" name="IDX1277"></a> <a id="IDX1278"
name="IDX1278"></a></dd>

<dt><code>DATE_ADD(date,INTERVAL expr type)</code></dt>

<dt><code>DATE_SUB(date,INTERVAL expr type)</code></dt>

<dt><code>ADDDATE(date,INTERVAL expr type)</code></dt>

<dt><code>SUBDATE(date,INTERVAL expr type)</code></dt>

<dd>These functions perform date arithmetic. They are new for MySQL
Version 3.22. <code>ADDDATE()</code> and <code>SUBDATE()</code> are
synonyms for <code>DATE_ADD()</code> and <code>DATE_SUB()</code>.
In MySQL Version 3.23, you can use <code>+</code> and
<code>-</code> instead of <code>DATE_ADD()</code> and
<code>DATE_SUB()</code> if the expression on the right side is a
date or datetime column. (See example below.) <code>date</code> is
a <code>DATETIME</code> or <code>DATE</code> value specifying the
starting date. <code>expr</code> is an expression specifying the
interval value to be added or subtracted from the starting date.
<code>expr</code> is a string; it may start with a <samp>`-'</samp>
for negative intervals. <code>type</code> is a keyword indicating
how the expression should be interpreted. The related function
<code>EXTRACT(type FROM date)</code> returns the 'type' interval
from the date. The following table shows how the <code>type</code>
and <code>expr</code> arguments are related: 

<table border="1" width="100%">
<tr>
<td><code>type</code> <strong>value</strong></td>
<td><strong>Expected</strong> <code>expr</code>
<strong>format</strong></td>
</tr>

<tr>
<td><code>SECOND</code></td>
<td><code>SECONDS</code></td>
</tr>

<tr>
<td><code>MINUTE</code></td>
<td><code>MINUTES</code></td>
</tr>

<tr>
<td><code>HOUR</code></td>
<td><code>HOURS</code></td>
</tr>

<tr>
<td><code>DAY</code></td>
<td><code>DAYS</code></td>
</tr>

<tr>
<td><code>MONTH</code></td>
<td><code>MONTHS</code></td>
</tr>

<tr>
<td><code>YEAR</code></td>
<td><code>YEARS</code></td>
</tr>

<tr>
<td><code>MINUTE_SECOND</code></td>
<td><code>"MINUTES:SECONDS"</code></td>
</tr>

<tr>
<td><code>HOUR_MINUTE</code></td>
<td><code>"HOURS:MINUTES"</code></td>
</tr>

<tr>
<td><code>DAY_HOUR</code></td>
<td><code>"DAYS HOURS"</code></td>
</tr>

<tr>
<td><code>YEAR_MONTH</code></td>
<td><code>"YEARS-MONTHS"</code></td>
</tr>

<tr>
<td><code>HOUR_SECOND</code></td>
<td><code>"HOURS:MINUTES:SECONDS"</code></td>
</tr>

<tr>
<td><code>DAY_MINUTE</code></td>
<td><code>"DAYS HOURS:MINUTES"</code></td>
</tr>

<tr>
<td><code>DAY_SECOND</code></td>
<td><code>"DAYS HOURS:MINUTES:SECONDS"</code></td>
</tr>
</table>

MySQL allows any punctuation delimiter in the <code>expr</code>
format. Those shown in the table are the suggested delimiters. If
the <code>date</code> argument is a <code>DATE</code> value and
your calculations involve only <code>YEAR</code>,
<code>MONTH</code>, and <code>DAY</code> parts (that is, no time
parts), the result is a <code>DATE</code> value. Otherwise, the
result is a <code>DATETIME</code> value: 

<pre>
mysql&gt; SELECT "1997-12-31 23:59:59" + INTERVAL 1 SECOND;
        -&gt; 1998-01-01 00:00:00
mysql&gt; SELECT INTERVAL 1 DAY + "1997-12-31";
        -&gt; 1998-01-01
mysql&gt; SELECT "1998-01-01" - INTERVAL 1 SECOND;
       -&gt; 1997-12-31 23:59:59
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
    -&gt;                 INTERVAL 1 SECOND);
        -&gt; 1998-01-01 00:00:00
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
    -&gt;                 INTERVAL 1 DAY);
        -&gt; 1998-01-01 23:59:59
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
    -&gt;                 INTERVAL "1:1" MINUTE_SECOND);
        -&gt; 1998-01-01 00:01:00
mysql&gt; SELECT DATE_SUB("1998-01-01 00:00:00",
    -&gt;                 INTERVAL "1 1:1:1" DAY_SECOND);
        -&gt; 1997-12-30 22:58:59
mysql&gt; SELECT DATE_ADD("1998-01-01 00:00:00",
    -&gt;                 INTERVAL "-1 10" DAY_HOUR);
        -&gt; 1997-12-30 14:00:00
mysql&gt; SELECT DATE_SUB("1998-01-02", INTERVAL 31 DAY);
        -&gt; 1997-12-02
</pre>

If you specify an interval value that is too short (does not
include all the interval parts that would be expected from the
<code>type</code> keyword), MySQL assumes you have left out the
leftmost parts of the interval value. For example, if you specify a
<code>type</code> of <code>DAY_SECOND</code>, the value of
<code>expr</code> is expected to have days, hours, minutes, and
seconds parts. If you specify a value like <code>"1:10"</code>,
MySQL assumes that the days and hours parts are missing and the
value represents minutes and seconds. In other words, <code>"1:10"
DAY_SECOND</code> is interpreted in such a way that it is
equivalent to <code>"1:10" MINUTE_SECOND</code>. This is analogous
to the way that MySQL interprets <code>TIME</code> values as
representing elapsed time rather than as time of day. Note that if
you add or subtract a date value against something that contains a
time part, the date value will be automatically converted to a
datetime value: 

<pre>
mysql&gt; SELECT DATE_ADD("1999-01-01", INTERVAL 1 DAY);
       -&gt; 1999-01-02
mysql&gt; SELECT DATE_ADD("1999-01-01", INTERVAL 1 HOUR);
       -&gt; 1999-01-01 01:00:00
</pre>

If you use really incorrect dates, the result is <code>NULL</code>.
If you add <code>MONTH</code>, <code>YEAR_MONTH</code>, or
<code>YEAR</code> and the resulting date has a day that is larger
than the maximum day for the new month, the day is adjusted to the
maximum days in the new month: 

<pre>
mysql&gt; SELECT DATE_ADD('1998-01-30', INTERVAL 1 MONTH);
        -&gt; 1998-02-28
</pre>

Note from the preceding example that the word <code>INTERVAL</code>
and the <code>type</code> keyword are not case-sensitive. <a
id="IDX1279" name="IDX1279"></a></dd>

<dt><code>EXTRACT(type FROM date)</code></dt>

<dd>The <code>EXTRACT()</code> function uses the same kinds of
interval type specifiers as <code>DATE_ADD()</code> or
<code>DATE_SUB()</code>, but extracts parts from the date rather
than performing date arithmetic. 

<pre>
mysql&gt; SELECT EXTRACT(YEAR FROM "1999-07-02");
       -&gt; 1999
mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM "1999-07-02 01:02:03");
       -&gt; 199907
mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM "1999-07-02 01:02:03");
       -&gt; 20102
</pre>

<a id="IDX1280" name="IDX1280"></a></dd>

<dt><code>TO_DAYS(date)</code></dt>

<dd>Given a date <code>date</code>, returns a daynumber (the number
of days since year 0): 

<pre>
mysql&gt; SELECT TO_DAYS(950501);
        -&gt; 728779
mysql&gt; SELECT TO_DAYS('1997-10-07');
        -&gt; 729669
</pre>

<code>TO_DAYS()</code> is not intended for use with values that
precede the advent of the Gregorian calendar (1582), because it
doesn't take into account the days that were lost when the calendar
was changed. <a id="IDX1281" name="IDX1281"></a></dd>

<dt><code>FROM_DAYS(N)</code></dt>

<dd>Given a daynumber <code>N</code>, returns a <code>DATE</code>
value: 

<pre>
mysql&gt; SELECT FROM_DAYS(729669);
        -&gt; '1997-10-07'
</pre>

<code>FROM_DAYS()</code> is not intended for use with values that
precede the advent of the Gregorian calendar (1582), because it
doesn't take into account the days that were lost when the calendar
was changed. <a id="IDX1282" name="IDX1282"></a></dd>

<dt><code>DATE_FORMAT(date,format)</code></dt>

<dd>Formats the <code>date</code> value according to the
<code>format</code> string. The following specifiers may be used in
the <code>format</code> string: 

<table border="1" width="100%">
<tr>
<td><strong>Specifier</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>%M</code></td>
<td>Month name (<code>January</code>..<code>December</code>)</td>
</tr>

<tr>
<td><code>%W</code></td>
<td>Weekday name (<code>Sunday</code>..<code>Saturday</code>)</td>
</tr>

<tr>
<td><code>%D</code></td>
<td>Day of the month with English suffix (<code>0th</code>,
<code>1st</code>, <code>2nd</code>, <code>3rd</code>, etc.)</td>
</tr>

<tr>
<td><code>%Y</code></td>
<td>Year, numeric, 4 digits</td>
</tr>

<tr>
<td><code>%y</code></td>
<td>Year, numeric, 2 digits</td>
</tr>

<tr>
<td><code>%X</code></td>
<td>Year for the week where Sunday is the first day of the week,
numeric, 4 digits, used with '%V'</td>
</tr>

<tr>
<td><code>%x</code></td>
<td>Year for the week, where Monday is the first day of the week,
numeric, 4 digits, used with '%v'</td>
</tr>

<tr>
<td><code>%a</code></td>
<td>Abbreviated weekday name
(<code>Sun</code>..<code>Sat</code>)</td>
</tr>

<tr>
<td><code>%d</code></td>
<td>Day of the month, numeric
(<code>00</code>..<code>31</code>)</td>
</tr>

<tr>
<td><code>%e</code></td>
<td>Day of the month, numeric
(<code>0</code>..<code>31</code>)</td>
</tr>

<tr>
<td><code>%m</code></td>
<td>Month, numeric (<code>00</code>..<code>12</code>)</td>
</tr>

<tr>
<td><code>%c</code></td>
<td>Month, numeric (<code>0</code>..<code>12</code>)</td>
</tr>

<tr>
<td><code>%b</code></td>
<td>Abbreviated month name
(<code>Jan</code>..<code>Dec</code>)</td>
</tr>

<tr>
<td><code>%j</code></td>
<td>Day of year (<code>001</code>..<code>366</code>)</td>
</tr>

<tr>
<td><code>%H</code></td>
<td>Hour (<code>00</code>..<code>23</code>)</td>
</tr>

<tr>
<td><code>%k</code></td>
<td>Hour (<code>0</code>..<code>23</code>)</td>
</tr>

<tr>
<td><code>%h</code></td>
<td>Hour (<code>01</code>..<code>12</code>)</td>
</tr>

<tr>
<td><code>%I</code></td>
<td>Hour (<code>01</code>..<code>12</code>)</td>
</tr>

<tr>
<td><code>%l</code></td>
<td>Hour (<code>1</code>..<code>12</code>)</td>
</tr>

<tr>
<td><code>%i</code></td>
<td>Minutes, numeric (<code>00</code>..<code>59</code>)</td>
</tr>

<tr>
<td><code>%r</code></td>
<td>Time, 12-hour (<code>hh:mm:ss [AP]M</code>)</td>
</tr>

<tr>
<td><code>%T</code></td>
<td>Time, 24-hour (<code>hh:mm:ss</code>)</td>
</tr>

<tr>
<td><code>%S</code></td>
<td>Seconds (<code>00</code>..<code>59</code>)</td>
</tr>

<tr>
<td><code>%s</code></td>
<td>Seconds (<code>00</code>..<code>59</code>)</td>
</tr>

<tr>
<td><code>%p</code></td>
<td><code>AM</code> or <code>PM</code></td>
</tr>

<tr>
<td><code>%w</code></td>
<td>Day of the week
(<code>0</code>=Sunday..<code>6</code>=Saturday)</td>
</tr>

<tr>
<td><code>%U</code></td>
<td>Week (<code>00</code>..<code>53</code>), where Sunday is the
first day of the week</td>
</tr>

<tr>
<td><code>%u</code></td>
<td>Week (<code>00</code>..<code>53</code>), where Monday is the
first day of the week</td>
</tr>

<tr>
<td><code>%V</code></td>
<td>Week (<code>01</code>..<code>53</code>), where Sunday is the
first day of the week. Used with '%X'</td>
</tr>

<tr>
<td><code>%v</code></td>
<td>Week (<code>01</code>..<code>53</code>), where Monday is the
first day of the week. Used with '%x'</td>
</tr>

<tr>
<td><code>%%</code></td>
<td>A literal <samp>`%'</samp>.</td>
</tr>
</table>

All other characters are just copied to the result without
interpretation: 

<pre>
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');
        -&gt; 'Saturday October 1997'
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00', '%H:%i:%s');
        -&gt; '22:23:00'
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00',
                          '%D %y %a %d %m %b %j');
        -&gt; '4th 97 Sat 04 10 Oct 277'
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00',
                          '%H %k %I %r %T %S %w');
        -&gt; '22 22 10 10:23:00 PM 22:23:00 00 6'
mysql&gt; SELECT DATE_FORMAT('1999-01-01', '%X %V');
        -&gt; '1998 52'
</pre>

As of MySQL Version 3.23, the <samp>`%'</samp> character is
required before format specifier characters. In earlier versions of
MySQL, <samp>`%'</samp> was optional. The reason the ranges for the
month and day specifiers begin with zero is that MySQL allows
incomplete dates such as <code>'2004-00-00'</code> to be stored as
of MySQL 3.23. <a id="IDX1283" name="IDX1283"></a></dd>

<dt><code>TIME_FORMAT(time,format)</code></dt>

<dd>This is used like the <code>DATE_FORMAT()</code> function
above, but the <code>format</code> string may contain only those
format specifiers that handle hours, minutes, and seconds. Other
specifiers produce a <code>NULL</code> value or <code>0</code>. <a
id="IDX1284" name="IDX1284"></a> <a id="IDX1285"
name="IDX1285"></a></dd>

<dt><code>CURDATE()</code></dt>

<dt><code>CURRENT_DATE</code></dt>

<dd>Returns today's date as a value in <code>'YYYY-MM-DD'</code> or
<code>YYYYMMDD</code> format, depending on whether the function is
used in a string or numeric context: 

<pre>
mysql&gt; SELECT CURDATE();
        -&gt; '1997-12-15'
mysql&gt; SELECT CURDATE() + 0;
        -&gt; 19971215
</pre>

<a id="IDX1286" name="IDX1286"></a> <a id="IDX1287"
name="IDX1287"></a></dd>

<dt><code>CURTIME()</code></dt>

<dt><code>CURRENT_TIME</code></dt>

<dd>Returns the current time as a value in <code>'HH:MM:SS'</code>
or <code>HHMMSS</code> format, depending on whether the function is
used in a string or numeric context: 

<pre>
mysql&gt; SELECT CURTIME();
        -&gt; '23:50:26'
mysql&gt; SELECT CURTIME() + 0;
        -&gt; 235026
</pre>

<a id="IDX1288" name="IDX1288"></a> <a id="IDX1289"
name="IDX1289"></a> <a id="IDX1290" name="IDX1290"></a></dd>

<dt><code>NOW()</code></dt>

<dt><code>SYSDATE()</code></dt>

<dt><code>CURRENT_TIMESTAMP</code></dt>

<dd>Returns the current date and time as a value in
<code>'YYYY-MM-DD HH:MM:SS'</code> or <code>YYYYMMDDHHMMSS</code>
format, depending on whether the function is used in a string or
numeric context: 

<pre>
mysql&gt; SELECT NOW();
        -&gt; '1997-12-15 23:50:26'
mysql&gt; SELECT NOW() + 0;
        -&gt; 19971215235026
</pre>

Note that <code>NOW()</code> is only evaluated once per query,
namely at the start of query execution. This means that multiple
references to <code>NOW()</code> within a single query will always
give the same time. <a id="IDX1291" name="IDX1291"></a></dd>

<dt><code>UNIX_TIMESTAMP()</code></dt>

<dt><code>UNIX_TIMESTAMP(date)</code></dt>

<dd>If called with no argument, returns a Unix timestamp (seconds
since <code>'1970-01-01 00:00:00'</code> GMT) as an unsigned
integer. If <code>UNIX_TIMESTAMP()</code> is called with a
<code>date</code> argument, it returns the value of the argument as
seconds since <code>'1970-01-01 00:00:00'</code> GMT.
<code>date</code> may be a <code>DATE</code> string, a
<code>DATETIME</code> string, a <code>TIMESTAMP</code>, or a number
in the format <code>YYMMDD</code> or <code>YYYYMMDD</code> in local
time: 

<pre>
mysql&gt; SELECT UNIX_TIMESTAMP();
        -&gt; 882226357
mysql&gt; SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');
        -&gt; 875996580
</pre>

When <code>UNIX_TIMESTAMP</code> is used on a
<code>TIMESTAMP</code> column, the function will return the
internal timestamp value directly, with no implicit
``string-to-unix-timestamp'' conversion. If you pass an
out-of-range date to <code>UNIX_TIMESTAMP()</code> it will return
0, but please note that only basic checking is performed (year
1970-2037, month 01-12, day 01-31). If you want to subtract
<code>UNIX_TIMESTAMP()</code> columns, you may want to cast the
result to signed integers. See section <a
href="manual.html#Cast_Functions">6.3.5 Cast Functions</a>. <a
id="IDX1292" name="IDX1292"></a></dd>

<dt><code>FROM_UNIXTIME(unix_timestamp)</code></dt>

<dd>Returns a representation of the <code>unix_timestamp</code>
argument as a value in <code>'YYYY-MM-DD HH:MM:SS'</code> or
<code>YYYYMMDDHHMMSS</code> format, depending on whether the
function is used in a string or numeric context: 

<pre>
mysql&gt; SELECT FROM_UNIXTIME(875996580);
        -&gt; '1997-10-04 22:23:00'
mysql&gt; SELECT FROM_UNIXTIME(875996580) + 0;
        -&gt; 19971004222300
</pre>

<a id="IDX1293" name="IDX1293"></a></dd>

<dt><code>FROM_UNIXTIME(unix_timestamp,format)</code></dt>

<dd>Returns a string representation of the Unix timestamp,
formatted according to the <code>format</code> string.
<code>format</code> may contain the same specifiers as those listed
in the entry for the <code>DATE_FORMAT()</code> function: 

<pre>
mysql&gt; SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(),
                            '%Y %D %M %h:%i:%s %x');
        -&gt; '1997 23rd December 03:43:30 1997'
</pre>

<a id="IDX1294" name="IDX1294"></a></dd>

<dt><code>SEC_TO_TIME(seconds)</code></dt>

<dd>Returns the <code>seconds</code> argument, converted to hours,
minutes, and seconds, as a value in <code>'HH:MM:SS'</code> or
<code>HHMMSS</code> format, depending on whether the function is
used in a string or numeric context: 

<pre>
mysql&gt; SELECT SEC_TO_TIME(2378);
        -&gt; '00:39:38'
mysql&gt; SELECT SEC_TO_TIME(2378) + 0;
        -&gt; 3938
</pre>

<a id="IDX1295" name="IDX1295"></a></dd>

<dt><code>TIME_TO_SEC(time)</code></dt>

<dd>Returns the <code>time</code> argument, converted to seconds: 

<pre>
mysql&gt; SELECT TIME_TO_SEC('22:23:00');
        -&gt; 80580
mysql&gt; SELECT TIME_TO_SEC('00:39:38');
        -&gt; 2378
</pre>
</dd>
</dl>

<h3><a id="Cast_Functions" name="Cast_Functions"
href="manual_toc.html#Cast_Functions">6.3.5 Cast Functions</a></h3>

<p>The syntax of the <code>CAST</code> function is:</p>

<p><a id="IDX1296" name="IDX1296"></a> <a id="IDX1297"
name="IDX1297"></a></p>

<pre>
CAST(expression AS type)

or

CONVERT(expression,type)
</pre>

<p>Where type is one of:</p>

<ul>
<li><code>BINARY</code></li>

<li><code>CHAR</code> (New in 4.0.6)</li>

<li><code>DATE</code></li>

<li><code>DATETIME</code></li>

<li><code>SIGNED {INTEGER}</code></li>

<li><code>TIME</code></li>

<li><code>UNSIGNED {INTEGER}</code></li>
</ul>

<p><code>CAST()</code> is ANSI SQL99 syntax and
<code>CONVERT()</code> is ODBC syntax.</p>

<p>The cast function is mainly useful when you want to create a
column with a specific type in a <code>CREATE ...
SELECT</code>:</p>

<pre>
CREATE TABLE new_table SELECT CAST('2000-01-01' AS DATE);
</pre>

<p><code>CAST(string AS BINARY</code> is the same thing as
<code>BINARY string</code>. <code>CAST(expr AS CHAR</code> threats
expression to be a string with the default character set.</p>

<p>To cast a string to a numeric value, you don't normally have to
do anything; just use the string value as it would be a number:</p>

<pre>
mysql&gt; SELECT 1+'1';
       -&gt; 2
</pre>

<p>If you use a number in string context the number will
automatically be converted to a <code>BINARY</code> string.</p>

<p>mysql&gt; SELECT concat("hello you ",2); -&gt; "hello you 2"</p>

<p>MySQL supports arithmetic with both signed and unsigned 64-bit
values. If you are using an numerical operations (like
<code>+</code>) and one of the operands are <code>unsigned
integer</code>, then the result will be unsigned. You can override
this by using the <code>SIGNED</code> and <code>UNSIGNED</code>
cast operators, which will cast the operation to a signed or
unsigned 64-bit integer, respectively.</p>

<pre>
mysql&gt; SELECT CAST(1-2 AS UNSIGNED)
        -&gt; 18446744073709551615
mysql&gt; SELECT CAST(CAST(1-2 AS UNSIGNED) AS SIGNED);
        -&gt; -1
</pre>

<p>Note that if either operation is a floating-point value (In this
context <code>DECIMAL()</code> is regarded as a floating-point
value) the result will be a floating-point value and is not
affected by the above rule.</p>

<pre>
mysql&gt; SELECT CAST(1 AS UNSIGNED) -2.0
        -&gt; -1.0
</pre>

<p>If you are using a string in an arithmetic operation, this is
converted to a floating-point number.</p>

<p>The <code>CAST()</code> and <code>CONVERT()</code> functions
were added in MySQL 4.0.2.</p>

<p>The handing of unsigned values was changed in MySQL 4.0 to be
able to support <code>BIGINT</code> values properly. If you have
some code that you want to run in both MySQL 4.0 and 3.23 (in which
case you probably can't use the CAST function), you can use the
following trick to get a signed result when subtracting two
unsigned integer columns:</p>

<pre>
SELECT (unsigned_column_1+0.0)-(unsigned_column_2+0.0);
</pre>

<p>The idea is that the columns are converted to floating-point
before doing the subtraction.</p>

<p>If you get a problem with <code>UNSIGNED</code> columns in your
old MySQL application when porting to MySQL 4.0, you can use the
<code>--sql-mode=NO_UNSIGNED_SUBTRACTION</code> option when
starting <code>mysqld</code>. Note however that as long as you use
this, you will not be able to make efficient use of the
<code>UNSIGNED BIGINT</code> column type.</p>

<h3><a id="Other_Functions" name="Other_Functions"
href="manual_toc.html#Other_Functions">6.3.6 Other
Functions</a></h3>

<h4><a id="Bit_functions" name="Bit_functions"
href="manual_toc.html#Bit_functions">6.3.6.1 Bit Functions</a></h4>

<p><a id="IDX1298" name="IDX1298"></a> <a id="IDX1299"
name="IDX1299"></a> <a id="IDX1300" name="IDX1300"></a> <a
id="IDX1301" name="IDX1301"></a></p>

<p>MySQL uses <code>BIGINT</code> (64-bit) arithmetic for bit
operations, so these operators have a maximum range of 64 bits.</p>

<dl compact="compact">
<dt><code>|</code></dt>

<dd><a id="IDX1302" name="IDX1302"></a> <a id="IDX1303"
name="IDX1303"></a> Bitwise OR 

<pre>
mysql&gt; SELECT 29 | 15;
        -&gt; 31
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1304"
name="IDX1304"></a> <a id="IDX1305" name="IDX1305"></a></dd>

<dt><code>&amp;</code></dt>

<dd>Bitwise AND 

<pre>
mysql&gt; SELECT 29 &amp; 15;
        -&gt; 13
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1306"
name="IDX1306"></a> <a id="IDX1307" name="IDX1307"></a></dd>

<dt><code>^</code></dt>

<dd>Bitwise XOR 

<pre>
mysql&gt; SELECT 1 ^ 1;
        -&gt; 0
mysql&gt; SELECT 1 ^ 0;
        -&gt; 1
mysql&gt; SELECT 11 ^ 3;
        -&gt; 8
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1308"
name="IDX1308"></a></dd>

<dt><code>&lt;&lt;</code></dt>

<dd>Shifts a longlong (<code>BIGINT</code>) number to the left: 

<pre>
mysql&gt; SELECT 1 &lt;&lt; 2;
        -&gt; 4
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1309"
name="IDX1309"></a></dd>

<dt><code>&gt;&gt;</code></dt>

<dd>Shifts a longlong (<code>BIGINT</code>) number to the right: 

<pre>
mysql&gt; SELECT 4 &gt;&gt; 2;
        -&gt; 1
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1310"
name="IDX1310"></a></dd>

<dt><code>~</code></dt>

<dd>Invert all bits: 

<pre>
mysql&gt; SELECT 5 &amp; ~1;
        -&gt; 4
</pre>

The result is an unsigned 64-bit integer. <a id="IDX1311"
name="IDX1311"></a></dd>

<dt><code>BIT_COUNT(N)</code></dt>

<dd>Returns the number of bits that are set in the argument
<code>N</code>: 

<pre>
mysql&gt; SELECT BIT_COUNT(29);
        -&gt; 4
</pre>
</dd>
</dl>

<h4><a id="Miscellaneous_functions" name="Miscellaneous_functions"
href="manual_toc.html#Miscellaneous_functions">6.3.6.2
Miscellaneous Functions</a></h4>

<p><a id="IDX1312" name="IDX1312"></a> <a id="IDX1313"
name="IDX1313"></a></p>

<dl compact="compact">
<dt><code>DATABASE()</code></dt>

<dd><a id="IDX1314" name="IDX1314"></a> Returns the current
database name: 

<pre>
mysql&gt; SELECT DATABASE();
        -&gt; 'test'
</pre>

If there is no current database, <code>DATABASE()</code> returns
the empty string. <a id="IDX1315" name="IDX1315"></a> <a
id="IDX1316" name="IDX1316"></a> <a id="IDX1317"
name="IDX1317"></a></dd>

<dt><code>USER()</code></dt>

<dt><code>SYSTEM_USER()</code></dt>

<dt><code>SESSION_USER()</code></dt>

<dd>Returns the current MySQL user name: 

<pre>
mysql&gt; SELECT USER();
        -&gt; 'davida@localhost'
</pre>

In MySQL Version 3.22.11 or later, this includes the client
hostname as well as the user name. You can extract just the user
name part like this (which works whether the value includes a
hostname part): 

<pre>
mysql&gt; SELECT SUBSTRING_INDEX(USER(),"@",1);
        -&gt; 'davida'
</pre>

<a id="IDX1318" name="IDX1318"></a></dd>

<dt><code>CURRENT_USER()</code></dt>

<dd>Returns the user name, current session was authentificated as: 

<pre>
mysql&gt; SELECT USER();
        -&gt; 'davida@localhost'
mysql&gt; SELECT * FROM mysql.user;
        -&gt; ERROR 1044: Access denied for user: '@localhost' to database 'mysql'
mysql&gt; SELECT CURRENT_USER();
        -&gt; '@localhost'
</pre>

<a id="IDX1319" name="IDX1319"></a></dd>

<dt><code>PASSWORD(str)</code></dt>

<dd>Calculates a password string from the plaintext password
<code>str</code>. This is the function that is used for encrypting
MySQL passwords for storage in the <code>Password</code> column of
the <code>user</code> grant table: 

<pre>
mysql&gt; SELECT PASSWORD('badpwd');
        -&gt; '7f84554057dd964b'
</pre>

<a id="IDX1320" name="IDX1320"></a> <code>PASSWORD()</code>
encryption is non-reversible. <code>PASSWORD()</code> does not
perform password encryption in the same way that Unix passwords are
encrypted. See <code>ENCRYPT()</code>. The <code>PASSWORD()</code>
function is used by the authentication system in MySQL Server, you
should not use it in your own applications. For that purpose, use
<code>MD5()</code> or <code>SHA1()</code> instead. <a id="IDX1321"
name="IDX1321"></a></dd>

<dt><code>ENCRYPT(str[,salt])</code></dt>

<dd>Encrypt <code>str</code> using the Unix <code>crypt()</code>
system call. The <code>salt</code> argument should be a string with
two characters. (As of MySQL Version 3.22.16, <code>salt</code> may
be longer than two characters.): 

<pre>
mysql&gt; SELECT ENCRYPT("hello");
        -&gt; 'VxuFAJXVARROc'
</pre>

If <code>crypt()</code> is not available on your system,
<code>ENCRYPT()</code> always returns <code>NULL</code>.
<code>ENCRYPT()</code> ignores all but the first 8 characters of
<code>str</code>, at least on some systems. This will be determined
by the behaviour of the underlying <code>crypt()</code> system
call. <a id="IDX1322" name="IDX1322"></a></dd>

<dt><code>ENCODE(str,pass_str)</code></dt>

<dd>Encrypt <code>str</code> using <code>pass_str</code> as the
password. To decrypt the result, use <code>DECODE()</code>. The
results is a binary string of the same length as
<code>string</code>. If you want to save it in a column, use a
<code>BLOB</code> column type. <a id="IDX1323"
name="IDX1323"></a></dd>

<dt><code>DECODE(crypt_str,pass_str)</code></dt>

<dd>Descrypts the encrypted string <code>crypt_str</code> using
<code>pass_str</code> as the password. <code>crypt_str</code>
should be a string returned from <code>ENCODE()</code>. <a
id="IDX1324" name="IDX1324"></a></dd>

<dt><code>MD5(string)</code></dt>

<dd>Calculates an MD5 128 bit checksum for the string. The value is
returned as a 32 digit hex number that may, for example, be used as
a hash key: 

<pre>
mysql&gt; SELECT MD5("testing");
        -&gt; 'ae2b1fca515949e5d54fb22b8ed95575'
</pre>

This is the "RSA Data Security, Inc. MD5 Message-Digest Algorithm".
<a id="IDX1325" name="IDX1325"></a> <a id="IDX1326"
name="IDX1326"></a></dd>

<dt><code>SHA1(string)</code></dt>

<dt><code>SHA(string)</code></dt>

<dd>Calculates an SHA1 160 bit checksum for the string, as
described in RFC 3174 (Secure Hash Algorithm). The value is
returned as a 40 digit hex number, or <code>NULL</code> in case the
input argument was <code>NULL</code>. One of the possible uses for
this function is as a hash key. You can also use it as
cryptographically safe function for storing passwords. 

<pre>
mysql&gt; SELECT SHA1("abc");
        -&gt; 'a9993e364706816aba3e25717850c26c9cd0d89d'
</pre>

<code>SHA1()</code> was added in version 4.0.2, and can be
considered a cryptographically more secure equivalent of
<code>MD5()</code>. <code>SHA()</code> is synonym for
<code>SHA1()</code>. <a id="IDX1327" name="IDX1327"></a> <a
id="IDX1328" name="IDX1328"></a></dd>

<dt><code>AES_ENCRYPT(string,key_string)</code></dt>

<dt><code>AES_DECRYPT(string,key_string)</code></dt>

<dd>These functions allow encryption/decryption of data using the
official AES (Advanced Encryption Standard) algorithm, previously
known as Rijndael. Encoding with 128 bit key length is used, but
you can extend it up to 256 bit by patching the source. We chose
128 bits because it is much faster and it is usually secure enough.
The input arguments may be any length. If either argument is
<code>NULL</code>, the result of this function is also
<code>NULL</code>. As AES is a block level algorithm, padding is
used to encode uneven length strings and so the result string
length may be calculated as 16*(trunc(string_length/16)+1). If
<code>AES_DECRYPT()</code> detects invalid data or incorrect
padding, it will return <code>NULL</code>. However, it is possible
for <code>AES_DECRYPT()</code> to return a non-<code>NULL</code>
value (possibly garbage) if the input data or the key was invalid.
You can use the AES functions to store data in an encrypted form by
modifying your queries: 

<pre>
INSERT INTO t VALUES (1,AES_ENCRYPT("text","password"));
</pre>

You can get even more security by avoiding transferring the key
over the connection for each query, which can be accomplished by
storing it in a server side variable at connection time: 

<pre>
SELECT @password:="my password";
INSERT INTO t VALUES (1,AES_ENCRYPT("text",@password));
</pre>

<code>AES_ENCRYPT()</code> and <code>AES_DECRYPT()</code> were
added in version 4.0.2, and can be considered the most
cryptographically secure encryption functions currently available
in MySQL. <a id="IDX1329" name="IDX1329"></a></dd>

<dt><code>DES_ENCRYPT(string_to_encrypt [, (key_number |
key_string) ] )</code></dt>

<dd>Encrypts the string with the given key using the DES algorithm.
Note that this function only works if you have configured MySQL
with SSL support. See section <a
href="manual.html#Secure_connections">4.3.9 Using Secure
Connections</a>. The encryption key to use is chosen the following
way: 

<table border="1" width="100%">
<tr>
<td><strong>Argument</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>Only one argument</td>
<td>The first key from <code>des-key-file</code> is used.</td>
</tr>

<tr>
<td>key number</td>
<td>The given key (0-9) from the <code>des-key-file</code> is
used.</td>
</tr>

<tr>
<td>string</td>
<td>The given <code>key_string</code> will be used to crypt
<code>string_to_encrypt</code>.</td>
</tr>
</table>

The return string will be a binary string where the first character
will be <code>CHAR(128 | key_number)</code>. The 128 is added to
make it easier to recognise an encrypted key. If you use a string
key, <code>key_number</code> will be 127. On error, this function
returns <code>NULL</code>. The string length for the result will be
<code>new_length= org_length + (8-(org_length % 8))+1</code>. The
<code>des-key-file</code> has the following format: 

<pre>
key_number des_key_string
key_number des_key_string
</pre>

Each <code>key_number</code> must be a number in the range from 0
to 9. Lines in the file may be in any order.
<code>des_key_string</code> is the string that will be used to
encrypt the message. Between the number and the key there should be
at least one space. The first key is the default key that will be
used if you don't specify any key argument to
<code>DES_ENCRYPT()</code> You can tell MySQL to read new key
values from the key file with the <code>FLUSH DES_KEY_FILE</code>
command. This requires the <code>Reload_priv</code> privilege. One
benefit of having a set of default keys is that it gives
applications a way to check for existence of encrypted column
values, without giving the end user the right to decrypt those
values. 

<pre>
mysql&gt; SELECT customer_address FROM customer_table WHERE
       crypted_credit_card = DES_ENCRYPT("credit_card_number");
</pre>

<a id="IDX1330" name="IDX1330"></a></dd>

<dt><code>DES_DECRYPT(string_to_decrypt [, key_string])</code></dt>

<dd>Decrypts a string encrypted with <code>DES_ENCRYPT()</code>.
Note that this function only works if you have configured MySQL
with SSL support. See section <a
href="manual.html#Secure_connections">4.3.9 Using Secure
Connections</a>. If no <code>key_string</code> argument is given,
<code>DES_DECRYPT()</code> examines the first byte of the encrypted
string to determine the DES key number that was used to encrypt the
original string, then reads the key from the
<code>des-key-file</code> to decrypt the message. For this to work
the user must have the <code>SUPER</code> privilege. If you pass
this function a <code>key_string</code> argument, that string is
used as the key for decrypting the message. If the
<code>string_to_decrypt</code> doesn't look like an encrypted
string, MySQL will return the given <code>string_to_decrypt</code>.
On error, this function returns <code>NULL</code>. <a id="IDX1331"
name="IDX1331"></a></dd>

<dt><code>LAST_INSERT_ID([expr])</code></dt>

<dd>Returns the last automatically generated value that was
inserted into an <code>AUTO_INCREMENT</code> column. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>. 

<pre>
mysql&gt; SELECT LAST_INSERT_ID();
        -&gt; 195
</pre>

The last ID that was generated is maintained in the server on a
per-connection basis. It will not be changed by another client. It
will not even be changed if you update another
<code>AUTO_INCREMENT</code> column with a non-magic value (that is,
a value that is not <code>NULL</code> and not <code>0</code>). If
you insert many rows at the same time with an insert statement,
<code>LAST_INSERT_ID()</code> returns the value for the first
inserted row. The reason for this is to make it possible to easily
reproduce the same <code>INSERT</code> statement against some other
server. <a id="IDX1332" name="IDX1332"></a> If <code>expr</code> is
given as an argument to <code>LAST_INSERT_ID()</code>, then the
value of the argument is returned by the function, and is set as
the next value to be returned by <code>LAST_INSERT_ID()</code>.
This can be used to simulate sequences: First create the table: 

<pre>
mysql&gt; CREATE TABLE sequence (id INT NOT NULL);
mysql&gt; INSERT INTO sequence VALUES (0);
</pre>

Then the table can be used to generate sequence numbers like this: 

<pre>
mysql&gt; UPDATE sequence SET id=LAST_INSERT_ID(id+1);
</pre>

You can generate sequences without calling
<code>LAST_INSERT_ID()</code>, but the utility of using the
function this way is that the ID value is maintained in the server
as the last automatically generated value (multi-user safe). You
can retrieve the new ID as you would read any normal
<code>AUTO_INCREMENT</code> value in MySQL. For example,
<code>LAST_INSERT_ID()</code> (without an argument) will return the
new ID. The C API function <code>mysql_insert_id()</code> can also
be used to get the value. Note that as
<code>mysql_insert_id()</code> is only updated after
<code>INSERT</code> and <code>UPDATE</code> statements, so you
can't use the C API function to retrieve the value for
<code>LAST_INSERT_ID(expr)</code> after executing other SQL
statements like <code>SELECT</code> or <code>SET</code>. <a
id="IDX1333" name="IDX1333"></a></dd>

<dt><code>FORMAT(X,D)</code></dt>

<dd>Formats the number <code>X</code> to a format like
<code>'#,###,###.##'</code>, rounded to <code>D</code> decimals. If
<code>D</code> is <code>0</code>, the result will have no decimal
point or fractional part: 

<pre>
mysql&gt; SELECT FORMAT(12332.123456, 4);
        -&gt; '12,332.1235'
mysql&gt; SELECT FORMAT(12332.1,4);
        -&gt; '12,332.1000'
mysql&gt; SELECT FORMAT(12332.2,0);
        -&gt; '12,332'
</pre>

<a id="IDX1334" name="IDX1334"></a></dd>

<dt><code>VERSION()</code></dt>

<dd>Returns a string indicating the MySQL server version: 

<pre>
mysql&gt; SELECT VERSION();
        -&gt; '3.23.13-log'
</pre>

Note that if your version ends with <code>-log</code> this means
that logging is enabled. <a id="IDX1335" name="IDX1335"></a></dd>

<dt><code>CONNECTION_ID()</code></dt>

<dd>Returns the connection id (<code>thread_id</code>) for the
connection. Every connection has its own unique id: 

<pre>
mysql&gt; SELECT CONNECTION_ID();
        -&gt; 1
</pre>

<a id="IDX1336" name="IDX1336"></a> <a id="IDX1337"
name="IDX1337"></a></dd>

<dt><code>GET_LOCK(str,timeout)</code></dt>

<dd>Tries to obtain a lock with a name given by the string
<code>str</code>, with a timeout of <code>timeout</code> seconds.
Returns <code>1</code> if the lock was obtained successfully,
<code>0</code> if the attempt timed out, or <code>NULL</code> if an
error occurred (such as running out of memory or the thread was
killed with <code>mysqladmin kill</code>). A lock is released when
you execute <code>RELEASE_LOCK()</code>, execute a new
<code>GET_LOCK()</code>, or the thread terminates. This function
can be used to implement application locks or to simulate record
locks. It blocks requests by other clients for locks with the same
name; clients that agree on a given lock string name can use the
string to perform cooperative advisory locking: 

<pre>
mysql&gt; SELECT GET_LOCK("lock1",10);
        -&gt; 1
mysql&gt; SELECT IS_FREE_LOCK("lock2");
        -&gt; 1
mysql&gt; SELECT GET_LOCK("lock2",10);
        -&gt; 1
mysql&gt; SELECT RELEASE_LOCK("lock2");
        -&gt; 1
mysql&gt; SELECT RELEASE_LOCK("lock1");
        -&gt; NULL
</pre>

Note that the second <code>RELEASE_LOCK()</code> call returns
<code>NULL</code> because the lock <code>"lock1"</code> was
automatically released by the second <code>GET_LOCK()</code> call.
<a id="IDX1338" name="IDX1338"></a></dd>

<dt><code>RELEASE_LOCK(str)</code></dt>

<dd>Releases the lock named by the string <code>str</code> that was
obtained with <code>GET_LOCK()</code>. Returns <code>1</code> if
the lock was released, <code>0</code> if the lock wasn't locked by
this thread (in which case the lock is not released), and
<code>NULL</code> if the named lock didn't exist. The lock will not
exist if it was never obtained by a call to <code>GET_LOCK()</code>
or if it already has been released. The <code>DO</code> statement
is convinient to use with <code>RELEASE_LOCK()</code>. See section
<a href="manual.html#DO">6.4.10 <code>DO</code> Syntax</a>. <a
id="IDX1339" name="IDX1339"></a></dd>

<dt><code>IS_FREE_LOCK(str)</code></dt>

<dd>Checks if the lock named <code>str</code> is free to use (i.e.,
not locked). Returns <code>1</code> if the lock is free (no one is
using the lock), <code>0</code> if the lock is in use, and
<code>NULL</code> on errors (like incorrect arguments). <a
id="IDX1340" name="IDX1340"></a></dd>

<dt><code>BENCHMARK(count,expr)</code></dt>

<dd>The <code>BENCHMARK()</code> function executes the expression
<code>expr</code> repeatedly <code>count</code> times. It may be
used to time how fast MySQL processes the expression. The result
value is always <code>0</code>. The intended use is in the
<code>mysql</code> client, which reports query execution times: 

<pre>
mysql&gt; SELECT BENCHMARK(1000000,ENCODE("hello","goodbye"));
+----------------------------------------------+
| BENCHMARK(1000000,ENCODE("hello","goodbye")) |
+----------------------------------------------+
|                                            0 |
+----------------------------------------------+
1 row in set (4.74 sec)
</pre>

The time reported is elapsed time on the client end, not CPU time
on the server end. It may be advisable to execute
<code>BENCHMARK()</code> several times, and interpret the result
with regard to how heavily loaded the server machine is. <a
id="IDX1341" name="IDX1341"></a></dd>

<dt><code>INET_NTOA(expr)</code></dt>

<dd>Given a numeric network address (4 or 8 byte), returns the
dotted-quad representation of the address as a string: 

<pre>
mysql&gt; SELECT INET_NTOA(3520061480);
       -&gt;  "209.207.224.40"
</pre>

<a id="IDX1342" name="IDX1342"></a></dd>

<dt><code>INET_ATON(expr)</code></dt>

<dd>Given the dotted-quad representation of a network address as a
string, returns an integer that represents the numeric value of the
address. Addresses may be 4 or 8 byte addresses: 

<pre>
mysql&gt; SELECT INET_ATON("209.207.224.40");
       -&gt;  3520061480
</pre>

The generated number is always in network byte order; for example
the above number is calculated as <code>209*256^3 + 207*256^2 +
224*256 +40</code>. <a id="IDX1343" name="IDX1343"></a></dd>

<dt><code>MASTER_POS_WAIT(log_name, log_pos)</code></dt>

<dd>Blocks until the slave reaches (i.e. has read and applied all
updates up to) the specified position in the master log. If master
information is not initialised, or if the arguments are incorrect,
returns <code>NULL</code>. If the slave is not running, will block
and wait until it is started and goes to or past the specified
position. If the slave is already past the specified position,
returns immediately. If <code>timeout</code> (new in 4.0.10) is
specified, will give up waiting when <code>timeout</code> seconds
have elapsed. <code>timeout</code> must be greater than 0; a zero
or negative <code>timeout</code> means no timeout. The return value
is the number of log events it had to wait to get to the specified
position, or <code>NULL</code> in case of error, or <code>-1</code>
if the timeout has been exceeded. This command is useful for
control of master-slave synchronisation, but was originally written
to facilitate replication testing. <a id="IDX1344"
name="IDX1344"></a> <a id="IDX1345" name="IDX1345"></a></dd>

<dt><code>FOUND_ROWS()</code></dt>

<dd>Returns the number of rows that the last <code>SELECT
SQL_CALC_FOUND_ROWS ...</code> command would have returned, if it
had not been restricted with <code>LIMIT</code>. 

<pre>
mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name
       WHERE id &gt; 100 LIMIT 10;
mysql&gt; SELECT FOUND_ROWS();
</pre>

The second <code>SELECT</code> will return a number indicating how
many rows the first <code>SELECT</code> would have returned had it
been written without the <code>LIMIT</code> clause. Note that if
you are using <code>SELECT SQL_CALC_FOUND_ROWS ...</code> MySQL has
to calculate all rows in the result set. However, this is faster
than if you would not use <code>LIMIT</code>, as the result set
need not be sent to the client. <code>SQL_CALC_FOUND_ROWS</code> is
available starting at MySQL version 4.0.0.</dd>
</dl>

<h3><a id="Group_by_functions" name="Group_by_functions"
href="manual_toc.html#Group_by_functions">6.3.7 Functions for Use
with <code>GROUP BY</code> Clauses</a></h3>

<p><a id="IDX1346" name="IDX1346"></a> <a id="IDX1347"
name="IDX1347"></a></p>

<p>If you use a group function in a statement containing no
<code>GROUP BY</code> clause, it is equivalent to grouping on all
rows.</p>

<dl compact="compact">
<dt><code>COUNT(expr)</code></dt>

<dd><a id="IDX1348" name="IDX1348"></a> Returns a count of the
number of non-<code>NULL</code> values in the rows retrieved by a
<code>SELECT</code> statement: 

<pre>
mysql&gt; SELECT student.student_name,COUNT(*)
    -&gt;        FROM student,course
    -&gt;        WHERE student.student_id=course.student_id
    -&gt;        GROUP BY student_name;

</pre>

<code>COUNT(*)</code> is somewhat different in that it returns a
count of the number of rows retrieved, whether they contain
<code>NULL</code> values. <code>COUNT(*)</code> is optimised to
return very quickly if the <code>SELECT</code> retrieves from one
table, no other columns are retrieved, and there is no
<code>WHERE</code> clause. For example: 

<pre>
mysql&gt; SELECT COUNT(*) FROM student;
</pre>

<a id="IDX1349" name="IDX1349"></a> <a id="IDX1350"
name="IDX1350"></a></dd>

<dt><code>COUNT(DISTINCT expr,[expr...])</code></dt>

<dd>Returns a count of the number of different
non-<code>NULL</code> values: 

<pre>
mysql&gt; SELECT COUNT(DISTINCT results) FROM student;
</pre>

In MySQL you can get the number of distinct expression combinations
that don't contain NULL by giving a list of expressions. In ANSI
SQL you would have to do a concatenation of all expressions inside
<code>COUNT(DISTINCT ...)</code>. <a id="IDX1351"
name="IDX1351"></a></dd>

<dt><code>AVG(expr)</code></dt>

<dd>Returns the average value of <code>expr</code>: 

<pre>
mysql&gt; SELECT student_name, AVG(test_score)
    -&gt;        FROM student
    -&gt;        GROUP BY student_name;
</pre>

<a id="IDX1352" name="IDX1352"></a> <a id="IDX1353"
name="IDX1353"></a></dd>

<dt><code>MIN(expr)</code></dt>

<dt><code>MAX(expr)</code></dt>

<dd>Returns the minimum or maximum value of <code>expr</code>.
<code>MIN()</code> and <code>MAX()</code> may take a string
argument; in such cases they return the minimum or maximum string
value. See section <a href="manual.html#MySQL_indexes">5.4.3 How
MySQL Uses Indexes</a>. 

<pre>
mysql&gt; SELECT student_name, MIN(test_score), MAX(test_score)
    -&gt;        FROM student
    -&gt;        GROUP BY student_name;
</pre>

In <code>MIN()</code>, <code>MAX()</code> and other aggregate
functions, MySQL currently compares <code>ENUM</code> and
<code>SET</code> columns by their string value rather than by the
string's relative position in the set. This will be rectified. <a
id="IDX1354" name="IDX1354"></a></dd>

<dt><code>SUM(expr)</code></dt>

<dd>Returns the sum of <code>expr</code>. Note that if the return
set has no rows, it returns NULL! <a id="IDX1355"
name="IDX1355"></a></dd>

<dt><code>VARIANCE(expr)</code></dt>

<dd>Returns the standard variance of <code>expr</code>. This is an
extension to ANSI SQL (available only in version 4.1 or later). <a
id="IDX1356" name="IDX1356"></a> <a id="IDX1357"
name="IDX1357"></a> <a id="IDX1358" name="IDX1358"></a> <a
id="IDX1359" name="IDX1359"></a></dd>

<dt><code>STD(expr)</code></dt>

<dt><code>STDDEV(expr)</code></dt>

<dd>Returns the standard deviation of <code>expr</code>. This is an
extension to ANSI SQL. The <code>STDDEV()</code> form of this
function is provided for Oracle compatibility. <a id="IDX1360"
name="IDX1360"></a></dd>

<dt><code>BIT_OR(expr)</code></dt>

<dd>Returns the bitwise <code>OR</code> of all bits in
<code>expr</code>. The calculation is performed with 64-bit
(<code>BIGINT</code>) precision. <a id="IDX1361"
name="IDX1361"></a></dd>

<dt><code>BIT_AND(expr)</code></dt>

<dd>Returns the bitwise <code>AND</code> of all bits in
<code>expr</code>. The calculation is performed with 64-bit
(<code>BIGINT</code>) precision.</dd>
</dl>

<p><a id="IDX1362" name="IDX1362"></a> MySQL has extended the use
of <code>GROUP BY</code>. You can use columns or calculations in
the <code>SELECT</code> expressions that don't appear in the
<code>GROUP BY</code> part. This stands for <em>any possible value
for this group</em>. You can use this to get better performance by
avoiding sorting and grouping on unnecessary items. For example,
you don't need to group on <code>customer.name</code> in the
following query:</p>

<pre>
mysql&gt; SELECT order.custid,customer.name,MAX(payments)
    -&gt;        FROM order,customer
    -&gt;        WHERE order.custid = customer.custid
    -&gt;        GROUP BY order.custid;
</pre>

<p>In ANSI SQL, you would have to add <code>customer.name</code> to
the <code>GROUP BY</code> clause. In MySQL, the name is redundant
if you don't run in ANSI mode.</p>

<p><strong>Don't use this feature</strong> if the columns you omit
from the <code>GROUP BY</code> part aren't unique in the group! You
will get unpredictable results.</p>

<p>In some cases, you can use <code>MIN()</code> and
<code>MAX()</code> to obtain a specific column value even if it
isn't unique. The following gives the value of <code>column</code>
from the row containing the smallest value in the <code>sort</code>
column:</p>

<pre>
SUBSTR(MIN(CONCAT(RPAD(sort,6,' '),column)),7)
</pre>

<p>See section <a
href="manual.html#example-Maximum-column-group-row">3.5.4 The Rows
Holding the Group-wise Maximum of a Certain Field</a>.</p>

<p><a id="IDX1363" name="IDX1363"></a> <a id="IDX1364"
name="IDX1364"></a> <a id="IDX1365" name="IDX1365"></a> <a
id="IDX1366" name="IDX1366"></a> <a id="IDX1367"
name="IDX1367"></a> <a id="IDX1368" name="IDX1368"></a> Note that
if you are using MySQL Version 3.22 (or earlier) or if you are
trying to follow ANSI SQL, you can't use expressions in <code>GROUP
BY</code> or <code>ORDER BY</code> clauses. You can work around
this limitation by using an alias for the expression:</p>

<pre>
mysql&gt; SELECT id,FLOOR(value/100) AS val FROM tbl_name
    -&gt;        GROUP BY id,val ORDER BY val;
</pre>

<p>In MySQL Version 3.23 you can do:</p>

<pre>
mysql&gt; SELECT id,FLOOR(value/100) FROM tbl_name ORDER BY RAND();
</pre>

<h2><a id="Data_Manipulation" name="Data_Manipulation"
href="manual_toc.html#Data_Manipulation">6.4 Data Manipulation:
<code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>,
<code>DELETE</code></a></h2>

<h3><a id="SELECT" name="SELECT"
href="manual_toc.html#SELECT">6.4.1 <code>SELECT</code>
Syntax</a></h3>

<p><a id="IDX1369" name="IDX1369"></a></p>

<pre>
SELECT [STRAIGHT_JOIN]
       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] [HIGH_PRIORITY]
       [DISTINCT | DISTINCTROW | ALL]
    select_expression,...
    [INTO {OUTFILE | DUMPFILE} 'file_name' export_options]
    [FROM table_references
      [WHERE where_definition]
      [GROUP BY {unsigned_integer | col_name | formula} [ASC | DESC], ...
      [HAVING where_definition]
      [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] ,...]
      [LIMIT [offset,] rows | rows OFFSET offset]
      [PROCEDURE procedure_name(argument_list)]
      [FOR UPDATE | LOCK IN SHARE MODE]]
</pre>

<p><code>SELECT</code> is used to retrieve rows selected from one
or more tables. <code>select_expression</code> indicates the
columns you want to retrieve. <code>SELECT</code> may also be used
to retrieve rows computed without reference to any table. For
example:</p>

<pre>
mysql&gt; SELECT 1 + 1;
         -&gt; 2
</pre>

<p>All keywords used must be given in exactly the order shown
above. For example, a <code>HAVING</code> clause must come after
any <code>GROUP BY</code> clause and before any <code>ORDER
BY</code> clause.</p>

<ul>
<li><a id="IDX1370" name="IDX1370"></a> <a id="IDX1371"
name="IDX1371"></a> A <code>SELECT</code> expression may be given
an alias using <code>AS</code>. The alias is used as the
expression's column name and can be used with <code>ORDER BY</code>
or <code>HAVING</code> clauses. For example: 

<pre>
mysql&gt; SELECT CONCAT(last_name,', ',first_name) AS full_name
    FROM mytable ORDER BY full_name;
</pre>
</li>

<li>It is not allowed to use a column alias in a <code>WHERE</code>
clause, because the column value may not yet be determined when the
<code>WHERE</code> clause is executed. See section <a
href="manual.html#Problems_with_alias">A.5.4 Problems with
<code>alias</code></a>.</li>

<li><a id="IDX1372" name="IDX1372"></a> <a id="IDX1373"
name="IDX1373"></a> <a id="IDX1374" name="IDX1374"></a> <a
id="IDX1375" name="IDX1375"></a> <a id="IDX1376"
name="IDX1376"></a> <a id="IDX1377" name="IDX1377"></a> The
<code>FROM table_references</code> clause indicates the tables from
which to retrieve rows. If you name more than one table, you are
performing a join. For information on join syntax, see section <a
href="manual.html#JOIN">6.4.1.1 <code>JOIN</code> Syntax</a>. For
each table specified, you may optionally specify an alias. 

<pre>
table_name [[AS] alias] [[USE INDEX (key_list)] | [IGNORE INDEX (key_list)] | FORCE INDEX (key_list)]]
</pre>

As of MySQL Version 3.23.12, you can give hints about which index
MySQL should use when retrieving information from a table. This is
useful if <code>EXPLAIN</code> shows that MySQL is using the wrong
index from the list of possible indexes. By specifying <code>USE
INDEX (key_list)</code>, you can tell MySQL to use only one of the
possible indexes to find rows in the table. The alternative syntax
<code>IGNORE INDEX (key_list)</code> can be used to tell MySQL to
not use some particular index. In MySQL 4.0.9 you can also use
<code>FORCE INDEX</code>. This acts likes <code>USE INDEX
(key_list)</code> but with the addition that a table scan is
assumed to be VERY expensive. In other words a table scan will only
be used if there is no way to use one of the given index to find
rows in the table. <code>USE/IGNORE/FORCE KEY</code> are synonyms
for <code>USE/IGNORE/FORCE INDEX</code>.</li>

<li>You can refer to a table as <code>tbl_name</code> (within the
current database), or as <code>dbname.tbl_name</code> to explicitly
specify a database. You can refer to a column as
<code>col_name</code>, <code>tbl_name.col_name</code>, or
<code>db_name.tbl_name.col_name</code>. You need not specify a
<code>tbl_name</code> or <code>db_name.tbl_name</code> prefix for a
column reference in a <code>SELECT</code> statement unless the
reference would be ambiguous. See section <a
href="manual.html#Legal_names">6.1.2 Database, Table, Index,
Column, and Alias Names</a>, for examples of ambiguity that require
the more explicit column reference forms.</li>

<li><a id="IDX1378" name="IDX1378"></a> <a id="IDX1379"
name="IDX1379"></a> A table reference may be aliased using
<code>tbl_name [AS] alias_name</code>: 

<pre>
mysql&gt; SELECT t1.name, t2.salary FROM employee AS t1, info AS t2
    -&gt;        WHERE t1.name = t2.name;
mysql&gt; SELECT t1.name, t2.salary FROM employee t1, info t2
    -&gt;        WHERE t1.name = t2.name;
</pre>
</li>

<li>Columns selected for output may be referred to in <code>ORDER
BY</code> and <code>GROUP BY</code> clauses using column names,
column aliases, or column positions. Column positions begin with 1:


<pre>
mysql&gt; SELECT college, region, seed FROM tournament
    -&gt;        ORDER BY region, seed;
mysql&gt; SELECT college, region AS r, seed AS s FROM tournament
    -&gt;        ORDER BY r, s;
mysql&gt; SELECT college, region, seed FROM tournament
    -&gt;        ORDER BY 2, 3;
</pre>

To sort in reverse order, add the <code>DESC</code> (descending)
keyword to the name of the column in the <code>ORDER BY</code>
clause that you are sorting by. The default is ascending order;
this may be specified explicitly using the <code>ASC</code>
keyword.</li>

<li>You can in the <code>WHERE</code> clause use any of the
functions that MySQL support. See section <a
href="manual.html#Functions">6.3 Functions for Use in
<code>SELECT</code> and <code>WHERE</code> Clauses</a>.</li>

<li>The <code>HAVING</code> clause can refer to any column or alias
named in the <code>select_expression</code>. It is applied last,
just before items are sent to the client, with no optimisation.
Don't use <code>HAVING</code> for items that should be in the
<code>WHERE</code> clause. For example, do not write this: 

<pre>
mysql&gt; SELECT col_name FROM tbl_name HAVING col_name &gt; 0;
</pre>

Write this instead: 

<pre>
mysql&gt; SELECT col_name FROM tbl_name WHERE col_name &gt; 0;
</pre>

In MySQL Version 3.22.5 or later, you can also write queries like
this: 

<pre>
mysql&gt; SELECT user,MAX(salary) FROM users
    -&gt;        GROUP BY user HAVING MAX(salary)&gt;10;
</pre>

In older MySQL versions, you can write this instead: 

<pre>
mysql&gt; SELECT user,MAX(salary) AS sum FROM users
    -&gt;        group by user HAVING sum&gt;10;
</pre>
</li>

<li>The options <code>DISTINCT</code>, <code>DISTINCTROW</code> and
<code>ALL</code> specify whether duplicate rows should be returned.
The default is (<code>ALL</code>), all matching rows are returned.
<code>DISTINCT</code> and <code>DISTINCTROW</code> are synonyms and
specify that duplicate rows in the result set should be
removed.</li>

<li>All options beginning with <code>SQL_</code>,
<code>STRAIGHT_JOIN</code>, and <code>HIGH_PRIORITY</code> are
MySQL extensions to ANSI SQL.</li>

<li><code>HIGH_PRIORITY</code> will give the <code>SELECT</code>
higher priority than a statement that updates a table. You should
only use this for queries that are very fast and must be done at
once. A <code>SELECT HIGH_PRIORITY</code> query will run if the
table is locked for read even if there is an update statement that
is waiting for the table to be free.</li>

<li><code>SQL_BIG_RESULT</code> can be used with <code>GROUP
BY</code> or <code>DISTINCT</code> to tell the optimiser that the
result set will have many rows. In this case, MySQL will directly
use disk-based temporary tables if needed. MySQL will also, in this
case, prefer sorting to doing a temporary table with a key on the
<code>GROUP BY</code> elements.</li>

<li><code>SQL_BUFFER_RESULT</code> will force the result to be put
into a temporary table. This will help MySQL free the table locks
early and will help in cases where it takes a long time to send the
result set to the client.</li>

<li><code>SQL_SMALL_RESULT</code>, a MySQL-specific option, can be
used with <code>GROUP BY</code> or <code>DISTINCT</code> to tell
the optimiser that the result set will be small. In this case,
MySQL will use fast temporary tables to store the resulting table
instead of using sorting. In MySQL Version 3.23 this shouldn't
normally be needed.</li>

<li><code>SQL_CALC_FOUND_ROWS</code> (version 4.0.0 and up) tells
MySQL to calculate how many rows there would be in the result set,
disregarding any <code>LIMIT</code> clause. The number of rows can
then be retrieved with <code>SELECT FOUND_ROWS()</code>. See
section <a href="manual.html#Miscellaneous_functions">6.3.6.2
Miscellaneous Functions</a>. Please note that in versions prior to
4.1.0 this does not work with <code>LIMIT 0</code>, which is
optimised to return instantly (resulting in a row count of 0). See
section <a href="manual.html#LIMIT_optimisation">5.2.8 How MySQL
Optimises <code>LIMIT</code></a>.</li>

<li><code>SQL_CACHE</code> tells MySQL to store the query result in
the query cache if you are using <code>QUERY_CACHE_TYPE=2</code>
(<code>DEMAND</code>). See section <a
href="manual.html#Query_Cache">6.9 MySQL Query Cache</a>.</li>

<li><code>SQL_NO_CACHE</code> tells MySQL to not allow the query
result to be stored in the query cache. See section <a
href="manual.html#Query_Cache">6.9 MySQL Query Cache</a>.</li>

<li><a id="IDX1380" name="IDX1380"></a> If you use <code>GROUP
BY</code>, the output rows will be sorted according to the
<code>GROUP BY</code> as if you would have had an <code>ORDER
BY</code> over all the fields in the <code>GROUP BY</code>. MySQL
has extended the <code>GROUP BY</code> so that you can also specify
<code>ASC</code> and <code>DESC</code> to <code>GROUP BY</code>: 

<pre>
SELECT a,COUNT(b) FROM test_table GROUP BY a DESC
</pre>
</li>

<li>MySQL has extended the use of <code>GROUP BY</code> to allow
you to select fields which are not mentioned in the <code>GROUP
BY</code> clause. If you are not getting the results you expect
from your query, please read the <code>GROUP BY</code> description.
See section <a href="manual.html#Group_by_functions">6.3.7
Functions for Use with <code>GROUP BY</code> Clauses</a>.</li>

<li><a id="IDX1381" name="IDX1381"></a> <code>STRAIGHT_JOIN</code>
forces the optimiser to join the tables in the order in which they
are listed in the <code>FROM</code> clause. You can use this to
speed up a query if the optimiser joins the tables in non-optimal
order. See section <a href="manual.html#EXPLAIN">5.2.1
<code>EXPLAIN</code> Syntax (Get Information About a
<code>SELECT</code>)</a>.</li>

<li>The <code>LIMIT</code> clause can be used to constrain the
number of rows returned by the <code>SELECT</code> statement.
<code>LIMIT</code> takes one or two numeric arguments. The
arguments must be integer constants. If two arguments are given,
the first specifies the offset of the first row to return, the
second specifies the maximum number of rows to return. The offset
of the initial row is 0 (not 1): To be compatible with PostgreSQL
MySQL also supports the syntax: <code>LIMIT # OFFSET #</code>. 

<pre>
mysql&gt; SELECT * FROM table LIMIT 5,10;  # Retrieve rows 6-15
</pre>

To retrieve all rows from a certain offset upto the end of the
result set, you can use -1 for the second parameter: 

<pre>
mysql&gt; SELECT * FROM table LIMIT 95,-1; # Retrieve rows 96-last.
</pre>

If one argument is given, it indicates the maximum number of rows
to return: 

<pre>
mysql&gt; SELECT * FROM table LIMIT 5;     # Retrieve first 5 rows
</pre>

In other words, <code>LIMIT n</code> is equivalent to <code>LIMIT
0,n</code>.</li>

<li><a id="IDX1382" name="IDX1382"></a> The <code>SELECT ... INTO
OUTFILE 'file_name'</code> form of <code>SELECT</code> writes the
selected rows to a file. The file is created on the server host and
cannot already exist (among other things, this prevents database
tables and files such as <tt>`/etc/passwd'</tt> from being
destroyed). You must have the <code>FILE</code> privilege on the
server host to use this form of <code>SELECT</code>. <code>SELECT
... INTO OUTFILE</code> is mainly intended to let you very quickly
dump a table on the server machine. If you want to create the
resulting file on some other host than the server host you can't
use <code>SELECT ... INTO OUTFILE</code>. In this case you should
instead use some client program like <code>mysqldump --tab</code>
or <code>mysql -e "SELECT ..." &gt; outfile</code> to generate the
file. <code>SELECT ... INTO OUTFILE</code> is the complement of
<code>LOAD DATA INFILE</code>; the syntax for the
<code>export_options</code> part of the statement consists of the
same <code>FIELDS</code> and <code>LINES</code> clauses that are
used with the <code>LOAD DATA INFILE</code> statement. See section
<a href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA INFILE</code>
Syntax</a>. In the resulting text file, only the following
characters are escaped by the <code>ESCAPED BY</code> character: 

<ul>
<li>The <code>ESCAPED BY</code> character</li>

<li>The first character in <code>FIELDS TERMINATED BY</code></li>

<li>The first character in <code>LINES TERMINATED BY</code></li>
</ul>

Additionally, <code>ASCII 0</code> is converted to <code>ESCAPED
BY</code> followed by 0 (<code>ASCII 48</code>). The reason for the
above is that you <strong>must</strong> escape any <code>FIELDS
TERMINATED BY</code>, <code>ESCAPED BY</code>, or <code>LINES
TERMINATED BY</code> characters to reliably be able to read the
file back. <code>ASCII 0</code> is escaped to make it easier to
view with some pagers. As the resulting file doesn't have to
conform to the SQL syntax, nothing else need be escaped. Here
follows an example of getting a file in the format used by many old
programs. 

<pre>
SELECT a,b,a+b INTO OUTFILE "/tmp/result.text"
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY "\n"
FROM test_table;
</pre>
</li>

<li><a id="IDX1383" name="IDX1383"></a> If you use <code>INTO
DUMPFILE</code> instead of <code>INTO OUTFILE</code>, MySQL will
only write one row into the file, without any column or line
terminations and without any escaping. This is useful if you want
to store a blob in a file.</li>

<li>Note that any file created by <code>INTO OUTFILE</code> and
<code>INTO DUMPFILE</code> is going to be readable for all users!
The reason is that the MySQL server can't create a file that is
owned by anyone else than the user it's running as (you should
never run <code>mysqld</code> as root), the file has to be word
readable so that you can retrieve the rows.</li>

<li>If you are using <code>FOR UPDATE</code> on a storage engine
with page/row locks, the examined rows will be write locked.</li>
</ul>

<h4><a id="JOIN" name="JOIN" href="manual_toc.html#JOIN">6.4.1.1
<code>JOIN</code> Syntax</a></h4>

<p><a id="IDX1384" name="IDX1384"></a> <a id="IDX1385"
name="IDX1385"></a> <a id="IDX1386" name="IDX1386"></a> <a
id="IDX1387" name="IDX1387"></a> <a id="IDX1388"
name="IDX1388"></a> <a id="IDX1389" name="IDX1389"></a> <a
id="IDX1390" name="IDX1390"></a> <a id="IDX1391"
name="IDX1391"></a> <a id="IDX1392" name="IDX1392"></a> <a
id="IDX1393" name="IDX1393"></a> <a id="IDX1394"
name="IDX1394"></a> <a id="IDX1395" name="IDX1395"></a></p>

<p>MySQL supports the following <code>JOIN</code> syntaxes for use
in <code>SELECT</code> statements:</p>

<pre>
table_reference, table_reference
table_reference [CROSS] JOIN table_reference
table_reference INNER JOIN table_reference join_condition
table_reference STRAIGHT_JOIN table_reference
table_reference LEFT [OUTER] JOIN table_reference join_condition
table_reference LEFT [OUTER] JOIN table_reference
table_reference NATURAL [LEFT [OUTER]] JOIN table_reference
{ OJ table_reference LEFT OUTER JOIN table_reference ON conditional_expr }
table_reference RIGHT [OUTER] JOIN table_reference join_condition
table_reference RIGHT [OUTER] JOIN table_reference
table_reference NATURAL [RIGHT [OUTER]] JOIN table_reference
</pre>

<p>Where <code>table_reference</code> is defined as: <a
id="IDX1396" name="IDX1396"></a></p>

<pre>
table_name [[AS] alias] [[USE INDEX (key_list)] | [IGNORE INDEX (key_list)] | [FORCE INDEX (key_list)]]
</pre>

<p>and <code>join_condition</code> is defined as:</p>

<pre>
ON conditional_expr |
USING (column_list)
</pre>

<p>You should generally not have any conditions in the
<code>ON</code> part that are used to restrict which rows you have
in the result set (there are exceptions to this rule). If you want
to restrict which rows should be in the result, you have to do this
in the <code>WHERE</code> clause.</p>

<p>Note that in versions before Version 3.23.17, the <code>INNER
JOIN</code> didn't take a <code>join_condition</code>!</p>

<p><a id="IDX1397" name="IDX1397"></a> <a id="IDX1398"
name="IDX1398"></a> The last <code>LEFT OUTER JOIN</code> syntax
shown above exists only for compatibility with ODBC:</p>

<ul>
<li>A table reference may be aliased using <code>tbl_name AS
alias_name</code> or <code>tbl_name alias_name</code>: 

<pre>
mysql&gt; SELECT t1.name, t2.salary FROM employee AS t1, info AS t2
    -&gt;        WHERE t1.name = t2.name;
</pre>
</li>

<li>The <code>ON</code> conditional is any conditional of the form
that may be used in a <code>WHERE</code> clause.</li>

<li>If there is no matching record for the right table in the
<code>ON</code> or <code>USING</code> part in a <code>LEFT
JOIN</code>, a row with all columns set to <code>NULL</code> is
used for the right table. You can use this fact to find records in
a table that have no counterpart in another table: 

<pre>
mysql&gt; SELECT table1.* FROM table1
    -&gt;        LEFT JOIN table2 ON table1.id=table2.id
    -&gt;        WHERE table2.id IS NULL;
</pre>

This example finds all rows in <code>table1</code> with an
<code>id</code> value that is not present in <code>table2</code>
(that is, all rows in <code>table1</code> with no corresponding row
in <code>table2</code>). This assumes that <code>table2.id</code>
is declared <code>NOT NULL</code>, of course. See section <a
href="manual.html#LEFT_JOIN_optimisation">5.2.6 How MySQL Optimises
<code>LEFT JOIN</code> and <code>RIGHT JOIN</code></a>.</li>

<li>The <code>USING</code> <code>(column_list)</code> clause names
a list of columns that must exist in both tables. A
<code>USING</code> clause such as: 

<pre>
A LEFT JOIN B USING (C1,C2,C3,...)
</pre>

is defined to be semantically identical to an <code>ON</code>
expression like this: 

<pre>
A.C1=B.C1 AND A.C2=B.C2 AND A.C3=B.C3,...
</pre>
</li>

<li>The <code>NATURAL [LEFT] JOIN</code> of two tables is defined
to be semantically equivalent to an <code>INNER JOIN</code> or a
<code>LEFT JOIN</code> with a <code>USING</code> clause that names
all columns that exist in both tables.</li>

<li><a id="IDX1399" name="IDX1399"></a> <code>INNER JOIN</code> and
<code>,</code> (comma) are semantically equivalent. Both do a full
join between the tables used. Normally, you specify how the tables
should be linked in the WHERE condition.</li>

<li><code>RIGHT JOIN</code> works analogously as <code>LEFT
JOIN</code>. To keep code portable across databases, it's
recommended to use <code>LEFT JOIN</code> instead of <code>RIGHT
JOIN</code>.</li>

<li><a id="IDX1400" name="IDX1400"></a> <code>STRAIGHT_JOIN</code>
is identical to <code>JOIN</code>, except that the left table is
always read before the right table. This can be used for those
(few) cases where the join optimiser puts the tables in the wrong
order.</li>

<li><a id="IDX1401" name="IDX1401"></a> <a id="IDX1402"
name="IDX1402"></a> <a id="IDX1403" name="IDX1403"></a> As of MySQL
Version 3.23.12, you can give hints about which index MySQL should
use when retrieving information from a table. This is useful if
<code>EXPLAIN</code> shows that MySQL is using the wrong index from
the list of possible indexes. By specifying <code>USE INDEX
(key_list)</code>, you can tell MySQL to use only one of the
possible indexes to find rows in the table. The alternative syntax
<code>IGNORE INDEX (key_list)</code> can be used to tell MySQL to
not use some particular index. <a id="IDX1404" name="IDX1404"></a>
In MySQL 4.0.9 you can also use <code>FORCE INDEX</code>. This acts
likes <code>USE INDEX (key_list)</code> but with the addition that
a table scan is assumed to be VERY expensive. In other words a
table scan will only be used if there is no way to use one of the
given index to find rows in the table. <a id="IDX1405"
name="IDX1405"></a> <a id="IDX1406" name="IDX1406"></a>
<code>USE/IGNORE KEY</code> are synonyms for <code>USE/IGNORE
INDEX</code>.</li>
</ul>

<p>Some examples:</p>

<pre>
mysql&gt; SELECT * FROM table1,table2 WHERE table1.id=table2.id;
mysql&gt; SELECT * FROM table1 LEFT JOIN table2 ON table1.id=table2.id;
mysql&gt; SELECT * FROM table1 LEFT JOIN table2 USING (id);
mysql&gt; SELECT * FROM table1 LEFT JOIN table2 ON table1.id=table2.id
    -&gt;          LEFT JOIN table3 ON table2.id=table3.id;
mysql&gt; SELECT * FROM table1 USE INDEX (key1,key2)
    -&gt;          WHERE key1=1 AND key2=2 AND key3=3;
mysql&gt; SELECT * FROM table1 IGNORE INDEX (key3)
    -&gt;          WHERE key1=1 AND key2=2 AND key3=3;
</pre>

<p>See section <a href="manual.html#LEFT_JOIN_optimisation">5.2.6
How MySQL Optimises <code>LEFT JOIN</code> and <code>RIGHT
JOIN</code></a>.</p>

<h4><a id="UNION" name="UNION" href="manual_toc.html#UNION">6.4.1.2
<code>UNION</code> Syntax</a></h4>

<p><a id="IDX1407" name="IDX1407"></a></p>

<pre>
SELECT ...
UNION [ALL]
SELECT ...
  [UNION
   SELECT ...]
</pre>

<p><code>UNION</code> is implemented in MySQL 4.0.0.</p>

<p><code>UNION</code> is used to combine the result from many
<code>SELECT</code> statements into one result set.</p>

<p>The columns listed in the select_expression portion of the
<code>SELECT</code> should have the same type. The column names
used in the first <code>SELECT</code> query will be used as the
column names for the results returned.</p>

<p>The <code>SELECT</code> commands are normal select commands, but
with the following restrictions:</p>

<ul>
<li>Only the last <code>SELECT</code> command can have <code>INTO
OUTFILE</code>.</li>
</ul>

<p>If you don't use the keyword <code>ALL</code> for the
<code>UNION</code>, all returned rows will be unique, as if you had
done a <code>DISTINCT</code> for the total result set. If you
specify <code>ALL</code>, then you will get all matching rows from
all the used <code>SELECT</code> statements.</p>

<p>If you want to use an <code>ORDER BY</code> for the total
<code>UNION</code> result, you should use parentheses:</p>

<pre>
(SELECT a FROM table_name WHERE a=10 AND B=1 ORDER BY a LIMIT 10)
UNION
(SELECT a FROM table_name WHERE a=11 AND B=2 ORDER BY a LIMIT 10)
ORDER BY a;
</pre>

<p><a id="IDX1408" name="IDX1408"></a></p>

<h3><a id="HANDLER" name="HANDLER"
href="manual_toc.html#HANDLER">6.4.2 <code>HANDLER</code>
Syntax</a></h3>

<pre>
HANDLER tbl_name OPEN [ AS alias ]
HANDLER tbl_name READ index_name { = | &gt;= | &lt;= | &lt; } (value1,value2,...)
    [ WHERE ... ] [LIMIT ... ]
HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }
    [ WHERE ... ] [LIMIT ... ]
HANDLER tbl_name READ { FIRST | NEXT }
    [ WHERE ... ] [LIMIT ... ]
HANDLER tbl_name CLOSE
</pre>

<p>The <code>HANDLER</code> statement provides direct access to the
<code>MyISAM</code> table storage engine interface.</p>

<p>The first form of <code>HANDLER</code> statement opens a table,
making it accessible via subsequent <code>HANDLER ... READ</code>
statements. This table object is not shared by other threads and
will not be closed until the thread calls <code>HANDLER tbl_name
CLOSE</code> or the thread dies.</p>

<p>The second form fetches one row (or more, specified by
<code>LIMIT</code> clause) where the index specified complies to
the condition and <code>WHERE</code> condition is met. If the index
consists of several parts (spans over several columns) the values
are specified in comma-separated list, providing values only for
few first columns is possible.</p>

<p>The third form fetches one row (or more, specified by
<code>LIMIT</code> clause) from the table in index order, matching
<code>WHERE</code> condition.</p>

<p>The fourth form (without index specification) fetches one row
(or more, specified by <code>LIMIT</code> clause) from the table in
natural row order (as stored in datafile) matching
<code>WHERE</code> condition. It is faster than <code>HANDLER
tbl_name READ index_name</code> when a full table scan is
desired.</p>

<p><code>HANDLER ... CLOSE</code> closes a table that was opened
with <code>HANDLER ... OPEN</code>.</p>

<p><code>HANDLER</code> is a somewhat low-level statement. For
example, it does not provide consistency. That is, <code>HANDLER
... OPEN</code> does <strong>NOT</strong> take a snapshot of the
table, and does <strong>NOT</strong> lock the table. This means
that after a <code>HANDLER ... OPEN</code> is issued, table data
can be modified (by this or any other thread) and these
modifications may appear only partially in <code>HANDLER ...
NEXT</code> or <code>HANDLER ... PREV</code> scans.</p>

<p>The reasons to use this interface instead of normal SQL are:</p>

<ul>
<li>It's faster than <code>SELECT</code> because: 

<ul>
<li>A designated storage engine is allocated for the thread in
<code>HANDLER open</code>.</li>

<li>There is less parsing involved.</li>

<li>No optimiser and no query checking overhead.</li>

<li>The used table doesn't have to be locked between two handler
requests.</li>

<li>The handler interface doesn't have to provide a consistent look
of the data (for example dirty-reads are allow), which allows the
storage engine to do optimisations that SQL doesn't normally
allow.</li>
</ul>
</li>

<li>It makes it much easier to port applications that uses an ISAM
like interface to MySQL.</li>

<li>It allows one to traverse a database in a manner that is not
easy (in some case impossible) to do with SQL. The handler
interface is more natural way to look at data when working with
applications that provide an interactive user interfaces to the
database.</li>
</ul>

<h3><a id="INSERT" name="INSERT"
href="manual_toc.html#INSERT">6.4.3 <code>INSERT</code>
Syntax</a></h3>

<p><a id="IDX1409" name="IDX1409"></a></p>

<pre>
    INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        VALUES ((expression | DEFAULT),...),(...),...
        [ ON DUPLICATE KEY UPDATE col_name=expression, ... ]
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name
        SET col_name=(expression | DEFAULT), ...
        [ ON DUPLICATE KEY UPDATE col_name=expression, ... ]

</pre>

<p><code>INSERT</code> inserts new rows into an existing table. The
<code>INSERT ... VALUES</code> form of the statement inserts rows
based on explicitly specified values. The <code>INSERT ...
SELECT</code> form inserts rows selected from another table or
tables. The <code>INSERT ... VALUES</code> form with multiple value
lists is supported in MySQL Version 3.22.5 or later. The
<code>col_name=expression</code> syntax is supported in MySQL
Version 3.22.10 or later.</p>

<p><code>tbl_name</code> is the table into which rows should be
inserted. The column name list or the <code>SET</code> clause
indicates which columns the statement specifies values for:</p>

<ul>
<li>If you specify no column list for <code>INSERT ...
VALUES</code> or <code>INSERT ... SELECT</code>, values for all
columns must be provided in the <code>VALUES()</code> list or by
the <code>SELECT</code>. If you don't know the order of the columns
in the table, use <code>DESCRIBE tbl_name</code> to find out.</li>

<li><a id="IDX1410" name="IDX1410"></a> Any column not explicitly
given a value is set to its default value. For example, if you
specify a column list that doesn't name all the columns in the
table, unnamed columns are set to their default values. Default
value assignment is described in section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>. You can also use the keyword <code>DEFAULT</code> to
set a column to its default value. (New in MySQL 4.0.3.) This makes
it easier to write <code>INSERT</code> statements that assign
values to all but a few columns, because it allows you to avoid
writing an incomplete <code>VALUES()</code> list (a list that does
not include a value for each column in the table). Otherwise, you
would have to write out the list of column names corresponding to
each value in the <code>VALUES()</code> list. MySQL always has a
default value for all fields. This is something that is imposed on
MySQL to be able to work with both transactional and not
transactional tables. Our view is that checking of fields content
should be done in the application and not in the database
server.</li>

<li>An <code>expression</code> may refer to any column that was set
earlier in a value list. For example, you can say this: 

<pre>
mysql&gt; INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);
</pre>

But not this: 

<pre>
mysql&gt; INSERT INTO tbl_name (col1,col2) VALUES(col2*2,15);
</pre>
</li>

<li>If you specify the keyword <code>LOW_PRIORITY</code>, execution
of the <code>INSERT</code> is delayed until no other clients are
reading from the table. In this case the client has to wait until
the insert statement is completed, which may take a long time if
the table is in heavy use. This is in contrast to <code>INSERT
DELAYED</code>, which lets the client continue at once. See section
<a href="manual.html#INSERT_DELAYED">6.4.4 <code>INSERT
DELAYED</code> Syntax</a>. Note that <code>LOW_PRIORITY</code>
should normally not be used with <code>MyISAM</code> tables as this
disables concurrent inserts. See section <a
href="manual.html#MyISAM">7.1 <code>MyISAM</code> Tables</a>.</li>

<li>If you specify the keyword <code>IGNORE</code> in an
<code>INSERT</code> with many value rows, any rows that duplicate
an existing <code>PRIMARY</code> or <code>UNIQUE</code> key in the
table are ignored and are not inserted. If you do not specify
<code>IGNORE</code>, the insert is aborted if there is any row that
duplicates an existing key value. You can determine with the C API
function <code>mysql_info()</code> how many rows were inserted into
the table.</li>

<li>If you specify <code>ON DUPLICATE KEY UPDATE</code> clause (new
in MySQL 4.1.0), and a row is inserted that would cause a duplicate
value in <code>PRIMARY</code> or <code>UNIQUE</code> key, an
<code>UPDATE</code> of the old row is performed. For example, the
command: 

<pre>
mysql&gt; INSERT INTO table (a,b,c) VALUES (1,2,3)
   --&gt; ON DUPLICATE KEY UPDATE c=c+1;
</pre>

in case of column <code>a</code> is declared as <code>UNIQUE</code>
and already holds <code>1</code> once, would be identical to the 

<pre>
mysql&gt; UPDATE table SET c=c+1 WHERE a=1;
</pre>

<strong>Note:</strong> that if column <code>b</code> is unique too,
the <code>UPDATE</code> command would be written as 

<pre>
mysql&gt; UPDATE table SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;
</pre>

and if <code>a=1 OR b=2</code> matches several rows, only
<strong>one</strong> row will be updated! In general, one should
try to avoid using <code>ON DUPLICATE KEY</code> clause on tables
with multiple <code>UNIQUE</code> keys. When one uses <code>ON
DUPLICATE KEY UPDATE</code>, the <code>DELAYED</code> option is
ignored.</li>

<li>If MySQL was configured using the
<code>DONT_USE_DEFAULT_FIELDS</code> option, <code>INSERT</code>
statements generate an error unless you explicitly specify values
for all columns that require a non-<code>NULL</code> value. See
section <a href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>.</li>

<li>You can find the value used for an <code>AUTO_INCREMENT</code>
column with the <code>mysql_insert_id</code> function. See section
<a href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>.</li>
</ul>

<p><a id="IDX1411" name="IDX1411"></a> If you use <code>INSERT ...
SELECT</code> or an <code>INSERT ... VALUES</code> statement with
multiple value lists, you can use the C API function
<code>mysql_info()</code> to get information about the query. The
format of the information string is shown here:</p>

<pre>
Records: 100 Duplicates: 0 Warnings: 0
</pre>

<p><code>Duplicates</code> indicates the number of rows that
couldn't be inserted because they would duplicate some existing
unique index value. <code>Warnings</code> indicates the number of
attempts to insert column values that were problematic in some way.
Warnings can occur under any of the following conditions:</p>

<ul>
<li>Inserting <code>NULL</code> into a column that has been
declared <code>NOT NULL</code>. The column is set to its default
value.</li>

<li>Setting a numeric column to a value that lies outside the
column's range. The value is clipped to the appropriate endpoint of
the range.</li>

<li>Setting a numeric column to a value such as <code>'10.34
a'</code>. The trailing garbage is stripped and the remaining
numeric part is inserted. If the value doesn't make sense as a
number at all, the column is set to <code>0</code>.</li>

<li>Inserting a string into a <code>CHAR</code>,
<code>VARCHAR</code>, <code>TEXT</code>, or <code>BLOB</code>
column that exceeds the column's maximum length. The value is
truncated to the column's maximum length.</li>

<li>Inserting a value into a date or time column that is illegal
for the column type. The column is set to the appropriate zero
value for the type.</li>
</ul>

<p><a id="IDX1412" name="IDX1412"></a> <a id="IDX1413"
name="IDX1413"></a></p>

<h4><a id="INSERT_SELECT" name="INSERT_SELECT"
href="manual_toc.html#INSERT_SELECT">6.4.3.1 <code>INSERT ...
SELECT</code> Syntax</a></h4>

<pre>
INSERT [LOW_PRIORITY] [IGNORE] [INTO] tbl_name [(column list)] SELECT ...
</pre>

<p>With <code>INSERT ... SELECT</code> statement you can quickly
insert many rows into a table from one or many tables.</p>

<pre>
INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID FROM tblTemp1 WHERE
tblTemp1.fldOrder_ID &gt; 100;
</pre>

<p>The following conditions hold for an <code>INSERT ...
SELECT</code> statement:</p>

<ul>
<li>The target table of the <code>INSERT</code> statement cannot
appear in the <code>FROM</code> clause of the <code>SELECT</code>
part of the query because it's forbidden in ANSI SQL to
<code>SELECT</code> from the same table into which you are
inserting. (The problem is that the <code>SELECT</code> possibly
would find records that were inserted earlier during the same run.
When using subselect clauses, the situation could easily be very
confusing!)</li>

<li><code>AUTO_INCREMENT</code> columns work as usual.</li>

<li>You can use the C API function <code>mysql_info()</code> to get
information about the query. See section <a
href="manual.html#INSERT">6.4.3 <code>INSERT</code>
Syntax</a>.</li>

<li>To ensure that the update log/binary log can be used to
re-create the original tables, MySQL will not allow concurrent
inserts during <code>INSERT ... SELECT</code>.</li>
</ul>

<p>You can of course also use <code>REPLACE</code> instead of
<code>INSERT</code> to overwrite old rows.</p>

<h3><a id="INSERT_DELAYED" name="INSERT_DELAYED"
href="manual_toc.html#INSERT_DELAYED">6.4.4 <code>INSERT
DELAYED</code> Syntax</a></h3>

<p><a id="IDX1414" name="IDX1414"></a> <a id="IDX1415"
name="IDX1415"></a></p>

<p><a id="IDX1416" name="IDX1416"></a></p>

<pre>
INSERT DELAYED ...
</pre>

<p>The <code>DELAYED</code> option for the <code>INSERT</code>
statement is a MySQL-specific option that is very useful if you
have clients that can't wait for the <code>INSERT</code> to
complete. This is a common problem when you use MySQL for logging
and you also periodically run <code>SELECT</code> and
<code>UPDATE</code> statements that take a long time to complete.
<code>DELAYED</code> was introduced in MySQL Version 3.22.15. It is
a MySQL extension to ANSI SQL92.</p>

<p><code>INSERT DELAYED</code> only works with <code>ISAM</code>
and <code>MyISAM</code> tables. Note that as <code>MyISAM</code>
tables supports concurrent <code>SELECT</code> and
<code>INSERT</code>, if there is no free blocks in the middle of
the datafile, you very seldom need to use <code>INSERT
DELAYED</code> with <code>MyISAM</code>. See section <a
href="manual.html#MyISAM">7.1 <code>MyISAM</code> Tables</a>.</p>

<p>When you use <code>INSERT DELAYED</code>, the client will get an
OK at once and the row will be inserted when the table is not in
use by any other thread.</p>

<p>Another major benefit of using <code>INSERT DELAYED</code> is
that inserts from many clients are bundled together and written in
one block. This is much faster than doing many separate
inserts.</p>

<p>Note that currently the queued rows are only stored in memory
until they are inserted into the table. This means that if you kill
<code>mysqld</code> the hard way (<code>kill -9</code>) or if
<code>mysqld</code> dies unexpectedly, any queued rows that weren't
written to disk are lost!</p>

<p>The following describes in detail what happens when you use the
<code>DELAYED</code> option to <code>INSERT</code> or
<code>REPLACE</code>. In this description, the ``thread'' is the
thread that received an <code>INSERT DELAYED</code> command and
``handler'' is the thread that handles all <code>INSERT
DELAYED</code> statements for a particular table.</p>

<ul>
<li>When a thread executes a <code>DELAYED</code> statement for a
table, a handler thread is created to process all
<code>DELAYED</code> statements for the table, if no such handler
already exists.</li>

<li>The thread checks whether the handler has acquired a
<code>DELAYED</code> lock already; if not, it tells the handler
thread to do so. The <code>DELAYED</code> lock can be obtained even
if other threads have a <code>READ</code> or <code>WRITE</code>
lock on the table. However, the handler will wait for all
<code>ALTER TABLE</code> locks or <code>FLUSH TABLES</code> to
ensure that the table structure is up to date.</li>

<li>The thread executes the <code>INSERT</code> statement, but
instead of writing the row to the table, it puts a copy of the
final row into a queue that is managed by the handler thread. Any
syntax errors are noticed by the thread and reported to the client
program.</li>

<li>The client can't report the number of duplicates or the
<code>AUTO_INCREMENT</code> value for the resulting row; it can't
obtain them from the server, because the <code>INSERT</code>
returns before the insert operation has been completed. If you use
the C API, the <code>mysql_info()</code> function doesn't return
anything meaningful, for the same reason.</li>

<li>The update log is updated by the handler thread when the row is
inserted into the table. In case of multiple-row inserts, the
update log is updated when the first row is inserted.</li>

<li>After every <code>delayed_insert_limit</code> rows are written,
the handler checks whether any <code>SELECT</code> statements are
still pending. If so, it allows these to execute before continuing.
<a id="IDX1417" name="IDX1417"></a> <a id="IDX1418"
name="IDX1418"></a></li>

<li>When the handler has no more rows in its queue, the table is
unlocked. If no new <code>INSERT DELAYED</code> commands are
received within <code>delayed_insert_timeout</code> seconds, the
handler terminates.</li>

<li>If more than <code>delayed_queue_size</code> rows are pending
already in a specific handler queue, the thread requesting
<code>INSERT DELAYED</code> waits until there is room in the queue.
This is done to ensure that the <code>mysqld</code> server doesn't
use all memory for the delayed memory queue.</li>

<li>The handler thread will show up in the MySQL process list with
<code>delayed_insert</code> in the <code>Command</code> column. It
will be killed if you execute a <code>FLUSH TABLES</code> command
or kill it with <code>KILL thread_id</code>. However, it will first
store all queued rows into the table before exiting. During this
time it will not accept any new <code>INSERT</code> commands from
another thread. If you execute an <code>INSERT DELAYED</code>
command after this, a new handler thread will be created. Note that
the above means that <code>INSERT DELAYED</code> commands have
higher priority than normal <code>INSERT</code> commands if there
is an <code>INSERT DELAYED</code> handler already running! Other
update commands will have to wait until the <code>INSERT
DELAYED</code> queue is empty, someone kills the handler thread
(with <code>KILL thread_id</code>), or someone executes <code>FLUSH
TABLES</code>.</li>

<li>The following status variables provide information about
<code>INSERT DELAYED</code> commands: 

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Meaning</strong></td>
</tr>

<tr>
<td><code>Delayed_insert_threads</code></td>
<td>Number of handler threads</td>
</tr>

<tr>
<td><code>Delayed_writes</code></td>
<td>Number of rows written with <code>INSERT DELAYED</code></td>
</tr>

<tr>
<td><code>Not_flushed_delayed_rows</code></td>
<td>Number of rows waiting to be written</td>
</tr>
</table>

You can view these variables by issuing a <code>SHOW STATUS</code>
statement or by executing a <code>mysqladmin extended-status</code>
command.</li>
</ul>

<p>Note that <code>INSERT DELAYED</code> is slower than a normal
INSERT if the table is not in use. There is also the additional
overhead for the server to handle a separate thread for each table
on which you use <code>INSERT DELAYED</code>. This means that you
should only use <code>INSERT DELAYED</code> when you are really
sure you need it!</p>

<h3><a id="UPDATE" name="UPDATE"
href="manual_toc.html#UPDATE">6.4.5 <code>UPDATE</code>
Syntax</a></h3>

<p><a id="IDX1419" name="IDX1419"></a></p>

<pre>
UPDATE [LOW_PRIORITY] [IGNORE] tbl_name
    SET col_name1=expr1 [, col_name2=expr2, ...]
    [WHERE where_definition]
    [ORDER BY ...]
    [LIMIT #]
</pre>

<p><code>UPDATE</code> updates columns in existing table rows with
new values. The <code>SET</code> clause indicates which columns to
modify and the values they should be given. The <code>WHERE</code>
clause, if given, specifies which rows should be updated.
Otherwise, all rows are updated. If the <code>ORDER BY</code>
clause is specified, the rows will be updated in the order that is
specified.</p>

<p>If you specify the keyword <code>LOW_PRIORITY</code>, execution
of the <code>UPDATE</code> is delayed until no other clients are
reading from the table.</p>

<p>If you specify the keyword <code>IGNORE</code>, the update
statement will not abort even if we get duplicate key errors during
the update. Rows that would cause conflicts will not be
updated.</p>

<p>If you access a column from <code>tbl_name</code> in an
expression, <code>UPDATE</code> uses the current value of the
column. For example, the following statement sets the
<code>age</code> column to one more than its current value:</p>

<pre>
mysql&gt; UPDATE persondata SET age=age+1;
</pre>

<p><code>UPDATE</code> assignments are evaluated from left to
right. For example, the following statement doubles the
<code>age</code> column, then increments it:</p>

<pre>
mysql&gt; UPDATE persondata SET age=age*2, age=age+1;
</pre>

<p>If you set a column to the value it currently has, MySQL notices
this and doesn't update it.</p>

<p><a id="IDX1420" name="IDX1420"></a> <code>UPDATE</code> returns
the number of rows that were actually changed. In MySQL Version
3.22 or later, the C API function <code>mysql_info()</code> returns
the number of rows that were matched and updated and the number of
warnings that occurred during the <code>UPDATE</code>.</p>

<p>In MySQL Version 3.23, you can use <code>LIMIT #</code> to
ensure that only a given number of rows are changed.</p>

<p>Starting with MySQL Version 4.0.4, you can also perform
<code>UPDATE</code> operations that cover multiple tables:</p>

<pre>
UPDATE items,month SET items.price=month.price
WHERE items.id=month.id;
</pre>

<h3><a id="DELETE" name="DELETE"
href="manual_toc.html#DELETE">6.4.6 <code>DELETE</code>
Syntax</a></h3>

<p><a id="IDX1421" name="IDX1421"></a></p>

<pre>
DELETE [LOW_PRIORITY] [QUICK] FROM table_name
       [WHERE where_definition]
       [ORDER BY ...]
       [LIMIT rows]

or

DELETE [LOW_PRIORITY] [QUICK] table_name[.*] [,table_name[.*] ...]
       FROM table-references
       [WHERE where_definition]

or

DELETE [LOW_PRIORITY] [QUICK]
       FROM table_name[.*], [table_name[.*] ...]
       USING table-references
       [WHERE where_definition]
</pre>

<p><code>DELETE</code> deletes rows from <code>table_name</code>
that satisfy the condition given by <code>where_definition</code>,
and returns the number of records deleted.</p>

<p>If you issue a <code>DELETE</code> with no <code>WHERE</code>
clause, all rows are deleted. If you do this in
<code>AUTOCOMMIT</code> mode, this works as <code>TRUNCATE</code>.
See section <a href="manual.html#TRUNCATE">6.4.7
<code>TRUNCATE</code> Syntax</a>. In MySQL 3.23,
<code>DELETE</code> without a <code>WHERE</code> clause will return
zero as the number of affected records.</p>

<p>If you really want to know how many records are deleted when you
are deleting all rows, and are willing to suffer a speed penalty,
you can use a <code>DELETE</code> statement of this form:</p>

<pre>
mysql&gt; DELETE FROM table_name WHERE 1&gt;0;
</pre>

<p>Note that this is much slower than <code>DELETE FROM
table_name</code> with no <code>WHERE</code> clause, because it
deletes rows one at a time.</p>

<p>If you specify the keyword <code>LOW_PRIORITY</code>, execution
of the <code>DELETE</code> is delayed until no other clients are
reading from the table.</p>

<p>If you specify the word <code>QUICK</code> then the storage
engine will not merge index leaves during delete, which may speed
up certain kind of deletes.</p>

<p>In <code>MyISAM</code> tables, deleted records are maintained in
a linked list and subsequent <code>INSERT</code> operations reuse
old record positions. To reclaim unused space and reduce
file-sizes, use the <code>OPTIMIZE TABLE</code> statement or the
<code>myisamchk</code> utility to reorganise tables. <code>OPTIMIZE
TABLE</code> is easier, but <code>myisamchk</code> is faster. See
section <a href="manual.html#OPTIMIZE_TABLE">4.5.1 <code>OPTIMIZE
TABLE</code> Syntax</a> and section <a
href="manual.html#Optimisation">4.4.6.10 Table
Optimisation</a>.</p>

<p>The first multi-table delete format is supported starting from
MySQL 4.0.0. The second multi-table delete format is supported
starting from MySQL 4.0.2.</p>

<p>The idea is that only matching rows from the tables listed
<strong>before</strong> the <code>FROM</code> or before the
<code>USING</code> clause are deleted. The effect is that you can
delete rows from many tables at the same time and also have
additional tables that are used for searching.</p>

<p>The <code>.*</code> after the table names is there just to be
compatible with <code>Access</code>:</p>

<pre>
DELETE t1,t2 FROM t1,t2,t3 WHERE t1.id=t2.id AND t2.id=t3.id

or

DELETE FROM t1,t2 USING t1,t2,t3 WHERE t1.id=t2.id AND t2.id=t3.id
</pre>

<p>In the above case we delete matching rows just from tables
<code>t1</code> and <code>t2</code>.</p>

<p><code>ORDER BY</code> and using multiple tables in the
<code>DELETE</code> statement is supported in MySQL 4.0.</p>

<p>If an <code>ORDER BY</code> clause is used, the rows will be
deleted in that order. This is really only useful in conjunction
with <code>LIMIT</code>. For example:</p>

<pre>
DELETE FROM somelog
WHERE user = 'jcole'
ORDER BY timestamp
LIMIT 1
</pre>

<p>This will delete the oldest entry (by <code>timestamp</code>)
where the row matches the <code>WHERE</code> clause.</p>

<p>The MySQL-specific <code>LIMIT rows</code> option to
<code>DELETE</code> tells the server the maximum number of rows to
be deleted before control is returned to the client. This can be
used to ensure that a specific <code>DELETE</code> command doesn't
take too much time. You can simply repeat the <code>DELETE</code>
command until the number of affected rows is less than the
<code>LIMIT</code> value.</p>

<h3><a id="TRUNCATE" name="TRUNCATE"
href="manual_toc.html#TRUNCATE">6.4.7 <code>TRUNCATE</code>
Syntax</a></h3>

<p><a id="IDX1422" name="IDX1422"></a></p>

<pre>
TRUNCATE TABLE table_name
</pre>

<p>In 3.23 <code>TRUNCATE TABLE</code> is mapped to <code>COMMIT ;
DELETE FROM table_name</code>. See section <a
href="manual.html#DELETE">6.4.6 <code>DELETE</code> Syntax</a>.</p>

<p><code>TRUNCATE TABLE</code> differs from <code>DELETE FROM
...</code> in the following ways:</p>

<ul>
<li>Truncate operations drop and re-create the table, which is much
faster than deleting rows one by one.</li>

<li>Not transaction-safe; you will get an error if you have an
active transaction or an active table lock.</li>

<li>Doesn't return the number of deleted rows.</li>

<li>As long as the table definition file <tt>`table_name.frm'</tt>
is valid, the table can be re-created this way, even if the data or
index files have become corrupted.</li>
</ul>

<p><code>TRUNCATE</code> is an Oracle SQL extension.</p>

<h3><a id="REPLACE" name="REPLACE"
href="manual_toc.html#REPLACE">6.4.8 <code>REPLACE</code>
Syntax</a></h3>

<p><a id="IDX1423" name="IDX1423"></a></p>

<pre>
    REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        VALUES (expression,...),(...),...
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name
        SET col_name=expression, col_name=expression,...
</pre>

<p><code>REPLACE</code> works exactly like <code>INSERT</code>,
except that if an old record in the table has the same value as a
new record on a <code>UNIQUE</code> index or <code>PRIMARY
KEY</code>, the old record is deleted before the new record is
inserted. See section <a href="manual.html#INSERT">6.4.3
<code>INSERT</code> Syntax</a>.</p>

<p>In other words, you can't access the values of the old row from
a <code>REPLACE</code> statement. In some old MySQL versions it
appeared that you could do this, but that was a bug that has been
corrected.</p>

<p>To be able to use <code>REPLACE</code> you must have
<code>INSERT</code> and <code>DELETE</code> privileges for the
table.</p>

<p>When you use a <code>REPLACE</code> command,
<code>mysql_affected_rows()</code> will return 2 if the new row
replaced an old row. This is because one row was inserted after the
duplicate was deleted.</p>

<p>This fact makes it easy to determine whether
<code>REPLACE</code> added or replaced a row: check whether the
affected-rows value is 1 (added) or 2 (replaced).</p>

<p>Note that unless you use a <code>UNIQUE</code> index or
<code>PRIMARY KEY</code>, using a <code>REPLACE</code> command
makes no sense, since it would just do an <code>INSERT</code>.</p>

<h3><a id="LOAD_DATA" name="LOAD_DATA"
href="manual_toc.html#LOAD_DATA">6.4.9 <code>LOAD DATA
INFILE</code> Syntax</a></h3>

<p><a id="IDX1424" name="IDX1424"></a></p>

<pre>
LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name.txt'
    [REPLACE | IGNORE]
    INTO TABLE tbl_name
    [FIELDS
        [TERMINATED BY '\t']
        [[OPTIONALLY] ENCLOSED BY '']
        [ESCAPED BY '\\' ]
    ]
    [LINES TERMINATED BY '\n']
    [IGNORE number LINES]
    [(col_name,...)]
</pre>

<p>The <code>LOAD DATA INFILE</code> statement reads rows from a
text file into a table at a very high speed. If the
<code>LOCAL</code> keyword is specified, the file is read from the
client host. If <code>LOCAL</code> is not specified, the file must
be located on the server. (<code>LOCAL</code> is available in MySQL
Version 3.22.6 or later.)</p>

<p>For security reasons, when reading text files located on the
server, the files must either reside in the database directory or
be readable by all. Also, to use <code>LOAD DATA INFILE</code> on
server files, you must have the <code>FILE</code> privilege on the
server host. See section <a
href="manual.html#Privileges_provided">4.2.7 Privileges Provided by
MySQL</a>.</p>

<p>In MySQL 3.23.49 and MySQL 4.0.2 <code>LOCAL</code> will only
work if you have not started <code>mysqld</code> with
<code>--local-infile=0</code> or if you have not enabled your
client to support <code>LOCAL</code>. See section <a
href="manual.html#LOAD_DATA_LOCAL">4.2.4 Security issues with LOAD
DATA LOCAL</a>.</p>

<p>If you specify the keyword <code>LOW_PRIORITY</code>, execution
of the <code>LOAD DATA</code> statement is delayed until no other
clients are reading from the table.</p>

<p>If you specify the keyword <code>CONCURRENT</code> with a
<code>MyISAM</code> table, then other threads can retrieve data
from the table while <code>LOAD DATA</code> is executing. Using
this option will of course affect the performance of <code>LOAD
DATA</code> a bit even if no other thread is using the table at the
same time.</p>

<p>Using <code>LOCAL</code> will be a bit slower than letting the
server access the files directly, because the contents of the file
must travel from the client host to the server host. On the other
hand, you do not need the <code>FILE</code> privilege to load local
files.</p>

<p>If you are using MySQL before Version 3.23.24 you can't read
from a FIFO with <code>LOAD DATA INFILE</code>. If you need to read
from a FIFO (for example the output from gunzip), use <code>LOAD
DATA LOCAL INFILE</code> instead.</p>

<p><a id="IDX1425" name="IDX1425"></a> You can also load datafiles
by using the <code>mysqlimport</code> utility; it operates by
sending a <code>LOAD DATA INFILE</code> command to the server. The
<code>--local</code> option causes <code>mysqlimport</code> to read
datafiles from the client host. You can specify the
<code>--compress</code> option to get better performance over slow
networks if the client and server support the compressed
protocol.</p>

<p>When locating files on the server host, the server uses the
following rules:</p>

<ul>
<li>If an absolute pathname is given, the server uses the pathname
as is.</li>

<li>If a relative pathname with one or more leading components is
given, the server searches for the file relative to the server's
data directory.</li>

<li>If a filename with no leading components is given, the server
looks for the file in the database directory of the current
database.</li>
</ul>

<p>Note that these rules mean a file given as
<tt>`./myfile.txt'</tt> is read from the server's data directory,
whereas a file given as <tt>`myfile.txt'</tt> is read from the
database directory of the current database. For example, the
following <code>LOAD DATA</code> statement reads the file
<tt>`data.txt'</tt> from the database directory for
<code>db1</code> because <code>db1</code> is the current database,
even though the statement explicitly loads the file into a table in
the <code>db2</code> database:</p>

<pre>
mysql&gt; USE db1;
mysql&gt; LOAD DATA INFILE "data.txt" INTO TABLE db2.my_table;
</pre>

<p>The <code>REPLACE</code> and <code>IGNORE</code> keywords
control handling of input records that duplicate existing records
on unique key values. If you specify <code>REPLACE</code>, new rows
replace existing rows that have the same unique key value. If you
specify <code>IGNORE</code>, input rows that duplicate an existing
row on a unique key value are skipped. If you don't specify either
option, an error occurs when a duplicate key value is found, and
the rest of the text file is ignored.</p>

<p>If you load data from a local file using the <code>LOCAL</code>
keyword, the server has no way to stop transmission of the file in
the middle of the operation, so the default behaviour is the same
as if <code>IGNORE</code> is specified.</p>

<p>If you use <code>LOAD DATA INFILE</code> on an empty
<code>MyISAM</code> table, all non-unique indexes are created in a
separate batch (like in <code>REPAIR</code>). This normally makes
<code>LOAD DATA INFILE</code> much faster when you have many
indexes.</p>

<p><code>LOAD DATA INFILE</code> is the complement of <code>SELECT
... INTO OUTFILE</code>. See section <a
href="manual.html#SELECT">6.4.1 <code>SELECT</code> Syntax</a>. To
write data from a database to a file, use <code>SELECT ... INTO
OUTFILE</code>. To read the file back into the database, use
<code>LOAD DATA INFILE</code>. The syntax of the
<code>FIELDS</code> and <code>LINES</code> clauses is the same for
both commands. Both clauses are optional, but <code>FIELDS</code>
must precede <code>LINES</code> if both are specified.</p>

<p>If you specify a <code>FIELDS</code> clause, each of its
subclauses (<code>TERMINATED BY</code>, <code>[OPTIONALLY] ENCLOSED
BY</code>, and <code>ESCAPED BY</code>) is also optional, except
that you must specify at least one of them.</p>

<p>If you don't specify a <code>FIELDS</code> clause, the defaults
are the same as if you had written this:</p>

<pre>
FIELDS TERMINATED BY '\t' ENCLOSED BY '' ESCAPED BY '\\'
</pre>

<p>If you don't specify a <code>LINES</code> clause, the default is
the same as if you had written this:</p>

<pre>
LINES TERMINATED BY '\n'
</pre>

<p>In other words, the defaults cause <code>LOAD DATA INFILE</code>
to act as follows when reading input:</p>

<ul>
<li>Look for line boundaries at newlines.</li>

<li>Break lines into fields at tabs.</li>

<li>Do not expect fields to be enclosed within any quoting
characters.</li>

<li>Interpret occurrences of tab, newline, or <samp>`\'</samp>
preceded by <samp>`\'</samp> as literal characters that are part of
field values.</li>
</ul>

<p>Conversely, the defaults cause <code>SELECT ... INTO
OUTFILE</code> to act as follows when writing output:</p>

<ul>
<li>Write tabs between fields.</li>

<li>Do not enclose fields within any quoting characters.</li>

<li>Use <samp>`\'</samp> to escape instances of tab, newline or
<samp>`\'</samp> that occur within field values.</li>

<li>Write newlines at the ends of lines.</li>
</ul>

<p>Note that to write <code>FIELDS ESCAPED BY '\\'</code>, you must
specify two backslashes for the value to be read as a single
backslash.</p>

<p>The <code>IGNORE number LINES</code> option can be used to
ignore a header of column names at the start of the file:</p>

<pre>
mysql&gt; LOAD DATA INFILE "/tmp/file_name" INTO TABLE test IGNORE 1 LINES;
</pre>

<p>When you use <code>SELECT ... INTO OUTFILE</code> in tandem with
<code>LOAD DATA INFILE</code> to write data from a database into a
file and then read the file back into the database later, the field
and line handling options for both commands must match. Otherwise,
<code>LOAD DATA INFILE</code> will not interpret the contents of
the file properly. Suppose you use <code>SELECT ... INTO
OUTFILE</code> to write a file with fields delimited by commas:</p>

<pre>
mysql&gt; SELECT * INTO OUTFILE 'data.txt'
    -&gt;          FIELDS TERMINATED BY ','
    -&gt;          FROM ...;
</pre>

<p>To read the comma-delimited file back in, the correct statement
would be:</p>

<pre>
mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE table2
    -&gt;           FIELDS TERMINATED BY ',';
</pre>

<p>If instead you tried to read in the file with the statement
shown here, it wouldn't work because it instructs <code>LOAD DATA
INFILE</code> to look for tabs between fields:</p>

<pre>
mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE table2
    -&gt;           FIELDS TERMINATED BY '\t';
</pre>

<p>The likely result is that each input line would be interpreted
as a single field.</p>

<p><code>LOAD DATA INFILE</code> can be used to read files obtained
from external sources, too. For example, a file in dBASE format
will have fields separated by commas and enclosed in double quotes.
If lines in the file are terminated by newlines, the command shown
here illustrates the field and line handling options you would use
to load the file:</p>

<pre>
mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
    -&gt;           FIELDS TERMINATED BY ',' ENCLOSED BY '"'
    -&gt;           LINES TERMINATED BY '\n';
</pre>

<p>Any of the field or line handling options may specify an empty
string (<code>''</code>). If not empty, the <code>FIELDS
[OPTIONALLY] ENCLOSED BY</code> and <code>FIELDS ESCAPED BY</code>
values must be a single character. The <code>FIELDS TERMINATED
BY</code> and <code>LINES TERMINATED BY</code> values may be more
than one character. For example, to write lines that are terminated
by carriage return-linefeed pairs, or to read a file containing
such lines, specify a <code>LINES TERMINATED BY '\r\n'</code>
clause.</p>

<p>For example, to read a file of jokes, that are separated with a
line of <code>%%</code>, into a SQL table you can do:</p>

<pre>
CREATE TABLE jokes (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY, joke TEXT
NOT NULL);
LOAD DATA INFILE "/tmp/jokes.txt" INTO TABLE jokes FIELDS TERMINATED BY ""
LINES TERMINATED BY "\n%%\n" (joke);
</pre>

<p><code>FIELDS [OPTIONALLY] ENCLOSED BY</code> controls quoting of
fields. For output (<code>SELECT ... INTO OUTFILE</code>), if you
omit the word <code>OPTIONALLY</code>, all fields are enclosed by
the <code>ENCLOSED BY</code> character. An example of such output
(using a comma as the field delimiter) is shown here:</p>

<pre>
"1","a string","100.20"
"2","a string containing a , comma","102.20"
"3","a string containing a \" quote","102.20"
"4","a string containing a \", quote and comma","102.20"
</pre>

<p>If you specify <code>OPTIONALLY</code>, the <code>ENCLOSED
BY</code> character is used only to enclose <code>CHAR</code> and
<code>VARCHAR</code> fields:</p>

<pre>
1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a \" quote",102.20
4,"a string containing a \", quote and comma",102.20
</pre>

<p>Note that occurrences of the <code>ENCLOSED BY</code> character
within a field value are escaped by prefixing them with the
<code>ESCAPED BY</code> character. Also note that if you specify an
empty <code>ESCAPED BY</code> value, it is possible to generate
output that cannot be read properly by <code>LOAD DATA
INFILE</code>. For example, the output just shown above would
appear as shown here if the escape character is empty. Observe that
the second field in the fourth line contains a comma following the
quote, which (erroneously) appears to terminate the field:</p>

<pre>
1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a " quote",102.20
4,"a string containing a ", quote and comma",102.20
</pre>

<p>For input, the <code>ENCLOSED BY</code> character, if present,
is stripped from the ends of field values. (This is true whether
<code>OPTIONALLY</code> is specified; <code>OPTIONALLY</code> has
no effect on input interpretation.) Occurrences of the
<code>ENCLOSED BY</code> character preceded by the <code>ESCAPED
BY</code> character are interpreted as part of the current field
value. In addition, duplicated <code>ENCLOSED BY</code> characters
occurring within fields are interpreted as single <code>ENCLOSED
BY</code> characters if the field itself starts with that
character. For example, if <code>ENCLOSED BY '"'</code> is
specified, quotes are handled as shown here:</p>

<pre>
"The ""BIG"" boss"  -&gt; The "BIG" boss
The "BIG" boss      -&gt; The "BIG" boss
The ""BIG"" boss    -&gt; The ""BIG"" boss
</pre>

<p><code>FIELDS ESCAPED BY</code> controls how to write or read
special characters. If the <code>FIELDS ESCAPED BY</code> character
is not empty, it is used to prefix the following characters on
output:</p>

<ul>
<li>The <code>FIELDS ESCAPED BY</code> character</li>

<li>The <code>FIELDS [OPTIONALLY] ENCLOSED BY</code> character</li>

<li>The first character of the <code>FIELDS TERMINATED BY</code>
and <code>LINES TERMINATED BY</code> values</li>

<li>ASCII <code>0</code> (what is actually written following the
escape character is ASCII <code>'0'</code>, not a zero-valued
byte)</li>
</ul>

<p>If the <code>FIELDS ESCAPED BY</code> character is empty, no
characters are escaped. It is probably not a good idea to specify
an empty escape character, particularly if field values in your
data contain any of the characters in the list just given.</p>

<p>For input, if the <code>FIELDS ESCAPED BY</code> character is
not empty, occurrences of that character are stripped and the
following character is taken literally as part of a field value.
The exceptions are an escaped <samp>`0'</samp> or <samp>`N'</samp>
(for example, <code>\0</code> or <code>\N</code> if the escape
character is <samp>`\'</samp>). These sequences are interpreted as
ASCII <code>0</code> (a zero-valued byte) and <code>NULL</code>.
See below for the rules on <code>NULL</code> handling.</p>

<p>For more information about <samp>`\'</samp>-escape syntax, see
section <a href="manual.html#Literals">6.1.1 Literals: How to Write
Strings and Numbers</a>.</p>

<p>In certain cases, field and line handling options interact:</p>

<ul>
<li>If <code>LINES TERMINATED BY</code> is an empty string and
<code>FIELDS TERMINATED BY</code> is non-empty, lines are also
terminated with <code>FIELDS TERMINATED BY</code>.</li>

<li>If the <code>FIELDS TERMINATED BY</code> and <code>FIELDS
ENCLOSED BY</code> values are both empty (<code>''</code>), a
fixed-row (non-delimited) format is used. With fixed-row format, no
delimiters are used between fields. Instead, column values are
written and read using the ``display'' widths of the columns. For
example, if a column is declared as <code>INT(7)</code>, values for
the column are written using 7-character fields. On input, values
for the column are obtained by reading 7 characters. Fixed-row
format also affects handling of <code>NULL</code> values; see
below. Note that fixed-size format will not work if you are using a
multi-byte character set.</li>
</ul>

<p>Handling of <code>NULL</code> values varies, depending on the
<code>FIELDS</code> and <code>LINES</code> options you use:</p>

<ul>
<li>For the default <code>FIELDS</code> and <code>LINES</code>
values, <code>NULL</code> is written as <code>\N</code> for output
and <code>\N</code> is read as <code>NULL</code> for input
(assuming the <code>ESCAPED BY</code> character is
<samp>`\'</samp>).</li>

<li>If <code>FIELDS ENCLOSED BY</code> is not empty, a field
containing the literal word <code>NULL</code> as its value is read
as a <code>NULL</code> value (this differs from the word
<code>NULL</code> enclosed within <code>FIELDS ENCLOSED BY</code>
characters, which is read as the string <code>'NULL'</code>).</li>

<li>If <code>FIELDS ESCAPED BY</code> is empty, <code>NULL</code>
is written as the word <code>NULL</code>.</li>

<li>With fixed-row format (which happens when <code>FIELDS
TERMINATED BY</code> and <code>FIELDS ENCLOSED BY</code> are both
empty), <code>NULL</code> is written as an empty string. Note that
this causes both <code>NULL</code> values and empty strings in the
table to be indistinguishable when written to the file because they
are both written as empty strings. If you need to be able to tell
the two apart when reading the file back in, you should not use
fixed-row format.</li>
</ul>

<p>Some cases are not supported by <code>LOAD DATA
INFILE</code>:</p>

<ul>
<li>Fixed-size rows (<code>FIELDS TERMINATED BY</code> and
<code>FIELDS ENCLOSED BY</code> both empty) and <code>BLOB</code>
or <code>TEXT</code> columns.</li>

<li>If you specify one separator that is the same as or a prefix of
another, <code>LOAD DATA INFILE</code> won't be able to interpret
the input properly. For example, the following <code>FIELDS</code>
clause would cause problems: 

<pre>
FIELDS TERMINATED BY '"' ENCLOSED BY '"'
</pre>
</li>

<li>If <code>FIELDS ESCAPED BY</code> is empty, a field value that
contains an occurrence of <code>FIELDS ENCLOSED BY</code> or
<code>LINES TERMINATED BY</code> followed by the <code>FIELDS
TERMINATED BY</code> value will cause <code>LOAD DATA INFILE</code>
to stop reading a field or line too early. This happens because
<code>LOAD DATA INFILE</code> cannot properly determine where the
field or line value ends.</li>
</ul>

<p>The following example loads all columns of the
<code>persondata</code> table:</p>

<pre>
mysql&gt; LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;
</pre>

<p>No field list is specified, so <code>LOAD DATA INFILE</code>
expects input rows to contain a field for each table column. The
default <code>FIELDS</code> and <code>LINES</code> values are
used.</p>

<p>If you wish to load only some of a table's columns, specify a
field list:</p>

<pre>
mysql&gt; LOAD DATA INFILE 'persondata.txt'
    -&gt;           INTO TABLE persondata (col1,col2,...);
</pre>

<p>You must also specify a field list if the order of the fields in
the input file differs from the order of the columns in the table.
Otherwise, MySQL cannot tell how to match up input fields with
table columns.</p>

<p>If a row has too few fields, the columns for which no input
field is present are set to default values. Default value
assignment is described in section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</p>

<p>An empty field value is interpreted differently than if the
field value is missing:</p>

<ul>
<li>For string types, the column is set to the empty string.</li>

<li>For numeric types, the column is set to <code>0</code>.</li>

<li>For date and time types, the column is set to the appropriate
``zero'' value for the type. See section <a
href="manual.html#Date_and_time_types">6.2.2 Date and Time
Types</a>.</li>
</ul>

<p>Note that these are the same values that result if you assign an
empty string explicitly to a string, numeric, or date or time type
explicitly in an <code>INSERT</code> or <code>UPDATE</code>
statement.</p>

<p><code>TIMESTAMP</code> columns are only set to the current date
and time if there is a <code>NULL</code> value for the column, or
(for the first <code>TIMESTAMP</code> column only) if the
<code>TIMESTAMP</code> column is left out from the field list when
a field list is specified.</p>

<p>If an input row has too many fields, the extra fields are
ignored and the number of warnings is incremented.</p>

<p><code>LOAD DATA INFILE</code> regards all input as strings, so
you can't use numeric values for <code>ENUM</code> or
<code>SET</code> columns the way you can with <code>INSERT</code>
statements. All <code>ENUM</code> and <code>SET</code> values must
be specified as strings!</p>

<p><a id="IDX1426" name="IDX1426"></a> If you are using the C API,
you can get information about the query by calling the API function
<code>mysql_info()</code> when the <code>LOAD DATA INFILE</code>
query finishes. The format of the information string is shown
here:</p>

<pre>
Records: 1  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

<p>Warnings occur under the same circumstances as when values are
inserted via the <code>INSERT</code> statement (see section <a
href="manual.html#INSERT">6.4.3 <code>INSERT</code> Syntax</a>),
except that <code>LOAD DATA INFILE</code> also generates warnings
when there are too few or too many fields in the input row. The
warnings are not stored anywhere; the number of warnings can only
be used as an indication if everything went well. If you get
warnings and want to know exactly why you got them, one way to do
this is to use <code>SELECT ... INTO OUTFILE</code> into another
file and compare this to your original input file.</p>

<p>If you need <code>LOAD DATA</code> to read from a pipe, you can
use the following trick:</p>

<pre>
mkfifo /mysql/db/x/x
chmod 666 /mysql/db/x/x
cat &lt; /dev/tcp/10.1.1.12/4711 &gt; /nt/mysql/db/x/x
mysql -e "LOAD DATA INFILE 'x' INTO TABLE x" x
</pre>

<p>If you are using a version of MySQL older than 3.23.25 you can
only do the above with <code>LOAD DATA LOCAL INFILE</code>.</p>

<p>For more information about the efficiency of <code>INSERT</code>
versus <code>LOAD DATA INFILE</code> and speeding up <code>LOAD
DATA INFILE</code>, See section <a
href="manual.html#Insert_speed">5.2.9 Speed of <code>INSERT</code>
Queries</a>.</p>

<h3><a id="DO" name="DO" href="manual_toc.html#DO">6.4.10
<code>DO</code> Syntax</a></h3>

<p><a id="IDX1427" name="IDX1427"></a></p>

<pre>
DO expression, [expression, ...]
</pre>

<p>Execute the expression but don't return any results. This is a
shorthand of <code>SELECT expression, expression</code>, but has
the advantage that it's slightly faster when you don't care about
the result.</p>

<p>This is mainly useful with functions that has side effects, like
<code>RELEASE_LOCK</code>.</p>

<h2><a id="Data_Definition" name="Data_Definition"
href="manual_toc.html#Data_Definition">6.5 Data Definition:
<code>CREATE</code>, <code>DROP</code>, <code>ALTER</code></a></h2>

<h3><a id="CREATE_DATABASE" name="CREATE_DATABASE"
href="manual_toc.html#CREATE_DATABASE">6.5.1 <code>CREATE
DATABASE</code> Syntax</a></h3>

<p><a id="IDX1428" name="IDX1428"></a></p>

<pre>
CREATE DATABASE [IF NOT EXISTS] db_name
</pre>

<p><code>CREATE DATABASE</code> creates a database with the given
name. Rules for allowable database names are given in section <a
href="manual.html#Legal_names">6.1.2 Database, Table, Index,
Column, and Alias Names</a>. An error occurs if the database
already exists and you didn't specify <code>IF NOT
EXISTS</code>.</p>

<p>Databases in MySQL are implemented as directories containing
files that correspond to tables in the database. Because there are
no tables in a database when it is initially created, the
<code>CREATE DATABASE</code> statement only creates a directory
under the MySQL data directory.</p>

<p><a id="IDX1429" name="IDX1429"></a> You can also create
databases with <code>mysqladmin</code>. See section <a
href="manual.html#Client-Side_Scripts">4.8 MySQL Client-Side
Scripts and Utilities</a>.</p>

<h3><a id="DROP_DATABASE" name="DROP_DATABASE"
href="manual_toc.html#DROP_DATABASE">6.5.2 <code>DROP
DATABASE</code> Syntax</a></h3>

<p><a id="IDX1430" name="IDX1430"></a> <a id="IDX1431"
name="IDX1431"></a> <a id="IDX1432" name="IDX1432"></a></p>

<pre>
DROP DATABASE [IF EXISTS] db_name
</pre>

<p><code>DROP DATABASE</code> drops all tables in the database and
deletes the database. If you do a <code>DROP DATABASE</code> on a
symbolic linked database, both the link and the original database
is deleted. <strong>Be VERY careful with this command!</strong></p>

<p><code>DROP DATABASE</code> returns the number of files that were
removed from the database directory. Normally, this is three times
the number of tables, because normally each table corresponds to a
<tt>`.MYD'</tt> file, a <tt>`.MYI'</tt> file, and a <tt>`.frm'</tt>
file.</p>

<p>The <code>DROP DATABASE</code> command removes from the given
database directory all files with the following extensions:</p>

<table border="1" width="100%">
<tr>
<td><strong>Ext</strong></td>
<td><strong>Ext</strong></td>
<td><strong>Ext</strong></td>
<td><strong>Ext</strong></td>
</tr>

<tr>
<td>.BAK</td>
<td>.DAT</td>
<td>.HSH</td>
<td>.ISD</td>
</tr>

<tr>
<td>.ISM</td>
<td>.ISM</td>
<td>.MRG</td>
<td>.MYD</td>
</tr>

<tr>
<td>.MYI</td>
<td>.db</td>
<td>.frm</td>
<td></td>
</tr>
</table>

<p>All subdirectories that consists of 2 digits (<code>RAID</code>
directories) are also removed.</p>

<p>In MySQL Version 3.22 or later, you can use the keywords
<code>IF EXISTS</code> to prevent an error from occurring if the
database doesn't exist.</p>

<p><a id="IDX1433" name="IDX1433"></a> You can also drop databases
with <code>mysqladmin</code>. See section <a
href="manual.html#Client-Side_Scripts">4.8 MySQL Client-Side
Scripts and Utilities</a>.</p>

<h3><a id="CREATE_TABLE" name="CREATE_TABLE"
href="manual_toc.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a></h3>

<p><a id="IDX1434" name="IDX1434"></a></p>

<pre>
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)]
[table_options] [select_statement]

or

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name LIKE old_table_name;

create_definition:
  col_name type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT]
            [PRIMARY KEY] [reference_definition]
  or    PRIMARY KEY (index_col_name,...)
  or    KEY [index_name] (index_col_name,...)
  or    INDEX [index_name] (index_col_name,...)
  or    UNIQUE [INDEX] [index_name] (index_col_name,...)
  or    FULLTEXT [INDEX] [index_name] (index_col_name,...)
  or    [CONSTRAINT symbol] FOREIGN KEY [index_name] (index_col_name,...)
            [reference_definition]
  or    CHECK (expr)

type:
        TINYINT[(length)] [UNSIGNED] [ZEROFILL]
  or    SMALLINT[(length)] [UNSIGNED] [ZEROFILL]
  or    MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]
  or    INT[(length)] [UNSIGNED] [ZEROFILL]
  or    INTEGER[(length)] [UNSIGNED] [ZEROFILL]
  or    BIGINT[(length)] [UNSIGNED] [ZEROFILL]
  or    REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DECIMAL(length,decimals) [UNSIGNED] [ZEROFILL]
  or    NUMERIC(length,decimals) [UNSIGNED] [ZEROFILL]
  or    CHAR(length) [BINARY]
  or    VARCHAR(length) [BINARY]
  or    DATE
  or    TIME
  or    TIMESTAMP
  or    DATETIME
  or    TINYBLOB
  or    BLOB
  or    MEDIUMBLOB
  or    LONGBLOB
  or    TINYTEXT
  or    TEXT
  or    MEDIUMTEXT
  or    LONGTEXT
  or    ENUM(value1,value2,value3,...)
  or    SET(value1,value2,value3,...)

index_col_name:
        col_name [(length)]

reference_definition:
        REFERENCES tbl_name [(index_col_name,...)]
                   [MATCH FULL | MATCH PARTIAL]
                   [ON DELETE reference_option]
                   [ON UPDATE reference_option]

reference_option:
        RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

table_options:
    TYPE = {BDB | HEAP | ISAM | InnoDB | MERGE | MRG_MYISAM | MYISAM }
or  AUTO_INCREMENT = #
or  AVG_ROW_LENGTH = #
or  CHECKSUM = {0 | 1}
or  COMMENT = "string"
or  MAX_ROWS = #
or  MIN_ROWS = #
or  PACK_KEYS = {0 | 1 | DEFAULT}
or  PASSWORD = "string"
or  DELAY_KEY_WRITE = {0 | 1}
or      ROW_FORMAT= { default | dynamic | fixed | compressed }
or  RAID_TYPE= {1 | STRIPED | RAID0 } RAID_CHUNKS=#  RAID_CHUNKSIZE=#
or  UNION = (table_name,[table_name...])
or  INSERT_METHOD= {NO | FIRST | LAST }
or      DATA DIRECTORY="absolute path to directory"
or      INDEX DIRECTORY="absolute path to directory"

select_statement:
    [IGNORE | REPLACE] SELECT ...  (Some legal select statement)
</pre>

<p><code>CREATE TABLE</code> creates a table with the given name in
the current database. Rules for allowable table names are given in
section <a href="manual.html#Legal_names">6.1.2 Database, Table,
Index, Column, and Alias Names</a>. An error occurs if there is no
current database or if the table already exists.</p>

<p>In MySQL Version 3.22 or later, the table name can be specified
as <code>db_name.tbl_name</code>. This works regardless of whether
there is a current database.</p>

<p>From MySQL Version 3.23, you can use the <code>TEMPORARY</code>
keyword when you create a table. The name is restricted to the
current connection, and the temporary table will automatically be
deleted when the connection is closed. This means that two
different connections can both use the same temporary table name
without conflicting with each other or with an existing table of
the same name. (The existing table is hidden until the temporary
table is deleted.). From MySQL 4.0.2 one must have the <code>CREATE
TEMPORARY TABLES</code> privilege to be able to create temporary
tables.</p>

<p>In MySQL Version 3.23 or later, you can use the keywords
<code>IF NOT EXISTS</code> so that an error does not occur if the
table already exists. Note that there is no verification that the
table structures are identical.</p>

<p>In MySQL 4.1 you can use <code>LIKE</code> to create a table
based on a table definition in another table.</p>

<p>Each table <code>tbl_name</code> is represented by some files in
the database directory. In the case of MyISAM-type tables you will
get:</p>

<table border="1" width="100%">
<tr>
<td><strong>File</strong></td>
<td><strong>Purpose</strong></td>
</tr>

<tr>
<td><code>tbl_name.frm</code></td>
<td>Table definition (form) file</td>
</tr>

<tr>
<td><code>tbl_name.MYD</code></td>
<td>Datafile</td>
</tr>

<tr>
<td><code>tbl_name.MYI</code></td>
<td>Index file</td>
</tr>
</table>

<p>For more information on the properties of the various column
types, see section <a href="manual.html#Column_types">6.2 Column
Types</a>:</p>

<ul>
<li>If neither <code>NULL</code> nor <code>NOT NULL</code> is
specified, the column is treated as though <code>NULL</code> had
been specified.</li>

<li>An integer column may have the additional attribute
<code>AUTO_INCREMENT</code>. When you insert a value of
<code>NULL</code> (recommended) or <code>0</code> into an
<code>AUTO_INCREMENT</code> column, the column is set to
<code>value+1</code>, where <code>value</code> is the largest value
for the column currently in the table. <code>AUTO_INCREMENT</code>
sequences begin with <code>1</code>. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>. If you delete the row
containing the maximum value for an <code>AUTO_INCREMENT</code>
column, the value will be reused with an <code>ISAM</code>, or
<code>BDB</code> table but not with a <code>MyISAM</code> or
<code>InnoDB</code> table. If you delete all rows in the table with
<code>DELETE FROM table_name</code> (without a <code>WHERE</code>)
in <code>AUTOCOMMIT</code> mode, the sequence starts over for all
table types. <strong>Note</strong>: there can be only one
<code>AUTO_INCREMENT</code> column per table, and it must be
indexed. MySQL Version 3.23 will also only work properly if the
<code>AUTO_INCREMENT</code> column only has positive values.
Inserting a negative number is regarded as inserting a very large
positive number. This is done to avoid precision problems when
numbers 'wrap' over from positive to negative and also to ensure
that one doesn't accidentally get an <code>AUTO_INCREMENT</code>
column that contains 0. In MyISAM and BDB tables you can specify
<code>AUTO_INCREMENT</code> secondary column in a multi-column key.
See section <a href="manual.html#example-AUTO_INCREMENT">3.5.9
Using <code>AUTO_INCREMENT</code></a>. <a id="IDX1435"
name="IDX1435"></a> <a id="IDX1436" name="IDX1436"></a> To make
MySQL compatible with some ODBC applications, you can find the last
inserted row with the following query: 

<pre>
SELECT * FROM tbl_name WHERE auto_col IS NULL
</pre>
</li>

<li><code>CREATE TABLE</code> automatically commits the current
InnoDB transaction if the MySQL binlogging is used.</li>

<li><code>NULL</code> values are handled differently for
<code>TIMESTAMP</code> columns than for other column types. You
cannot store a literal <code>NULL</code> in a
<code>TIMESTAMP</code> column; setting the column to
<code>NULL</code> sets it to the current date and time. Because
<code>TIMESTAMP</code> columns behave this way, the
<code>NULL</code> and <code>NOT NULL</code> attributes do not apply
in the normal way and are ignored if you specify them. On the other
hand, to make it easier for MySQL clients to use
<code>TIMESTAMP</code> columns, the server reports that such
columns may be assigned <code>NULL</code> values (which is true),
even though <code>TIMESTAMP</code> never actually will contain a
<code>NULL</code> value. You can see this when you use
<code>DESCRIBE tbl_name</code> to get a description of your table.
Note that setting a <code>TIMESTAMP</code> column to <code>0</code>
is not the same as setting it to <code>NULL</code>, because
<code>0</code> is a valid <code>TIMESTAMP</code> value.</li>

<li><a id="IDX1437" name="IDX1437"></a> A <code>DEFAULT</code>
value has to be a constant, it can not be a function or an
expression. If no <code>DEFAULT</code> value is specified for a
column, MySQL automatically assigns one. If the column may take
<code>NULL</code> as a value, the default value is
<code>NULL</code>. If the column is declared as <code>NOT
NULL</code>, the default value depends on the column type: 

<ul>
<li>For numeric types other than those declared with the
<code>AUTO_INCREMENT</code> attribute, the default is
<code>0</code>. For an <code>AUTO_INCREMENT</code> column, the
default value is the next value in the sequence.</li>

<li>For date and time types other than <code>TIMESTAMP</code>, the
default is the appropriate zero value for the type. For the first
<code>TIMESTAMP</code> column in a table, the default value is the
current date and time. See section <a
href="manual.html#Date_and_time_types">6.2.2 Date and Time
Types</a>.</li>

<li>For string types other than <code>ENUM</code>, the default
value is the empty string. For <code>ENUM</code>, the default is
the first enumeration value (if you haven't explicitly specified
another default value with the <code>DEFAULT</code>
directive).</li>
</ul>

Default values must be constants. This means, for example, that you
cannot set the default for a date column to be the value of a
function such as <code>NOW()</code> or
<code>CURRENT_DATE</code>.</li>

<li><code>KEY</code> is a synonym for <code>INDEX</code>.</li>

<li>In MySQL, a <code>UNIQUE</code> key can have only distinct
values. An error occurs if you try to add a new row with a key that
matches an existing row.</li>

<li><a id="IDX1438" name="IDX1438"></a> A <code>PRIMARY KEY</code>
is a unique <code>KEY</code> with the extra constraint that all key
columns must be defined as <code>NOT NULL</code>. In MySQL the key
is named <code>PRIMARY</code>. A table can have only one
<code>PRIMARY KEY</code>. If you don't have a <code>PRIMARY
KEY</code> and some applications ask for the <code>PRIMARY
KEY</code> in your tables, MySQL will return the first
<code>UNIQUE</code> key, which doesn't have any <code>NULL</code>
columns, as the <code>PRIMARY KEY</code>.</li>

<li>A <code>PRIMARY KEY</code> can be a multiple-column index.
However, you cannot create a multiple-column index using the
<code>PRIMARY KEY</code> key attibute in a column specification.
Doing so will mark only that single column as primary. You must use
the <code>PRIMARY KEY(index_col_name, ...)</code> syntax.</li>

<li>If the <code>PRIMARY</code> or <code>UNIQUE</code> key consists
of only one column and this is of type integer, you can also refer
to it as <code>_rowid</code> (new in Version 3.23.11).</li>

<li>If you don't assign a name to an index, the index will be
assigned the same name as the first <code>index_col_name</code>,
with an optional suffix (<code>_2</code>, <code>_3</code>,
<code>...</code>) to make it unique. You can see index names for a
table using <code>SHOW INDEX FROM tbl_name</code>. See section <a
href="manual.html#SHOW_DATABASE_INFO">4.5.6.1 Retrieving
information about Database, Tables, Columns, and Indexes</a>.</li>

<li><a id="IDX1439" name="IDX1439"></a> <a id="IDX1440"
name="IDX1440"></a> Only the <code>MyISAM</code>,
<code>InnoDB</code>, and <code>BDB</code> table types support
indexes on columns that can have <code>NULL</code> values. In other
cases you must declare such columns <code>NOT NULL</code> or an
error results.</li>

<li>With <code>col_name(length)</code> syntax, you can specify an
index that uses only a part of a <code>CHAR</code> or
<code>VARCHAR</code> column. This can make the index file much
smaller. See section <a href="manual.html#Indexes">5.4.4 Column
Indexes</a>.</li>

<li><a id="IDX1441" name="IDX1441"></a> <a id="IDX1442"
name="IDX1442"></a> <a id="IDX1443" name="IDX1443"></a> <a
id="IDX1444" name="IDX1444"></a> Only the <code>MyISAM</code> table
type supports indexing on <code>BLOB</code> and <code>TEXT</code>
columns. When putting an index on a <code>BLOB</code> or
<code>TEXT</code> column you MUST always specify the length of the
index: 

<pre>
CREATE TABLE test (blob_col BLOB, INDEX(blob_col(10)));
</pre>
</li>

<li>When you use <code>ORDER BY</code> or <code>GROUP BY</code>
with a <code>TEXT</code> or <code>BLOB</code> column, only the
first <code>max_sort_length</code> bytes are used. See section <a
href="manual.html#BLOB">6.2.3.2 The <code>BLOB</code> and
<code>TEXT</code> Types</a>.</li>

<li>In MySQL Version 3.23.23 or later, you can also create special
<code>FULLTEXT</code> indexes. They are used for full-text search.
Only the <code>MyISAM</code> table type supports
<code>FULLTEXT</code> indexes. They can be created only from
<code>VARCHAR</code> and <code>TEXT</code> columns. Indexing always
happens over the entire column, partial indexing is not supported.
See section <a href="manual.html#Fulltext_Search">6.8 MySQL
Full-text Search</a> for details of operation.</li>

<li>In MySQL Version 3.23.44 or later, <code>InnoDB</code> tables
support checking of foreign key constraints. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>. Note
that the <code>FOREIGN KEY</code> syntax in InnoDB is more
restricted than the syntax presented above. InnoDB does not allow
<code>index_name</code> to be specified, and the columns of the
referenced table always have to be explicitly named. Starting from
4.0.8 InnoDB supports both <code>ON DELETE</code> and <code>ON
UPDATE</code> actions on foreign keys. See the InnoDB manual
section for the precise syntax. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>. For
other table types, MySQL Server does parse the <code>FOREIGN
KEY</code>, <code>CHECK</code>, and <code>REFERENCES</code> syntax
in <code>CREATE TABLE</code> commands, but without further action
being taken. See section <a
href="manual.html#ANSI_diff_Foreign_Keys">1.7.4.5 Foreign
Keys</a>.</li>

<li>Each <code>NULL</code> column takes one bit extra, rounded up
to the nearest byte.</li>

<li>The maximum record length in bytes can be calculated as
follows: 

<pre>
row length = 1
             + (sum of column lengths)
             + (number of NULL columns + 7)/8
             + (number of variable-length columns)
</pre>
</li>

<li>The <code>table_options</code> and <code>SELECT</code> options
are only implemented in MySQL Version 3.23 and above. The different
table types are: 

<table border="1" width="100%">
<tr>
<td><strong>Table type</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>BDB or BerkeleyDB</td>
<td>Transaction-safe tables with page locking. See section <a
href="manual.html#BDB">7.6 <code>BDB</code> or
<code>BerkeleyDB</code> Tables</a>.</td>
</tr>

<tr>
<td>HEAP</td>
<td>The data for this table is only stored in memory. See section
<a href="manual.html#HEAP">7.4 <code>HEAP</code> Tables</a>.</td>
</tr>

<tr>
<td>ISAM</td>
<td>The original storage engine. See section <a
href="manual.html#ISAM">7.3 <code>ISAM</code> Tables</a>.</td>
</tr>

<tr>
<td>InnoDB</td>
<td>Transaction-safe tables with row locking. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>.</td>
</tr>

<tr>
<td>MERGE</td>
<td>A collection of MyISAM tables used as one table. See section <a
href="manual.html#MERGE">7.2 <code>MERGE</code> Tables</a>.</td>
</tr>

<tr>
<td>MRG_MyISAM</td>
<td>An alias for MERGE tables</td>
</tr>

<tr>
<td>MyISAM</td>
<td>The new binary portable storage engine that is replacing ISAM.
See section <a href="manual.html#MyISAM">7.1 <code>MyISAM</code>
Tables</a>.</td>
</tr>
</table>

See section <a href="manual.html#Table_types">7 MySQL Table
Types</a>. If a table type is specified, and that particular type
is not available, MySQL will choose the closest table type to the
one that you have specified. For example, if <code>TYPE=BDB</code>
is specified, and that distribution of MySQL does not support
<code>BDB</code> tables, the table will be created as
<code>MyISAM</code> instead. The other table options are used to
optimise the behaviour of the table. In most cases, you don't have
to specify any of them. The options work for all table types, if
not otherwise indicated: 

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>AUTO_INCREMENT</code></td>
<td>The next <code>AUTO_INCREMENT</code> value you want to set for
your table (MyISAM).</td>
</tr>

<tr>
<td><code>AVG_ROW_LENGTH</code></td>
<td>An approximation of the average row length for your table. You
only need to set this for large tables with variable size
records.</td>
</tr>

<tr>
<td><code>CHECKSUM</code></td>
<td>Set this to 1 if you want MySQL to maintain a checksum for all
rows (makes the table a little slower to update but makes it easier
to find corrupted tables) (MyISAM).</td>
</tr>

<tr>
<td><code>COMMENT</code></td>
<td>A 60-character comment for your table.</td>
</tr>

<tr>
<td><code>MAX_ROWS</code></td>
<td>Max number of rows you plan to store in the table.</td>
</tr>

<tr>
<td><code>MIN_ROWS</code></td>
<td>Minimum number of rows you plan to store in the table.</td>
</tr>

<tr>
<td><code>PACK_KEYS</code></td>
<td>Set this to 1 if you want to have a smaller index. This usually
makes updates slower and reads faster (MyISAM, ISAM). Setting this
to 0 will disable all packing of keys. Setting this to
<code>DEFAULT</code> (MySQL 4.0) will tell the storage engine to
only pack long <code>CHAR</code>/<code>VARCHAR</code> columns.</td>
</tr>

<tr>
<td><code>PASSWORD</code></td>
<td>Encrypt the <tt>`.frm'</tt> file with a password. This option
doesn't do anything in the standard MySQL version.</td>
</tr>

<tr>
<td><code>DELAY_KEY_WRITE</code></td>
<td>Set this to 1 if want to delay key table updates until the
table is closed (MyISAM).</td>
</tr>

<tr>
<td><code>ROW_FORMAT</code></td>
<td>Defines how the rows should be stored. Currently this option
only works with MyISAM tables, which supports the
<code>DYNAMIC</code> and <code>FIXED</code> row formats. See
section <a href="manual.html#MyISAM_table_formats">7.1.2
<code>MyISAM</code> Table Formats</a>.</td>
</tr>
</table>

When you use a <code>MyISAM</code> table, MySQL uses the product of
<code>max_rows * avg_row_length</code> to decide how big the
resulting table will be. If you don't specify any of the above
options, the maximum size for a table will be 4G (or 2G if your
operating systems only supports 2G tables). The reason for this is
just to keep down the pointer sizes to make the index smaller and
faster if you don't really need big files. If you don't use
<code>PACK_KEYS</code>, the default is to only pack strings, not
numbers. If you use <code>PACK_KEYS=1</code>, numbers will be
packed as well. When packing binary number keys, MySQL will use
prefix compression. This means that you will only get a big benefit
of this if you have many numbers that are the same. Prefix
compression means that every key needs one extra byte to indicate
how many bytes of the previous key are the same for the next key
(note that the pointer to the row is stored in
high-byte-first-order directly after the key, to improve
compression). This means that if you have many equal keys on two
rows in a row, all following 'same' keys will usually only take 2
bytes (including the pointer to the row). Compare this to the
ordinary case where the following keys will take
storage_size_for_key + pointer_size (usually 4). On the other hand,
if all keys are totally different, you will lose 1 byte per key, if
the key isn't a key that can have <code>NULL</code> values. (In
this case the packed key length will be stored in the same byte
that is used to mark if a key is <code>NULL</code>.)</li>

<li>If you specify a <code>SELECT</code> after the
<code>CREATE</code> statement, MySQL will create new fields for all
elements in the <code>SELECT</code>. For example: 

<pre>
mysql&gt; CREATE TABLE test (a INT NOT NULL AUTO_INCREMENT,
    -&gt;        PRIMARY KEY (a), KEY(b))
    -&gt;        TYPE=MyISAM SELECT b,c FROM test2;
</pre>

This will create a <code>MyISAM</code> table with three columns, a,
b, and c. Notice that the columns from the <code>SELECT</code>
statement are appended to the right side of the table, not
overlapped onto it. Take the following example: 

<pre>
mysql&gt; SELECT * FROM foo;
+---+
| n |
+---+
| 1 |
+---+

mysql&gt; CREATE TABLE bar (m INT) SELECT n FROM foo;
Query OK, 1 row affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM bar;
+------+---+
| m    | n |
+------+---+
| NULL | 1 |
+------+---+
1 row in set (0.00 sec)
</pre>

For each row in table <code>foo</code>, a row is inserted in
<code>bar</code> with the values from <code>foo</code> and default
values for the new columns. <code>CREATE TABLE ... SELECT</code>
will not automatically create any indexes for you. This is done
intentionally to make the command as flexible as possible. If you
want to have indexes in the created table, you should specify these
before the <code>SELECT</code> statement: 

<pre>
mysql&gt; CREATE TABLE bar (UNIQUE (n)) SELECT n FROM foo;
</pre>

If any errors occur while copying the data to the table, it will
automatically be deleted. To ensure that the update log/binary log
can be used to re-create the original tables, MySQL will not allow
concurrent inserts during <code>CREATE TABLE ...
SELECT</code>.</li>

<li>The <code>RAID_TYPE</code> option will help you to break the
2G/4G limit for the MyISAM datafile (not the index file) on
operating systems that don't support big files. Note that this
option is not recommended for filesystem that supports big files!
You can get more speed from the I/O bottleneck by putting
<code>RAID</code> directories on different physical disks.
<code>RAID_TYPE</code> will work on any OS, as long as you have
configured MySQL with <code>--with-raid</code>. For now the only
allowed <code>RAID_TYPE</code> is <code>STRIPED</code>
(<code>1</code> and <code>RAID0</code> are aliases for this). If
you specify <code>RAID_TYPE=STRIPED</code> for a
<code>MyISAM</code> table, <code>MyISAM</code> will create
<code>RAID_CHUNKS</code> subdirectories named 00, 01, 02 in the
database directory. In each of these directories
<code>MyISAM</code> will create a <code>table_name.MYD</code>. When
writing data to the datafile, the <code>RAID</code> handler will
map the first <code>RAID_CHUNKSIZE</code> *1024 bytes to the first
file, the next <code>RAID_CHUNKSIZE</code> *1024 bytes to the next
file and so on.</li>

<li><code>UNION</code> is used when you want to use a collection of
identical tables as one. This only works with <code>MERGE</code>
tables. See section <a href="manual.html#MERGE">7.2
<code>MERGE</code> Tables</a>. For the moment you need to have
<code>SELECT</code>, <code>UPDATE</code>, and <code>DELETE</code>
privileges on the tables you map to a <code>MERGE</code> table. All
mapped tables must be in the same database as the
<code>MERGE</code> table.</li>

<li>If you want to insert data in a <code>MERGE</code> table, you
have to specify with <code>INSERT_METHOD</code> into with table the
row should be inserted. See section <a href="manual.html#MERGE">7.2
<code>MERGE</code> Tables</a>. This option was introduced in MySQL
4.0.0.</li>

<li>In the created table the <code>PRIMARY</code> key will be
placed first, followed by all <code>UNIQUE</code> keys and then the
normal keys. This helps the MySQL optimiser to prioritise which key
to use and also more quickly detect duplicated <code>UNIQUE</code>
keys.</li>

<li>By using <code>DATA DIRECTORY="directory"</code> or <code>INDEX
DIRECTORY="directory"</code> you can specify where the storage
engine should put it's table and index files. Note that the
directory should be a full path to the directory (not relative
path). This only works for <code>MyISAM</code> tables in
<code>MySQL</code> 4.0, when you are not using the
<code>--skip-symlink</code> option. See section <a
href="manual.html#Symbolic_links_to_tables">5.6.1.2 Using Symbolic
Links for Tables</a>.</li>
</ul>

<h4><a id="Silent_column_changes" name="Silent_column_changes"
href="manual_toc.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a></h4>

<p><a id="IDX1445" name="IDX1445"></a></p>

<p>In some cases, MySQL silently changes a column specification
from that given in a <code>CREATE TABLE</code> statement. (This may
also occur with <code>ALTER TABLE</code>.):</p>

<ul>
<li><code>VARCHAR</code> columns with a length less than four are
changed to <code>CHAR</code>.</li>

<li>If any column in a table has a variable length, the entire row
is variable-length as a result. Therefore, if a table contains any
variable-length columns (<code>VARCHAR</code>, <code>TEXT</code>,
or <code>BLOB</code>), all <code>CHAR</code> columns longer than
three characters are changed to <code>VARCHAR</code> columns. This
doesn't affect how you use the columns in any way; in MySQL,
<code>VARCHAR</code> is just a different way to store characters.
MySQL performs this conversion because it saves space and makes
table operations faster. See section <a
href="manual.html#Table_types">7 MySQL Table Types</a>.</li>

<li><code>TIMESTAMP</code> display sizes must be even and in the
range from 2 to 14. If you specify a display size of 0 or greater
than 14, the size is coerced to 14. Odd-valued sizes in the range
from 1 to 13 are coerced to the next higher even number.</li>

<li>You cannot store a literal <code>NULL</code> in a
<code>TIMESTAMP</code> column; setting it to <code>NULL</code> sets
it to the current date and time. Because <code>TIMESTAMP</code>
columns behave this way, the <code>NULL</code> and <code>NOT
NULL</code> attributes do not apply in the normal way and are
ignored if you specify them. <code>DESCRIBE tbl_name</code> always
reports that a <code>TIMESTAMP</code> column may be assigned
<code>NULL</code> values.</li>

<li>MySQL maps certain column types used by other SQL database
vendors to MySQL types. See section <a
href="manual.html#Other-vendor_column_types">6.2.5 Using Column
Types from Other Database Engines</a>.</li>
</ul>

<p>If you want to see whether MySQL used a column type other than
the one you specified, issue a <code>DESCRIBE tbl_name</code>
statement after creating or altering your table.</p>

<p><a id="IDX1446" name="IDX1446"></a> Certain other column type
changes may occur if you compress a table using
<code>myisampack</code>. See section <a
href="manual.html#Compressed_format">7.1.2.3 Compressed Table
Characteristics</a>.</p>

<h3><a id="ALTER_TABLE" name="ALTER_TABLE"
href="manual_toc.html#ALTER_TABLE">6.5.4 <code>ALTER TABLE</code>
Syntax</a></h3>

<p><a id="IDX1447" name="IDX1447"></a> <a id="IDX1448"
name="IDX1448"></a> <a id="IDX1449" name="IDX1449"></a></p>

<pre>
ALTER [IGNORE] TABLE tbl_name alter_spec [, alter_spec ...]

alter_specification:
        ADD [COLUMN] create_definition [FIRST | AFTER column_name ]
  or    ADD [COLUMN] (create_definition, create_definition,...)
  or    ADD INDEX [index_name] (index_col_name,...)
  or    ADD PRIMARY KEY (index_col_name,...)
  or    ADD UNIQUE [index_name] (index_col_name,...)
  or    ADD FULLTEXT [index_name] (index_col_name,...)
  or    ADD [CONSTRAINT symbol] FOREIGN KEY [index_name] (index_col_name,...)
            [reference_definition]
  or    ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}
  or    CHANGE [COLUMN] old_col_name create_definition
               [FIRST | AFTER column_name]
  or    MODIFY [COLUMN] create_definition [FIRST | AFTER column_name]
  or    DROP [COLUMN] col_name
  or    DROP PRIMARY KEY
  or    DROP INDEX index_name
  or    DISABLE KEYS
  or    ENABLE KEYS
  or    RENAME [TO] new_tbl_name
  or    ORDER BY col
  or    table_options
</pre>

<p><code>ALTER TABLE</code> allows you to change the structure of
an existing table. For example, you can add or delete columns,
create or destroy indexes, change the type of existing columns, or
rename columns or the table itself. You can also change the comment
for the table and type of the table. See section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</p>

<p>If you use <code>ALTER TABLE</code> to change a column
specification but <code>DESCRIBE tbl_name</code> indicates that
your column was not changed, it is possible that MySQL ignored your
modification for one of the reasons described in section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>. For example, if you try to change a
<code>VARCHAR</code> column to <code>CHAR</code>, MySQL will still
use <code>VARCHAR</code> if the table contains other
variable-length columns.</p>

<p><code>ALTER TABLE</code> works by making a temporary copy of the
original table. The alteration is performed on the copy, then the
original table is deleted and the new one is renamed. This is done
in such a way that all updates are automatically redirected to the
new table without any failed updates. While <code>ALTER
TABLE</code> is executing, the original table is readable by other
clients. Updates and writes to the table are stalled until the new
table is ready.</p>

<p>Note that if you use any other option to <code>ALTER
TABLE</code> than <code>RENAME</code>, MySQL will always create a
temporary table, even if the data wouldn't strictly need to be
copied (like when you change the name of a column). We plan to fix
this in the future, but as one doesn't normally do <code>ALTER
TABLE</code> that often this isn't that high on our TODO. For
MyISAM tables, you can speed up the index recreation part (which is
the slowest part of the recreation process) by setting the
<code>myisam_sort_buffer_size</code> variable to a high value.</p>

<ul>
<li>To use <code>ALTER TABLE</code>, you need <code>ALTER</code>,
<code>INSERT</code>, and <code>CREATE</code> privileges on the
table.</li>

<li><code>IGNORE</code> is a MySQL extension to ANSI SQL92. It
controls how <code>ALTER TABLE</code> works if there are duplicates
on unique keys in the new table. If <code>IGNORE</code> isn't
specified, the copy is aborted and rolled back. If
<code>IGNORE</code> is specified, then for rows with duplicates on
a unique key, only the first row is used; the others are
deleted.</li>

<li>You can issue multiple <code>ADD</code>, <code>ALTER</code>,
<code>DROP</code>, and <code>CHANGE</code> clauses in a single
<code>ALTER TABLE</code> statement. This is a MySQL extension to
ANSI SQL92, which allows only one of each clause per <code>ALTER
TABLE</code> statement.</li>

<li><code>CHANGE col_name</code>, <code>DROP col_name</code>, and
<code>DROP INDEX</code> are MySQL extensions to ANSI SQL92.</li>

<li><code>MODIFY</code> is an Oracle extension to <code>ALTER
TABLE</code>.</li>

<li>The optional word <code>COLUMN</code> is a pure noise word and
can be omitted.</li>

<li>If you use <code>ALTER TABLE tbl_name RENAME TO new_name</code>
without any other options, MySQL simply renames the files that
correspond to the table <code>tbl_name</code>. There is no need to
create the temporary table. See section <a
href="manual.html#RENAME_TABLE">6.5.5 <code>RENAME TABLE</code>
Syntax</a>.</li>

<li><code>create_definition</code> clauses use the same syntax for
<code>ADD</code> and <code>CHANGE</code> as for <code>CREATE
TABLE</code>. Note that this syntax includes the column name, not
just the column type. See section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</li>

<li>You can rename a column using a <code>CHANGE old_col_name
create_definition</code> clause. To do so, specify the old and new
column names and the type that the column currently has. For
example, to rename an <code>INTEGER</code> column from
<code>a</code> to <code>b</code>, you can do this: 

<pre>
mysql&gt; ALTER TABLE t1 CHANGE a b INTEGER;
</pre>

If you want to change a column's type but not the name,
<code>CHANGE</code> syntax still requires two column names even if
they are the same. For example: 

<pre>
mysql&gt; ALTER TABLE t1 CHANGE b b BIGINT NOT NULL;
</pre>

However, as of MySQL Version 3.22.16a, you can also use
<code>MODIFY</code> to change a column's type without renaming it: 

<pre>
mysql&gt; ALTER TABLE t1 MODIFY b BIGINT NOT NULL;
</pre>
</li>

<li>If you use <code>CHANGE</code> or <code>MODIFY</code> to
shorten a column for which an index exists on part of the column
(for instance, if you have an index on the first 10 characters of a
<code>VARCHAR</code> column), you cannot make the column shorter
than the number of characters that are indexed.</li>

<li>When you change a column type using <code>CHANGE</code> or
<code>MODIFY</code>, MySQL tries to convert data to the new type as
well as possible.</li>

<li>In MySQL Version 3.22 or later, you can use <code>FIRST</code>
or <code>ADD ... AFTER col_name</code> to add a column at a
specific position within a table row. The default is to add the
column last. From MySQL Version 4.0.1, you can also use the
<code>FIRST</code> and <code>AFTER</code> keywords in
<code>CHANGE</code> or <code>MODIFY</code>. <a id="IDX1450"
name="IDX1450"></a> <a id="IDX1451" name="IDX1451"></a> <a
id="IDX1452" name="IDX1452"></a> <a id="IDX1453"
name="IDX1453"></a> <a id="IDX1454" name="IDX1454"></a></li>

<li><code>ALTER COLUMN</code> specifies a new default value for a
column or removes the old default value. If the old default is
removed and the column can be <code>NULL</code>, the new default is
<code>NULL</code>. If the column cannot be <code>NULL</code>, MySQL
assigns a default value, as described in section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>. <a id="IDX1455" name="IDX1455"></a> <a id="IDX1456"
name="IDX1456"></a> <a id="IDX1457" name="IDX1457"></a></li>

<li><code>DROP INDEX</code> removes an index. This is a MySQL
extension to ANSI SQL92. See section <a
href="manual.html#DROP_INDEX">6.5.8 <code>DROP INDEX</code>
Syntax</a>.</li>

<li>If columns are dropped from a table, the columns are also
removed from any index of which they are a part. If all columns
that make up an index are dropped, the index is dropped as
well.</li>

<li>If a table contains only one column, the column cannot be
dropped. If what you intend is to remove the table, use <code>DROP
TABLE</code> instead. <a id="IDX1458" name="IDX1458"></a> <a
id="IDX1459" name="IDX1459"></a> <a id="IDX1460"
name="IDX1460"></a></li>

<li><code>DROP PRIMARY KEY</code> drops the primary index. If no
such index exists, it drops the first <code>UNIQUE</code> index in
the table. (MySQL marks the first <code>UNIQUE</code> key as the
<code>PRIMARY KEY</code> if no <code>PRIMARY KEY</code> was
specified explicitly.) <a id="IDX1461" name="IDX1461"></a> <a
id="IDX1462" name="IDX1462"></a> If you add a <code>UNIQUE
INDEX</code> or <code>PRIMARY KEY</code> to a table, this is stored
before any not <code>UNIQUE</code> index so that MySQL can detect
duplicate keys as early as possible. <a id="IDX1463"
name="IDX1463"></a></li>

<li><code>ORDER BY</code> allows you to create the new table with
the rows in a specific order. Note that the table will not remain
in this order after inserts and deletes. In some cases, it may make
sorting easier for MySQL if the table is in order by the column
that you wish to order it by later. This option is mainly useful
when you know that you are mostly going to query the rows in a
certain order; by using this option after big changes to the table,
you may be able to get higher performance. <a id="IDX1464"
name="IDX1464"></a> <a id="IDX1465" name="IDX1465"></a> <a
id="IDX1466" name="IDX1466"></a></li>

<li>If you use <code>ALTER TABLE</code> on a <code>MyISAM</code>
table, all non-unique indexes are created in a separate batch (like
in <code>REPAIR</code>). This should make <code>ALTER TABLE</code>
much faster when you have many indexes.</li>

<li>Since <strong>MySQL 4.0</strong> the above feature can be
activated explicitly. <code>ALTER TABLE ... DISABLE KEYS</code>
makes MySQL to stop updating non-unique indexes for
<code>MyISAM</code> table. <code>ALTER TABLE ... ENABLE KEYS</code>
then should be used to recreate missing indexes. As MySQL does it
with special algorithm which is much faster then inserting keys one
by one, disabling keys could give a considerable speedup on bulk
inserts.</li>

<li><a id="IDX1467" name="IDX1467"></a> With the C API function
<code>mysql_info()</code>, you can find out how many records were
copied, and (when <code>IGNORE</code> is used) how many records
were deleted due to duplication of unique key values.</li>

<li><a id="IDX1468" name="IDX1468"></a> <a id="IDX1469"
name="IDX1469"></a> The <code>FOREIGN KEY</code>,
<code>CHECK</code>, and <code>REFERENCES</code> clauses don't
actually do anything, except for InnoDB type tables which support
<code>ADD CONSTRAINT FOREIGN KEY (...) REFERENCES ... (...)</code>.
Note that InnoDB does not allow an <code>index_name</code> to be
specified. See section <a href="manual.html#InnoDB">7.5
<code>InnoDB</code> Tables</a>. The syntax for other table types is
provided only for compatibility, to make it easier to port code
from other SQL servers and to run applications that create tables
with references. See section <a
href="manual.html#Differences_from_ANSI">1.7.4 MySQL Differences
Compared to ANSI SQL92</a>.</li>
</ul>

<p>Here is an example that shows some of the uses of <code>ALTER
TABLE</code>. We begin with a table <code>t1</code> that is created
as shown here:</p>

<pre>
mysql&gt; CREATE TABLE t1 (a INTEGER,b CHAR(10));
</pre>

<p>To rename the table from <code>t1</code> to <code>t2</code>:</p>

<pre>
mysql&gt; ALTER TABLE t1 RENAME t2;
</pre>

<p>To change column <code>a</code> from <code>INTEGER</code> to
<code>TINYINT NOT NULL</code> (leaving the name the same), and to
change column <code>b</code> from <code>CHAR(10)</code> to
<code>CHAR(20)</code> as well as renaming it from <code>b</code> to
<code>c</code>:</p>

<pre>
mysql&gt; ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);
</pre>

<p>To add a new <code>TIMESTAMP</code> column named
<code>d</code>:</p>

<pre>
mysql&gt; ALTER TABLE t2 ADD d TIMESTAMP;
</pre>

<p>To add an index on column <code>d</code>, and make column
<code>a</code> the primary key:</p>

<pre>
mysql&gt; ALTER TABLE t2 ADD INDEX (d), ADD PRIMARY KEY (a);
</pre>

<p>To remove column <code>c</code>:</p>

<pre>
mysql&gt; ALTER TABLE t2 DROP COLUMN c;
</pre>

<p>To add a new <code>AUTO_INCREMENT</code> integer column named
<code>c</code>:</p>

<pre>
mysql&gt; ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,
           ADD INDEX (c);
</pre>

<p>Note that we indexed <code>c</code>, because
<code>AUTO_INCREMENT</code> columns must be indexed, and also that
we declare <code>c</code> as <code>NOT NULL</code>, because indexed
columns cannot be <code>NULL</code>.</p>

<p>When you add an <code>AUTO_INCREMENT</code> column, column
values are filled in with sequence numbers for you automatically.
You can set the first sequence number by executing <code>SET
INSERT_ID=#</code> before <code>ALTER TABLE</code> or using the
<code>AUTO_INCREMENT = #</code> table option. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</p>

<p>With MyISAM tables, if you don't change the
<code>AUTO_INCREMENT</code> column, the sequence number will not be
affected. If you drop an <code>AUTO_INCREMENT</code> column and
then add another <code>AUTO_INCREMENT</code> column, the numbers
will start from 1 again.</p>

<p>See section <a href="manual.html#ALTER_TABLE_problems">A.6.1
Problems with <code>ALTER TABLE</code>.</a>.</p>

<h3><a id="RENAME_TABLE" name="RENAME_TABLE"
href="manual_toc.html#RENAME_TABLE">6.5.5 <code>RENAME TABLE</code>
Syntax</a></h3>

<p><a id="IDX1470" name="IDX1470"></a></p>

<pre>
RENAME TABLE tbl_name TO new_tbl_name[, tbl_name2 TO new_tbl_name2,...]
</pre>

<p>The rename is done atomically, which means that no other thread
can access any of the tables while the rename is running. This
makes it possible to replace a table with an empty one:</p>

<pre>
CREATE TABLE new_table (...);
RENAME TABLE old_table TO backup_table, new_table TO old_table;
</pre>

<p>The rename is done from left to right, which means that if you
want to swap two tables names, you have to:</p>

<pre>
RENAME TABLE old_table    TO backup_table,
             new_table    TO old_table,
             backup_table TO new_table;
</pre>

<p>As long as two databases are on the same disk you can also
rename from one database to another:</p>

<pre>
RENAME TABLE current_db.tbl_name TO other_db.tbl_name;
</pre>

<p>When you execute <code>RENAME</code>, you can't have any locked
tables or active transactions. You must also have the
<code>ALTER</code> and <code>DROP</code> privileges on the original
table, and the <code>CREATE</code> and <code>INSERT</code>
privileges on the new table.</p>

<p>If MySQL encounters any errors in a multiple-table rename, it
will do a reverse rename for all renamed tables to get everything
back to the original state.</p>

<p><code>RENAME TABLE</code> was added in MySQL 3.23.23.</p>

<h3><a id="DROP_TABLE" name="DROP_TABLE"
href="manual_toc.html#DROP_TABLE">6.5.6 <code>DROP TABLE</code>
Syntax</a></h3>

<p><a id="IDX1471" name="IDX1471"></a> <a id="IDX1472"
name="IDX1472"></a> <a id="IDX1473" name="IDX1473"></a></p>

<pre>
DROP [TEMPORARY] TABLE [IF EXISTS] tbl_name [, tbl_name,...] [RESTRICT | CASCADE]
</pre>

<p><code>DROP TABLE</code> removes one or more tables. All table
data and the table definition are <em>removed</em>, so <strong>be
careful</strong> with this command!</p>

<p>In MySQL Version 3.22 or later, you can use the keywords
<code>IF EXISTS</code> to prevent an error from occurring for
tables that don't exist. In 4.1 one gets a <code>NOTE</code> for
all not existing tables when using <code>IF EXISTS</code>. See
section <a href="manual.html#SHOW_WARNINGS">4.5.6.9 <code>SHOW
WARNINGS | ERRORS</code></a>.</p>

<p><code>RESTRICT</code> and <code>CASCADE</code> are allowed to
make porting easier. For the moment they don't do anything.</p>

<p><strong>Note</strong>: <code>DROP TABLE</code> will
automatically commit current active transaction (except if you are
using 4.1 and the <code>TEMPORARY</code> key word.</p>

<p>Option <code>TEMPORARY</code> is ignored in 4.0. In 4.1 this
option works as follows:</p>

<ul>
<li>Only drops temporary tables.</li>

<li>It doesn't end a running transactions.</li>

<li>No access rights is checked.</li>
</ul>

<p>Using <code>TEMPORARY</code> is a good way to ensure that you
don't accidently drop a real table.</p>

<h3><a id="CREATE_INDEX" name="CREATE_INDEX"
href="manual_toc.html#CREATE_INDEX">6.5.7 <code>CREATE INDEX</code>
Syntax</a></h3>

<p><a id="IDX1474" name="IDX1474"></a></p>

<p><a id="IDX1475" name="IDX1475"></a> <a id="IDX1476"
name="IDX1476"></a> <a id="IDX1477" name="IDX1477"></a></p>

<pre>
CREATE [UNIQUE|FULLTEXT] INDEX index_name
       ON tbl_name (col_name[(length)],... )
</pre>

<p>The <code>CREATE INDEX</code> statement doesn't do anything in
MySQL prior to Version 3.22. In Version 3.22 or later, <code>CREATE
INDEX</code> is mapped to an <code>ALTER TABLE</code> statement to
create indexes. See section <a href="manual.html#ALTER_TABLE">6.5.4
<code>ALTER TABLE</code> Syntax</a>.</p>

<p>Normally, you create all indexes on a table at the time the
table itself is created with <code>CREATE TABLE</code>. See section
<a href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>. <code>CREATE INDEX</code> allows you to add indexes to
existing tables.</p>

<p>A column list of the form <code>(col1,col2,...)</code> creates a
multiple-column index. Index values are formed by concatenating the
values of the given columns.</p>

<p>For <code>CHAR</code> and <code>VARCHAR</code> columns, indexes
can be created that use only part of a column, using
<code>col_name(length)</code> syntax. (On <code>BLOB</code> and
<code>TEXT</code> columns the length is required.) The statement
shown here creates an index using the first 10 characters of the
<code>name</code> column:</p>

<pre>
mysql&gt; CREATE INDEX part_of_name ON customer (name(10));
</pre>

<p>Because most names usually differ in the first 10 characters,
this index should not be much slower than an index created from the
entire <code>name</code> column. Also, using partial columns for
indexes can make the index file much smaller, which could save a
lot of disk space and might also speed up <code>INSERT</code>
operations!</p>

<p>Note that you can only add an index on a column that can have
<code>NULL</code> values or on a
<code>BLOB</code>/<code>TEXT</code> column if you are using MySQL
Version 3.23.2 or newer and are using the <code>MyISAM</code> table
type.</p>

<p>For more information about how MySQL uses indexes, see section
<a href="manual.html#MySQL_indexes">5.4.3 How MySQL Uses
Indexes</a>.</p>

<p><code>FULLTEXT</code> indexes can index only
<code>VARCHAR</code> and <code>TEXT</code> columns, and only in
<code>MyISAM</code> tables. <code>FULLTEXT</code> indexes are
available in MySQL Version 3.23.23 and later. section <a
href="manual.html#Fulltext_Search">6.8 MySQL Full-text
Search</a>.</p>

<h3><a id="DROP_INDEX" name="DROP_INDEX"
href="manual_toc.html#DROP_INDEX">6.5.8 <code>DROP INDEX</code>
Syntax</a></h3>

<p><a id="IDX1478" name="IDX1478"></a> <a id="IDX1479"
name="IDX1479"></a> <a id="IDX1480" name="IDX1480"></a></p>

<pre>
DROP INDEX index_name ON tbl_name
</pre>

<p><code>DROP INDEX</code> drops the index named
<code>index_name</code> from the table <code>tbl_name</code>.
<code>DROP INDEX</code> doesn't do anything in MySQL prior to
Version 3.22. In Version 3.22 or later, <code>DROP INDEX</code> is
mapped to an <code>ALTER TABLE</code> statement to drop the index.
See section <a href="manual.html#ALTER_TABLE">6.5.4 <code>ALTER
TABLE</code> Syntax</a>.</p>

<h2><a id="Basic_User_Commands" name="Basic_User_Commands"
href="manual_toc.html#Basic_User_Commands">6.6 Basic MySQL User
Utility Commands</a></h2>

<h3><a id="USE" name="USE" href="manual_toc.html#USE">6.6.1
<code>USE</code> Syntax</a></h3>

<p><a id="IDX1481" name="IDX1481"></a></p>

<pre>
USE db_name
</pre>

<p>The <code>USE db_name</code> statement tells MySQL to use the
<code>db_name</code> database as the default database for
subsequent queries. The database remains current until the end of
the session or until another <code>USE</code> statement is
issued:</p>

<pre>
mysql&gt; USE db1;
mysql&gt; SELECT COUNT(*) FROM mytable;      # selects from db1.mytable
mysql&gt; USE db2;
mysql&gt; SELECT COUNT(*) FROM mytable;      # selects from db2.mytable
</pre>

<p>Making a particular database current by means of the
<code>USE</code> statement does not preclude you from accessing
tables in other databases. The following example accesses the
<code>author</code> table from the <code>db1</code> database and
the <code>editor</code> table from the <code>db2</code>
database:</p>

<pre>
mysql&gt; USE db1;
mysql&gt; SELECT author_name,editor_name FROM author,db2.editor
    -&gt;        WHERE author.editor_id = db2.editor.editor_id;
</pre>

<p><a id="IDX1482" name="IDX1482"></a> <a id="IDX1483"
name="IDX1483"></a> The <code>USE</code> statement is provided for
Sybase compatibility.</p>

<h3><a id="DESCRIBE" name="DESCRIBE"
href="manual_toc.html#DESCRIBE">6.6.2 <code>DESCRIBE</code> Syntax
(Get Information About Columns)</a></h3>

<p><a id="IDX1484" name="IDX1484"></a> <a id="IDX1485"
name="IDX1485"></a></p>

<pre>
{DESCRIBE | DESC} tbl_name [col_name | wild]
</pre>

<p><code>DESCRIBE</code> is a shortcut for <code>SHOW COLUMNS
FROM</code>. See section <a
href="manual.html#SHOW_DATABASE_INFO">4.5.6.1 Retrieving
information about Database, Tables, Columns, and Indexes</a>.</p>

<p><code>DESCRIBE</code> provides information about a table's
columns. <code>col_name</code> may be a column name or a string
containing the SQL <samp>`%'</samp> and <samp>`_'</samp> wildcard
characters.</p>

<p>If the column types are different from what you expect them to
be based on a <code>CREATE TABLE</code> statement, note that MySQL
sometimes changes column types. See section <a
href="manual.html#Silent_column_changes">6.5.3.1 Silent Column
Specification Changes</a>.</p>

<p><a id="IDX1486" name="IDX1486"></a> <a id="IDX1487"
name="IDX1487"></a> This statement is provided for Oracle
compatibility.</p>

<p>The <code>SHOW</code> statement provides similar information.
See section <a href="manual.html#SHOW">4.5.6 <code>SHOW</code>
Syntax</a>.</p>

<h2><a id="Transactional_Commands" name="Transactional_Commands"
href="manual_toc.html#Transactional_Commands">6.7 MySQL
Transactional and Locking Commands</a></h2>

<h3><a id="COMMIT" name="COMMIT"
href="manual_toc.html#COMMIT">6.7.1
<code>BEGIN/COMMIT/ROLLBACK</code> Syntax</a></h3>

<p><a id="IDX1488" name="IDX1488"></a> <a id="IDX1489"
name="IDX1489"></a> <a id="IDX1490" name="IDX1490"></a></p>

<p>By default, MySQL runs in <code>autocommit</code> mode. This
means that as soon as you execute an update, MySQL will store the
update on disk.</p>

<p>If you are using transactions safe tables (like
<code>InnoDB</code>, <code>BDB</code>, you can put MySQL into
non-<code>autocommit</code> mode with the following command:</p>

<pre>
SET AUTOCOMMIT=0
</pre>

<p>After this you must use <code>COMMIT</code> to store your
changes to disk or <code>ROLLBACK</code> if you want to ignore the
changes you have made since the beginning of your transaction.</p>

<p>If you want to switch from <code>AUTOCOMMIT</code> mode for one
series of statements, you can use the <code>BEGIN</code> or
<code>BEGIN WORK</code> statement:</p>

<pre>
BEGIN;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summmary=@A WHERE type=1;
COMMIT;
</pre>

<p>Note that if you are using non-transaction-safe tables, the
changes will be stored at once, independent of the status of the
<code>autocommit</code> mode.</p>

<p>If you do a <code>ROLLBACK</code> when you have updated a
non-transactional table you will get an error
(<code>ER_WARNING_NOT_COMPLETE_ROLLBACK</code>) as a warning. All
transactional safe tables will be restored but any
non-transactional table will not change.</p>

<p>If you are using <code>BEGIN</code> or <code>SET
AUTOCOMMIT=0</code>, you should use the MySQL binary log for
backups instead of the older update log. Transactions are stored in
the binary log in one chunk, upon <code>COMMIT</code>, to ensure
that transactions which are rolled back are not stored. See section
<a href="manual.html#Binary_log">4.9.4 The Binary Update
Log</a>.</p>

<p>The following commands automatically end a transaction (as if
you had done a <code>COMMIT</code> before executing the
command):</p>

<table border="1" width="100%">
<tr>
<td><strong>Command</strong></td>
<td><strong>Command</strong></td>
<td><strong>Command</strong></td>
</tr>

<tr>
<td><code>ALTER TABLE</code></td>
<td><code>BEGIN</code></td>
<td><code>CREATE INDEX</code></td>
</tr>

<tr>
<td><code>DROP DATABASE</code></td>
<td><code>DROP TABLE</code></td>
<td><code>RENAME TABLE</code></td>
</tr>

<tr>
<td><code>TRUNCATE</code></td>
<td></td>
<td></td>
</tr>
</table>

<p>You can change the isolation level for transactions with
<code>SET TRANSACTION ISOLATION LEVEL ...</code>. See section <a
href="manual.html#SET_TRANSACTION">6.7.3 <code>SET
TRANSACTION</code> Syntax</a>.</p>

<h3><a id="LOCK_TABLES" name="LOCK_TABLES"
href="manual_toc.html#LOCK_TABLES">6.7.2 <code>LOCK TABLES/UNLOCK
TABLES</code> Syntax</a></h3>

<p><a id="IDX1491" name="IDX1491"></a> <a id="IDX1492"
name="IDX1492"></a></p>

<pre>
LOCK TABLES tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE}
            [, tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE} ...]
...
UNLOCK TABLES
</pre>

<p><code>LOCK TABLES</code> locks tables for the current thread.
<code>UNLOCK TABLES</code> releases any locks held by the current
thread. All tables that are locked by the current thread are
automatically unlocked when the thread issues another <code>LOCK
TABLES</code>, or when the connection to the server is closed.</p>

<p>To use <code>LOCK TABLES</code> in MySQL 4.0.2 you need the
global <code>LOCK TABLES</code> privilege and a <code>SELECT</code>
privilege on the involved tables. In MySQL 3.23 you need to have
<code>SELECT</code>, <code>insert</code>, <code>DELETE</code> and
<code>UPDATE</code> privileges for the tables.</p>

<p>The main reasons to use <code>LOCK TABLES</code> are for
emulating transactions or getting more speed when updating tables.
This is explained in more detail later.</p>

<p>If a thread obtains a <code>READ</code> lock on a table, that
thread (and all other threads) can only read from the table. If a
thread obtains a <code>WRITE</code> lock on a table, then only the
thread holding the lock can read from or write to the table. Other
threads are blocked.</p>

<p>The difference between <code>READ LOCAL</code> and
<code>READ</code> is that <code>READ LOCAL</code> allows
non-conflicting <code>INSERT</code> statements to execute while the
lock is held. This can't however be used if you are going to
manipulate the database files outside MySQL while you hold the
lock.</p>

<p>When you use <code>LOCK TABLES</code>, you must lock all tables
that you are going to use and you must use the same alias that you
are going to use in your queries! If you are using a table multiple
times in a query (with aliases), you must get a lock for each
alias!</p>

<p><code>WRITE</code> locks normally have higher priority than
<code>READ</code> locks, to ensure that updates are processed as
soon as possible. This means that if one thread obtains a
<code>READ</code> lock and then another thread requests a
<code>WRITE</code> lock, subsequent <code>READ</code> lock requests
will wait until the <code>WRITE</code> thread has gotten the lock
and released it. You can use <code>LOW_PRIORITY WRITE</code> locks
to allow other threads to obtain <code>READ</code> locks while the
thread is waiting for the <code>WRITE</code> lock. You should only
use <code>LOW_PRIORITY WRITE</code> locks if you are sure that
there will eventually be a time when no threads will have a
<code>READ</code> lock.</p>

<p><code>LOCK TABLES</code> works as follows:</p>

<ol>
<li>Sort all tables to be locked in a internally defined order
(from the user standpoint the order is undefined).</li>

<li>If a table is locked with a read and a write lock, put the
write lock before the read lock.</li>

<li>Lock one table at a time until the thread gets all locks.</li>
</ol>

<p>This policy ensures that table locking is deadlock free. There
is however other things one needs to be aware of with this
schema:</p>

<p>If you are using a <code>LOW_PRIORITY WRITE</code> lock for a
table, this means only that MySQL will wait for this particlar lock
until there is no threads that wants a <code>READ</code> lock. When
the thread has got the <code>WRITE</code> lock and is waiting to
get the lock for the next table in the lock table list, all other
threads will wait for the <code>WRITE</code> lock to be released.
If this becomes a serious problem with your application, you should
consider converting some of your tables to transactions safe
tables.</p>

<p>You can safely kill a thread that is waiting for a table lock
with <code>KILL</code>. See section <a
href="manual.html#KILL">4.5.5 <code>KILL</code> Syntax</a>.</p>

<p>Note that you should <strong>not</strong> lock any tables that
you are using with <code>INSERT DELAYED</code>. This is because
that in this case the <code>INSERT</code> is done by a separate
thread.</p>

<p>Normally, you don't have to lock tables, as all single
<code>UPDATE</code> statements are atomic; no other thread can
interfere with any other currently executing SQL statement. There
are a few cases when you would like to lock tables anyway:</p>

<ul>
<li>If you are going to run many operations on a bunch of tables,
it's much faster to lock the tables you are going to use. The
downside is, of course, that no other thread can update a
<code>READ</code>-locked table and no other thread can read a
<code>WRITE</code>-locked table. The reason some things are faster
under <code>LOCK TABLES</code> is that MySQL will not flush the key
cache for the locked tables until <code>UNLOCK TABLES</code> is
called (normally the key cache is flushed after each SQL
statement). This speeds up inserting/updateing/deletes on
<code>MyISAM</code> tables.</li>

<li>If you are using a storage engine in MySQL that doesn't support
transactions, you must use <code>LOCK TABLES</code> if you want to
ensure that no other thread comes between a <code>SELECT</code> and
an <code>UPDATE</code>. The example shown here requires <code>LOCK
TABLES</code> in order to execute safely: 

<pre>
mysql&gt; LOCK TABLES trans READ, customer WRITE;
mysql&gt; SELECT SUM(value) FROM trans WHERE customer_id=some_id;
mysql&gt; UPDATE customer SET total_value=sum_from_previous_statement
    -&gt;        WHERE customer_id=some_id;
mysql&gt; UNLOCK TABLES;
</pre>

Without <code>LOCK TABLES</code>, there is a chance that another
thread might insert a new row in the <code>trans</code> table
between execution of the <code>SELECT</code> and
<code>UPDATE</code> statements.</li>
</ul>

<p>By using incremental updates (<code>UPDATE customer SET
value=value+new_value</code>) or the <code>LAST_INSERT_ID()</code>
function, you can avoid using <code>LOCK TABLES</code> in many
cases.</p>

<p>You can also solve some cases by using the user-level lock
functions <code>GET_LOCK()</code> and <code>RELEASE_LOCK()</code>.
These locks are saved in a hash table in the server and implemented
with <code>pthread_mutex_lock()</code> and
<code>pthread_mutex_unlock()</code> for high speed. See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</p>

<p>See section <a href="manual.html#Internal_locking">5.3.1 How
MySQL Locks Tables</a>, for more information on locking policy.</p>

<p>You can lock all tables in all databases with read locks with
the <code>FLUSH TABLES WITH READ LOCK</code> command. See section
<a href="manual.html#FLUSH">4.5.3 <code>FLUSH</code> Syntax</a>.
This is very convenient way to get backups if you have a
filesystem, like Veritas, that can take snapshots in time.</p>

<p><strong>NOTE</strong>: <code>LOCK TABLES</code> is not
transaction-safe and will automatically commit any active
transactions before attempting to lock the tables.</p>

<h3><a id="SET_TRANSACTION" name="SET_TRANSACTION"
href="manual_toc.html#SET_TRANSACTION">6.7.3 <code>SET
TRANSACTION</code> Syntax</a></h3>

<p><a id="IDX1493" name="IDX1493"></a> <a id="IDX1494"
name="IDX1494"></a></p>

<pre>
SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL
{ READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE }
</pre>

<p>Sets the transaction isolation level for the global, whole
session or the next transaction.</p>

<p>The default behaviour is to set the isolation level for the next
(not started) transaction. If you use the <code>GLOBAL</code>
keyword, the statement sets the default transaction level globally
for all new connections created from that point on. You will need
the <code>SUPER</code> privilege to do this. Using the
<code>SESSION</code> keyword sets the default transaction level for
all future transactions performed on the current connection.</p>

<p>You can set the default global isolation level for
<code>mysqld</code> with <code>--transaction-isolation=...</code>.
See section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>.</p>

<h2><a id="Fulltext_Search" name="Fulltext_Search"
href="manual_toc.html#Fulltext_Search">6.8 MySQL Full-text
Search</a></h2>

<p><a id="IDX1495" name="IDX1495"></a> <a id="IDX1496"
name="IDX1496"></a> <a id="IDX1497" name="IDX1497"></a></p>

<p>As of Version 3.23.23, MySQL has support for full-text indexing
and searching. Full-text indexes in MySQL are an index of type
<code>FULLTEXT</code>. <code>FULLTEXT</code> indexes are used with
<code>MyISAM</code> tables and can be created from
<code>CHAR</code>, <code>VARCHAR</code>, or <code>TEXT</code>
columns at <code>CREATE TABLE</code> time or added later with
<code>ALTER TABLE</code> or <code>CREATE INDEX</code>. For large
datasets, it will be much faster to load your data into a table
that has no <code>FULLTEXT</code> index, then create the index with
<code>ALTER TABLE</code> (or <code>CREATE INDEX</code>). Loading
data into a table that already has a <code>FULLTEXT</code> index
will be slower.</p>

<p>Full-text searching is performed with the <code>MATCH()</code>
function.</p>

<pre>
mysql&gt; CREATE TABLE articles (
    -&gt;   id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
    -&gt;   title VARCHAR(200),
    -&gt;   body TEXT,
    -&gt;   FULLTEXT (title,body)
    -&gt; );
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO articles VALUES
    -&gt; (NULL,'MySQL Tutorial', 'DBMS stands for DataBase ...'),
    -&gt; (NULL,'How To Use MySQL Efficiently', 'After you went through a ...'),
    -&gt; (NULL,'Optimising MySQL','In this tutorial we will show ...'),
    -&gt; (NULL,'1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
    -&gt; (NULL,'MySQL vs. YourSQL', 'In the following database comparison ...'),
    -&gt; (NULL,'MySQL Security', 'When configured properly, MySQL ...');
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM articles
    -&gt;          WHERE MATCH (title,body) AGAINST ('database');
+----+-------------------+------------------------------------------+
| id | title             | body                                     |
+----+-------------------+------------------------------------------+
|  5 | MySQL vs. YourSQL | In the following database comparison ... |
|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |
+----+-------------------+------------------------------------------+
2 rows in set (0.00 sec)
</pre>

<p>The <code>MATCH()</code> function performs a natural language
search for a string against a text collection (a set of one or more
columns included in a <code>FULLTEXT</code> index). The search
string is given as the argument to <code>AGAINST()</code>. The
search is performed in case-insensitive fashion. For every row in
the table, <code>MATCH()</code> returns a relevance value, that is,
a similarity measure between the search string and the text in that
row in the columns named in the <code>MATCH()</code> list.</p>

<p>When <code>MATCH()</code> is used in a <code>WHERE</code> clause
(see example above) the rows returned are automatically sorted with
highest relevance first. Relevance values are non-negative
floating-point numbers. Zero relevance means no similarity.
Relevance is computed based on the number of words in the row, the
number of unique words in that row, the total number of words in
the collection, and the number of documents (rows) that contain a
particular word.</p>

<p>It is also possible to perform a boolean mode search. This is
explained later in the section.</p>

<p>The preceding example is a basic illustration showing how to use
the <code>MATCH()</code> function. Rows are returned in order of
decreasing relevance.</p>

<p>The next example shows how to retrieve the relevance values
explicitly. As neither <code>WHERE</code> nor <code>ORDER BY</code>
clauses are present, returned rows are not ordered.</p>

<pre>
mysql&gt; SELECT id,MATCH (title,body) AGAINST ('Tutorial') FROM articles;
+----+-----------------------------------------+
| id | MATCH (title,body) AGAINST ('Tutorial') |
+----+-----------------------------------------+
|  1 |                        0.64840710366884 |
|  2 |                                       0 |
|  3 |                        0.66266459031789 |
|  4 |                                       0 |
|  5 |                                       0 |
|  6 |                                       0 |
+----+-----------------------------------------+
6 rows in set (0.00 sec)
</pre>

<p>The following example is more complex. The query returns the
relevance and still sorts the rows in order of decreasing
relevance. To achieve this result, you should specify
<code>MATCH()</code> twice. This will cause no additional overhead,
because the MySQL optimiser will notice that the two
<code>MATCH()</code> calls are identical and invoke the full-text
search code only once.</p>

<pre>
mysql&gt; SELECT id, body, MATCH (title,body) AGAINST
    -&gt; ('Security implications of running MySQL as root') AS score
    -&gt; FROM articles WHERE MATCH (title,body) AGAINST
    -&gt; ('Security implications of running MySQL as root');
+----+-------------------------------------+-----------------+
| id | body                                | score           |
+----+-------------------------------------+-----------------+
|  4 | 1. Never run mysqld as root. 2. ... | 1.5055546709332 |
|  6 | When configured properly, MySQL ... |   1.31140957288 |
+----+-------------------------------------+-----------------+
2 rows in set (0.00 sec)
</pre>

<p>MySQL uses a very simple parser to split text into words. A
``word'' is any sequence of characters consisting of letters,
digits, <samp>`''</samp>, and <samp>`_'</samp>. Any ``word'' that
is present in the stopword list or is just too short (3 characters
or less) is ignored.</p>

<p>Every correct word in the collection and in the query is
weighted according to its significance in the query or collection.
This way, a word that is present in many documents will have lower
weight (and may even have a zero weight), because it has lower
semantic value in this particular collection. Otherwise, if the
word is rare, it will receive a higher weight. The weights of the
words are then combined to compute the relevance of the row.</p>

<p>Such a technique works best with large collections (in fact, it
was carefully tuned this way). For very small tables, word
distribution does not reflect adequately their semantic value, and
this model may sometimes produce bizarre results.</p>

<pre>
mysql&gt; SELECT * FROM articles WHERE MATCH (title,body) AGAINST ('MySQL');
Empty set (0.00 sec)
</pre>

<p>The search for the word <code>MySQL</code> produces no results
in the above example, because that word is present in more than
half the rows. As such, it is effectively treated as a stopword
(that is, a word with zero semantic value). This is the most
desirable behaviour -- a natural language query should not return
every second row from a 1GB table.</p>

<p>A word that matches half of rows in a table is less likely to
locate relevant documents. In fact, it will most likely find plenty
of irrelevant documents. We all know this happens far too often
when we are trying to find something on the Internet with a search
engine. It is with this reasoning that such rows have been assigned
a low semantic value in <strong>this particular
dataset</strong>.</p>

<p>As of Version 4.0.1, MySQL can also perform boolean full-text
searches using the <code>IN BOOLEAN MODE</code> modifier.</p>

<pre>
mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
    -&gt;     AGAINST ('+MySQL -YourSQL' IN BOOLEAN MODE);
+----+------------------------------+-------------------------------------+
| id | title                        | body                                |
+----+------------------------------+-------------------------------------+
|  1 | MySQL Tutorial               | DBMS stands for DataBase ...        |
|  2 | How To Use MySQL Efficiently | After you went through a ...        |
|  3 | Optimising MySQL             | In this tutorial we will show ...   |
|  4 | 1001 MySQL Tricks            | 1. Never run mysqld as root. 2. ... |
|  6 | MySQL Security               | When configured properly, MySQL ... |
+----+------------------------------+-------------------------------------+
</pre>

<p>This query retrieved all the rows that contain the word
<code>MySQL</code> (note: the 50% threshold is not used), but that
do <strong>not</strong> contain the word <code>YourSQL</code>. Note
that a boolean mode search does not auto-magically sort rows in
order of decreasing relevance. You can see this from result of the
preceding query, where the row with the highest relevance (the one
that contains <code>MySQL</code> twice) is listed last, not first.
A boolean full-text search can also work even without a
<code>FULLTEXT</code> index, although it would be
<strong>slow</strong>.</p>

<p>The boolean full-text search capability supports the following
operators:</p>

<dl compact="compact">
<dt><code>+</code></dt>

<dd>A leading plus sign indicates that this word <strong>must
be</strong> present in every row returned.</dd>

<dt><code>-</code></dt>

<dd>A leading minus sign indicates that this word <strong>must not
be</strong> present in any row returned.</dd>

<dd>By default (when neither plus nor minus is specified) the word
is optional, but the rows that contain it will be rated higher.
This mimicks the behaviour of <code>MATCH() ... AGAINST()</code>
without the <code>IN BOOLEAN MODE</code> modifier.</dd>

<dt><code>&lt; &gt;</code></dt>

<dd>These two operators are used to change a word's contribution to
the relevance value that is assigned to a row. The
<code>&lt;</code> operator decreases the contribution and the
<code>&gt;</code> operator increases it. See the example
below.</dd>

<dt><code>( )</code></dt>

<dd>Parentheses are used to group words into subexpressions.</dd>

<dt><code>~</code></dt>

<dd>A leading tilde acts as a negation operator, causing the word's
contribution to the row relevance to be negative. It's useful for
marking noise words. A row that contains such a word will be rated
lower than others, but will not be excluded altogether, as it would
be with the <code>-</code> operator.</dd>

<dt><code>*</code></dt>

<dd>An asterisk is the truncation operator. Unlike the other
operators, it should be <strong>appended</strong> to the word, not
prepended.</dd>

<dt><code>"</code></dt>

<dd>The phrase, that is enclosed in double quotes <code>"</code>,
matches only rows that contain this phrase <strong>literally, as it
was typed</strong>.</dd>
</dl>

<p>And here are some examples:</p>

<dl compact="compact">
<dt><code>apple banana</code></dt>

<dd>find rows that contain at least one of these words.</dd>

<dt><code>+apple +juice</code></dt>

<dd>... both words.</dd>

<dt><code>+apple macintosh</code></dt>

<dd>... word ``apple'', but rank it higher if it also contain
``macintosh''.</dd>

<dt><code>+apple -macintosh</code></dt>

<dd>... word ``apple'' but not ``macintosh''.</dd>

<dt><code>+apple +(&gt;pie &lt;strudel)</code></dt>

<dd>... ``apple'' and ``pie'', or ``apple'' and ``strudel'' (in any
order), but rank ``apple pie'' higher than ``apple strudel''.</dd>

<dt><code>apple*</code></dt>

<dd>... ``apple'', ``apples'', ``applesauce'', and ``applet''.</dd>

<dt><code>"some words"</code></dt>

<dd>... ``some words of wisdom'', but not ``some noise
words''.</dd>
</dl>

<h3><a id="Fulltext_Restrictions" name="Fulltext_Restrictions"
href="manual_toc.html#Fulltext_Restrictions">6.8.1 Full-text
Restrictions</a></h3>

<ul>
<li>All parameters to the <code>MATCH()</code> function must be
columns from the same table that is part of the same
<code>FULLTEXT</code> index, unless the <code>MATCH()</code> is
<code>IN BOOLEAN MODE</code>.</li>

<li>The <code>MATCH()</code> column list must exactly match the
column list in some <code>FULLTEXT</code> index definition for the
table, unless this <code>MATCH()</code> is <code>IN BOOLEAN
MODE</code>.</li>

<li>The argument to <code>AGAINST()</code> must be a constant
string.</li>
</ul>

<h3><a id="Fulltext_Fine-tuning" name="Fulltext_Fine-tuning"
href="manual_toc.html#Fulltext_Fine-tuning">6.8.2 Fine-tuning MySQL
Full-text Search</a></h3>

<p>Unfortunately, full-text search has few user-tunable parameters
yet, although adding some is very high on the TODO. If you have a
MySQL source distribution (see section <a
href="manual.html#Installing_source">2.3 Installing a MySQL Source
Distribution</a>), you can exert more control over full-text
searching behaviour.</p>

<p>Note that full-text search was carefully tuned for the best
searching effectiveness. Modifying the default behaviour will, in
most cases, only make the search results worse. Do not alter the
MySQL sources unless you know what you are doing!</p>

<ul>
<li>The minimum length of words to be indexed is defined by the
MySQL variable <code>ft_min_word_len</code>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. Change it to the value you prefer, and
rebuild your <code>FULLTEXT</code> indexes. (This variable is only
available from MySQL version 4.0.)</li>

<li>The stopword list can be loaded from file specified by
<code>ft_stopword_file</code> variable. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. Rebuild your <code>FULLTEXT</code> indexes
after modifying the stopword list. (This variable is only available
from MySQL version 4.0.10 and onwards)</li>

<li>The 50% threshold is determined by the particular weighting
scheme chosen. To disable it, change the following line in
<tt>`myisam/ftdefs.h'</tt>: 

<pre>
#define GWS_IN_USE GWS_PROB
</pre>

To: 

<pre>
#define GWS_IN_USE GWS_FREQ
</pre>

Then recompile MySQL. There is no need to rebuild the indexes in
this case. <strong>Note</strong>: by doing this you
<strong>severely</strong> decrease MySQL's ability to provide
adequate relevance values for the <code>MATCH()</code> function. If
you really need to search for such common words, it would be better
to search using <code>IN BOOLEAN MODE</code> instead, which does
not observe the 50% threshold.</li>

<li>Sometimes the search engine maintainer would like to change the
operators used for boolean full-text searches. These are defined by
the <code>ft_boolean_syntax</code> variable. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. Still, this variable is read-only, its value
is set in <tt>`myisam/ft_static.c'</tt>.</li>
</ul>

<p>For those changes that require you to rebuild your
<code>FULLTEXT</code> indexes, the easiest way to do so for a
MyISAM table is to use the following statement, which rebuilds the
index file:</p>

<pre>
mysql&gt; REPAIR TABLE tbl_name QUICK;
</pre>

<h3><a id="Fulltext_TODO" name="Fulltext_TODO"
href="manual_toc.html#Fulltext_TODO">6.8.3 Full-text Search
TODO</a></h3>

<ul>
<li>Make all operations with <code>FULLTEXT</code> index
<strong>faster</strong>.</li>

<li>Proximity operators</li>

<li>Support for "always-index words". They could be any strings the
user wants to treat as words, examples are "C++", "AS/400",
"TCP/IP", etc.</li>

<li>Support for full-text search in <code>MERGE</code> tables.</li>

<li>Support for multi-byte charsets.</li>

<li>Make stopword list to depend of the language of the data.</li>

<li>Stemming (dependent of the language of the data, of
course).</li>

<li>Generic user-suppliable UDF preparser.</li>

<li>Make the model more flexible (by adding some adjustable
parameters to <code>FULLTEXT</code> in <code>CREATE/ALTER
TABLE</code>).</li>
</ul>

<h2><a id="Query_Cache" name="Query_Cache"
href="manual_toc.html#Query_Cache">6.9 MySQL Query Cache</a></h2>

<p><a id="IDX1498" name="IDX1498"></a> <a id="IDX1499"
name="IDX1499"></a></p>

<p>From version 4.0.1, <code>MySQL server</code> features a
<code>Query Cache</code>. When in use, the query cache stores the
text of a <code>SELECT</code> query together with the corresponding
result that was sent to the client. If an identical query is later
received, the server will retrieve the results from the query cache
rather than parsing and executing the same query again.</p>

<p><strong>NOTE:</strong> The query cache does not return stale
data. When data is modified, any relevant entries in the query
cache are flushed.</p>

<p>The query cache is extremely useful in an environment where
(some) tables don't change very often and you have a lot of
identical queries. This is a typical situation for many web servers
that use a lot of dynamic content.</p>

<p>Below is some performance data for the query cache. (These
results were generated by running the MySQL benchmark suite on a
Linux Alpha 2 x 500 MHz with 2GB RAM and a 64MB query cache):</p>

<ul>
<li>If all of the queries you're performing are simple (such as
selecting a row from a table with one row); but still differ so
that the queries can not be cached, the overhead for having the
query cache active is 13%. This could be regarded as the worst case
scenario. However, in real life, queries are much more complicated
than our simple example so the overhead is normally significantly
lower.</li>

<li>Searches after one row in a one row table is 238% faster. This
can be regarded as close to the minimum speedup to be expected for
a query that is cached.</li>

<li>If you want to disable the query cache code set
<code>query_cache_size=0</code>. By disabling the query cache code
there is no noticeable overhead. (query cache can be excluded from
code with help of configure option
<code>--without-query-cache</code>)</li>
</ul>

<h3><a id="Query_Cache_How" name="Query_Cache_How"
href="manual_toc.html#Query_Cache_How">6.9.1 How The Query Cache
Operates</a></h3>

<p>Queries are compared before parsing, thus</p>

<pre>
SELECT * FROM TABLE
</pre>

<p>and</p>

<pre>
Select * from table
</pre>

<p>are regarded as different queries for query cache, so queries
need to be exactly the same (byte for byte) to be seen as
identical. In addition, a query may be seen as different if for
instance one client is using a new communication protocol format or
another character set than another client.</p>

<p>Queries that uses different databases, uses different protocol
versions or the uses different default character sets are
considered different queries and cached separately.</p>

<p>The cache does work for <code>SELECT CALC_ROWS ...</code> and
<code>SELECT FOUND_ROWS() ...</code> type queries because the
number of found rows is also stored in the cache.</p>

<p>If a table changes (<code>INSERT</code>, <code>UPDATE</code>,
<code>DELETE</code>, <code>TRUNCATE</code>, <code>ALTER</code> or
<code>DROP TABLE|DATABASE</code>), then all cached queries that
used this table (possibly through a <code>MRG_MyISAM</code> table!)
become invalid and are removed from the cache.</p>

<p>Transactional <code>InnoDB</code> tables that have been changed
will be invalidated when a <code>COMMIT</code> is performed.</p>

<p>A query cannot be cached if it contains one of the
functions:</p>

<table border="1" width="100%">
<tr>
<td><strong>Function</strong></td>
<td><strong>Function</strong></td>
<td><strong>Function</strong></td>
</tr>

<tr>
<td><code>User-Defined Functions</code></td>
<td><code>CONNECTION_ID</code></td>
<td><code>FOUND_ROWS</code></td>
</tr>

<tr>
<td><code>GET_LOCK</code></td>
<td><code>RELEASE_LOCK</code></td>
<td><code>LOAD_FILE</code></td>
</tr>

<tr>
<td><code>MASTER_POS_WAIT</code></td>
<td><code>NOW</code></td>
<td><code>SYSDATE</code></td>
</tr>

<tr>
<td><code>CURRENT_TIMESTAMP</code></td>
<td><code>CURDATE</code></td>
<td><code>CURRENT_DATE</code></td>
</tr>

<tr>
<td><code>CURTIME</code></td>
<td><code>CURRENT_TIME</code></td>
<td><code>DATABASE</code></td>
</tr>

<tr>
<td><code>ENCRYPT</code> (with one parameter)</td>
<td><code>LAST_INSERT_ID</code></td>
<td><code>RAND</code></td>
</tr>

<tr>
<td><code>UNIX_TIMESTAMP</code> (without parameters)</td>
<td><code>USER</code></td>
<td><code>BENCHMARK</code></td>
</tr>
</table>

<br />
<br />
 

<p>Nor can a query be cached if it contains user variables,
references the mysql system database, is of the form <code>SELECT
... IN SHARE MODE</code>, or of the form <code>SELECT * FROM
AUTOINCREMENT_FIELD IS NULL</code> (to retrieve last insert id -
ODBC work around).</p>

<p>However, <code>FOUND ROWS()</code> will return the correct
value, even if the preceding query was fetched from the cache.</p>

<p>In case a query does not use any tables, or uses temporary
tables, or if the user has a column privilege for any of the
involved tables, that query will not be cached.</p>

<p>Before a query is fetched from the query cache, MySQL will check
that the user has SELECT privilege to all the involved databases
and tables. If this is not the case, the cached result will not be
used.</p>

<h3><a id="Query_Cache_Configuration"
name="Query_Cache_Configuration"
href="manual_toc.html#Query_Cache_Configuration">6.9.2 Query Cache
Configuration</a></h3>

<p>The query cache adds a few <code>MySQL</code> system variables
for <code>mysqld</code> which may be set in a configuration file,
on the command-line when starting <code>mysqld</code>.</p>

<ul>
<li><code>query_cache_limit</code> Don't cache results that are
bigger than this. (Default 1M).</li>

<li><code>query_cache_size</code> The amount of memory (specified
in bytes) allocated to store results from old queries. If this is
0, the query cache is disabled (default).</li>

<li><code>query_cache_type</code> This may be set (only numeric) to


<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>0</td>
<td>(OFF, don't cache or retrieve results)</td>
</tr>

<tr>
<td>1</td>
<td>(ON, cache all results except <code>SELECT SQL_NO_CACHE
...</code> queries)</td>
</tr>

<tr>
<td>2</td>
<td>(DEMAND, cache only <code>SELECT SQL_CACHE ...</code>
queries)</td>
</tr>
</table>
</li>
</ul>

<p>Inside a thread (connection), the behaviour of the query cache
can be changed from the default. The syntax is as follows:</p>

<p><code>QUERY_CACHE_TYPE = OFF | ON | DEMAND</code>
<code>QUERY_CACHE_TYPE = 0 | 1 | 2</code></p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>0 or OFF</td>
<td>Don't cache or retrieve results.</td>
</tr>

<tr>
<td>1 or ON</td>
<td>Cache all results except <code>SELECT SQL_NO_CACHE ...</code>
queries.</td>
</tr>

<tr>
<td>2 or DEMAND</td>
<td>Cache only <code>SELECT SQL_CACHE ...</code> queries.</td>
</tr>
</table>

<h3><a id="Query_Cache_in_SELECT" name="Query_Cache_in_SELECT"
href="manual_toc.html#Query_Cache_in_SELECT">6.9.3 Query Cache
Options in <code>SELECT</code></a></h3>

<p>There are two possible query cache related parameters that may
be specified in a <code>SELECT</code> query:</p>

<p><a id="IDX1500" name="IDX1500"></a> <a id="IDX1501"
name="IDX1501"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>SQL_CACHE</code></td>
<td>If <code>QUERY_CACHE_TYPE</code> is <code>DEMAND</code>, allow
the query to be cached. If <code>QUERY_CACHE_TYPE</code> is
<code>ON</code>, this is the default. If
<code>QUERY_CACHE_TYPE</code> is <code>OFF</code>, do nothing.</td>
</tr>

<tr>
<td><code>SQL_NO_CACHE</code></td>
<td>Make this query non-cachable, don't allow this query to be
stored in the cache.</td>
</tr>
</table>

<h3><a id="Query_Cache_Status_and_Maintenance"
name="Query_Cache_Status_and_Maintenance"
href="manual_toc.html#Query_Cache_Status_and_Maintenance">6.9.4
Query Cache Status and Maintenance</a></h3>

<p>With the <code>FLUSH QUERY CACHE</code> command you can
defragment the query cache to better utilise its memory. This
command will not remove any queries from the cache. <code>FLUSH
TABLES</code> also flushes the query cache.</p>

<p>The <code>RESET QUERY CACHE</code> command removes all query
results from the query cache.</p>

<p>You can monitor query cache performance in <code>SHOW
STATUS</code>:</p>

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>Qcache_queries_in_cache</code></td>
<td>Number of queries registered in the cache.</td>
</tr>

<tr>
<td><code>Qcache_inserts</code></td>
<td>Number of queries added to the cache.</td>
</tr>

<tr>
<td><code>Qcache_hits</code></td>
<td>Number of cache hits.</td>
</tr>

<tr>
<td><code>Qcache_lowmem_prunes</code></td>
<td>Number of queries that were deleted from cache because of low
memory.</td>
</tr>

<tr>
<td><code>Qcache_not_cached</code></td>
<td>Number of non-cached queries (not cachable, or due to
<code>QUERY_CACHE_TYPE</code>).</td>
</tr>

<tr>
<td><code>Qcache_free_memory</code></td>
<td>Amount of free memory for query cache.</td>
</tr>

<tr>
<td><code>Qcache_total_blocks</code></td>
<td>Total number of blocks in query cache.</td>
</tr>

<tr>
<td><code>Qcache_free_blocks</code></td>
<td>Number of free memory blocks in query cache.</td>
</tr>
</table>

<p>Total number of queries = <code>Qcache_inserts</code> +
<code>Qcache_hits</code> + <code>Qcache_not_cached</code>.</p>

<p>The query cache uses variable length blocks, so
<code>Qcache_total_blocks</code> and
<code>Qcache_free_blocks</code> may indicate query cache memory
fragmentation. After <code>FLUSH QUERY CACHE</code> only a single
(big) free block remains.</p>

<p>Note: Every query needs a minimum of two blocks (one for the
query text and one or more for the query results). Also, every
table that is used by a query needs one block, but if two or more
queries use same table only one block needs to be allocated.</p>

<p>You can use the <code>Qcache_lowmem_prunes</code> status
variable to tune the query cache size. It counts the number of
queries that have been removed from the cache to free up memory for
caching new queries. The query cache uses a <code>least recently
used</code> (<code>LRU</code>) strategy to decide which queries to
remove from the cache.</p>

<h1><a id="Table_types" name="Table_types"
href="manual_toc.html#Table_types">7 MySQL Table Types</a></h1>

<p><a id="IDX1502" name="IDX1502"></a> <a id="IDX1503"
name="IDX1503"></a> <a id="IDX1504" name="IDX1504"></a> <a
id="IDX1505" name="IDX1505"></a> <a id="IDX1506"
name="IDX1506"></a> <a id="IDX1507" name="IDX1507"></a> <a
id="IDX1508" name="IDX1508"></a> <a id="IDX1509"
name="IDX1509"></a> <a id="IDX1510" name="IDX1510"></a> <a
id="IDX1511" name="IDX1511"></a></p>

<p>As of MySQL Version 3.23.6, you can choose between three basic
table formats (<code>ISAM</code>, <code>HEAP</code> and
<code>MyISAM</code>. Newer MySQL may support additional table type
(<code>InnoDB</code>, or <code>BDB</code>), depending on how you
compile it.</p>

<p>When you create a new table, you can tell MySQL which table type
it should use for the table. MySQL will always create a
<tt>`.frm'</tt> file to hold the table and column definitions.
Depending on the table type, the index and data will be stored in
other files.</p>

<p>Note that to use <code>InnoDB</code> tables you have to use at
least the <code>innodb_data_file_path</code> startup option. See
section <a href="manual.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a>.</p>

<p>The default table type in MySQL is <code>MyISAM</code>. If you
are trying to use a table type that is not compiled-in or
activated, MySQL will instead create a table of type
<code>MyISAM</code>. This is a very useful feature when you want to
copy tables between different SQL servers that supports different
table types (like copying tables to a slave that is optimised for
speed by not having transactional tables). This automatic table
changing can however also be very confusing for new MySQL users. We
plan to fix this by introducing warnings in the new client-server
protocol in version 4.1 and giving a warning when a table type is
automatically changed.</p>

<p>You can convert tables between different types with the
<code>ALTER TABLE</code> statement. See section <a
href="manual.html#ALTER_TABLE">6.5.4 <code>ALTER TABLE</code>
Syntax</a>.</p>

<p>Note that MySQL supports two different kinds of tables:
transaction-safe tables (<code>InnoDB</code> and <code>BDB</code>)
and not transaction-safe tables (<code>HEAP</code>,
<code>ISAM</code>, <code>MERGE</code>, and
<code>MyISAM</code>).</p>

<p>Advantages of transaction-safe tables (TST):</p>

<ul>
<li>Safer. Even if MySQL crashes or you get hardware problems, you
can get your data back, either by automatic recovery or from a
backup + the transaction log.</li>

<li>You can combine many statements and accept these all in one go
with the <code>COMMIT</code> command.</li>

<li>You can execute <code>ROLLBACK</code> to ignore your changes
(if you are not running in auto-commit mode).</li>

<li>If an update fails, all your changes will be restored. (With
NTST tables all changes that have taken place are permanent)</li>

<li>Can provide better concurrency if the table gets many updates
concurrently with reads.</li>
</ul>

<p>Advantages of not transaction-safe tables (NTST):</p>

<ul>
<li>Much faster as there is no transaction overhead.</li>

<li>Will use less disk space as there is no overhead of
transactions.</li>

<li>Will use less memory to do updates.</li>
</ul>

<p>You can combine TST and NTST tables in the same statements to
get the best of both worlds.</p>

<h2><a id="MyISAM" name="MyISAM" href="manual_toc.html#MyISAM">7.1
<code>MyISAM</code> Tables</a></h2>

<p><code>MyISAM</code> is the default table type in MySQL Version
3.23. It's based on the <code>ISAM</code> code and has a lot of
useful extensions.</p>

<p>The index is stored in a file with the <tt>`.MYI'</tt> (MYIndex)
extension, and the data is stored in a file with the
<tt>`.MYD'</tt> (MYData) extension. You can check/repair
<code>MyISAM</code> tables with the <code>myisamchk</code> utility.
See section <a href="manual.html#Crash_recovery">4.4.6.7 Using
<code>myisamchk</code> for Crash Recovery</a>. You can compress
<code>MyISAM</code> tables with <code>myisampack</code> to take up
much less space. See section <a href="manual.html#myisampack">4.7.4
<code>myisampack</code>, The MySQL Compressed Read-only Table
Generator</a>.</p>

<p>The following is new in <code>MyISAM</code>:</p>

<ul>
<li>There is a flag in the <code>MyISAM</code> file that indicates
whether the table was closed correctly. If <code>mysqld</code> is
started with <code>--myisam-recover</code>, <code>MyISAM</code>
tables will automatically be checked and/or repaired on open if the
table wasn't closed properly.</li>

<li>You can <code>INSERT</code> new rows in a table that doesn't
have free blocks in the middle of the datafile, at the same time
other threads are reading from the table (concurrent insert). An
free block can come from an update of a dynamic length row with
much data to a row with less data or when deleting rows. When all
free blocks are used up, all future inserts will be concurrent
again.</li>

<li>Support for big files (63-bit) on filesystems/operating systems
that support big files.</li>

<li>All data is stored with the low byte first. This makes the data
machine and OS independent. The only requirement is that the
machine uses two's-complement signed integers (as every machine for
the last 20 years has) and IEEE floating-point format (also totally
dominant among mainstream machines). The only area of machines that
may not support binary compatibility are embedded systems (because
they sometimes have peculiar processors). There is no big speed
penalty in storing data low byte first; the bytes in a table row is
normally unaligned and it doesn't take that much more power to read
an unaligned byte in order than in reverse order. The actual
fetch-column-value code is also not time critical compared to other
code.</li>

<li>All number keys are stored with high byte first to give better
index compression.</li>

<li>Internal handling of one <code>AUTO_INCREMENT</code> column.
<code>MyISAM</code> will automatically update this on
<code>INSERT/UPDATE</code>. The <code>AUTO_INCREMENT</code> value
can be reset with <code>myisamchk</code>. This will make
<code>AUTO_INCREMENT</code> columns faster (at least 10%) and old
numbers will not be reused as with the old <code>ISAM</code>. Note
that when an <code>AUTO_INCREMENT</code> is defined on the end of a
multi-part-key the old behaviour is still present.</li>

<li>When inserted in sorted order (as when you are using an
<code>AUTO_INCREMENT</code> column) the key tree will be split so
that the high node only contains one key. This will improve the
space utilisation in the key tree.</li>

<li><code>BLOB</code> and <code>TEXT</code> columns can be
indexed.</li>

<li><code>NULL</code> values are allowed in indexed columns. This
takes 0-1 bytes/key.</li>

<li>Maximum key length is 500 bytes by default (can be changed by
recompiling). In cases of keys longer than 250 bytes, a bigger key
block size than the default of 1024 bytes is used for this
key.</li>

<li>Maximum number of keys/table is 32 as default. This can be
enlarged to 64 without having to recompile
<code>myisamchk</code>.</li>

<li><code>myisamchk</code> will mark tables as checked if one runs
it with <code>--update-state</code>. <code>myisamchk --fast</code>
will only check those tables that don't have this mark.</li>

<li><code>myisamchk -a</code> stores statistics for key parts (and
not only for whole keys as in <code>ISAM</code>).</li>

<li>Dynamic size rows will now be much less fragmented when mixing
deletes with updates and inserts. This is done by automatically
combining adjacent deleted blocks and by extending blocks if the
next block is deleted.</li>

<li><code>myisampack</code> can pack <code>BLOB</code> and
<code>VARCHAR</code> columns.</li>

<li>You can use put the datafile and index file on different
directories to get more speed (with the <code>DATA/INDEX
DIRECTORY="path"</code> option to <code>CREATE TABLE</code>). See
section <a href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE
TABLE</code> Syntax</a>.</li>
</ul>

<p><code>MyISAM</code> also supports the following things, which
MySQL will be able to use in the near future:</p>

<ul>
<li>Support for a true <code>VARCHAR</code> type; a
<code>VARCHAR</code> column starts with a length stored in 2
bytes.</li>

<li>Tables with <code>VARCHAR</code> may have fixed or dynamic
record length.</li>

<li><code>VARCHAR</code> and <code>CHAR</code> may be up to 64K.
All key segments have their own language definition. This will
enable MySQL to have different language definitions per
column.</li>

<li>A hashed computed index can be used for <code>UNIQUE</code>.
This will allow you to have <code>UNIQUE</code> on any combination
of columns in a table. (You can't search on a <code>UNIQUE</code>
computed index, however.)</li>
</ul>

<p>Note that index files are usually much smaller with
<code>MyISAM</code> than with <code>ISAM</code>. This means that
<code>MyISAM</code> will normally use less system resources than
<code>ISAM</code>, but will need more CPU time when inserting data
into a compressed index.</p>

<p>The following options to <code>mysqld</code> can be used to
change the behaviour of <code>MyISAM</code> tables. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>--myisam-recover=#</code></td>
<td>Automatic recovery of crashed tables.</td>
</tr>

<tr>
<td><code>-O myisam_sort_buffer_size=#</code></td>
<td>Buffer used when recovering tables.</td>
</tr>

<tr>
<td><code>--delay-key-write=ALL</code></td>
<td>Don't flush key buffers between writes for any MyISAM
table</td>
</tr>

<tr>
<td><code>-O myisam_max_extra_sort_file_size=#</code></td>
<td>Used to help MySQL to decide when to use the slow but safe key
cache index create method. <strong>Note</strong> that this
parameter is given in megabytes before 4.0.3 and in bytes starting
from this version.</td>
</tr>

<tr>
<td><code>-O myisam_max_sort_file_size=#</code></td>
<td>Don't use the fast sort index method to created index if the
temporary file would get bigger than this. <strong>Note</strong>
that this parameter is given in megabytes before 4.0.3 and in bytes
starting from this version.</td>
</tr>

<tr>
<td><code>-O bulk_insert_buffer_size=#</code></td>
<td>Size of tree cache used in bulk insert optimisation.
<strong>Note</strong> that this is a limit <strong>per
thread</strong>!</td>
</tr>
</table>

<p>The automatic recovery is activated if you start
<code>mysqld</code> with <code>--myisam-recover=#</code>. See
section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>. On open, the table is
checked if it's marked as crashed or if the open count variable for
the table is not 0 and you are running with
<code>--skip-external-locking</code>. If either of the above is
true the following happens.</p>

<ul>
<li>The table is checked for errors.</li>

<li>If we found an error, try to do a fast repair (with sorting and
without re-creating the datafile) of the table.</li>

<li>If the repair fails because of an error in the datafile (for
example a duplicate key error), we try again, but this time we
re-create the datafile.</li>

<li>If the repair fails, retry once more with the old repair option
method (write row by row without sorting) which should be able to
repair any type of error with little disk requirements..</li>
</ul>

<p>If the recover wouldn't be able to recover all rows from a
previous completed statement and you didn't specify
<code>FORCE</code> as an option to <code>myisam-recover</code>,
then the automatic repair will abort with an error message in the
error file:</p>

<pre>
Error: Couldn't repair table: test.g00pages
</pre>

<p>If you in this case had used the <code>FORCE</code> option you
would instead have got a warning in the error file:</p>

<pre>
Warning: Found 344 of 354 rows when repairing ./test/g00pages
</pre>

<p>Note that if you run automatic recover with the
<code>BACKUP</code> option, you should have a <code>cron</code>
script that automatically moves file with names like
<tt>`tablename-datetime.BAK'</tt> from the database directories to
a backup media.</p>

<p>See section <a href="manual.html#Command-line_options">4.1.1
<code>mysqld</code> Command-line Options</a>.</p>

<h3><a id="Key_space" name="Key_space"
href="manual_toc.html#Key_space">7.1.1 Space Needed for
Keys</a></h3>

<p><a id="IDX1512" name="IDX1512"></a></p>

<p>MySQL can support different index types, but the normal type is
ISAM or MyISAM. These use a B-tree index, and you can roughly
calculate the size for the index file as
<code>(key_length+4)/0.67</code>, summed over all keys. (This is
for the worst case when all keys are inserted in sorted order and
we don't have any compressed keys.)</p>

<p>String indexes are space compressed. If the first index part is
a string, it will also be prefix compressed. Space compression
makes the index file smaller than the above figures if the string
column has a lot of trailing space or is a <code>VARCHAR</code>
column that is not always used to the full length. Prefix
compression is used on keys that start with a string. Prefix
compression helps if there are many strings with an identical
prefix.</p>

<p>In <code>MyISAM</code> tables, you can also prefix compress
numbers by specifying <code>PACK_KEYS=1</code> when you create the
table. This helps when you have many integer keys that have an
identical prefix when the numbers are stored high-byte first.</p>

<h3><a id="MyISAM_table_formats" name="MyISAM_table_formats"
href="manual_toc.html#MyISAM_table_formats">7.1.2
<code>MyISAM</code> Table Formats</a></h3>

<p><code>MyISAM</code> supports 3 different table types. Two of
them are chosen automatically depending on the type of columns you
are using. The third, compressed tables, can only be created with
the <code>myisampack</code> tool.</p>

<p>When you <code>CREATE</code> or <code>ALTER</code> a table you
can for tables that doesn't have <code>BLOB</code>s force the table
format to <code>DYNAMIC</code> or <code>FIXED</code> with the
<code>ROW_FORMAT=#</code> table option. In the future you will be
able to compress/decompress tables by specifying
<code>ROW_FORMAT=compressed | default</code> to <code>ALTER
TABLE</code>. See section <a href="manual.html#CREATE_TABLE">6.5.3
<code>CREATE TABLE</code> Syntax</a>.</p>

<h4><a id="Static_format" name="Static_format"
href="manual_toc.html#Static_format">7.1.2.1 Static (Fixed-length)
Table Characteristics</a></h4>

<p>This is the default format. It's used when the table contains no
<code>VARCHAR</code>, <code>BLOB</code>, or <code>TEXT</code>
columns.</p>

<p>This format is the simplest and most secure format. It is also
the fastest of the on-disk formats. The speed comes from the easy
way data can be found on disk. When looking up something with an
index and static format it is very simple. Just multiply the row
number by the row length.</p>

<p>Also, when scanning a table it is very easy to read a constant
number of records with each disk read.</p>

<p>The security is evidenced if your computer crashes when writing
to a fixed-size MyISAM file, in which case <code>myisamchk</code>
can easily figure out where each row starts and ends. So it can
usually reclaim all records except the partially written one. Note
that in MySQL all indexes can always be reconstructed:</p>

<ul>
<li>All <code>CHAR</code>, <code>NUMERIC</code>, and
<code>DECIMAL</code> columns are space-padded to the column
width.</li>

<li>Very quick.</li>

<li>Easy to cache.</li>

<li>Easy to reconstruct after a crash, because records are located
in fixed positions.</li>

<li>Doesn't have to be reorganised (with <code>myisamchk</code>)
unless a huge number of records are deleted and you want to return
free disk space to the operating system.</li>

<li>Usually requires more disk space than dynamic tables.</li>
</ul>

<h4><a id="Dynamic_format" name="Dynamic_format"
href="manual_toc.html#Dynamic_format">7.1.2.2 Dynamic Table
Characteristics</a></h4>

<p><a id="IDX1513" name="IDX1513"></a> <a id="IDX1514"
name="IDX1514"></a></p>

<p>This format is used if the table contains any
<code>VARCHAR</code>, <code>BLOB</code>, or <code>TEXT</code>
columns or if the table was created with
<code>ROW_FORMAT=dynamic</code>.</p>

<p>This format is a little more complex because each row has to
have a header that says how long it is. One record can also end up
at more than one location when it is made longer at an update.</p>

<p><a id="IDX1515" name="IDX1515"></a> You can use <code>OPTIMIZE
table</code> or <code>myisamchk</code> to defragment a table. If
you have static data that you access/change a lot in the same table
as some <code>VARCHAR</code> or <code>BLOB</code> columns, it might
be a good idea to move the dynamic columns to other tables just to
avoid fragmentation:</p>

<ul>
<li>All string columns are dynamic (except those with a length less
than 4).</li>

<li>Each record is preceded by a bitmap indicating which columns
are empty (<code>''</code>) for string columns, or zero for numeric
columns. (This isn't the same as columns containing
<code>NULL</code> values.) If a string column has a length of zero
after removal of trailing spaces, or a numeric column has a value
of zero, it is marked in the bit map and not saved to disk.
Non-empty strings are saved as a length byte plus the string
contents.</li>

<li>Usually takes much less disk space than fixed-length
tables.</li>

<li>Each record uses only as much space as is required. If a record
becomes larger, it is split into as many pieces as are required.
This results in record fragmentation.</li>

<li>If you update a row with information that extends the row
length, the row will be fragmented. In this case, you may have to
run <code>myisamchk -r</code> from time to time to get better
performance. Use <code>myisamchk -ei tbl_name</code> for some
statistics.</li>

<li>Not as easy to reconstruct after a crash, because a record may
be fragmented into many pieces and a link (fragment) may be
missing.</li>

<li>The expected row length for dynamic sized records is: 

<pre>
3
+ (number of columns + 7) / 8
+ (number of char columns)
+ packed size of numeric columns
+ length of strings
+ (number of NULL columns + 7) / 8
</pre>

There is a penalty of 6 bytes for each link. A dynamic record is
linked whenever an update causes an enlargement of the record. Each
new link will be at least 20 bytes, so the next enlargement will
probably go in the same link. If not, there will be another link.
You may check how many links there are with <code>myisamchk
-ed</code>. All links may be removed with <code>myisamchk
-r</code>.</li>
</ul>

<h4><a id="Compressed_format" name="Compressed_format"
href="manual_toc.html#Compressed_format">7.1.2.3 Compressed Table
Characteristics</a></h4>

<p><a id="IDX1516" name="IDX1516"></a> <a id="IDX1517"
name="IDX1517"></a> <a id="IDX1518" name="IDX1518"></a> <a
id="IDX1519" name="IDX1519"></a></p>

<p>This is a read-only type that is generated with the optional
<code>myisampack</code> tool (<code>pack_isam</code> for
<code>ISAM</code> tables):</p>

<ul>
<li>All MySQL distributions, even those that existed before MySQL
went GPL, can read tables that were compressed with
<code>myisampack</code>.</li>

<li>Compressed tables take very little disk space. This minimises
disk usage, which is very nice when using slow disks (like
CD-ROMs).</li>

<li>Each record is compressed separately (very little access
overhead). The header for a record is fixed (1-3 bytes) depending
on the biggest record in the table. Each column is compressed
differently. Some of the compression types are: 

<ul>
<li>There is usually a different Huffman table for each
column.</li>

<li>Suffix space compression.</li>

<li>Prefix space compression.</li>

<li>Numbers with value <code>0</code> are stored using 1 bit.</li>

<li>If values in an integer column have a small range, the column
is stored using the smallest possible type. For example, a
<code>BIGINT</code> column (8 bytes) may be stored as a
<code>TINYINT</code> column (1 byte) if all values are in the range
<code>0</code> to <code>255</code>.</li>

<li>If a column has only a small set of possible values, the column
type is converted to <code>ENUM</code>.</li>

<li>A column may use a combination of the above compressions.</li>
</ul>
</li>

<li>Can handle fixed- or dynamic-length records.</li>

<li>Can be uncompressed with <code>myisamchk</code>.</li>
</ul>

<h3><a id="MyISAM_table_problems" name="MyISAM_table_problems"
href="manual_toc.html#MyISAM_table_problems">7.1.3
<code>MyISAM</code> Table Problems</a></h3>

<p>The file format that MySQL uses to store data has been
extensively tested, but there are always circumstances that may
cause database tables to become corrupted.</p>

<h4><a id="Corrupted_MyISAM_tables" name="Corrupted_MyISAM_tables"
href="manual_toc.html#Corrupted_MyISAM_tables">7.1.3.1 Corrupted
<code>MyISAM</code> Tables</a></h4>

<p>Even if the MyISAM table format is very reliable (all changes to
a table is written before the SQL statements returns) , you can
still get corrupted tables if some of the following things
happens:</p>

<ul>
<li>The <code>mysqld</code> process being killed in the middle of a
write.</li>

<li>Unexpected shutdown of the computer (for example, if the
computer is turned off).</li>

<li>A hardware error.</li>

<li>You are using an external program (like myisamchk) on a live
table.</li>

<li>A software bug in the MySQL or MyISAM code.</li>
</ul>

<p>Typial typical symptoms for a corrupt table is:</p>

<ul>
<li>You get the error <code>Incorrect key file for table: '...'.
Try to repair it</code> while selecting data from the table.</li>

<li>Queries doesn't find rows in the table or returns incomplete
data.</li>
</ul>

<p>You can check if a table is ok with the command <code>CHECK
TABLE</code>. See section <a href="manual.html#CHECK_TABLE">4.4.4
<code>CHECK TABLE</code> Syntax</a>.</p>

<p>You can repair a corrupted table with <code>REPAIR TABLE</code>.
See section <a href="manual.html#REPAIR_TABLE">4.4.5 <code>REPAIR
TABLE</code> Syntax</a>. You can also repair a table, when
<code>mysqld</code> is not running with the <code>myisamchk</code>
command. <code>myisamchk syntax</code>.</p>

<p>If your tables get corrupted a lot you should try to find the
reason for this! See section <a href="manual.html#Crashing">A.4.1
What To Do If MySQL Keeps Crashing</a>.</p>

<p>In this case the most important thing to know is if the table
got corrupted if the <code>mysqld</code> died (one can easily
verify this by checking if there is a recent row <code>restarted
mysqld</code> in the mysqld error file). If this isn't the case,
then you should try to make a test case of this. See section <a
href="manual.html#Reproduceable_test_case">E.1.6 Making a Test Case
When You Experience Table Corruption</a>.</p>

<h4><a id="MyISAM_table_close" name="MyISAM_table_close"
href="manual_toc.html#MyISAM_table_close">7.1.3.2 Clients is using
or hasn't closed the table properly</a></h4>

<p>Each <code>MyISAM</code> <tt>`.MYI'</tt> file has in the header
a counter that can be used to check if a table has been closed
properly.</p>

<p>If you get the following warning from <code>CHECK TABLE</code>
or <code>myisamchk</code>:</p>

<pre>
# clients is using or hasn't closed the table properly
</pre>

<p>this means that this counter has come out of sync. This doesn't
mean that the table is corrupted, but means that you should at
least do a check on the table to verify that it's okay.</p>

<p>The counter works as follows:</p>

<ul>
<li>The first time a table is updated in MySQL, a counter in the
header of the index files is incremented.</li>

<li>The counter is not changed during further updates.</li>

<li>When the last instance of a table is closed (because of a
<code>FLUSH</code> or because there isn't room in the table cache)
the counter is decremented if the table has been updated at any
point.</li>

<li>When you repair the table or check the table and it was okay,
the counter is reset to 0.</li>

<li>To avoid problems with interaction with other processes that
may do a check on the table, the counter is not decremented on
close if it was 0.</li>
</ul>

<p>In other words, the only ways this can go out of sync are:</p>

<ul>
<li>The <code>MyISAM</code> tables are copied without a
<code>LOCK</code> and <code>FLUSH TABLES</code>.</li>

<li>MySQL has crashed between an update and the final close. (Note
that the table may still be okay, as MySQL always issues writes for
everything between each statement.)</li>

<li>Someone has done a <code>myisamchk --recover</code> or
<code>myisamchk --update-state</code>on a table that was in use by
<code>mysqld</code>.</li>

<li>Many <code>mysqld</code> servers are using the table and one
has done a <code>REPAIR</code> or <code>CHECK</code> of the table
while it was in use by another server. In this setup the
<code>CHECK</code> is safe to do (even if you will get the warning
from other servers), but <code>REPAIR</code> should be avoided as
it currently replaces the datafile with a new one, which is not
signaled to the other servers.</li>
</ul>

<h2><a id="MERGE" name="MERGE" href="manual_toc.html#MERGE">7.2
<code>MERGE</code> Tables</a></h2>

<p><a id="IDX1520" name="IDX1520"></a> <a id="IDX1521"
name="IDX1521"></a></p>

<p><code>MERGE</code> tables are new in MySQL Version 3.23.25. The
code is still in gamma, but should be resonable stable.</p>

<p>A <code>MERGE</code> table (also known as a
<code>MRG_MyISAM</code> table) is a collection of identical
<code>MyISAM</code> tables that can be used as one. You can only
<code>SELECT</code>, <code>DELETE</code>, and <code>UPDATE</code>
from the collection of tables. If you <code>DROP</code> the
<code>MERGE</code> table, you are only dropping the
<code>MERGE</code> specification.</p>

<p>Note that <code>DELETE FROM merge_table</code> used without a
<code>WHERE</code> will only clear the mapping for the table, not
delete everything in the mapped tables. (We plan to fix this in
4.1).</p>

<p>With identical tables we mean that all tables are created with
identical column and key information. You can't merge tables in
which the columns are packed differently, doesn't have exactly the
same columns, or have the keys in different order. However, some of
the tables can be compressed with <code>myisampack</code>. See
section <a href="manual.html#myisampack">4.7.4
<code>myisampack</code>, The MySQL Compressed Read-only Table
Generator</a>.</p>

<p>When you create a <code>MERGE</code> table, you will get a
<tt>`.frm'</tt> table definition file and a <tt>`.MRG'</tt> table
list file. The <tt>`.MRG'</tt> just contains a list of the index
files (<tt>`.MYI'</tt> files) that should be used as one. All used
tables must be in the same database as the <code>MERGE</code> table
itself.</p>

<p>For the moment, you need to have <code>SELECT</code>,
<code>UPDATE</code>, and <code>DELETE</code> privileges on the
tables you map to a <code>MERGE</code> table.</p>

<p><code>MERGE</code> tables can help you solve the following
problems:</p>

<ul>
<li>Easily manage a set of log tables. For example, you can put
data from different months into separate files, compress some of
them with <code>myisampack</code>, and then create a
<code>MERGE</code> to use these as one.</li>

<li>Give you more speed. You can split a big read-only table based
on some criteria and then put the different table part on different
disks. A <code>MERGE</code> table on this could be much faster than
using the big table. (You can, of course, also use a RAID to get
the same kind of benefits.)</li>

<li>Do more efficient searches. If you know exactly what you are
looking after, you can search in just one of the split tables for
some queries and use a <code>MERGE</code> table for others. You can
even have many different <code>MERGE</code> tables active, with
possible overlapping files.</li>

<li>More efficient repairs. It's easier to repair the individual
files that are mapped to a <code>MERGE</code> file than trying to
repair a really big file.</li>

<li>Instant mapping of many files as one. A <code>MERGE</code>
table uses the index of the individual tables. It doesn't need to
maintain an index of its one. This makes <code>MERGE</code> table
collections VERY fast to make or remap. Note that you must specify
the key definitions when you create a <code>MERGE</code>
table!.</li>

<li>If you have a set of tables that you join to a big table on
demand or batch, you should instead create a <code>MERGE</code>
table on them on demand. This is much faster and will save a lot of
disk space.</li>

<li>Go around the file-size limit for the operating system.</li>

<li>You can create an alias/synonym for a table by just using
<code>MERGE</code> over one table. There shouldn't be any really
notable performance impacts of doing this (only a couple of
indirect calls and <code>memcpy()</code> calls for each read).</li>
</ul>

<p>The disadvantages with <code>MERGE</code> tables are:</p>

<ul>
<li>You can only use identical <code>MyISAM</code> tables for a
<code>MERGE</code> table.</li>

<li><code>REPLACE</code> doesn't work.</li>

<li><code>MERGE</code> tables uses more file descriptors. If you
are using a <code>MERGE</code> table that maps over 10 tables and
10 users are using this, you are using 10*10 + 10 file descriptors.
(10 datafiles for 10 users and 10 shared index files.)</li>

<li>Key reads are slower. When you do a read on a key, the
<code>MERGE</code> storage engine will need to issue a read on all
underlying tables to check which one most closely matches the given
key. If you then do a "read-next" then the <code>MERGE</code>
storage engine will need to search the read buffers to find the
next key. Only when one key buffer is used up, the storage engine
will need to read the next key block. This makes <code>MERGE</code>
keys much slower on <code>eq_ref</code> searches, but not much
slower on <code>ref</code> searches. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</li>

<li>You can't do <code>DROP TABLE</code>, <code>ALTER TABLE</code>,
<code>DELETE FROM table_name</code> without a <code>WHERE</code>
clause, <code>REPAIR TABLE</code>, <code>TRUNCATE TABLE</code>,
<code>OPTIMIZE TABLE</code>, or <code>ANALYZE TABLE</code> on any
of the table that is mapped by a <code>MERGE</code> table that is
"open". If you do this, the <code>MERGE</code> table may still
refer to the original table and you will get unexpected results.
The easiest way to get around this deficiency is to issue the
<code>FLUSH TABLES</code> command, ensuring no <code>MERGE</code>
tables remain "open".</li>
</ul>

<p>When you create a <code>MERGE</code> table you have to specify
with <code>UNION(list-of-tables)</code> which tables you want to
use as one. Optionally you can specify with
<code>INSERT_METHOD</code> if you want insert for the
<code>MERGE</code> table to happen in the first or last table in
the <code>UNION</code> list. If you don't specify
<code>INSERT_METHOD</code> or specify <code>NO</code>, then all
<code>INSERT</code> commands on the <code>MERGE</code> table will
return an error.</p>

<p>The following example shows you how to use <code>MERGE</code>
tables:</p>

<pre>
CREATE TABLE t1 (a INT AUTO_INCREMENT PRIMARY KEY, message CHAR(20));
CREATE TABLE t2 (a INT AUTO_INCREMENT PRIMARY KEY, message CHAR(20));
INSERT INTO t1 (message) VALUES ("Testing"),("table"),("t1");
INSERT INTO t2 (message) VALUES ("Testing"),("table"),("t2");
CREATE TABLE total (a INT AUTO_INCREMENT PRIMARY KEY, message CHAR(20))
             TYPE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;
</pre>

<p>Note that you can also manipulate the <tt>`.MRG'</tt> file
directly from the outside of the MySQL server:</p>

<pre>
shell&gt; cd /mysql-data-directory/current-database
shell&gt; ls -1 t1.MYI t2.MYI &gt; total.MRG
shell&gt; mysqladmin flush-tables
</pre>

<p>Now you can do things like:</p>

<pre>
mysql&gt; SELECT * FROM total;
+---+---------+
| a | message |
+---+---------+
| 1 | Testing |
| 2 | table   |
| 3 | t1      |
| 1 | Testing |
| 2 | table   |
| 3 | t2      |
+---+---------+
</pre>

<p>Note that the <code>a</code> column, though declared as
<code>PRIMARY KEY</code>, is not really unique, as
<code>MERGE</code> table cannot enforce uniqueness over a set of
underlying <code>MyISAM</code> tables.</p>

<p>To remap a <code>MERGE</code> table you can do one of the
following:</p>

<ul>
<li><code>DROP</code> the table and re-create it</li>

<li>Use <code>ALTER TABLE table_name UNION(...)</code></li>

<li>Change the <tt>`.MRG'</tt> file and issue a <code>FLUSH
TABLE</code> on the <code>MERGE</code> table and all underlying
tables to force the storage engine to read the new definition
file.</li>
</ul>

<h3><a id="MERGE_table_problems" name="MERGE_table_problems"
href="manual_toc.html#MERGE_table_problems">7.2.1
<code>MERGE</code> Table Problems</a></h3>

<p>The following are the known problems with <code>MERGE</code>
tables:</p>

<ul>
<li>A <code>MERGE</code> table cannot maintain <code>UNIQUE</code>
constraints over the whole table. When you do <code>INSERT</code>,
the data goes into the first or last table (according to
<code>INSERT_METHOD=xxx</code>) and this <code>MyISAM</code> table
ensures that the data are unique, but it knows nothing about others
<code>MyISAM</code> tables.</li>

<li><code>DELETE FROM merge_table</code> used without a
<code>WHERE</code> will only clear the mapping for the table, not
delete everything in the mapped tables.</li>

<li><code>RENAME TABLE</code> on a table used in an active
<code>MERGE</code> table may corrupt the table. This will be fixed
in MySQL 4.0.x.</li>

<li>Creation of a table of type <code>MERGE</code> doesn't check if
the underlying tables are of compatible types. If you use
<code>MERGE</code> tables in this fashion, you are very likely to
run into strange problems.</li>

<li>If you use <code>ALTER TABLE</code> to first add an
<code>UNIQUE</code> index to a table used in a <code>MERGE</code>
table and then use <code>ALTER TABLE</code> to add a normal index
on the <code>MERGE</code> table, the key order will be different
for the tables if there was an old non-unique key in the table.
This is because <code>ALTER TABLE</code> puts <code>UNIQUE</code>
keys before normal keys to be able to detect duplicate keys as
early as possible.</li>

<li>The range optimiser can't yet use <code>MERGE</code> table
efficiently and may sometimes produce non-optimal joins. This will
be fixed in MySQL 4.0.x.</li>

<li><code>DROP TABLE</code> on a table that is in use by a
<code>MERGE</code> table will not work on Windows because the
<code>MERGE</code> storage engine does the table mapping hidden
from the upper layer of MySQL. Because Windows doesn't allow you to
drop files that are open, you first must flush all
<code>MERGE</code> tables (with <code>FLUSH TABLES</code>) or drop
the <code>MERGE</code> table before dropping the table. We will fix
this at the same time we introduce <code>VIEW</code>s.</li>
</ul>

<h2><a id="ISAM" name="ISAM" href="manual_toc.html#ISAM">7.3
<code>ISAM</code> Tables</a></h2>

<p><a id="IDX1522" name="IDX1522"></a></p>

<p>You can also use the deprecated <code>ISAM</code> table type.
This will disappear rather soon (probably in MySQL 5.0) because
<code>MyISAM</code> is a better implementation of the same thing.
<code>ISAM</code> uses a <code>B-tree</code> index. The index is
stored in a file with the <tt>`.ISM'</tt> extension, and the data
is stored in a file with the <tt>`.ISD'</tt> extension. You can
check/repair <code>ISAM</code> tables with the <code>isamchk</code>
utility. See section <a href="manual.html#Crash_recovery">4.4.6.7
Using <code>myisamchk</code> for Crash Recovery</a>.</p>

<p><code>ISAM</code> has the following features/properties:</p>

<ul>
<li>Compressed and fixed-length keys</li>

<li>Fixed and dynamic record length</li>

<li>16 keys with 16 key parts/key</li>

<li>Max key length 256 (default)</li>

<li>Data is stored in machine format; this is fast, but is
machine/OS dependent.</li>
</ul>

<p>Most of the things true for <code>MyISAM</code> tables are also
true for <code>ISAM</code> tables. See section <a
href="manual.html#MyISAM">7.1 <code>MyISAM</code> Tables</a>. The
major differences compared to <code>MyISAM</code> tables are:</p>

<ul>
<li><code>ISAM</code> tables are not binary portable across
OS/Platforms.</li>

<li>Can't handle tables &gt; 4G.</li>

<li>Only support prefix compression on strings.</li>

<li>Smaller key limits.</li>

<li>Dynamic tables get more fragmented.</li>

<li>Tables are compressed with <code>pack_isam</code> rather than
with <code>myisampack</code>.</li>
</ul>

<p>If you want to convert an <code>ISAM</code> table to a
<code>MyISAM</code> table so that you can use utilities such as
<code>mysqlcheck</code>, use an <code>ALTER TABLE</code>
statement:</p>

<pre>
mysql&gt; ALTER TABLE tbl_name TYPE = MYISAM;
</pre>

<p>The embedded MySQL versions doesn't support <code>ISAM</code>
tables.</p>

<h2><a id="HEAP" name="HEAP" href="manual_toc.html#HEAP">7.4
<code>HEAP</code> Tables</a></h2>

<p><a id="IDX1523" name="IDX1523"></a></p>

<p><code>HEAP</code> tables use a hashed index and are stored in
memory. This makes them very fast, but if MySQL crashes you will
lose all data stored in them. <code>HEAP</code> is very useful for
temporary tables!</p>

<p>The MySQL internal <code>HEAP</code> tables use 100% dynamic
hashing without overflow areas. There is no extra space needed for
free lists. <code>HEAP</code> tables also don't have problems with
delete + inserts, which normally is common with hashed tables:</p>

<pre>
mysql&gt; CREATE TABLE test TYPE=HEAP SELECT ip,SUM(downloads) AS down
    -&gt;                   FROM log_table GROUP BY ip;
mysql&gt; SELECT COUNT(ip),AVG(down) FROM test;
mysql&gt; DROP TABLE test;
</pre>

<p>Here are some things you should consider when you use
<code>HEAP</code> tables:</p>

<ul>
<li>You should always use specify <code>MAX_ROWS</code> in the
<code>CREATE</code> statement to ensure that you accidentally do
not use all memory.</li>

<li>Indexes will only be used with <code>=</code> and
<code>&lt;=&gt;</code> (but are VERY fast).</li>

<li><code>HEAP</code> tables can only use whole keys to search for
a row; compare this to <code>MyISAM</code> tables where any prefix
of the key can be used to find rows.</li>

<li><code>HEAP</code> tables use a fixed record length format.</li>

<li><code>HEAP</code> doesn't support
<code>BLOB</code>/<code>TEXT</code> columns.</li>

<li><code>HEAP</code> doesn't support <code>AUTO_INCREMENT</code>
columns.</li>

<li>Prior to MySQL 4.0.2, <code>HEAP</code> doesn't support an
index on a <code>NULL</code> column.</li>

<li>You can have non-unique keys in a <code>HEAP</code> table (this
isn't common for hashed tables).</li>

<li><code>HEAP</code> tables are shared between all clients (just
like any other table).</li>

<li>You can't search for the next entry in order (that is, to use
the index to do an <code>ORDER BY</code>).</li>

<li>Data for <code>HEAP</code> tables are allocated in small
blocks. The tables are 100% dynamic (on inserting). No overflow
areas and no extra key space are needed. Deleted rows are put in a
linked list and are reused when you insert new data into the
table.</li>

<li>You need enough extra memory for all <code>HEAP</code> tables
that you want to use at the same time.</li>

<li>To free memory, you should execute <code>DELETE FROM
heap_table</code>, <code>TRUNCATE heap_table</code> or <code>DROP
TABLE heap_table</code>.</li>

<li>MySQL cannot find out approximately how many rows there are
between two values (this is used by the range optimiser to decide
which index to use). This may affect some queries if you change a
<code>MyISAM</code> table to a <code>HEAP</code> table.</li>

<li>To ensure that you accidentally don't do anything foolish, you
can't create <code>HEAP</code> tables bigger than
<code>max_heap_table_size</code>.</li>
</ul>

<p>The memory needed for one row in a <code>HEAP</code> table
is:</p>

<pre>
SUM_OVER_ALL_KEYS(max_length_of_key + sizeof(char*) * 2)
+ ALIGN(length_of_row+1, sizeof(char*))
</pre>

<p><code>sizeof(char*)</code> is 4 on 32-bit machines and 8 on
64-bit machines.</p>

<h2><a id="InnoDB" name="InnoDB" href="manual_toc.html#InnoDB">7.5
<code>InnoDB</code> Tables</a></h2>

<h3><a id="InnoDB_overview" name="InnoDB_overview"
href="manual_toc.html#InnoDB_overview">7.5.1 InnoDB Tables
Overview</a></h3>

<p><a id="IDX1524" name="IDX1524"></a> <a id="IDX1525"
name="IDX1525"></a> <a id="IDX1526" name="IDX1526"></a></p>

<p>InnoDB provides MySQL with a transaction-safe (<code>ACID</code>
compliant) storage engine with commit, rollback, and crash recovery
capabilities. InnoDB does locking on row level and also provides an
Oracle-style consistent non-locking read in <code>SELECT</code>s.
These features increase multiuser concurrency and performance.
There is no need for lock escalation in InnoDB, because row level
locks in InnoDB fit in very small space. InnoDB tables support
<code>FOREIGN KEY</code> constraints as the first table type in
MySQL.</p>

<p>InnoDB has been designed for maximum performance when processing
large data volumes. Its CPU efficiency is probably not matched by
any other disk-based relational database engine.</p>

<p>Technically, InnoDB is a complete database backend placed under
MySQL. InnoDB has its own buffer pool for caching data and indexes
in main memory. InnoDB stores its tables and indexes in a
tablespace, which may consist of several files. This is different
from, for example, MyISAM tables where each table is stored as a
separate file. InnoDB tables can be of any size also on those
operating systems where file-size is limited to 2 GB.</p>

<p>You can find the latest information about InnoDB at <a
href="http://www.innodb.com/">http://www.innodb.com/</a>. The most
up-to-date version of the InnoDB manual is always placed there, and
you can also order commercial licenses and support for InnoDB.</p>

<p>InnoDB is currently (October 2001) used in production at several
large database sites requiring high performance. The famous
Internet news site Slashdot.org runs on InnoDB. Mytrix, Inc. stores
over 1 TB of data in InnoDB, and another site handles an average
load of 800 inserts/updates per second in InnoDB.</p>

<p>InnoDB tables are included in the MySQL source distribution
starting from 3.23.34a and are activated in the MySQL -Max binary.
For Windows the -Max binaries are contained in the standard
distribution.</p>

<p>If you have downloaded a binary version of MySQL that includes
support for InnoDB, simply follow the instructions of the MySQL
manual for installing a binary version of MySQL. If you already
have MySQL-3.23 installed, then the simplest way to install MySQL
-Max is to replace the server executable <tt>`mysqld'</tt> with the
corresponding executable in the -Max distribution. MySQL and MySQL
-Max differ only in the server executable. See section <a
href="manual.html#Installing_binary">2.2.7 Installing a MySQL
Binary Distribution</a>. See section <a
href="manual.html#mysqld-max">4.7.5 <code>mysqld-max</code>, An
Extended <code>mysqld</code> Server</a>.</p>

<p>To compile MySQL with InnoDB support, download MySQL-3.23.34a or
newer version from <a
href="http://www.mysql.com/">http://www.mysql.com/</a> and
configure MySQL with the <code>--with-innodb</code> option. See the
MySQL manual about installing a MySQL source distribution. See
section <a href="manual.html#Installing_source">2.3 Installing a
MySQL Source Distribution</a>.</p>

<pre>
cd /path/to/source/of/mysql-3.23.37
./configure --with-innodb
</pre>

<p>To use InnoDB you have to specify InnoDB startup options in your
<tt>`my.cnf'</tt> or <tt>`my.ini'</tt> file. The minimal way to
modify it is to add to the <code>[mysqld]</code> section the
line</p>

<pre>
innodb_data_file_path=ibdata:30M
</pre>

<p>but to get good performance it is best that you specify options
as recommended. See section <a
href="manual.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a>.</p>

<p>InnoDB is distributed under the GNU GPL License Version 2 (of
June 1991). In the source distribution of MySQL, InnoDB appears as
a subdirectory.</p>

<h3><a id="InnoDB_start" name="InnoDB_start"
href="manual_toc.html#InnoDB_start">7.5.2 InnoDB Startup
Options</a></h3>

<p>To use InnoDB tables in MySQL-Max-3.23 you MUST specify
configuration parameters in the <code>[mysqld]</code> section of
the configuration file <tt>`my.cnf'</tt>, or on Windows optionally
in <tt>`my.ini'</tt>.</p>

<p>At the minimum, in 3.23 you must specify
<code>innodb_data_file_path</code> where you specify the names and
the sizes of datafiles. If you do not mention
<code>innodb_data_home_dir</code> in <tt>`my.cnf'</tt> the default
is to create these files to the <code>datadir</code> of MySQL. If
you specify <code>innodb_data_home_dir</code> as an empty string,
then you can give absolute paths to your data files in
<code>innodb_data_file_path</code>. In MySQL-4.0 you do not need to
specify even <code>innodb_data_file_path</code>: the default for it
is to create an auto-extending 10 MB file <tt>`ibdata1'</tt> to the
<code>datadir</code> of MySQL. (In MySQL-4.0.0 and 4.0.1 the
datafile is 64 MB and not auto-extending.)</p>

<p>If you don't want to use <code>InnoDB</code> tables, you can add
the <code>skip-innodb</code> option to your MySQL option file.</p>

<p>But to get good performance you MUST explicitly set the InnoDB
parameters listed in the following examples.</p>

<p>Starting from versions 3.23.50 and 4.0.2 InnoDB allows the last
datafile on the <code>innodb_data_file_path</code> line to be
specified as <strong>auto-extending</strong>. The syntax for
<code>innodb_data_file_path</code> is then the following:</p>

<pre>
pathtodatafile:sizespecification;pathtodatafile:sizespecification;...
...  ;pathtodatafile:sizespecification[:autoextend[:max:sizespecification]]
</pre>

<p>If you specify the last datafile with the autoextend option,
InnoDB will extend the last datafile if it runs out of free space
in the tablespace. The increment is 8 MB at a time. An example:</p>

<pre>
innodb_data_home_dir =
innodb_data_file_path = /ibdata/ibdata1:100M:autoextend
</pre>

<p>instructs InnoDB to create just a single datafile whose initial
size is 100 MB and which is extended in 8 MB blocks when space runs
out. If the disk becomes full you may want to add another data file
to another disk, for example. Then you have to look the size of
<tt>`ibdata1'</tt>, round the size downward to the closest multiple
of 1024 * 1024 bytes (= 1 MB), and specify the rounded size of
<tt>`ibdata1'</tt> explicitly in
<code>innodb_data_file_path</code>. After that you can add another
datafile:</p>

<pre>
innodb_data_home_dir =
innodb_data_file_path = /ibdata/ibdata1:988M;/disk2/ibdata2:50M:autoextend
</pre>

<p>Be cautious on filesystems where the maximum file-size is 2 GB!
InnoDB is not aware of the OS maximum file-size. On those
filesystems you might want to specify the max size for the
datafile:</p>

<pre>
innodb_data_home_dir =
innodb_data_file_path = /ibdata/ibdata1:100M:autoextend:max:2000M
</pre>

<p><strong>A simple <tt>`my.cnf'</tt> example.</strong> Suppose you
have a computer with 128 MB RAM and one hard disk. Below is an
example of possible configuration parameters in <tt>`my.cnf'</tt>
or <tt>`my.ini'</tt> for InnoDB. We assume you are running
MySQL-Max-3.23.50 or later, or MySQL-4.0.2 or later. This example
suits most users, both on Unix and Windows, who do not want to
distribute InnoDB datafiles and log files on several disks. This
creates an auto-extending data file <tt>`ibdata1'</tt> and two
InnoDB log files <tt>`ib_logfile0'</tt> and <tt>`ib_logfile1'</tt>
to the <code>datadir</code> of MySQL (typically
<tt>`/mysql/data'</tt>). Also the small archived InnoDB log file
<tt>`ib_arch_log_0000000000'</tt> ends up in the
<code>datadir</code>.</p>

<pre>
[mysqld]
# You can write your other MySQL server options here
# ...
#                                  Data file(s) must be able to
#                                  hold your data and indexes.
#                                  Make sure you have enough
#                                  free disk space.
innodb_data_file_path = ibdata1:10M:autoextend
#                                  Set buffer pool size to
#                                  50 - 80 % of your computer's
#                                  memory
set-variable = innodb_buffer_pool_size=70M
set-variable = innodb_additional_mem_pool_size=10M
#                                  Set the log file size to about
#                                  25 % of the buffer pool size
set-variable = innodb_log_file_size=20M
set-variable = innodb_log_buffer_size=8M
#                                  Set ..flush_log_at_trx_commit
#                                  to 0 if you can afford losing
#                                  some last transactions 
innodb_flush_log_at_trx_commit=1
</pre>

<p><strong>Check that the MySQL server has the rights to create
files</strong> in <code>datadir</code>.</p>

<p>Note that datafiles must be &lt; 2G in some file systems! The
combined size of the log files must be &lt; 4G. The combined size
of datafiles must be &gt;= 10 MB.</p>

<p>When you for the first time create an InnoDB database, it is
best that you start the MySQL server from the command prompt. Then
InnoDB will print the information about the database creation to
the screen, and you see what is happening. See below next section
what the printout should look like. For example, in Windows you can
start <tt>`mysqld-max.exe'</tt> with:</p>

<pre>
your-path-to-mysqld&gt;mysqld-max --console
</pre>

<p><strong>Where to put <tt>`my.cnf'</tt> or <tt>`my.ini'</tt> in
Windows?</strong> The rules for Windows are the following:</p>

<ul>
<li>Only one of <tt>`my.cnf'</tt> or <tt>`my.ini'</tt> should be
created.</li>

<li>The <tt>`my.cnf'</tt> file should be placed in the root
directory of the drive <tt>`C:'</tt>.</li>

<li>The <tt>`my.ini'</tt> file should be placed in the WINDIR
directory, e.g, <tt>`C:\WINDOWS'</tt> or <tt>`C:\WINNT'</tt>. You
can use the <code>SET</code> command of MS-DOS to print the value
of WINDIR.</li>

<li>If your PC uses a boot loader where the <tt>`C:'</tt> drive is
not the boot drive, then your only option is to use the
<tt>`my.ini'</tt> file.</li>
</ul>

<p><strong>Where to specify options in Unix?</strong> On Unix
<tt>`mysqld'</tt> reads options from the following files, if they
exist, in the following order:</p>

<ul>
<li><tt>`/etc/my.cnf'</tt> Global options.</li>

<li><tt>`COMPILATION_DATADIR/my.cnf'</tt> Server-specific
options.</li>

<li><tt>`defaults-extra-file'</tt> The file specified with
<code>--defaults-extra-file=...</code>.</li>

<li><tt>`~/.my.cnf'</tt> User-specific options.</li>
</ul>

<p><tt>`COMPILATION_DATADIR'</tt> is the MySQL data directory which
was specified as a <code>./configure</code> option when
<tt>`mysqld'</tt> was compiled (typically
<tt>`/usr/local/mysql/data'</tt> for a binary installation or
<tt>`/usr/local/var'</tt> for a source installation).</p>

<p>If you are not sure from where <tt>`mysqld'</tt> reads its
<tt>`my.cnf'</tt> or <tt>`my.ini'</tt>, you can give the path as
the first command-line option to the server: <code>mysqld
--defaults-file=your_path_to_my_cnf</code>.</p>

<p>InnoDB forms the directory path to a datafile by textually
catenating <code>innodb_data_home_dir</code> to a datafile name or
path in <code>innodb_data_file_path</code>, adding a possible slash
or backslash in between if needed. If the keyword
<code>innodb_data_home_dir</code> is not mentioned in
<tt>`my.cnf'</tt> at all, the default for it is the 'dot' directory
<tt>`./'</tt> which means the <code>datadir</code> of MySQL.</p>

<p><strong>An advanced <tt>`my.cnf'</tt> example.</strong> Suppose
you have a Linux computer with 2 GB RAM and three 60 GB hard disks
(at directory paths <tt>`/'</tt>, <tt>`/dr2'</tt> and
<tt>`/dr3'</tt>). Below is an example of possible configuration
parameters in <tt>`my.cnf'</tt> for InnoDB.</p>

<p><strong>Note that InnoDB does not create directories: you have
to create them yourself.</strong> Use the Unix or MS-DOS
<code>mkdir</code> command to create the data and log group home
directories.</p>

<pre>
[mysqld]
# You can write your other MySQL server options here
# ...
innodb_data_home_dir =
#                                  Data files must be able to
#                                  hold your data and indexes
innodb_data_file_path = /ibdata/ibdata1:2000M;/dr2/ibdata/ibdata2:2000M:autoextend
#                                  Set buffer pool size to
#                                  50 - 80 % of your computer's
#                                  memory, but make sure on Linux
#                                  x86 total memory usage is
#                                  &lt; 2 GB
set-variable = innodb_buffer_pool_size=1G
set-variable = innodb_additional_mem_pool_size=20M
innodb_log_group_home_dir = /dr3/iblogs
#                                  .._log_arch_dir must be the same
#                                  as .._log_group_home_dir
innodb_log_arch_dir = /dr3/iblogs
set-variable = innodb_log_files_in_group=3
#                                  Set the log file size to about
#                                  15 % of the buffer pool size
set-variable = innodb_log_file_size=150M
set-variable = innodb_log_buffer_size=8M
#                                  Set ..flush_log_at_trx_commit to
#                                  0 if you can afford losing
#                                  some last transactions 
innodb_flush_log_at_trx_commit=1
set-variable = innodb_lock_wait_timeout=50
#innodb_flush_method=fdatasync
#set-variable = innodb_thread_concurrency=5
</pre>

<p>Note that we have placed the two datafiles on different disks.
InnoDB will fill the tablespace formed by the datafiles from bottom
up. In some cases it will improve the performance of the database
if all data is not placed on the same physical disk. Putting log
files on a different disk from data is very often beneficial for
performance. You can also use <strong>raw disk partitions</strong>
(raw devices) as datafiles. In some Unixes they speed up I/O. See
the manual section on InnoDB file space management about how to
specify them in <tt>`my.cnf'</tt>.</p>

<p><strong>Warning</strong>: on Linux x86 you must be careful you
<strong>do not set memory usage too high</strong>. glibc will allow
the process heap to grow over thread stacks, which will crash your
server. It is a risk if the value of</p>

<pre>
innodb_buffer_pool_size + key_buffer +
max_connections * (sort_buffer + read_buffer_size) + max_connections * 2 MB
</pre>

<p>is close to 2 GB or exceeds 2 GB. Each thread will use a stack
(often 2 MB, but in MySQL AB binaries only 256 kB) and in the worst
case also <code>sort_buffer + read_buffer_size</code> additional
memory.</p>

<p><strong>How to tune other <tt>`mysqld'</tt> server
parameters?</strong> Typical values which suit most users are:</p>

<pre>
skip-locking
set-variable = max_connections=200
set-variable = read_buffer_size=1M
set-variable = sort_buffer=1M
#                                  Set key_buffer to 5 - 50%
#                                  of your RAM depending on how
#                                  much you use MyISAM tables, but
#                                  keep key_buffer + InnoDB
#                                  buffer pool size &lt; 80% of
#                                  your RAM
set-variable = key_buffer=...
</pre>

<p>Note that some parameters are given using the numeric
<tt>`my.cnf'</tt> parameter format: <code>set-variable = innodb...
= 123</code>, others (string and boolean parameters) with another
format: <code>innodb_... = ...</code> .</p>

<p>The meanings of the configuration parameters are the
following:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>innodb_data_home_dir</code></td>
<td>The common part of the directory path for all InnoDB datafiles.
If you do not mentioned this option in <tt>`my.cnf'</tt> the
default is the <code>datadir</code> of MySQL. You can specify this
also as an empty string, in which case you can use absolute file
paths in <code>innodb_data_file_path</code>.</td>
</tr>

<tr>
<td><code>innodb_data_file_path</code></td>
<td>Paths to individual datafiles and their sizes. The full
directory path to each datafile is acquired by concatenating
innodb_data_home_dir to the paths specified here. The file-sizes
are specified in megabytes, hence the 'M' after the size
specification above. InnoDB also understands the abbreviation 'G',
1G meaning 1024M. Starting from 3.23.44 you can set the file-size
bigger than 4 GB on those operating systems which support big
files. On some operating systems files must be &lt; 2 GB. The sum
of the sizes of the files must be at least 10 MB.</td>
</tr>

<tr>
<td><code>innodb_mirrored_log_groups</code></td>
<td>Number of identical copies of log groups we keep for the
database. Currently this should be set to 1.</td>
</tr>

<tr>
<td><code>innodb_log_group_home_dir</code></td>
<td>Directory path to InnoDB log files.</td>
</tr>

<tr>
<td><code>innodb_log_files_in_group</code></td>
<td>Number of log files in the log group. InnoDB writes to the
files in a circular fashion. Value 3 is recommended here.</td>
</tr>

<tr>
<td><code>innodb_log_file_size</code></td>
<td>Size of each log file in a log group in megabytes. Sensible
values range from 1M to 1/nth of the size of the buffer pool
specified below, where n is the number of log files in the group.
The bigger the value, the less checkpoint flush activity is needed
in the buffer pool, saving disk I/O. But bigger log files also mean
that recovery will be slower in case of a crash. The combined size
of log files must be &lt; 4 GB on 32-bit computers.</td>
</tr>

<tr>
<td><code>innodb_log_buffer_size</code></td>
<td>The size of the buffer which InnoDB uses to write log to the
log files on disk. Sensible values range from 1M to 8M. A big log
buffer allows large transactions to run without a need to write the
log to disk until the transaction commit. Thus, if you have big
transactions, making the log buffer big will save disk I/O.</td>
</tr>

<tr>
<td><code>innodb_flush_log_at_trx_commit</code></td>
<td>Normally this is set to 1, meaning that at a transaction commit
the log is flushed to disk, and the modifications made by the
transaction become permanent, and survive a database crash. If you
are willing to compromise this safety, and you are running small
transactions, you may set this to 0 to reduce disk I/O to the
logs.</td>
</tr>

<tr>
<td><code>innodb_log_arch_dir</code></td>
<td>The directory where fully written log files would be archived
if we used log archiving. The value of this parameter should
currently be set the same as
<code>innodb_log_group_home_dir</code>.</td>
</tr>

<tr>
<td><code>innodb_log_archive</code></td>
<td>This value should currently be set to 0. As recovery from a
backup is done by MySQL using its own log files, there is currently
no need to archive InnoDB log files.</td>
</tr>

<tr>
<td><code>innodb_buffer_pool_size</code></td>
<td>The size of the memory buffer InnoDB uses to cache data and
indexes of its tables. The bigger you set this the less disk I/O is
needed to access data in tables. On a dedicated database server you
may set this parameter up to 80% of the machine physical memory
size. Do not set it too large, though, because competition of the
physical memory may cause paging in the operating system.</td>
</tr>

<tr>
<td><code>innodb_additional_mem_pool_size</code></td>
<td>Size of a memory pool InnoDB uses to store data dictionary
information and other internal data structures. A sensible value
for this might be 2M, but the more tables you have in your
application the more you will need to allocate here. If InnoDB runs
out of memory in this pool, it will start to allocate memory from
the operating system, and write warning messages to the MySQL error
log.</td>
</tr>

<tr>
<td><code>innodb_file_io_threads</code></td>
<td>Number of file I/O threads in InnoDB. Normally, this should be
4, but on Windows disk I/O may benefit from a larger number.</td>
</tr>

<tr>
<td><code>innodb_lock_wait_timeout</code></td>
<td>Timeout in seconds an InnoDB transaction may wait for a lock
before being rolled back. InnoDB automatically detects transaction
deadlocks in its own lock table and rolls back the transaction. If
you use <code>LOCK TABLES</code> command, or other transaction-safe
storage engines than InnoDB in the same transaction, then a
deadlock may arise which InnoDB cannot notice. In cases like this
the timeout is useful to resolve the situation.</td>
</tr>

<tr>
<td><code>innodb_flush_method</code></td>
<td>(Available from 3.23.40 up.) The default value for this is
<code>fdatasync</code>. Another option is
<code>O_DSYNC</code>.</td>
</tr>
</table>

<h3><a id="InnoDB_init" name="InnoDB_init"
href="manual_toc.html#InnoDB_init">7.5.3 Creating InnoDB
Tablespace</a></h3>

<p>Suppose you have installed MySQL and have edited
<tt>`my.cnf'</tt> so that it contains the necessary InnoDB
configuration parameters. Before starting MySQL you should check
that the directories you have specified for InnoDB datafiles and
log files exist and that you have access rights to those
directories. InnoDB cannot create directories, only files. Check
also you have enough disk space for the data and log files.</p>

<p>When you now start MySQL, InnoDB will start creating your
datafiles and log files. InnoDB will print something like the
following:</p>

<pre>
~/mysqlm/sql &gt; mysqld
InnoDB: The first specified datafile /home/heikki/data/ibdata1
did not exist:
InnoDB: a new database to be created!
InnoDB: Setting file /home/heikki/data/ibdata1 size to 134217728
InnoDB: Database physically writes the file full: wait...
InnoDB: datafile /home/heikki/data/ibdata2 did not exist:
new to be created
InnoDB: Setting file /home/heikki/data/ibdata2 size to 262144000
InnoDB: Database physically writes the file full: wait...
InnoDB: Log file /home/heikki/data/logs/ib_logfile0 did not exist:
new to be created
InnoDB: Setting log file /home/heikki/data/logs/ib_logfile0 size to 5242880
InnoDB: Log file /home/heikki/data/logs/ib_logfile1 did not exist:
new to be created
InnoDB: Setting log file /home/heikki/data/logs/ib_logfile1 size to 5242880
InnoDB: Log file /home/heikki/data/logs/ib_logfile2 did not exist:
new to be created
InnoDB: Setting log file /home/heikki/data/logs/ib_logfile2 size to 5242880
InnoDB: Started
mysqld: ready for connections
</pre>

<p>A new InnoDB database has now been created. You can connect to
the MySQL server with the usual MySQL client programs like
<code>mysql</code>. When you shut down the MySQL server with
<tt>`mysqladmin shutdown'</tt>, InnoDB output will be like the
following:</p>

<pre>
010321 18:33:34  mysqld: Normal shutdown
010321 18:33:34  mysqld: Shutdown Complete
InnoDB: Starting shutdown...
InnoDB: Shutdown completed
</pre>

<p>You can now look at the datafiles and logs directories and you
will see the files created. The log directory will also contain a
small file named <tt>`ib_arch_log_0000000000'</tt>. That file
resulted from the database creation, after which InnoDB switched
off log archiving. When MySQL is again started, the output will be
like the following:</p>

<pre>
~/mysqlm/sql &gt; mysqld
InnoDB: Started
mysqld: ready for connections
</pre>

<h4><a id="Error_creating_InnoDB" name="Error_creating_InnoDB"
href="manual_toc.html#Error_creating_InnoDB">7.5.3.1 If Something
Goes Wrong in Database Creation</a></h4>

<p>If InnoDB prints an operating system error in a file operation,
usually the problem is one of the following:</p>

<ul>
<li>You did not create InnoDB data or log directories.</li>

<li><tt>`mysqld'</tt> does not have the rights to create files in
those directories.</li>

<li><tt>`mysqld'</tt> does not read the right <tt>`my.cnf'</tt> or
<tt>`my.ini'</tt> file, and consequently does not see the options
you specified.</li>

<li>The disk is full or a disk quota is exceeded.</li>

<li>You have created a subdirectory whose name is equal to a
datafile you specified.</li>

<li>There is a syntax error in <code>innodb_data_home_dir</code> or
<code>innodb_data_file_path</code>.</li>
</ul>

<p>If something goes wrong in an InnoDB database creation, you
should delete all files created by InnoDB. This means all
datafiles, all log files, the small archived log file, and in the
case you already did create some InnoDB tables, delete also the
corresponding <tt>`.frm'</tt> files for these tables from the MySQL
database directories. Then you can try the InnoDB database creation
again.</p>

<h3><a id="Using_InnoDB_tables" name="Using_InnoDB_tables"
href="manual_toc.html#Using_InnoDB_tables">7.5.4 Creating InnoDB
Tables</a></h3>

<p>Suppose you have started the MySQL client with the command
<code>mysql test</code>. To create a table in the InnoDB format you
must specify <code>TYPE = InnoDB</code> in the table creation SQL
command:</p>

<pre>
CREATE TABLE CUSTOMER (A INT, B CHAR (20), INDEX (A)) TYPE = InnoDB;
</pre>

<p>This SQL command will create a table and an index on column
<code>A</code> into the InnoDB tablespace consisting of the
datafiles you specified in <tt>`my.cnf'</tt>. In addition MySQL
will create a file <tt>`CUSTOMER.frm'</tt> to the MySQL database
directory <tt>`test'</tt>. Internally, InnoDB will add to its own
data dictionary an entry for table <code>'test/CUSTOMER'</code>.
Thus you can create a table of the same name <code>CUSTOMER</code>
in another database of MySQL, and the table names will not collide
inside InnoDB.</p>

<p>You can query the amount of free space in the InnoDB tablespace
by issuing the table status command of MySQL for any table you have
created with <code>TYPE = InnoDB</code>. Then the amount of free
space in the tablespace appears in the table comment section in the
output of <code>SHOW</code>. An example:</p>

<pre>
SHOW TABLE STATUS FROM test LIKE 'CUSTOMER'
</pre>

<p>Note that the statistics <code>SHOW</code> gives about InnoDB
tables are only approximate: they are used in SQL optimisation.
Table and index reserved sizes in bytes are accurate, though.</p>

<h4><a id="SEC449" name="SEC449"
href="manual_toc.html#SEC449">7.5.4.1 Converting MyISAM Tables to
InnoDB</a></h4>

<p>InnoDB does not have a special optimisation for separate index
creation. Therefore it does not pay to export and import the table
and create indexes afterwards. The fastest way to alter a table to
InnoDB is to do the inserts directly to an InnoDB table, that is,
use <code>ALTER TABLE ... TYPE=INNODB</code>, or create an empty
InnoDB table with identical definitions and insert the rows with
<code>INSERT INTO ... SELECT * FROM ...</code>.</p>

<p>To get better control over the insertion process, it may be good
to insert big tables in pieces:</p>

<pre>
INSERT INTO newtable SELECT * FROM oldtable
   WHERE yourkey &gt; something AND yourkey &lt;= somethingelse;
</pre>

<p>After all data has been inserted you can rename the tables.</p>

<p>During the conversion of big tables you should set the InnoDB
buffer pool size big to reduce disk I/O. Not bigger than 80% of the
physical memory, though. You should set InnoDB log files big, and
also the log buffer large.</p>

<p>Make sure you do not run out of tablespace: InnoDB tables take a
lot more space than MyISAM tables. If an <code>ALTER TABLE</code>
runs out of space, it will start a rollback, and that can take
hours if it is disk-bound. In inserts InnoDB uses the insert buffer
to merge secondary index records to indexes in batches. That saves
a lot of disk I/O. In rollback no such mechanism is used, and the
rollback can take 30 times longer than the insertion.</p>

<p>In the case of a runaway rollback, if you do not have valuable
data in your database, it is better that you kill the database
process and delete all InnoDB data and log files and all InnoDB
table <tt>`.frm'</tt> files, and start your job again, rather than
wait for millions of disk I/Os to complete.</p>

<h4><a id="SEC450" name="SEC450"
href="manual_toc.html#SEC450">7.5.4.2 Foreign Key
Constraints</a></h4>

<p>Starting from version 3.23.43b InnoDB features foreign key
constraints. InnoDB is the first MySQL table type which allows you
to define foreign key constraints to guard the integrity of your
data.</p>

<p>The syntax of a foreign key constraint definition in InnoDB:</p>

<pre>
[CONSTRAINT symbol] FOREIGN KEY (index_col_name, ...)
                  REFERENCES table_name (index_col_name, ...)
                  [ON DELETE {CASCADE | SET NULL | NO ACTION
                              | RESTRICT}]
                  [ON UPDATE {CASCADE | SET NULL | NO ACTION
                              | RESTRICT}]
</pre>

<p>Both tables have to be InnoDB type and <strong>there must be an
index where the foreign key and the referenced key are listed as
the FIRST columns</strong>. InnoDB does not auto-create indexes on
foreign keys or referenced keys: you have to create them
explicitly.</p>

<p>Corresponding columns in the foreign key and the referenced key
must have similar internal data types inside InnoDB so that they
can be compared without a type conversion. The <strong>size and the
signedness of integer types has to be the same</strong>. The length
of string types need not be the same. If you specify a <code>SET
NULL</code> action, make sure you have <strong>not declared the
columns in the child table</strong> <code>NOT NULL</code>.</p>

<p>If MySQL gives the error number 1005 from a <code>CREATE
TABLE</code> statement, and the error message string refers to
errno 150, then the table creation failed because a foreign key
constraint was not correctly formed. Similarly, if an <code>ALTER
TABLE</code> fails and it refers to errno 150, that means a foreign
key definition would be incorrectly formed for the altered
table.</p>

<p>Starting from version 3.23.50 you can also associate the
<code>ON DELETE CASCADE</code> or <code>ON DELETE SET NULL</code>
clause with the foreign key constraint. Starting from version 4.0.8
you can use also similar <code>ON UPDATE</code> actions.</p>

<p>If <code>ON DELETE CASCADE</code> is specified, and a row in the
parent table is deleted, then InnoDB automatically deletes also all
those rows in the child table whose foreign key values are equal to
the referenced key value in the parent row. If <code>ON DELETE SET
NULL</code> is specified, the child rows are automatically updated
so that the columns in the foreign key are set to the SQL NULL
value.</p>

<p>Starting from version 3.23.50, InnoDB does not check foreign key
constraints on those foreign key or referenced key values which
contain a NULL column.</p>

<p>Starting from version 3.23.50 the InnoDB parser allows you to
use backquotes (`) around table and column names in the
<code>FOREIGN KEY ... REFERENCES ...</code> clause but the InnoDB
parser is not yet aware of the option
<code>lower_case_table_names</code> you can specify in
<tt>`my.cnf'</tt>.</p>

<p>An example:</p>

<pre>
CREATE TABLE parent(id INT NOT NULL, PRIMARY KEY (id)) TYPE=INNODB;
CREATE TABLE child(id INT, parent_id INT, INDEX par_ind (parent_id),
             FOREIGN KEY (parent_id) REFERENCES parent(id)
             ON DELETE SET NULL
) TYPE=INNODB;
</pre>

<p>Starting from version 3.23.50 InnoDB allows you to add a new
foreign key constraint to a table through</p>

<pre>
ALTER TABLE yourtablename
ADD [CONSTRAINT symbol] FOREIGN KEY (...) REFERENCES anothertablename(...)
[on_delete_and_on_update_actions]
</pre>

<p>Remember to create the required indexes first, though. In InnoDB
versions &lt; 3.23.50 <code>ALTER TABLE</code> or <code>CREATE
INDEX</code> should not be used in connection with tables which
have foreign key constraints or which are referenced in foreign key
constraints: Any <code>ALTER TABLE</code> removes all foreign key
constrainst defined for the table. You should not use <code>ALTER
TABLE</code> to the referenced table either, but use <code>DROP
TABLE</code> and <code>CREATE TABLE</code> to modify the schema.
When MySQL does an <code>ALTER TABLE</code> it may internally use
<code>RENAME TABLE</code>, and that will confuse the foreign key
costraints which refer to the table. A <code>CREATE INDEX</code>
statement is in MySQL processed as an <code>ALTER TABLE</code>, and
these restrictions apply also to it.</p>

<p>When doing foreign key checks InnoDB sets shared row level locks
on child or parent records it has to look at. InnoDB checks foreign
key constraints immediately: the check is not deferred to
transaction commit.</p>

<p>InnoDB allows you to drop any table even though that would break
the foreign key constraints which reference the table. When you
drop a table the constraints which were defined in its create
statement are also dropped.</p>

<p>If you re-create a table which was dropped, it has to have a
definition which conforms to the foreign key constraints
referencing it. It must have the right column names and types, and
it must have indexes on the referenced keys, as stated above. If
these are not satisfied, MySQL returns error number 1005 and refers
to errno 150 in the error message string.</p>

<p>Starting from version 3.23.50 InnoDB returns the foreign key
definitions of a table when you call</p>

<pre>
SHOW CREATE TABLE yourtablename
</pre>

<p>Then also <tt>`mysqldump'</tt> produces correct definitions of
tables to the dump file, and does not forget about the foreign
keys.</p>

<p>You can also list the foreign key constraints for a table
<code>T</code> with</p>

<pre>
SHOW TABLE STATUS FROM yourdatabasename LIKE 'T'
</pre>

<p>The foreign key constraints are listed in the table comment of
the output.</p>

<h3><a id="Adding_and_removing" name="Adding_and_removing"
href="manual_toc.html#Adding_and_removing">7.5.5 Adding and
Removing InnoDB Data and Log Files</a></h3>

<p>From version 3.23.50 and 4.0.2 you can specify the last InnoDB
datafile to <code>autoextend</code>. Alternatively, you can
increase to your tablespace by specifying an additional datafile.
To do this you have to shut down the MySQL server, edit the
<tt>`my.cnf'</tt> file adding a new datafile to
<code>innodb_data_file_path</code>, and then start the MySQL server
again.</p>

<p>Currently you cannot remove a datafile from InnoDB. To decrease
the size of your database you have to use <tt>`mysqldump'</tt> to
dump all your tables, create a new database, and import your tables
to the new database.</p>

<p>If you want to change the number or the size of your InnoDB log
files, you have to shut down MySQL and make sure that it shuts down
without errors. Then copy the old log files into a safe place just
in case something went wrong in the shutdown and you will need them
to recover the database. Delete then the old log files from the log
file directory, edit <tt>`my.cnf'</tt>, and start MySQL again.
InnoDB will tell you at the startup that it is creating new log
files.</p>

<h3><a id="Backing_up" name="Backing_up"
href="manual_toc.html#Backing_up">7.5.6 Backing up and Recovering
an InnoDB Database</a></h3>

<p>The key to safe database management is taking regular
backups.</p>

<p>InnoDB Hot Backup is an online backup tool you can use to backup
your InnoDB database while it is running. InnoDB Hot Backup does
not require you to shut down your database and it does not set any
locks or disturb your normal database processing. InnoDB Hot Backup
is a non-free additional tool which is not included in the standard
MySQL distribution. See the InnoDB Hot Backup homepage <a
href="http://www.innodb.com/hotbackup.html">http://www.innodb.com/hotbackup.html</a>
for detailed information and screenshots.</p>

<p>If you are able to shut down your MySQL server, then to take a
'binary' backup of your database you have to do the following:</p>

<ul>
<li>Shut down your MySQL database and make sure it shuts down
without errors.</li>

<li>Copy all your datafiles into a safe place.</li>

<li>Copy all your InnoDB log files to a safe place.</li>

<li>Copy your <tt>`my.cnf'</tt> configuration file(s) to a safe
place.</li>

<li>Copy all the <tt>`.frm'</tt> files for your InnoDB tables into
a safe place.</li>
</ul>

<p>In addition to taking the binary backups described above, you
should also regularly take dumps of your tables with
<tt>`mysqldump'</tt>. The reason to this is that a binary file may
be corrupted without you noticing it. Dumped tables are stored into
text files which are human-readable and much simpler than database
binary files. Seeing table corruption from dumped files is easier,
and since their format is simpler, the chance for serious data
corruption in them is smaller.</p>

<p>A good idea is to take the dumps at the same time you take a
binary backup of your database. You have to shut out all clients
from your database to get a consistent snapshot of all your tables
into your dumps. Then you can take the binary backup, and you will
then have a consistent snapshot of your database in two
formats.</p>

<p>To be able to recover your InnoDB database to the present from
the binary backup described above, you have to run your MySQL
database with the general logging and log archiving of MySQL
switched on. Here by the general logging we mean the logging
mechanism of the MySQL server which is independent of InnoDB
logs.</p>

<p>To recover from a crash of your MySQL server process, the only
thing you have to do is to restart it. InnoDB will automatically
check the logs and perform a roll-forward of the database to the
present. InnoDB will automatically roll back uncommitted
transactions which were present at the time of the crash. During
recovery, InnoDB will print out something like the following:</p>

<pre>
~/mysqlm/sql &gt; mysqld
InnoDB: Database was not shut down normally.
InnoDB: Starting recovery from log files...
InnoDB: Starting log scan based on checkpoint at
InnoDB: log sequence number 0 13674004
InnoDB: Doing recovery: scanned up to log sequence number 0 13739520
InnoDB: Doing recovery: scanned up to log sequence number 0 13805056
InnoDB: Doing recovery: scanned up to log sequence number 0 13870592
InnoDB: Doing recovery: scanned up to log sequence number 0 13936128
...
InnoDB: Doing recovery: scanned up to log sequence number 0 20555264
InnoDB: Doing recovery: scanned up to log sequence number 0 20620800
InnoDB: Doing recovery: scanned up to log sequence number 0 20664692
InnoDB: 1 uncommitted transaction(s) which must be rolled back
InnoDB: Starting rollback of uncommitted transactions
InnoDB: Rolling back trx no 16745
InnoDB: Rolling back of trx no 16745 completed
InnoDB: Rollback of uncommitted transactions completed
InnoDB: Starting an apply batch of log records to the database...
InnoDB: Apply batch completed
InnoDB: Started
mysqld: ready for connections
</pre>

<p>If your database gets corrupted or your disk fails, you have to
do the recovery from a backup. In the case of corruption, you
should first find a backup which is not corrupted. From a backup do
the recovery from the general log files of MySQL according to
instructions in the MySQL manual.</p>

<h4><a id="InnoDB_checkpoints" name="InnoDB_checkpoints"
href="manual_toc.html#InnoDB_checkpoints">7.5.6.1
Checkpoints</a></h4>

<p>InnoDB implements a checkpoint mechanism called a fuzzy
checkpoint. InnoDB will flush modified database pages from the
buffer pool in small batches, there is no need to flush the buffer
pool in one single batch, which would in practice stop processing
of user SQL statements for a while.</p>

<p>In crash recovery InnoDB looks for a checkpoint label written to
the log files. It knows that all modifications to the database
before the label are already present on the disk image of the
database. Then InnoDB scans the log files forward from the place of
the checkpoint applying the logged modifications to the
database.</p>

<p>InnoDB writes to the log files in a circular fashion. All
committed modifications which make the database pages in the buffer
pool different from the images on disk must be available in the log
files in case InnoDB has to do a recovery. This means that when
InnoDB starts to reuse a log file in the circular fashion, it has
to make sure that the database page images on disk already contain
the modifications logged in the log file InnoDB is going to reuse.
In other words, InnoDB has to make a checkpoint and often this
involves flushing of modified database pages to disk.</p>

<p>The above explains why making your log files very big may save
disk I/O in checkpointing. It can make sense to set the total size
of the log files as big as the buffer pool or even bigger. The
drawback in big log files is that crash recovery can last longer
because there will be more log to apply to the database.</p>

<h3><a id="Moving" name="Moving"
href="manual_toc.html#Moving">7.5.7 Moving an InnoDB Database to
Another Machine</a></h3>

<p>InnoDB data and log files are binary-compatible on all platforms
if the floating-point number format on the machines is the same.
You can move an InnoDB database simply by copying all the relevant
files, which we already listed in the previous section on backing
up a database. If the floating-point formats on the machines are
different but you have not used <code>FLOAT</code> or
<code>DOUBLE</code> data types in your tables then the procedure is
the same: just copy the relevant files. If the formats are
different and your tables contain floating-point data, you have to
use <tt>`mysqldump'</tt> and <tt>`mysqlimport'</tt> to move those
tables.</p>

<p>A performance tip is to switch off auto-commit mode when you
import data into your database, assuming your tablespace has enough
space for the big rollback segment the big import transaction will
generate. Do the commit only after importing a whole table or a
segment of a table.</p>

<h3><a id="InnoDB_transaction_model"
name="InnoDB_transaction_model"
href="manual_toc.html#InnoDB_transaction_model">7.5.8 InnoDB
Transaction Model</a></h3>

<p>In the InnoDB transaction model the goal has been to combine the
best properties of a multi-versioning database to traditional
two-phase locking. InnoDB does locking on row level and runs
queries by default as non-locking consistent reads, in the style of
Oracle. The lock table in InnoDB is stored so space-efficiently
that lock escalation is not needed: typically several users are
allowed to lock every row in the database, or any random subset of
the rows, without InnoDB running out of memory.</p>

<p>In InnoDB all user activity happens inside transactions. If the
autocommit mode is used in MySQL, then each SQL statement will form
a single transaction. MySQL always starts a new connection with the
autocommit mode switched on.</p>

<p>If the autocommit mode is switched off with <code>SET AUTOCOMMIT
= 0</code>, then we can think that a user always has a transaction
open. If he issues the SQL <code>COMMIT</code> or
<code>ROLLBACK</code> statement, it ends the current transaction,
and a new starts. Both statements will release all InnoDB locks
that were set during the current transaction. A <code>COMMIT</code>
means that the changes made in the current transaction are made
permanent and become visible to other users. A
<code>ROLLBACK</code>, on the other hand, cancels all modifications
made by the current transaction.</p>

<p>If the connection has <code>AUTOCOMMIT = 1</code>, then the user
can still perform a multi-statement transaction by starting it with
<code>BEGIN</code> and ending it with <code>COMMIT</code> or
<code>ROLLBACK</code>.</p>

<p>In terms of the SQL-1992 transaction isolation levels, the
InnoDB default is <code>REPEATABLE READ</code>. Starting from
version 4.0.5, InnoDB offers all 4 different transaction isolation
levels described by the SQL-1992 standard. You can set the default
isolation level for all connections in the <code>[mysqld]</code>
section of <tt>`my.cnf'</tt>:</p>

<pre>
transaction-isolation = {READ-UNCOMMITTED | READ-COMMITTED
                         | REPEATABLE-READ | SERIALIZABLE}

</pre>

<p>A user can change the isolation level of a single session or all
new incoming connections with the</p>

<pre>
SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL
                       {READ UNCOMMITTED | READ COMMITTED
                        | REPEATABLE READ | SERIALIZABLE}
</pre>

<p>SQL statement. Note that there are no hyphens in level names in
the SQL syntax. If you specify the keyword <code>GLOBAL</code> in
the above statement, it will determine the initial isolation level
of new incoming connections, but will not change the isolation
level of old connections. Any user is free to change the isolation
level of his session, even in the middle of a transaction. In
versions &lt; 3.23.50 <code>SET TRANSACTION</code> had no effect on
InnoDB tables. In versions &lt; 4.0.5 only <code>REPEATABLE
READ</code> and <code>SERIALIZABLE</code> were available.</p>

<p>You can query the global and session transaction isolation
levels with:</p>

<pre>
SELECT @@global.tx_isolation;
SELECT @@tx_isolation;
</pre>

<p>In row level locking InnoDB uses so-called next-key locking.
That means that besides index records, InnoDB can also lock the
'gap' before an index record to block insertions by other users
immediately before the index record. A next-key lock means a lock
which locks an index record and the gap before it. A gap lock means
a lock which only locks a gap before some index record.</p>

<p>A detailed description of each isolation level in InnoDB:</p>

<ul>
<li><code>READ UNCOMMITTED</code> This is also called 'dirty read':
non-locking <code>SELECT</code>s are performed so that we do not
look at a possible earlier version of a record; thus they are not
'consistent' reads under this isolation level; otherwise this level
works like <code>READ COMMITTED</code>.</li>

<li><code>READ COMMITTED</code> Somewhat Oracle-like isolation
level. All <code>SELECT ... FOR UPDATE</code> and <code>SELECT ...
LOCK IN SHARE MODE</code> statements only lock the index records,
NOT the gaps before them, and thus allow free inserting of new
records next to locked records. <code>UPDATE</code> and
<code>DELETE</code> which use a unique index with a unique search
condition, only lock the index record found, not the gap before it.
But still in range type <code>UPDATE</code> and <code>DELETE</code>
InnoDB must set next-key or gap locks and block insertions by other
users to the gaps covered by the range. This is necessary since
'phantom rows' have to be blocked for MySQL replication and
recovery to work. <strong>Consistent reads</strong> behave like in
Oracle: each consistent read, even within the same transaction,
sets and reads its own fresh snapshot.</li>

<li><code>REPEATABLE READ</code> This is the default isolation
level of InnoDB. <code>SELECT ... FOR UPDATE</code>, <code>SELECT
... LOCK IN SHARE MODE</code>, <code>UPDATE</code>, and
<code>DELETE</code> which use a unique index with a unique search
condition, only lock the index record found, not the gap before it.
Otherwise these operations employ next-key locking, locking the
index range scanned with next-key or gap locks, and block new
insertions by other users. In <strong>consistent reads</strong>
there is an important difference from the previous isolation level:
in this level all consistent reads within the same transaction read
the same snapshot established by the first read. This convention
means that if you issue several plain <code>SELECT</code>s within
the same transaction, these <code>SELECT</code>s are consistent
also with respect to each other.</li>

<li><code>SERIALIZABLE</code> This level is like the previous one,
but all plain <code>SELECT</code>s are implicitly converted to
<code>SELECT ... LOCK IN SHARE MODE</code>.</li>
</ul>

<h4><a id="InnoDB_consistent_read" name="InnoDB_consistent_read"
href="manual_toc.html#InnoDB_consistent_read">7.5.8.1 Consistent
Read</a></h4>

<p>A consistent read means that InnoDB uses its multi-versioning to
present to a query a snapshot of the database at a point in time.
The query will see the changes made by exactly those transactions
that committed before that point of time, and no changes made by
later or uncommitted transactions. The exception to this rule is
that the query will see the changes made by the transaction itself
which issues the query.</p>

<p>If you are running with the default <code>REPEATABLE READ</code>
isolation level, then all consistent reads within the same
transaction read the snapshot established by the first such read in
that transaction. You can get a fresher snapshot for your queries
by committing the current transaction and after that issuing new
queries.</p>

<p>Consistent read is the default mode in which InnoDB processes
<code>SELECT</code> statements in <code>READ COMMITTED</code> and
<code>REPEATABLE READ</code> isolation levels. A consistent read
does not set any locks on the tables it accesses, and therefore
other users are free to modify those tables at the same time a
consistent read is being performed on the table.</p>

<h4><a id="InnoDB_locking_reads" name="InnoDB_locking_reads"
href="manual_toc.html#InnoDB_locking_reads">7.5.8.2 Locking
Reads</a></h4>

<p>A consistent read is not convenient in some circumstances.
Suppose you want to add a new row into your table
<code>CHILD</code>, and make sure that the child already has a
parent in table <code>PARENT</code>.</p>

<p>Suppose you use a consistent read to read the table
<code>PARENT</code> and indeed see the parent of the child in the
table. Can you now safely add the child row to table
<code>CHILD</code>? No, because it may happen that meanwhile some
other user has deleted the parent row from the table
<code>PARENT</code>, and you are not aware of that.</p>

<p>The solution is to perform the <code>SELECT</code> in a locking
mode, <code>LOCK IN SHARE MODE</code>.</p>

<pre>
SELECT * FROM PARENT WHERE NAME = 'Jones' LOCK IN SHARE MODE;
</pre>

<p>Performing a read in share mode means that we read the latest
available data, and set a shared mode lock on the rows we read. If
the latest data belongs to a yet uncommitted transaction of another
user, we will wait until that transaction commits. A shared mode
lock prevents others from updating or deleting the row we have
read. After we see that the above query returns the parent
<code>'Jones'</code>, we can safely add his child to table
<code>CHILD</code>, and commit our transaction. This example shows
how to implement referential integrity in your application
code.</p>

<p>Let us look at another example: we have an integer counter field
in a table <code>CHILD_CODES</code> which we use to assign a unique
identifier to each child we add to table <code>CHILD</code>.
Obviously, using a consistent read or a shared mode read to read
the present value of the counter is not a good idea, since then two
users of the database may see the same value for the counter, and
we will get a duplicate key error when we add the two children with
the same identifier to the table.</p>

<p>In this case there are two good ways to implement the reading
and incrementing of the counter: (1) update the counter first by
incrementing it by 1 and only after that read it, or (2) read the
counter first with a lock mode <code>FOR UPDATE</code>, and
increment after that:</p>

<pre>
SELECT COUNTER_FIELD FROM CHILD_CODES FOR UPDATE;
UPDATE CHILD_CODES SET COUNTER_FIELD = COUNTER_FIELD + 1;
</pre>

<p>A <code>SELECT ... FOR UPDATE</code> will read the latest
available data setting exclusive locks on each row it reads. Thus
it sets the same locks a searched SQL <code>UPDATE</code> would set
on the rows.</p>

<h4><a id="InnoDB_Next-key_locking" name="InnoDB_Next-key_locking"
href="manual_toc.html#InnoDB_Next-key_locking">7.5.8.3 Next-key
Locking: Avoiding the Phantom Problem</a></h4>

<p>In row level locking InnoDB uses an algorithm called next-key
locking. InnoDB does the row level locking so that when it searches
or scans an index of a table, it sets shared or exclusive locks on
the index records in encounters. Thus the row level locks are more
precisely called index record locks.</p>

<p>The locks InnoDB sets on index records also affect the 'gap'
before that index record. If a user has a shared or exclusive lock
on record R in an index, then another user cannot insert a new
index record immediately before R in the index order. This locking
of gaps is done to prevent the so-called phantom problem. Suppose I
want to read and lock all children with identifier bigger than 100
from table <code>CHILD</code>, and update some field in the
selected rows.</p>

<pre>
SELECT * FROM CHILD WHERE ID &gt; 100 FOR UPDATE;
</pre>

<p>Suppose there is an index on table <code>CHILD</code> on column
<code>ID</code>. Our query will scan that index starting from the
first record where <code>ID</code> is bigger than 100. Now, if the
locks set on the index records would not lock out inserts made in
the gaps, a new child might meanwhile be inserted to the table. If
now I in my transaction execute</p>

<pre>
SELECT * FROM CHILD WHERE ID &gt; 100 FOR UPDATE;
</pre>

<p>again, I will see a new child in the result set the query
returns. This is against the isolation principle of transactions: a
transaction should be able to run so that the data it has read does
not change during the transaction. If we regard a set of rows as a
data item, then the new 'phantom' child would break this isolation
principle.</p>

<p>When InnoDB scans an index it can also lock the gap after the
last record in the index. Just that happens in the previous
example: the locks set by InnoDB will prevent any insert to the
table where <code>ID</code> would be bigger than 100.</p>

<p>You can use next-key locking to implement a uniqueness check in
your application: if you read your data in share mode and do not
see a duplicate for a row you are going to insert, then you can
safely insert your row and know that the next-key lock set on the
successor of your row during the read will prevent anyone meanwhile
inserting a duplicate for your row. Thus the next-key locking
allows you to 'lock' the non-existence of something in your
table.</p>

<h4><a id="InnoDB_Locks_set" name="InnoDB_Locks_set"
href="manual_toc.html#InnoDB_Locks_set">7.5.8.4 Locks Set by
Different SQL Statements in InnoDB</a></h4>

<ul>
<li><code>SELECT ... FROM ...</code> : this is a consistent read,
reading a snapshot of the database and setting no locks.</li>

<li><code>SELECT ... FROM ... LOCK IN SHARE MODE</code> : sets
shared next-key locks on all index records the read
encounters.</li>

<li><code>SELECT ... FROM ... FOR UPDATE</code> : sets exclusive
next-key locks on all index records the read encounters.</li>

<li><code>INSERT INTO ... VALUES (...)</code> : sets an exclusive
lock on the inserted row; note that this lock is not a next-key
lock and does not prevent other users from inserting to the gap
before the inserted row. If a duplicate key error occurs, sets a
shared lock on the duplicate index record.</li>

<li><code>INSERT INTO T SELECT ... FROM S WHERE ...</code> sets an
exclusive (non-next-key) lock on each row inserted into
<code>T</code>. Does the search on <code>S</code> as a consistent
read, but sets shared next-key locks on <code>S</code> if the MySQL
logging is on. InnoDB has to set locks in the latter case because
in roll-forward recovery from a backup every SQL statement has to
be executed in exactly the same way as it was done originally.</li>

<li><code>CREATE TABLE ... SELECT ...</code> performs the
<code>SELECT</code> as a consistent read or with shared locks, like
in the previous item.</li>

<li><code>REPLACE</code> is done like an insert if there is no
collision on a unique key. Otherwise, an exclusive next-key lock is
placed on the row which has to be updated.</li>

<li><code>UPDATE ... SET ... WHERE ...</code> : sets an exclusive
next-key lock on every record the search encounters.</li>

<li><code>DELETE FROM ... WHERE ...</code> : sets an exclusive
next-key lock on every record the search encounters.</li>

<li>If a <code>FOREIGN KEY</code> constraint is defined on a table,
any insert, update, or delete which requires checking of the
constraint condition sets shared record level locks on the records
it looks at to check the constraint. Also in the case where the
constraint fails, InnoDB sets these locks.</li>

<li><code>LOCK TABLES ...</code> : sets table locks. In the
implementation the MySQL layer of code sets these locks. The
automatic deadlock detection of InnoDB cannot detect deadlocks
where such table locks are involved: see the following section.
Also, since MySQL does know about row level locks, it is possible
that you get a table lock on a table where another user currently
has row level locks. But that does not put transaction integerity
into danger. See section <a
href="manual.html#InnoDB_restrictions">7.5.13 Restrictions on
InnoDB Tables</a>.</li>
</ul>

<h4><a id="InnoDB_Deadlock_detection"
name="InnoDB_Deadlock_detection"
href="manual_toc.html#InnoDB_Deadlock_detection">7.5.8.5 Deadlock
Detection and Rollback</a></h4>

<p>InnoDB automatically detects a deadlock of transactions and
rolls back a transaction or transactions to prevent the deadlock.
Starting from version 4.0.5, InnoDB will try to pick small
transactions to roll back. The size of a transaction is determined
by the number of rows it has inserted, updated, or deleted.
Previous to 4.0.5, InnoDB always rolled back the transaction whose
lock request was the last one to build a deadlock, that is, a cycle
in the waits-for graph of transactions.</p>

<p>InnoDB cannot detect deadlocks where a lock set by a MySQL
<code>LOCK TABLES</code> statement is involved, or if a lock set in
another storage engine than InnoDB is involved. You have to resolve
these situations using <code>innodb_lock_wait_timeout</code> set in
<tt>`my.cnf'</tt>.</p>

<p>When InnoDB performs a complete rollback of a transaction, all
the locks of the transaction are released. However, if just a
single SQL statement is rolled back as a result of an error, some
of the locks set by the SQL statement may be preserved. This is
because InnoDB stores row locks in a format where it cannot
afterwards know which was set by which SQL statement.</p>

<h4><a id="InnoDB_Consistent_read_example"
name="InnoDB_Consistent_read_example"
href="manual_toc.html#InnoDB_Consistent_read_example">7.5.8.6 An
Example of How the Consistent Read Works in InnoDB</a></h4>

<p>Suppose you are running on the default <code>REPEATABLE
READ</code> isolation level. When you issue a consistent read, that
is, an ordinary <code>SELECT</code> statement, InnoDB will give
your transaction a timepoint according to which your query sees the
database. Thus, if transaction B deletes a row and commits after
your timepoint was assigned, then you will not see the row deleted.
Similarly with inserts and updates.</p>

<p>You can advance your timepoint by committing your transaction
and then doing another <code>SELECT</code>.</p>

<p>This is called multi-versioned concurrency control.</p>

<pre>
                  User A                 User B

              SET AUTOCOMMIT=0;      SET AUTOCOMMIT=0;
time
|             SELECT * FROM t;
|             empty set
|                                    INSERT INTO t VALUES (1, 2);
|
v             SELECT * FROM t;
              empty set
                                     COMMIT;

              SELECT * FROM t;
              empty set;

              COMMIT;

              SELECT * FROM t;
              ---------------------
              |    1    |    2    |
              ---------------------
</pre>

<p>Thus user A sees the row inserted by B only when B has committed
the insert, and A has committed his own transaction so that the
timepoint is advanced past the commit of B.</p>

<p>If you want to see the ``freshest'' state of the database, you
should use a locking read:</p>

<pre>
SELECT * FROM t LOCK IN SHARE MODE;
</pre>

<h4><a id="Innodb_deadlocks" name="Innodb_deadlocks"
href="manual_toc.html#Innodb_deadlocks">7.5.8.7 How to cope with
deadlocks?</a></h4>

<p>Deadlocks are a classic problem in transactional databases, but
they are not dangerous, unless they are so frequent that you cannot
run certain transactions at all. Normally you have to write your
applications so that they are always prepared to re-issue a
transaction if it gets rolled back because of a deadlock.</p>

<p>InnoDB uses automatic row level locking. You can get deadlocks
even in the case of transactions which just insert or delete a
single row. That is because these operations are not really
'atomic': they automatically set locks on the (possibly several)
index records of the row inserted/deleted.</p>

<p>You can cope with deadlocks and reduce the number of them with
the following tricks:</p>

<ul>
<li>Use <code>SHOW INNODB STATUS</code> in MySQL versions &gt;=
3.23.52 and &gt;= 4.0.3 to determine the cause of the latest
deadlock. That can help you to tune your application to avoid
deadlocks.</li>

<li>Always be prepared to re-issue a transaction if it fails in a
deadlock. Deadlocks are not dangerous. Just try again.</li>

<li>Commit your transactions often. Small transactions are less
prone to collide.</li>

<li>If you are using locking reads <code>SELECT ... FOR
UPDATE</code> or <code>... LOCK IN SHARE MODE</code>, try using a
lower isolation level <code>READ COMMITTED</code>.</li>

<li>Access your tables and rows in a fixed order. Then transactions
will form nice queues, and do not deadlock.</li>

<li>Add good indexes to your tables. Then your queries need to scan
less index records and consequently set less locks. Use
<code>EXPLAIN SELECT</code> to determine that MySQL picks
appropriate indexes for your queries.</li>

<li>Use less locking: if you can afford a <code>SELECT</code> to
return data from an old snapshot, do not add the clause <code>FOR
UPDATE</code> or <code>LOCK IN SHARE MODE</code> to it. Using
<code>READ COMMITTED</code> isolation level is good here, because
each consistent read within the same transaction reads from its own
fresh snapshot.</li>

<li>If nothing helps, serialize your transactions with table level
locks: <code>LOCK TABLES t1 WRITE, t2 READ, ... ; [do something
with tables t1 and t2 here]; UNLOCK TABLES</code>. Table level
locks make you transactions to queue nicely, and deadlocks are
avoided. Note that <code>LOCK TABLES</code> implicitly starts a
transaction, just like the command <code>BEGIN</code>, and
<code>UNLOCK TABLES</code> implicitly ends the transaction in a
<code>COMMIT</code>.</li>

<li>Another solution to serialize transactions is to create an
auxiliary 'semaphore' table where there is just a single row. Each
transaction updates that row before accessing other tables. In that
way all transactions happen in a serial fashion. Note that then
also the InnoDB instant deadlock detection algorithm works, because
the serializing lock is a row level lock. In MySQL table level
locks we have to resort to the timeout method to resolve a
deadlock.</li>
</ul>

<h4><a id="Innodb_tuning" name="Innodb_tuning"
href="manual_toc.html#Innodb_tuning">7.5.8.8 Performance Tuning
Tips</a></h4>

<p><strong>1.</strong> If the Unix <tt>`top'</tt> or the Windows
<tt>`Task Manager'</tt> shows that the CPU usage percentage with
your workload is less than 70%, your workload is probably
disk-bound. Maybe you are making too many transaction commits, or
the buffer pool is too small. Making the buffer pool bigger can
help, but do not set it bigger than 80% of physical memory.</p>

<p><strong>2.</strong> Wrap several modifications into one
transaction. InnoDB must flush the log to disk at each transaction
commit, if that transaction made modifications to the database.
Since the rotation speed of a disk is typically at most 167
revolutions/second, that constrains the number of commits to the
same 167/second if the disk does not fool the operating system.</p>

<p><strong>3.</strong> If you can afford the loss of some latest
committed transactions, you can set the <tt>`my.cnf'</tt> parameter
<code>innodb_flush_log_at_trx_commit</code> to zero. InnoDB tries
to flush the log anyway once in a second, though the flush is not
guaranteed.</p>

<p><strong>4.</strong> Make your log files big, even as big as the
buffer pool. When InnoDB has written the log files full, it has to
write the modified contents of the buffer pool to disk in a
checkpoint. Small log files will cause many unnecessary disk
writes. The drawback in big log files is that recovery time will be
longer.</p>

<p><strong>5.</strong> Also the log buffer should be quite big, say
8 MB.</p>

<p><strong>6.</strong> (Relevant from 3.23.39 up.) In some versions
of Linux and Unix, flushing files to disk with the Unix
<code>fdatasync</code> and other similar methods is surprisingly
slow. The default method InnoDB uses is the <code>fdatasync</code>
function. If you are not satisfied with the database write
performance, you may try setting <code>innodb_flush_method</code>
in <tt>`my.cnf'</tt> to <code>O_DSYNC</code>, though O_DSYNC seems
to be slower on most systems.</p>

<p><strong>7.</strong> In importing data to InnoDB, make sure that
MySQL does not have <code>autocommit=1</code> on. Then every insert
requires a log flush to disk. Put before your plain SQL import file
line</p>

<pre>
SET AUTOCOMMIT=0;
</pre>

<p>and after it</p>

<pre>
COMMIT;
</pre>

<p>If you use the <tt>`mysqldump'</tt> option <code>--opt</code>,
you will get dump files which are fast to import also to an InnoDB
table, even without wrapping them to the above <code>SET
AUTOCOMMIT=0; ... COMMIT;</code> wrappers.</p>

<p><strong>8.</strong> Beware of big rollbacks of mass inserts:
InnoDB uses the insert buffer to save disk I/O in inserts, but in a
corresponding rollback no such mechanism is used. A disk-bound
rollback can take 30 times the time of the corresponding insert.
Killing the database process will not help because the rollback
will start again at the database startup. The only way to get rid
of a runaway rollback is to increase the buffer pool so that the
rollback becomes CPU-bound and runs fast, or delete the whole
InnoDB database.</p>

<p><strong>9.</strong> Beware also of other big disk-bound
operations. Use <code>DROP TABLE</code> or <code>TRUNCATE</code>
(from MySQL-4.0 up) to empty a table, not <code>DELETE FROM
yourtable</code>.</p>

<p><strong>10.</strong> Use the multi-line <code>INSERT</code> to
reduce communication overhead between the client and the server if
you need to insert many rows:</p>

<pre>
INSERT INTO yourtable VALUES (1, 2), (5, 5);
</pre>

<p>This tip is of course valid for inserts into any table type, not
just InnoDB.</p>

<h4><a id="Innodb_Monitor" name="Innodb_Monitor"
href="manual_toc.html#Innodb_Monitor">7.5.8.9 The InnoDB
Monitor</a></h4>

<p>Starting from version 3.23.41 InnoDB includes the InnoDB Monitor
which prints information on the InnoDB internal state. When
switched on, InnoDB Monitor will make the MySQL server
<tt>`mysqld'</tt> to print data (note: the MySQL client will not
print anything) to the standard output about once every 15 seconds.
This data is useful in performance tuning. On Windows you must
start <code>mysqld-max</code> from a MS-DOS prompt with the
<code>--standalone --console</code> options to direct the output to
the MS-DOS prompt window.</p>

<p>There is a separate <code>innodb_lock_monitor</code> which
prints the same information as <code>innodb_monitor</code> plus
information on locks set by each transaction.</p>

<p>The printed information includes data on:</p>

<ul>
<li>lock waits of a transactions,</li>

<li>semaphore waits of threads,</li>

<li>pending file I/O requests,</li>

<li>buffer pool statistics, and</li>

<li>purge and insert buffer merge activity of the main thread of
InnoDB.</li>
</ul>

<p>You can start InnoDB Monitor through the following SQL
command:</p>

<pre>
CREATE TABLE innodb_monitor(a int) type = innodb;
</pre>

<p>and stop it by</p>

<pre>
DROP TABLE innodb_monitor;
</pre>

<p>The <code>CREATE TABLE</code> syntax is just a way to pass a
command to the InnoDB engine through the MySQL SQL parser: the
created table is not relevant at all for InnoDB Monitor. If you
shut down the database when the monitor is running, and you want to
start the monitor again, you have to drop the table before you can
issue a new <code>CREATE TABLE</code> to start the monitor. This
syntax may change in a future release.</p>

<p>A sample output of the InnoDB Monitor:</p>

<pre>
================================
010809 18:45:06 INNODB MONITOR OUTPUT
================================
--------------------------
LOCKS HELD BY TRANSACTIONS
--------------------------
LOCK INFO:
Number of locks in the record hash table 1294
LOCKS FOR TRANSACTION ID 0 579342744
TABLE LOCK table test/mytable trx id 0 582333343 lock_mode IX

RECORD LOCKS space id 0 page no 12758 n bits 104 table test/mytable index
PRIMARY trx id 0 582333343 lock_mode X
Record lock, heap no 2 PHYSICAL RECORD: n_fields 74; 1-byte offs FALSE;
info bits 0
 0: len 4; hex 0001a801; asc ;; 1: len 6; hex 000022b5b39f; asc ";;
 2: len 7; hex 000002001e03ec; asc ;; 3: len 4; hex 00000001;
...
-----------------------------------------------
CURRENT SEMAPHORES RESERVED AND SEMAPHORE WAITS
-----------------------------------------------
SYNC INFO:
Sorry, cannot give mutex list info in non-debug version!
Sorry, cannot give rw-lock list info in non-debug version!
-----------------------------------------------------
SYNC ARRAY INFO: reservation count 6041054, signal count 2913432
4a239430 waited for by thread 49627477 op. S-LOCK file NOT KNOWN line 0
Mut ex 0 sp 5530989 r 62038708 sys 2155035;
rws 0 8257574 8025336; rwx 0 1121090 1848344
-----------------------------------------------------
CURRENT PENDING FILE I/O'S
--------------------------
Pending normal aio reads:
Reserved slot, messages 40157658 4a4a40b8
Reserved slot, messages 40157658 4a477e28
...
Reserved slot, messages 40157658 4a4424a8
Reserved slot, messages 40157658 4a39ea38
Total of 36 reserved aio slots
Pending aio writes:
Total of 0 reserved aio slots
Pending insert buffer aio reads:
Total of 0 reserved aio slots
Pending log writes or reads:
Reserved slot, messages 40158c98 40157f98
Total of 1 reserved aio slots
Pending synchronous reads or writes:
Total of 0 reserved aio slots
-----------
BUFFER POOL
-----------
LRU list length 8034
Free list length 0
Flush list length 999
Buffer pool size in pages 8192
Pending reads 39
Pending writes: LRU 0, flush list 0, single page 0
Pages read 31383918, created 51310, written 2985115
----------------------------
END OF INNODB MONITOR OUTPUT
============================
010809 18:45:22 InnoDB starts purge
010809 18:45:22 InnoDB purged 0 pages
</pre>

<p>Some notes on the output:</p>

<ul>
<li>If the section LOCKS HELD BY TRANSACTIONS reports lock waits,
then your application may have lock contention. The output can also
help to trace reasons for transaction deadlocks.</li>

<li>Section SYNC INFO will report reserved semaphores if you
compile InnoDB with <code>UNIV_SYNC_DEBUG</code> defined in
<tt>`univ.i'</tt>.</li>

<li>Section SYNC ARRAY INFO reports threads waiting for a semaphore
and statistics on how many times threads have needed a spin or a
wait on a mutex or a rw-lock semaphore. A big number of threads
waiting for semaphores may be a result of disk I/O, or contention
problems inside InnoDB. Contention can be due to heavy parallelism
of queries, or problems in operating system thread scheduling.</li>

<li>Section CURRENT PENDING FILE I/O'S lists pending file I/O
requests. A large number of these indicates that the workload is
disk I/O-bound.</li>

<li>Section BUFFER POOL gives you statistics on pages read and
written. You can calculate from these numbers how many datafile
I/Os your queries are currently doing.</li>
</ul>

<h3><a id="Implementation" name="Implementation"
href="manual_toc.html#Implementation">7.5.9 Implementation of
Multi-versioning</a></h3>

<p>Since InnoDB is a multi-versioned database, it must keep
information of old versions of rows in the tablespace. This
information is stored in a data structure we call a rollback
segment after an analogous data structure in Oracle.</p>

<p>InnoDB internally adds two fields to each row stored in the
database. A 6-byte field tells the transaction identifier for the
last transaction which inserted or updated the row. Also a deletion
is internally treated as an update where a special bit in the row
is set to mark it as deleted. Each row also contains a 7-byte field
called the roll pointer. The roll pointer points to an undo log
record written to the rollback segment. If the row was updated,
then the undo log record contains the information necessary to
rebuild the content of the row before it was updated.</p>

<p>InnoDB uses the information in the rollback segment to perform
the undo operations needed in a transaction rollback. It also uses
the information to build earlier versions of a row for a consistent
read.</p>

<p>Undo logs in the rollback segment are divided into insert and
update undo logs. Insert undo logs are only needed in transaction
rollback and can be discarded as soon as the transaction commits.
Update undo logs are used also in consistent reads, and they can be
discarded only after there is no transaction present for which
InnoDB has assigned a snapshot that in a consistent read could need
the information in the update undo log to build an earlier version
of a database row.</p>

<p>You must remember to commit your transactions regularly, also
those transactions which only issue consistent reads. Otherwise
InnoDB cannot discard data from the update undo logs, and the
rollback segment may grow too big, filling up your tablespace.</p>

<p>The physical size of an undo log record in the rollback segment
is typically smaller than the corresponding inserted or updated
row. You can use this information to calculate the space need for
your rollback segment.</p>

<p>In our multi-versioning scheme a row is not physically removed
from the database immediately when you delete it with an SQL
statement. Only when InnoDB can discard the update undo log record
written for the deletion, it can also physically remove the
corresponding row and its index records from the database. This
removal operation is called a purge, and it is quite fast, usually
taking the same order of time as the SQL statement which did the
deletion.</p>

<h3><a id="Table_and_index" name="Table_and_index"
href="manual_toc.html#Table_and_index">7.5.10 Table and Index
Structures</a></h3>

<p>MySQL stores its data dictionary information of tables in
<tt>`.frm'</tt> files in database directories. But every InnoDB
type table also has its own entry in InnoDB internal data
dictionaries inside the tablespace. When MySQL drops a table or a
database, it has to delete both a <tt>`.frm'</tt> file or files,
and the corresponding entries inside the InnoDB data dictionary.
This is the reason why you cannot move InnoDB tables between
databases simply by moving the <tt>`.frm'</tt> files, and why
<code>DROP DATABASE</code> did not work for InnoDB type tables in
MySQL versions &lt;= 3.23.43.</p>

<p>Every InnoDB table has a special index called the clustered
index where the data of the rows is stored. If you define a
<code>PRIMARY KEY</code> on your table, then the index of the
primary key will be the clustered index.</p>

<p>If you do not define a primary key for your table, InnoDB will
internally generate a clustered index where the rows are ordered by
the row id InnoDB assigns to the rows in such a table. The row id
is a 6-byte field which monotonically increases as new rows are
inserted. Thus the rows ordered by the row id will be physically in
the insertion order.</p>

<p>Accessing a row through the clustered index is fast, because the
row data will be on the same page where the index search leads us.
In many databases the data is traditionally stored on a different
page from the index record. If a table is large, the clustered
index architecture often saves a disk I/O when compared to the
traditional solution.</p>

<p>The records in non-clustered indexes (we also call them
secondary indexes), in InnoDB contain the primary key value for the
row. InnoDB uses this primary key value to search for the row from
the clustered index. Note that if the primary key is long, the
secondary indexes will use more space.</p>

<h4><a id="InnoDB_physical_structure"
name="InnoDB_physical_structure"
href="manual_toc.html#InnoDB_physical_structure">7.5.10.1 Physical
Structure of an Index</a></h4>

<p>All indexes in InnoDB are B-trees where the index records are
stored in the leaf pages of the tree. The default size of an index
page is 16 kB. When new records are inserted, InnoDB tries to leave
1 / 16 of the page free for future insertions and updates of the
index records.</p>

<p>If index records are inserted in a sequential (ascending or
descending) order, the resulting index pages will be about 15/16
full. If records are inserted in a random order, then the pages
will be 1/2 - 15/16 full. If the fillfactor of an index page drops
below 1/2, InnoDB will try to contract the index tree to free the
page.</p>

<h4><a id="InnoDB_Insert_buffering" name="InnoDB_Insert_buffering"
href="manual_toc.html#InnoDB_Insert_buffering">7.5.10.2 Insert
Buffering</a></h4>

<p>It is a common situation in a database application that the
primary key is a unique identifier and new rows are inserted in the
ascending order of the primary key. Thus the insertions to the
clustered index do not require random reads from a disk.</p>

<p>On the other hand, secondary indexes are usually non-unique and
insertions happen in a relatively random order into secondary
indexes. This would cause a lot of random disk I/Os without a
special mechanism used in InnoDB.</p>

<p>If an index record should be inserted to a non-unique secondary
index, InnoDB checks if the secondary index page is already in the
buffer pool. If that is the case, InnoDB will do the insertion
directly to the index page. But, if the index page is not found
from the buffer pool, InnoDB inserts the record to a special insert
buffer structure. The insert buffer is kept so small that it
entirely fits in the buffer pool, and insertions can be made to it
very fast.</p>

<p>The insert buffer is periodically merged to the secondary index
trees in the database. Often we can merge several insertions on the
same page in of the index tree, and hence save disk I/Os. It has
been measured that the insert buffer can speed up insertions to a
table up to 15 times.</p>

<h4><a id="InnoDB_Adaptive_hash" name="InnoDB_Adaptive_hash"
href="manual_toc.html#InnoDB_Adaptive_hash">7.5.10.3 Adaptive Hash
Indexes</a></h4>

<p>If a database fits almost entirely in main memory, then the
fastest way to perform queries on it is to use hash indexes. InnoDB
has an automatic mechanism which monitors index searches made to
the indexes defined for a table, and if InnoDB notices that queries
could benefit from building of a hash index, such an index is
automatically built.</p>

<p>But note that the hash index is always built based on an
existing B-tree index on the table. InnoDB can build a hash index
on a prefix of any length of the key defined for the B-tree,
depending on what search pattern InnoDB observes on the B-tree
index. A hash index can be partial: it is not required that the
whole B-tree index is cached in the buffer pool. InnoDB will build
hash indexes on demand to those pages of the index which are often
accessed.</p>

<p>In a sense, through the adaptive hash index mechanism InnoDB
adapts itself to ample main memory, coming closer to the
architecture of main memory databases.</p>

<h4><a id="InnoDB_Physical_record" name="InnoDB_Physical_record"
href="manual_toc.html#InnoDB_Physical_record">7.5.10.4 Physical
Record Structure</a></h4>

<ul>
<li>Each index record in InnoDB contains a header of 6 bytes. The
header is used to link consecutive records together, and also in
the row level locking.</li>

<li>Records in the clustered index contain fields for all
user-defined columns. In addition, there is a 6-byte field for the
transaction id and a 7-byte field for the roll pointer.</li>

<li>If the user has not defined a primary key for a table, then
each clustered index record contains also a 6-byte row id
field.</li>

<li>Each secondary index record contains also all the fields
defined for the clustered index key.</li>

<li>A record contains also a pointer to each field of the record.
If the total length of the fields in a record is &lt; 128 bytes,
then the pointer is 1 byte, else 2 bytes.</li>
</ul>

<h4><a id="SEC471" name="SEC471"
href="manual_toc.html#SEC471">7.5.10.5 How an Auto-increment Column
Works in InnoDB</a></h4>

<p>After a database startup, when a user first does an insert to a
table <code>T</code> where an auto-increment column has been
defined, and the user does not provide an explicit value for the
column, then InnoDB executes <code>SELECT MAX(auto-inc-column) FROM
T</code>, and assigns that value incremented by one to the column
and the auto-increment counter of the table. We say that the
auto-increment counter for table <code>T</code> has been
initialised.</p>

<p>InnoDB follows the same procedure in initializing the
auto-increment counter for a freshly created table.</p>

<p>Note that if the user specifies in an insert the value 0 to the
auto-increment column, then InnoDB treats the row like the value
would not have been specified.</p>

<p>After the auto-increment counter has been initialised, if a user
inserts a row where he explicitly specifies the column value, and
the value is bigger than the current counter value, then the
counter is set to the specified column value. If the user does not
explicitly specify a value, then InnoDB increments the counter by
one and assigns its new value to the column.</p>

<p>The auto-increment mechanism, when assigning values from the
counter, bypasses locking and transaction handling. Therefore you
may also get gaps in the number sequence if you roll back
transactions which have got numbers from the counter.</p>

<p>The behaviour of auto-increment is not defined if a user gives a
negative value to the column or if the value becomes bigger than
the maximum integer that can be stored in the specified integer
type.</p>

<h3><a id="File_space_management" name="File_space_management"
href="manual_toc.html#File_space_management">7.5.11 File Space
Management and Disk I/O</a></h3>

<h4><a id="InnoDB_Disk_I_O" name="InnoDB_Disk_I_O"
href="manual_toc.html#InnoDB_Disk_I_O">7.5.11.1 Disk I/O</a></h4>

<p>In disk I/O InnoDB uses asynchronous I/O. On Windows NT it uses
the native asynchronous I/O provided by the operating system. On
Unix, InnoDB uses simulated asynchronous I/O built into InnoDB:
InnoDB creates a number of I/O threads to take care of I/O
operations, such as read-ahead. In a future version we will add
support for simulated aio on Windows NT and native aio on those
versions of Unix which have one.</p>

<p>On Windows NT InnoDB uses non-buffered I/O. That means that the
disk pages InnoDB reads or writes are not buffered in the operating
system file cache. This saves some memory bandwidth.</p>

<p>Starting from 3.23.41 InnoDB uses a novel file flush technique
called doublewrite. It adds safety to crash recovery after an
operating system crash or a power outage, and improves performance
on most Unix flavors by reducing the need for fsync operations.</p>

<p>Doublewrite means that InnoDB before writing pages to a datafile
first writes them to a contiguous tablespace area called the
doublewrite buffer. Only after the write and the flush to the
doublewrite buffer has completed, InnoDB writes the pages to their
proper positions in the datafile. If the operating system crashes
in the middle of a page write, InnoDB will in recovery find a good
copy of the page from the doublewrite buffer.</p>

<p>Starting from 3.23.41 you can also use a raw disk partition as a
datafile, though this has not been tested yet. When you create a
new datafile you have to put the keyword <code>newraw</code>
immediately after the data file-size in
<code>innodb_data_file_path</code>. The partition must be &gt;=
than you specify as the size. Note that 1M in InnoDB is 1024 x 1024
bytes, while in disk specifications 1 MB usually means 1000 000
bytes.</p>

<pre>
innodb_data_file_path=hdd1:5Gnewraw;hdd2:2Gnewraw
</pre>

<p>When you start the database again you <strong>must</strong>
change the keyword to <code>raw</code>. Otherwise, InnoDB will
write over your partition!</p>

<pre>
innodb_data_file_path=hdd1:5Graw;hdd2:2Graw
</pre>

<p>By using a raw disk you can on some Unixes perform unbuffered
I/O.</p>

<p>There are two read-ahead heuristics in InnoDB: sequential
read-ahead and random read-ahead. In sequential read-ahead InnoDB
notices that the access pattern to a segment in the tablespace is
sequential. Then InnoDB will post in advance a batch of reads of
database pages to the I/O system. In random read-ahead InnoDB
notices that some area in a tablespace seems to be in the process
of being fully read into the buffer pool. Then InnoDB posts the
remaining reads to the I/O system.</p>

<h4><a id="InnoDB_File_space" name="InnoDB_File_space"
href="manual_toc.html#InnoDB_File_space">7.5.11.2 File Space
Management</a></h4>

<p>The datafiles you define in the configuration file form the
tablespace of InnoDB. The files are simply catenated to form the
tablespace, there is no striping in use. Currently you cannot
directly instruct where the space is allocated for your tables,
except by using the following fact: from a newly created tablespace
InnoDB will allocate space starting from the low end.</p>

<p>The tablespace consists of database pages whose default size is
16 kB. The pages are grouped into extents of 64 consecutive pages.
The 'files' inside a tablespace are called segments in InnoDB. The
name of the rollback segment is somewhat misleading because it
actually contains many segments in the tablespace.</p>

<p>For each index in InnoDB we allocate two segments: one is for
non-leaf nodes of the B-tree, the other is for the leaf nodes. The
idea here is to achieve better sequentiality for the leaf nodes,
which contain the data.</p>

<p>When a segment grows inside the tablespace, InnoDB allocates the
first 32 pages to it individually. After that InnoDB starts to
allocate whole extents to the segment. InnoDB can add to a large
segment up to 4 extents at a time to ensure good sequentiality of
data.</p>

<p>Some pages in the tablespace contain bitmaps of other pages, and
therefore a few extents in an InnoDB tablespace cannot be allocated
to segments as a whole, but only as individual pages.</p>

<p>When you issue a query <code>SHOW TABLE STATUS FROM ... LIKE
...</code> to ask for available free space in the tablespace,
InnoDB will report the extents which are definitely free in the
tablespace. InnoDB always reserves some extents for clean-up and
other internal purposes; these reserved extents are not included in
the free space.</p>

<p>When you delete data from a table, InnoDB will contract the
corresponding B-tree indexes. It depends on the pattern of deletes
if that frees individual pages or extents to the tablespace, so
that the freed space is available for other users. Dropping a table
or deleting all rows from it is guaranteed to release the space to
other users, but remember that deleted rows can be physically
removed only in a purge operation after they are no longer needed
in transaction rollback or consistent read.</p>

<h4><a id="InnoDB_File_Defragmenting"
name="InnoDB_File_Defragmenting"
href="manual_toc.html#InnoDB_File_Defragmenting">7.5.11.3
Defragmenting a Table</a></h4>

<p>If there are random insertions or deletions in the indexes of a
table, the indexes may become fragmented. By fragmentation we mean
that the physical ordering of the index pages on the disk is not
close to the alphabetical ordering of the records on the pages, or
that there are many unused pages in the 64-page blocks which were
allocated to the index.</p>

<p>It can speed up index scans if you periodically use
<code>mysqldump</code> to dump the table to a text file, drop the
table, and reload it from the dump. Another way to do the
defragmenting is to <code>ALTER</code> the table type to
<code>MyISAM</code> and back to <code>InnoDB</code> again. Note
that a <code>MyISAM</code> table must fit in a single file on your
operating system.</p>

<p>If the insertions to and index are always ascending and records
are deleted only from the end, then the file space management
algorithm of InnoDB guarantees that fragmentation in the index will
not occur.</p>

<h3><a id="Error_handling" name="Error_handling"
href="manual_toc.html#Error_handling">7.5.12 Error
Handling</a></h3>

<p>The error handling in InnoDB is not always the same as specified
in the ANSI SQL standards. According to the ANSI standard, any
error during an SQL statement should cause the rollback of that
statement. InnoDB sometimes rolls back only part of the statement,
or the whole transaction. The following list specifies the error
handling of InnoDB.</p>

<ul>
<li>If you run out of file space in the tablespace, you will get
the MySQL <code>'Table is full'</code> error and InnoDB rolls back
the SQL statement.</li>

<li>A transaction deadlock or a timeout in a lock wait make InnoDB
to roll back the whole transaction.</li>

<li>A duplicate key error only rolls back the insert of that
particular row, even in a statement like <code>INSERT INTO ...
SELECT ...</code>. This will probably change so that the SQL
statement will be rolled back if you have not specified the
<code>IGNORE</code> option in your statement.</li>

<li>A 'row too long' error rolls back the SQL statement.</li>

<li>Other errors are mostly detected by the MySQL layer of code,
and they roll back the corresponding SQL statement.</li>
</ul>

<h3><a id="InnoDB_restrictions" name="InnoDB_restrictions"
href="manual_toc.html#InnoDB_restrictions">7.5.13 Restrictions on
InnoDB Tables</a></h3>

<ul>
<li><strong>Warning</strong>: do <strong>NOT</strong> convert MySQL
system tables from MyISAM TO InnoDB tables! This is not supported;
if you do this MySQL will not restart until you restore the old
system tables from a backup or re-generate them with the
<code>mysql_install_db</code> script.</li>

<li><code>SHOW TABLE STATUS</code> does not give accurate
statistics on InnoDB tables, except for the physical size reserved
by the table. The row count is only a rough estimate used in SQL
optimisation.</li>

<li>If you try to create a unique index on a prefix of a column you
will get an error: 

<pre>
CREATE TABLE T (A CHAR(20), B INT, UNIQUE (A(5))) TYPE = InnoDB;
</pre>

If you create a non-unique index on a prefix of a column, InnoDB
will create an index over the whole column.</li>

<li><code>INSERT DELAYED</code> is not supported for InnoDB
tables.</li>

<li>The MySQL <code>LOCK TABLES</code> operation does not know of
InnoDB row level locks set in already completed SQL statements:
this means that you can get a table lock on a table even if there
still exist transactions of other users which have row level locks
on the same table. Thus your operations on the table may have to
wait if they collide with these locks of other users. Also a
deadlock is possible. However, this does not endanger transaction
integrity, because the row level locks set by InnoDB will always
take care of the integrity. Also, a table lock prevents other
transactions from acquiring more row level locks (in a conflicting
lock mode) on the table.</li>

<li>You cannot have a key on a <code>BLOB</code> or
<code>TEXT</code> column.</li>

<li>A table cannot contain more than 1000 columns.</li>

<li><code>DELETE FROM TABLE</code> does not regenerate the table
but instead deletes all rows, one by one, which is not that fast.
In future versions of MySQL you can use <code>TRUNCATE</code> which
is fast.</li>

<li>The default database page size in InnoDB is 16 kB. By
recompiling the code one can set it from 8 kB to 64 kB. The maximun
row length is slightly less than half of a database page in
versions &lt;= 3.23.40 of InnoDB. Starting from source release
3.23.41 BLOB and TEXT columns are allowed to be &lt; 4 GB, the
total row length must also be &lt; 4 GB. InnoDB does not store
fields whose size is &lt;= 128 bytes on separate pages. After
InnoDB has modified the row by storing long fields on separate
pages, the remaining length of the row must be less than half a
database page. The maximun key length is 7000 bytes.</li>

<li>On some operating systems datafiles must be &lt; 2 GB. The
combined size of log files must be &lt; 4 GB.</li>

<li>The maximum tablespace size is 4 billion database pages. This
is also the maximum size for a table. The minimum tablespace size
is 10 MB.</li>
</ul>

<h3><a id="InnoDB_change_history" name="InnoDB_change_history"
href="manual_toc.html#InnoDB_change_history">7.5.14 InnoDB Change
History</a></h3>

<h4><a id="SEC479" name="SEC479"
href="manual_toc.html#SEC479">7.5.14.1 MySQL/InnoDB-4.1, January
xx, 2003</a></h4>

<ul>
<li>InnoDB now supports up to 64 GB of buffer pool memory in a
Windows 32-bit Intel computer. This is possible because InnoDB can
use the AWE extension of Windows to address memory over the 4 GB
limit of a 32-bit process. A new startup variable
innodb_buffer_pool_awe_mem_mb enables AWE and sets the size of the
buffer pool in megabytes.</li>
</ul>

<h4><a id="SEC480" name="SEC480"
href="manual_toc.html#SEC480">7.5.14.2 MySQL/InnoDB-4.0.8, January
7, 2003</a></h4>

<ul>
<li>InnoDB now supports also FOREIGN KEY (...) REFERENCES ...(...)
[ON UPDATE CASCADE | ON UPDATE SET NULL | ON UPDATE RESTRICT | ON
UPDATE NO ACTION].</li>

<li>Tables and indexes now reserve 4 % less space in the
tablespace. Also existing tables reserve less space. By upgrading
to 4.0.8 you will see more free space in "InnoDB free" in SHOW
TABLE STATUS.</li>

<li>Fixed bugs: updating the PRIMARY KEY of a row would generate a
foreign key error on all FOREIGN KEYs which referenced secondary
keys of the row to be updated. Also, if a referencing FOREIGN KEY
constraint only referenced the first columns in an index, and there
were more columns in that index, updating the additional columns
generated a foreign key error.</li>

<li>Fixed a bug: if an index contains some column twice, and that
column is updated, the table will become corrupt. From now on
InnoDB prevents creation of such indexes.</li>

<li>Fixed a bug: removed superfluous error 149 and 150 printouts
from the .err log when a locking SELECT caused a deadlock or a lock
wait timeout.</li>

<li>Fixed a bug: an assertion in btr0sea.c, in function
btr_search_info_update_slow could theoretically fail in a race of 3
threads.</li>

<li>Fixed a bug: one could not switch a session transaction
isolation level back to REPEATABLE READ after setting it to
something else.</li>
</ul>

<h4><a id="SEC481" name="SEC481"
href="manual_toc.html#SEC481">7.5.14.3 MySQL/InnoDB-4.0.7, December
26, 2002</a></h4>

<ul>
<li>InnoDB in 4.0.7 is essentially the same as in 4.0.6.</li>
</ul>

<h4><a id="SEC482" name="SEC482"
href="manual_toc.html#SEC482">7.5.14.4 MySQL/InnoDB-4.0.6, December
19, 2002</a></h4>

<ul>
<li>Since innodb_log_arch_dir has no relevance under MySQL, there
is no need to specify it any more in my.cnf.</li>

<li>LOAD DATA INFILE in AUTOCOMMIT=1 mode no longer does implicit
commits for each 1 MB of written binlog.</li>

<li>Fixed a bug introduced in 4.0.4: LOCK TABLES ... READ LOCAL
should not set row locks on the rows read. This caused deadlocks
and lock wait timeouts in mysqldump.</li>

<li>Fixed two bugs introduced in 4.0.4: in AUTO_INCREMENT, REPLACE
could cause the counter to be left 1 too low. A deadlock or a lock
wait timeout could cause the same problem.</li>

<li>Fixed a bug: TRUNCATE on a TEMPORARY table crashed InnoDB.</li>

<li>Fixed a bug introduced in 4.0.5: if binlogging was not switched
on, INSERT INTO ... SELECT ... or CREATE TABLE ... SELECT ... could
cause InnoDB to hang on a semaphore created in btr0sea.c, line 128.
Workaround: switch binlogging on.</li>

<li>Fixed a bug: in replication issuing SLAVE STOP in the middle of
a multi-statement transaction could cause that SLAVE START would
only perform a part of the transaction. A similar error could occur
if the slave crashed and was restarted.</li>
</ul>

<h4><a id="SEC483" name="SEC483"
href="manual_toc.html#SEC483">7.5.14.5 MySQL/InnoDB-3.23.54,
December 12, 2002</a></h4>

<ul>
<li>Fixed a bug: the InnoDB range estimator greatly exaggerated the
size of a short index range if the paths to the endpoints of the
range in the index tree happened to branch already in the root.
This could cause unnecessary table scans in SQL queries.</li>

<li>Fixed a bug: ORDER BY could fail if you had not created a
primary key to a table, but had defined several indexes of which at
least one was a UNIQUE index with all its columns declared as NOT
NULL.</li>

<li>Fixed a bug: a lock wait timeout in connection with ON DELETE
CASCADE could cause corruption in indexes.</li>

<li>Fixed a bug: if a SELECT was done with a unique key from a
primary index, and the search matched to a delete-marked record,
InnoDB could erroneously return the NEXT record.</li>

<li>Fixed a bug introduced in 3.23.53: LOCK TABLES ... READ LOCAL
should not set row locks on the rows read. This caused deadlocks
and lock wait timeouts in mysqldump.</li>

<li>Fixed a bug: if an index contains some column twice, and that
column is updated, the table will become corrupt. From now on
InnoDB prevents creation of such indexes.</li>
</ul>

<h4><a id="SEC484" name="SEC484"
href="manual_toc.html#SEC484">7.5.14.6 MySQL/InnoDB-4.0.5, November
18, 2002</a></h4>

<ul>
<li>InnoDB now supports also transaction isolation levels READ
COMMITTED and READ UNCOMMITTED. READ COMMITTED more closely
emulates Oracle and makes porting of applications from Oracle to
MySQL easier.</li>

<li>Deadlock resolution is now selective: we try to pick as victims
transactions with less modified or inserted rows.</li>

<li>FOREIGN KEY definitions are now aware of the
lower_case_table_names setting in my.cnf.</li>

<li>SHOW CREATE TABLE does not output the database name to a
FOREIGN KEY definition if the referred table is in the same
database as the table.</li>

<li>InnoDB does a consistency check to most index pages before
writing them to a data file.</li>

<li>If you set innodb_force_recovery &gt; 0, InnoDB tries to jump
over corrupt index records and pages when doing SELECT * FROM
table. This helps in dumping.</li>

<li>InnoDB now again uses asynchronous unbuffered i/o in Windows
2000 and XP; only unbuffered simulated async i/o in NT,
95/98/ME.</li>

<li>Fixed a bug: the InnoDB range estimator greatly exaggerated the
size of a short index range if the paths to the endpoints of the
range in the index tree happened to branch already in the root.
This could cause unnecessary table scans in SQL queries. The fix
will also be backported to 3.23.54.</li>

<li>Fixed a bug present in 3.23.52, 4.0.3, 4.0.4: InnoDB startup
could take very long or even crash on some Win 95/98/ME
computers.</li>

<li>Fixed a bug: the AUTO-INC lock was held to the end of the
transaction if it was granted after a lock wait. This could cause
unnecessary deadlocks.</li>

<li>Fixed a bug: if SHOW INNODB STATUS, innodb_monitor, or
innodb_lock_monitor had to print several hundred transactions in
one report, and the output became truncated, InnoDB would hang,
printing to the error log many waits for a mutex created at
srv0srv.c, line 1621.</li>

<li>Fixed a bug: SHOW INNODB STATUS on Unix always reported average
file read size as 0 bytes.</li>

<li>Fixed a potential bug in 4.0.4: InnoDB now does ORDER BY ...
DESC like MyISAM.</li>

<li>Fixed a bug: DROP TABLE could cause crash or a hang if there
was a rollback concurrently running on the table. The fix will only
be backported to 3.23 if this appears a real problem for
users.</li>

<li>Fixed a bug: ORDER BY could fail if you had not created a
primary key to a table, but had defined several indexes of which at
least one was a UNIQUE index with all its columns declared as NOT
NULL.</li>

<li>Fixed a bug: a lock wait timeout in connection with ON DELETE
CASCADE could cause corruption in indexes.</li>

<li>Fixed a bug: if a SELECT was done with a unique key from a
primary index, and the search matched to a delete-marked record,
InnoDB could return the NEXT record.</li>

<li>Outstanding bugs: in 4.0.4 two bugs were introduced to
AUTO_INCREMENT. REPLACE can cause the counter to be left 1 too low.
A deadlock or a lock wait timeout can cause the same problem. These
will be fixed in 4.0.6.</li>
</ul>

<h4><a id="SEC485" name="SEC485"
href="manual_toc.html#SEC485">7.5.14.7 MySQL/InnoDB-3.23.53,
October 9, 2002</a></h4>

<ul>
<li>We again use unbuffered disk i/o to data files in Windows. Win
XP and Win 2000 read performance seems to be very poor with normal
i/o.</li>

<li>Tuned range estimator so that index range scans are preferred
over full index scans.</li>

<li>Allow dropping and creating a table even if
innodb_force_recovery is set. One can use this to drop a table
which would cause a crash in rollback or purge, or if a failed
table import causes a runaway rollback in recovery.</li>

<li>Fixed a bug present in 3.23.52, 4.0.3, 4.0.4: InnoDB startup
could take very long or even crash on some Win 95/98/ME
computers.</li>

<li>Fixed a bug: fast shutdown (which is the default) sometimes was
slowed down by purge and insert buffer merge.</li>

<li>Fixed a bug: doing a big SELECT from a table where no rows were
visible in a consistent read could cause a very long (&gt; 600
seconds) semaphore wait in btr0cur.c line 310.</li>

<li>Fixed a bug: the AUTO-INC lock was held to the end of the
transaction if it was granted after a lock wait. This could cause
unnecessary deadlocks.</li>

<li>Fixed a bug: if you created a temporary table inside LOCK
TABLES, and used that temporary table, that caused an assertion
failure in ha_innobase.cc.</li>

<li>Fixed a bug: if SHOW INNODB STATUS, innodb_monitor, or
innodb_lock_monitor had to print several hundred transactions in
one report, and the output became truncated, InnoDB would hang,
printing to the error log many waits for a mutex created at
srv0srv.c, line 1621.</li>

<li>Fixed a bug: SHOW INNODB STATUS on Unix always reported average
file read size as 0 bytes.</li>
</ul>

<h4><a id="SEC486" name="SEC486"
href="manual_toc.html#SEC486">7.5.14.8 MySQL/InnoDB-4.0.4, October
2, 2002</a></h4>

<ul>
<li>We again use unbuffered disk i/o in Windows. Win XP and Win
2000 read performance seems to be very poor with normal i/o.</li>

<li>Increased the max key length of InnoDB tables from 500 to 1024
bytes.</li>

<li>Increased the table comment field in SHOW TABLE STATUS so that
up to 16000 characters of foreign key definitions can be printed
there.</li>

<li>The auto-increment counter is no longer incremented if an
insert of a row immediately fails in an error.</li>

<li>Allow dropping and creating a table even if
innodb_force_recovery is set. One can use this to drop a table
which would cause a crash in rollback or purge, or if a failed
table import causes a runaway rollback in recovery.</li>

<li>Fixed a bug: Using ORDER BY primarykey DESC in 4.0.3 causes an
assertion failure in btr0pcur.c, line 203.</li>

<li>Fixed a bug: fast shutdown (which is the default) sometimes was
slowed down by purge and insert buffer merge.</li>

<li>Fixed a bug: doing a big SELECT from a table where no rows were
visible in a consistent read could cause a very long (&gt; 600
seconds) semaphore wait in btr0cur.c line 310.</li>

<li>Fixed a bug: if the MySQL query cache was used, it did not get
invalidated by a modification done by ON DELETE CASCADE or ...SET
NULL.</li>

<li>Fixed a bug: if you created a temporary table inside LOCK
TABLES, and used that temporary table, that caused an assertion
failure in ha_innodb.cc.</li>

<li>Fixed a bug: if you set innodb_flush_log_at_trx_commit to 1,
SHOW VARIABLES would show its value as 16 million.</li>
</ul>

<h4><a id="SEC487" name="SEC487"
href="manual_toc.html#SEC487">7.5.14.9 MySQL/InnoDB-4.0.3, August
28, 2002</a></h4>

<ul>
<li>Removed unnecessary deadlocks when inserts have to wait for a
locking read, update, or delete to release its next-key lock.</li>

<li>The MySQL <code>HANDLER</code> SQL commands now work also for
<code>InnoDB</code> type tables. <code>InnoDB</code> does the
<code>HANDLER</code> reads always as consistent reads.
<code>HANDLER</code> is a direct access path to read individual
indexes of tables. In some cases <code>HANDLER</code> can be used
as a substitute of server-side cursors.</li>

<li>Fixed a bug in 4.0.2: even a simple insert could crash the AIX
version.</li>

<li>Fixed a bug: if you used in a table name characters whose code
is &gt; 127, in DROP TABLE InnoDB could assert on line 155 of
pars0sym.c.</li>

<li>Compilation from source now provides a working version both on
HP-UX-11 and HP-UX-10.20. The source of 4.0.2 worked only on 11,
and the source of 3.23.52 only on 10.20.</li>

<li>Fixed a bug: if compiled on 64-bit Solaris, InnoDB produced a
bus error at startup.</li>
</ul>

<h4><a id="SEC488" name="SEC488"
href="manual_toc.html#SEC488">7.5.14.10 MySQL/InnoDB-3.23.52,
August 16, 2002</a></h4>

<ul>
<li>The feature set of 3.23 will be frozen from this version on.
New features will go the 4.0 branch, and only bug fixes will be
made to the 3.23 branch.</li>

<li>Many CPU-bound join queries now run faster. On Windows also
many other CPU-bound queries run faster.</li>

<li>A new SQL command SHOW INNODB STATUS returns the output of the
InnoDB Monitor to the client. The InnoDB Monitor now prints
detailed info on the latest detected deadlock.</li>

<li>InnoDB made the SQL query optimizer to avoid too much
index-only range scans and choose full table scans instead. This is
now fixed.</li>

<li>"BEGIN" and "COMMIT" are now added in the binlog around
transactions. The MySQL replication now respects transaction
borders: a user will no longer see half transactions in replication
slaves.</li>

<li>A replication slave now prints in crash recovery the last
master binlog position it was able to recover to.</li>

<li>A new setting innodb_flush_log_at_trx_commit=2 makes InnoDB to
write the log to the operating system file cache at each commit.
This is almost as fast as the setting
innodb_flush_log_at_trx_commit=0, and the setting 2 also has the
nice feature that in a crash where the operating system does not
crash, no committed transaction is lost. If the operating system
crashes or there is a power outage, then the setting 2 is no safer
than the setting 0.</li>

<li>Added checksum fields to log blocks.</li>

<li>SET FOREIGN_KEY_CHECKS=0 helps in importing tables in an
arbitrary order which does not respect the foreign key rules.</li>

<li>SET UNIQUE_CHECKS=0 speeds up table imports into InnoDB if you
have UNIQUE constraints on secondary indexes.</li>

<li>SHOW TABLE STATUS now lists also possible ON DELETE CASCADE or
ON DELETE SET NULL in the comment field of the table.</li>

<li>When CHECK TABLE is run on any InnoDB type table, it now checks
also the adaptive hash index for all tables.</li>

<li>If you defined ON DELETE CASCADE or SET NULL and updated the
referenced key in the parent row, InnoDB deleted or updated the
child row. This is now changed to conform to SQL-92: you get the
error 'Cannot delete parent row'.</li>

<li>Improved the auto-increment algorithm: now the first insert or
SHOW TABLE STATUS initializes the auto-inc counter for the table.
This removes almost all surprising deadlocks caused by SHOW TABLE
STATUS.</li>

<li>Aligned some buffers used in reading and writing to data files.
This allows using unbuffered raw devices as data files in
Linux.</li>

<li>Fixed a bug: If you updated the primary key of a table so that
only the case of characters changed, that could cause assertion
failures, mostly in page0page.ic line 515.</li>

<li>Fixed a bug: If you delete or update a row referenced in a
foreign key constraint and the foreign key check has to wait for a
lock, then the check may report an erroneous result. This affects
also the ON DELETE... operation.</li>

<li>Fixed a bug: A deadlock or a lock wait timeout error in InnoDB
causes InnoDB to roll back the whole transaction, but MySQL could
still write the earlier SQL statements to the binlog, even though
InnoDB rolled them back. This could, for example, cause replicated
databases to get out-of-sync.</li>

<li>Fixed a bug: If the database happened to crash in the middle of
a commit, then the recovery might leak tablespace pages.</li>

<li>Fixed a bug: If you specified a non-latin1 character set in
my.cnf, then, in contrary to what is stated in the manual, in a
foreign key constraint a string type column had to have the same
length specification in the referencing table and the referenced
table.</li>

<li>Fixed a bug: DROP TABLE or DROP DATABASE could fail if there
simultaneously was a CREATE TABLE running.</li>

<li>Fixed a bug: If you configured the buffer pool bigger than 2 GB
in a 32-bit computer, InnoDB would assert in buf0buf.ic line
214.</li>

<li>Fixed a bug: on 64-bit computers updating rows which contained
the SQL NULL in some column could cause the undo log and the
ordinary log to become corrupt.</li>

<li>Fixed a bug: innodb_log_monitor caused a hang if it suppressed
lock prints for a page.</li>

<li>Fixed a bug: in the HP-UX-10.20 version mutexes would leak and
cause race conditions and crashes in any part of InnoDB code.</li>

<li>Fixed a bug: if you ran in the AUTOCOMMIT mode, executed a
SELECT, and immediately after that a RENAME TABLE, then RENAME
would fail and MySQL would complain about error 1192.</li>

<li>Fixed a bug: if compiled on 64-bit Solaris, InnoDB produced a
bus error at startup.</li>
</ul>

<h4><a id="SEC489" name="SEC489"
href="manual_toc.html#SEC489">7.5.14.11 MySQL/InnoDB-4.0.2, July
10, 2002</a></h4>

<ul>
<li>InnoDB is essentially the same as InnoDB-3.23.51.</li>

<li>If no innodb_data_file_path is specified, InnoDB at the
database creation now creates a 10 MB auto-extending data file
ibdata1 to the datadir of MySQL. In 4.0.1 the file was 64 MB and
not auto-extending.</li>
</ul>

<h4><a id="SEC490" name="SEC490"
href="manual_toc.html#SEC490">7.5.14.12 MySQL/InnoDB-3.23.51, June
12, 2002</a></h4>

<ul>
<li>Fixed a bug: a join could result in a seg fault in copying of a
BLOB or TEXT column if some of the BLOB or TEXT columns in the
table contained SQL NULL values.</li>

<li>Fixed a bug: if you added self-referential foreign key
constraints with ON DELETE CASCADE to tables and a row deletion
caused InnoDB to attempt the deletion of the same row twice because
of a cascading delete, then you got an assertion failure.</li>

<li>Fixed a bug: if you use MySQL 'user level locks' and close a
connection, then InnoDB may assert in ha_innobase.cc, line
302.</li>
</ul>

<h4><a id="SEC491" name="SEC491"
href="manual_toc.html#SEC491">7.5.14.13 MySQL/InnoDB-3.23.50, April
23, 2002</a></h4>

<ul>
<li>InnoDB now supports an auto-extending last data file. You do
not need to preallocate the whole data file at the database
startup.</li>

<li>Made several changes to facilitate the use of the InnoDB Hot
Backup tool. It is a separate non-free tool you can use to take
online backups of your database without shutting down the server or
setting any locks.</li>

<li>If you want to run the InnoDB Hot Backup tool on an
auto-extending data file you have to upgrade it to version
ibbackup-0.35.</li>

<li>The log scan phase in crash recovery will now run much
faster.</li>

<li>Starting from this server version, the hot backup tool
truncates unused ends in the backup InnoDB data files.</li>

<li>To allow the hot backup tool to work, on Windows we no longer
use unbuffered i/o or native async i/o; instead we use the same
simulated async i/o as on Unix.</li>

<li>You can now define the ON DELETE CASCADE or ON DELETE SET NULL
clause on foreign keys.</li>

<li>FOREIGN KEY constraints now survive ALTER TABLE and CREATE
INDEX.</li>

<li>We suppress the FOREIGN KEY check if any of the column values
in the foreign key or referenced key to be checked is the SQL NULL.
This is compatible with Oracle, for example.</li>

<li>SHOW CREATE TABLE now lists also foreign key constraints. Also
mysqldump no longer forgets about foreign keys in table
definitions.</li>

<li>You can now add a new foreign key constraint with ALTER TABLE
... ADD CONSTRAINT FOREIGN KEY (...) REFERENCES ... (...).</li>

<li>FOREIGN KEY definitions now allow backquotes around table and
column names.</li>

<li>MySQL command SET TRANSACTION ISOLATION LEVEL ... has now the
following effect on InnoDB tables: if a transaction is defined as
SERIALIZABLE then InnoDB conceptually adds LOCK IN SHARE MODE to
all consistent reads. If a transaction is defined to have any other
isolation level, then InnoDB obeys its default locking strategy
which is REPEATABLE READ.</li>

<li>SHOW TABLE STATUS no longer sets an x-lock at the end of an
auto-increment index if the auto-increment counter has already been
initialized. This removes in almost all cases the surprising
deadlocks caused by SHOW TABLE STATUS.</li>

<li>Fixed a bug: in a CREATE TABLE statement the string 'foreign'
followed by a non-space character confused the FOREIGN KEY parser
and caused table creation to fail with errno 150.</li>
</ul>

<h4><a id="SEC492" name="SEC492"
href="manual_toc.html#SEC492">7.5.14.14 MySQL/InnoDB-3.23.49,
February 17, 2002</a></h4>

<ul>
<li>Fixed a bug: if you called DROP DATABASE for a database on
which there simultaneously were running queries, the MySQL server
could crash or hang. Crashes fixed, but a full fix has to wait some
changes in the MySQL layer of code.</li>

<li>Fixed a bug: on Windows one had to put the database name in
lower case for DROP DATABASE to work. Fixed in 3.23.49: case no
longer matters on Windows. On Unix the database name remains
case-sensitive.</li>

<li>Fixed a bug: if one defined a non-latin1 character set as the
default character set, then definition of foreign key constraints
could fail in an assertion failure in dict0crea.c, reporting an
internal error 17.</li>
</ul>

<h4><a id="SEC493" name="SEC493"
href="manual_toc.html#SEC493">7.5.14.15 MySQL/InnoDB-3.23.48,
February 9, 2002</a></h4>

<ul>
<li>Tuned the SQL optimizer to favor more often index searches over
table scans.</li>

<li>Fixed a performance problem when several large SELECT queries
are run concurrently on a multiprocessor Linux computer. Large
CPU-bound SELECT queries will now also generally run faster on all
platforms.</li>

<li>If MySQL binlogging is used, InnoDB now prints after crash
recovery the latest MySQL binlog file name and the position in that
file (= byte offset) InnoDB was able to recover to. This is useful,
for example, when resynchronizing a master and a slave database in
replication.</li>

<li>Added better error messages to help in installation
problems.</li>

<li>One can now recover also MySQL temporary tables which have
become orphaned inside the InnoDB tablespace.</li>

<li>InnoDB now prevents a FOREIGN KEY declaration where the
signedness is not the same in the referencing and referenced
integer columns.</li>

<li>Fixed a bug: calling SHOW CREATE TABLE or SHOW TABLE STATUS
could cause memory corruption and make mysqld to crash. Especially
at risk was mysqldump, because it calls frequently SHOW CREATE
TABLE.</li>

<li>Fixed a bug: if on Unix you did an ALTER TABLE to an InnoDB
table and simultaneously did queries to it, mysqld could crash with
an assertion failure in row0row.c, line 474.</li>

<li>Fixed a bug: if inserts to several tables containing an
auto-inc column were wrapped inside one LOCK TABLES, InnoDB
asserted in lock0lock.c.</li>

<li>In 3.23.47 we allowed several NULLS in a UNIQUE secondary
index. But CHECK TABLE was not relaxed: it reports the table as
corrupt. CHECK TABLE no longer complains in this situation.</li>

<li>Fixed a bug: on Sparc and other high-endian processors SHOW
VARIABLES showed innodb_flush_log_at_trx_commit and other
boolean-valued startup parameters always OFF even if they were
switched on.</li>

<li>Fixed a bug: if you ran mysqld-max-nt as a service on Windows
NT/2000, the service shutdown did not always wait long enough for
the InnoDB shutdown to finish.</li>
</ul>

<h4><a id="SEC494" name="SEC494"
href="manual_toc.html#SEC494">7.5.14.16 MySQL/InnoDB-3.23.47,
December 28, 2001</a></h4>

<ul>
<li>Recovery happens now faster, especially in a lightly loaded
system, because background checkpointing has been made more
frequent.</li>

<li>InnoDB allows now several similar key values in a UNIQUE
secondary index if those values contain SQL NULLs. Thus the
convention is now the same as in MyISAM tables.</li>

<li>InnoDB gives a better row count estimate for a table which
contains BLOBs.</li>

<li>In a FOREIGN KEY constraint InnoDB is now case-insensitive to
column names, and in Windows also to table names.</li>

<li>InnoDB allows a FOREIGN KEY column of CHAR type to refer to a
column of VARCHAR type, and vice versa. MySQL silently changes the
type of some columns between CHAR and VARCHAR, and these silent
changes do not hinder FOREIGN KEY declaration any more.</li>

<li>Recovery has been made more resilient to corruption of log
files.</li>

<li>Unnecessary statistics calculation has been removed from
queries which generate a temporary table. Some ORDER BY and
DISTINCT queries will now run much faster.</li>

<li>MySQL now knows that the table scan of an InnoDB table is done
through the primary key. This will save a sort in some ORDER BY
queries.</li>

<li>The maximum key length of InnoDB tables is again restricted to
500 bytes. The MySQL interpreter is not able to handle longer
keys.</li>

<li>The default value of innodb_lock_wait_timeout was changed from
infinite to 50 seconds, the default value of innodb_file_io_threads
from 9 to 4.</li>
</ul>

<h4><a id="SEC495" name="SEC495"
href="manual_toc.html#SEC495">7.5.14.17 MySQL/InnoDB-4.0.1,
December 23, 2001</a></h4>

<ul>
<li>InnoDB is the same as in 3.23.47.</li>

<li>In 4.0.0 the MySQL interpreter did not know the syntax LOCK IN
SHARE MODE. This has been fixed.</li>

<li>In 4.0.0 multi-table delete did not work for transactional
tables. This has been fixed.</li>
</ul>

<h4><a id="SEC496" name="SEC496"
href="manual_toc.html#SEC496">7.5.14.18 MySQL/InnoDB-3.23.46,
November 30, 2001</a></h4>

<ul>
<li>This is the same as 3.23.45.</li>
</ul>

<h4><a id="SEC497" name="SEC497"
href="manual_toc.html#SEC497">7.5.14.19 MySQL/InnoDB-3.23.45,
November 23, 2001</a></h4>

<ul>
<li>This is a bugfix release.</li>

<li>In versions 3.23.42-.44 when creating a table on Windows you
have to use lower case letters in the database name to be able to
access the table. Fixed in 3.23.45.</li>

<li>InnoDB now flushes stdout and stderr every 10 seconds: if these
are redirected to files, the file contents can be better viewed
with an editor.</li>

<li>Fixed an assertion failure in .44, in trx0trx.c, line 178 when
you drop a table which has the .frm file but does not exist inside
InnoDB.</li>

<li>Fixed a bug in the insert buffer. The insert buffer tree could
get into an inconsistent state, causing a crash, and also crashing
the recovery. This bug could appear especially in large table
imports or alterations.</li>

<li>Fixed a bug in recovery: InnoDB could go into an infinite loop
constantly printing a warning message that it cannot find free
blocks from the buffer pool.</li>

<li>Fixed a bug: when you created a temporary table of the InnoDB
type, and then used ALTER TABLE to it, the MySQL server could
crash.</li>

<li>Prevented creation of MySQL system tables 'mysql.user',
'mysql.host', or 'mysql.db', in the InnoDB type.</li>

<li>Fixed a bug which can cause an assertion failure in 3.23.44 in
srv0srv.c, line 1728.</li>
</ul>

<h4><a id="SEC498" name="SEC498"
href="manual_toc.html#SEC498">7.5.14.20 MySQL/InnoDB-3.23.44,
November 2, 2001</a></h4>

<ul>
<li>You can define foreign key constraints on InnoDB tables. An
example: FOREIGN KEY (col1) REFERENCES table2(col2).</li>

<li>You can create &gt; 4 GB data files in those file systems that
allow it.</li>

<li>Improved InnoDB monitors, including a new innodb_table_monitor
which allows you to print the contents of the InnoDB internal data
dictionary.</li>

<li>DROP DATABASE will now work also for InnoDB tables.</li>

<li>Accent characters in the default character set latin1 will be
ordered according to the MySQL ordering.&lt;br&gt; NOTE: if you are
using latin1 and have inserted characters whose code is &gt; 127 to
an indexed CHAR column, you should run CHECK TABLE on your table
when you upgrade to 3.23.43, and drop and reimport the table if
CHECK TABLE reports an error!</li>

<li>InnoDB will calculate better table cardinality estimates.</li>

<li>Change in deadlock resolution: in .43 a deadlock rolls back
only the SQL statement, in .44 it will roll back the whole
transaction.</li>

<li>Deadlock, lock wait timeout, and foreign key constraint
violations (no parent row, child rows exist) now return native
MySQL error codes 1213, 1205, 1216, 1217, respectively.</li>

<li>A new my.cnf parameter innodb_thread_concurrency helps in
performance tuning in high concurrency environments.</li>

<li>A new my.cnf option innodb_force_recovery will help you in
dumping tables from a corrupted database.</li>

<li>A new my.cnf option innodb_fast_shutdown will speed up
shutdown. Normally InnoDB does a full purge and an insert buffer
merge at shutdown.</li>

<li>Raised maximum key length to 7000 bytes from a previous limit
of 500 bytes.</li>

<li>Fixed a bug in replication of auto-inc columns with multiline
inserts.</li>

<li>Fixed a bug when the case of letters changes in an update of an
indexed secondary column.</li>

<li>Fixed a hang when there are &gt; 24 data files.</li>

<li>Fixed a crash when MAX(col) is selected from an empty table,
and col is a not the first column in a multi-column index.</li>

<li>Fixed a bug in purge which could cause crashes.</li>
</ul>

<h4><a id="SEC499" name="SEC499"
href="manual_toc.html#SEC499">7.5.14.21 MySQL/InnoDB-3.23.43,
October 4, 2001</a></h4>

<ul>
<li>This is essentially the same as InnoDB-3.23.42.</li>
</ul>

<h4><a id="SEC500" name="SEC500"
href="manual_toc.html#SEC500">7.5.14.22 MySQL/InnoDB-3.23.42,
September 9, 2001</a></h4>

<ul>
<li>Fixed a bug which corrupted the table if the primary key of a
&gt; 8000-byte row was updated.</li>

<li>There are now 3 types of InnoDB Monitors: innodb_monitor,
innodb_lock_monitor, and innodb_tablespace_monitor. innodb_monitor
now prints also buffer pool hit rate and the total number of rows
inserted, updated, deleted, read.</li>

<li>Fixed a bug in RENAME TABLE.</li>

<li>Fixed a bug in replication with an auto-increment column.</li>
</ul>

<h4><a id="SEC501" name="SEC501"
href="manual_toc.html#SEC501">7.5.14.23 MySQL/InnoDB-3.23.41,
August 13, 2001</a></h4>

<ul>
<li>Support for &lt; 4 GB rows. The previous limit was 8000
bytes.</li>

<li>Use the doublewrite file flush method.</li>

<li>Raw disk partitions supported as data files.</li>

<li>InnoDB Monitor.</li>

<li>Several hang bugs fixed and an ORDER BY bug ('Sort aborted')
fixed.</li>
</ul>

<h4><a id="SEC502" name="SEC502"
href="manual_toc.html#SEC502">7.5.14.24 MySQL/InnoDB-3.23.40, July
16, 2001</a></h4>

<ul>
<li>Only a few rare bugs fixed.</li>
</ul>

<h4><a id="SEC503" name="SEC503"
href="manual_toc.html#SEC503">7.5.14.25 MySQL/InnoDB-3.23.39, June
13, 2001</a></h4>

<ul>
<li>CHECK TABLE now works for InnoDB tables.</li>

<li>A new my.cnf parameter innodb_unix_file_flush_method
introduced. It can be used to tune disk write performance.</li>

<li>An auto-increment column now gets new values past the
transaction mechanism. This saves CPU time and eliminates
transaction deadlocks in new value assignment.</li>

<li>Several bug fixes, most notably the rollback bug in
3.23.38.</li>
</ul>

<h4><a id="SEC504" name="SEC504"
href="manual_toc.html#SEC504">7.5.14.26 MySQL/InnoDB-3.23.38, May
12, 2001</a></h4>

<ul>
<li>The new syntax SELECT ... LOCK IN SHARE MODE is
introduced.</li>

<li>InnoDB now calls fsync after every disk write and calculates a
checksum for every database page it writes or reads, which will
reveal disk defects.</li>

<li>Several bug fixes.</li>
</ul>

<h3><a id="InnoDB_contact_information"
name="InnoDB_contact_information"
href="manual_toc.html#InnoDB_contact_information">7.5.15 InnoDB
Contact Information</a></h3>

<p>Contact information of Innobase Oy, producer of the InnoDB
engine. Web site: <a
href="http://www.innodb.com/">http://www.innodb.com/</a>. E-mail:
<a
href="mailto:Heikki.Tuuri@innodb.com">Heikki.Tuuri@innodb.com</a></p>

<pre>
phone: 358-9-6969 3250 (office) 358-40-5617367 (mobile)
Innobase Oy Inc.
World Trade Center Helsinki
Aleksanterinkatu 17
P.O.Box 800
00101 Helsinki
Finland
</pre>

<h2><a id="BDB" name="BDB" href="manual_toc.html#BDB">7.6
<code>BDB</code> or <code>BerkeleyDB</code> Tables</a></h2>

<p><a id="IDX1527" name="IDX1527"></a> <a id="IDX1528"
name="IDX1528"></a></p>

<h3><a id="BDB_overview" name="BDB_overview"
href="manual_toc.html#BDB_overview">7.6.1 Overview of
<code>BDB</code> Tables</a></h3>

<p>Support for <code>BDB</code> tables is included in the MySQL
source distribution starting from Version 3.23.34 and is activated
in the MySQL-Max binary.</p>

<p>BerkeleyDB, available at <a
href="http://www.sleepycat.com/">http://www.sleepycat.com/</a> has
provided MySQL with a transactional storage engine. By using
BerkeleyDB tables, your tables may have a greater chance of
surviving crashes, and also provides <code>COMMIT</code> and
<code>ROLLBACK</code> on transactions. The MySQL source
distribution comes with a <code>BDB</code> distribution that has a
couple of small patches to make it work more smoothly with MySQL.
You can't use a non-patched <code>BDB</code> version with
MySQL.</p>

<p>We at MySQL AB are working in close cooperation with Sleepycat
to keep the quality of the MySQL/BDB interface high.</p>

<p>When it comes to supporting <code>BDB</code> tables, we are
committed to help our users to locate the problem and help creating
a reproducable test case for any problems involving
<code>BDB</code> tables. Any such test case will be forwarded to
Sleepycat who in turn will help us find and fix the problem. As
this is a two stage operation, any problems with <code>BDB</code>
tables may take a little longer for us to fix than for other
storage engines. However, as the BerkeleyDB code itself has been
used by many other applications than MySQL, we don't envision any
big problems with this. See section <a
href="manual.html#Support">1.4.1 Support Offered by MySQL
AB</a>.</p>

<h3><a id="BDB_install" name="BDB_install"
href="manual_toc.html#BDB_install">7.6.2 Installing
<code>BDB</code></a></h3>

<p>If you have downloaded a binary version of MySQL that includes
support for BerkeleyDB, simply follow the instructions for
installing a binary version of MySQL. See section <a
href="manual.html#Installing_binary">2.2.7 Installing a MySQL
Binary Distribution</a>. See section <a
href="manual.html#mysqld-max">4.7.5 <code>mysqld-max</code>, An
Extended <code>mysqld</code> Server</a>.</p>

<p>To compile MySQL with Berkeley DB support, download MySQL
Version 3.23.34 or newer and configure <code>MySQL</code> with the
<code>--with-berkeley-db</code> option. See section <a
href="manual.html#Installing_source">2.3 Installing a MySQL Source
Distribution</a>.</p>

<pre>
cd /path/to/source/of/mysql-3.23.34
./configure --with-berkeley-db
</pre>

<p>Please refer to the manual provided with the <code>BDB</code>
distribution for more updated information.</p>

<p>Even though Berkeley DB is in itself very tested and reliable,
the MySQL interface is still considered beta quality. We are
actively improving and optimising it to get it stable very
soon.</p>

<h3><a id="BDB_start" name="BDB_start"
href="manual_toc.html#BDB_start">7.6.3 <code>BDB</code> startup
options</a></h3>

<p>If you are running with <code>AUTOCOMMIT=0</code> then your
changes in <code>BDB</code> tables will not be updated until you
execute <code>COMMIT</code>. Instead of commit you can execute
<code>ROLLBACK</code> to forget your changes. See section <a
href="manual.html#COMMIT">6.7.1 <code>BEGIN/COMMIT/ROLLBACK</code>
Syntax</a>.</p>

<p>If you are running with <code>AUTOCOMMIT=1</code> (the default),
your changes will be committed immediately. You can start an
extended transaction with the <code>BEGIN WORK</code> SQL command,
after which your changes will not be committed until you execute
<code>COMMIT</code> (or decide to <code>ROLLBACK</code> the
changes).</p>

<p>The following options to <code>mysqld</code> can be used to
change the behaviour of <code>BDB</code> tables:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>--bdb-home=directory</code></td>
<td>Base directory for <code>BDB</code> tables. This should be the
same directory you use for <code>--datadir</code>.</td>
</tr>

<tr>
<td><code>--bdb-lock-detect=#</code></td>
<td>Berkeley lock detect. One of (<code>DEFAULT</code>,
<code>OLDEST</code>, <code>RANDOM</code>, or
<code>YOUNGEST</code>).</td>
</tr>

<tr>
<td><code>--bdb-logdir=directory</code></td>
<td>Berkeley DB log file directory.</td>
</tr>

<tr>
<td><code>--bdb-no-sync</code></td>
<td>Don't synchronously flush logs.</td>
</tr>

<tr>
<td><code>--bdb-no-recover</code></td>
<td>Don't start Berkeley DB in recover mode.</td>
</tr>

<tr>
<td><code>--bdb-shared-data</code></td>
<td>Start Berkeley DB in multi-process mode (Don't use
<code>DB_PRIVATE</code> when initialising Berkeley DB)</td>
</tr>

<tr>
<td><code>--bdb-tmpdir=directory</code></td>
<td>Berkeley DB temporary file directory.</td>
</tr>

<tr>
<td><code>--skip-bdb</code></td>
<td>Disable usage of <code>BDB</code> tables.</td>
</tr>

<tr>
<td><code>-O bdb_max_lock=1000</code></td>
<td>Set the maximum number of locks possible. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</td>
</tr>
</table>

<p>If you use <code>--skip-bdb</code>, MySQL will not initialise
the Berkeley DB library and this will save a lot of memory. Of
course, you cannot use <code>BDB</code> tables if you are using
this option. If you try to create a <code>BDB</code> table, MySQL
will instead create a <code>MyISAM</code> table.</p>

<p>Normally you should start <code>mysqld</code> without
<code>--bdb-no-recover</code> if you intend to use <code>BDB</code>
tables. This may, however, give you problems when you try to start
<code>mysqld</code> if the <code>BDB</code> log files are
corrupted. See section <a href="manual.html#Starting_server">2.4.2
Problems Starting the MySQL Server</a>.</p>

<p>With <code>bdb_max_lock</code> you can specify the maximum
number of locks (10000 by default) you can have active on a
<code>BDB</code> table. You should increase this if you get errors
of type <code>bdb: Lock table is out of available locks</code> or
<code>Got error 12 from ...</code> when you have do long
transactions or when <code>mysqld</code> has to examine a lot of
rows to calculate the query.</p>

<p>You may also want to change <code>binlog_cache_size</code> and
<code>max_binlog_cache_size</code> if you are using big multi-line
transactions. See section <a href="manual.html#COMMIT">6.7.1
<code>BEGIN/COMMIT/ROLLBACK</code> Syntax</a>.</p>

<h3><a id="BDB_characteristics" name="BDB_characteristics"
href="manual_toc.html#BDB_characteristics">7.6.4 Characteristics of
<code>BDB</code> tables:</a></h3>

<ul>
<li>To be able to rollback transactions, the <code>BDB</code>
storage engine maintains log files. For maximum performance you
should place these on another disk than your databases by using the
<code>--bdb-logdir</code> option.</li>

<li>MySQL performs a checkpoint each time a new <code>BDB</code>
log file is started, and removes any log files that are not needed
for current transactions. One can also run <code>FLUSH LOGS</code>
at any time to checkpoint the Berkeley DB tables. For disaster
recovery, one should use table backups plus MySQL's binary log. See
section <a href="manual.html#Backup">4.4.1 Database Backups</a>.
<strong>Warning</strong>: If you delete old log files that are in
use, <code>BDB</code> will not be able to do recovery at all and
you may lose data if something goes wrong.</li>

<li>MySQL requires a <code>PRIMARY KEY</code> in each
<code>BDB</code> table to be able to refer to previously read rows.
If you don't create one, MySQL will create an maintain a hidden
<code>PRIMARY KEY</code> for you. The hidden key has a length of 5
bytes and is incremented for each insert attempt.</li>

<li>If all columns you access in a <code>BDB</code> table are part
of the same index or part of the primary key, then MySQL can
execute the query without having to access the actual row. In a
<code>MyISAM</code> table the above holds only if the columns are
part of the same index.</li>

<li>The <code>PRIMARY KEY</code> will be faster than any other key,
as the <code>PRIMARY KEY</code> is stored together with the row
data. As the other keys are stored as the key data + the
<code>PRIMARY KEY</code>, it's important to keep the <code>PRIMARY
KEY</code> as short as possible to save disk and get better
speed.</li>

<li><code>LOCK TABLES</code> works on <code>BDB</code> tables as
with other tables. If you don't use <code>LOCK TABLE</code>, MySQL
will issue an internal multiple-write lock on the table to ensure
that the table will be properly locked if another thread issues a
table lock.</li>

<li>Internal locking in <code>BDB</code> tables is done on page
level.</li>

<li><code>SELECT COUNT(*) FROM table_name</code> is slow as
<code>BDB</code> tables doesn't maintain a count of the number of
rows in the table.</li>

<li>Scanning is slower than with <code>MyISAM</code> tables as one
has data in <code>BDB</code> tables stored in B-trees and not in a
separate datafile.</li>

<li>The application must always be prepared to handle cases where
any change of a <code>BDB</code> table may make an automatic
rollback and any read may fail with a deadlock error.</li>

<li>Keys are not compressed to previous keys as with
<code>ISAM</code> or <code>MyISAM</code> tables. In other words,
the key information will take a little more space in
<code>BDB</code> tables compared to <code>MyISAM</code> tables
which don't use <code>PACK_KEYS=0</code>.</li>

<li>There are often holes in the <code>BDB</code> table to allow
you to insert new rows in the middle of the key tree. This makes
<code>BDB</code> tables somewhat larger than <code>MyISAM</code>
tables.</li>

<li>The optimiser needs to know an approximation of the number of
rows in the table. MySQL solves this by counting inserts and
maintaining this in a separate segment in each <code>BDB</code>
table. If you don't issue a lot of <code>DELETE</code> or
<code>ROLLBACK</code> statements, this number should be accurate
enough for the MySQL optimiser, but as MySQL only stores the number
on close, it may be incorrect if MySQL dies unexpectedly. It should
not be fatal even if this number is not 100% correct. One can
update the number of rows by executing <code>ANALYZE TABLE</code>
or <code>OPTIMIZE TABLE</code>. See section <a
href="manual.html#ANALYZE_TABLE">4.5.2 <code>ANALYZE TABLE</code>
Syntax</a> . See section <a href="manual.html#OPTIMIZE_TABLE">4.5.1
<code>OPTIMIZE TABLE</code> Syntax</a>.</li>

<li>If you get full disk with a <code>BDB</code> table, you will
get an error (probably error 28) and the transaction should roll
back. This is in contrast with <code>MyISAM</code> and
<code>ISAM</code> tables where <code>mysqld</code> will wait for
enough free disk before continuing.</li>
</ul>

<h3><a id="BDB_TODO" name="BDB_TODO"
href="manual_toc.html#BDB_TODO">7.6.5 Things we need to fix for
<code>BDB</code> in the near future:</a></h3>

<ul>
<li>It's very slow to open many <code>BDB</code> tables at the same
time. If you are going to use <code>BDB</code> tables, you should
not have a very big table cache (like &gt;256) and you should use
<code>--no-auto-rehash</code> with the <code>mysql</code> client.
We plan to partly fix this in 4.0.</li>

<li><code>SHOW TABLE STATUS</code> doesn't yet provide that much
information for <code>BDB</code> tables.</li>

<li>Optimise performance.</li>

<li>Change to not use page locks at all when we are scanning
tables.</li>
</ul>

<h3><a id="BDB_portability" name="BDB_portability"
href="manual_toc.html#BDB_portability">7.6.6 Operating systems
supported by <code>BDB</code></a></h3>

<p>If you after having built MySQL with support for
<code>BDB</code> tables get the following error in the log file
when you start <code>mysqld</code>:</p>

<pre>
bdb: architecture lacks fast mutexes: applications cannot be threaded
Can't init dtabases
</pre>

<p>This means that <code>BDB</code> tables are not supported for
your architecture. In this case you have to rebuild MySQL without
<code>BDB</code> table support.</p>

<p>Note: The following list is not complete; we will update it as
we receive more information about this.</p>

<p>Currently we know that the <code>BDB</code> storage engine works
with the following operating systems:</p>

<ul>
<li>Linux 2.x intel</li>

<li>Solaris SPARC</li>

<li>Caldera (SCO) OpenServer</li>

<li>Caldera (SCO) UnixWare 7.0.1</li>
</ul>

<p>It doesn't work with the following operating systems:</p>

<ul>
<li>Linux 2.x Alpha</li>

<li>Max OS X</li>
</ul>

<h3><a id="BDB_restrictions" name="BDB_restrictions"
href="manual_toc.html#BDB_restrictions">7.6.7 Restrictions on
<code>BDB</code> Tables</a></h3>

<p>Here follows the restrictions you have when using
<code>BDB</code> tables:</p>

<ul>
<li><code>BDB</code> tables store in the <tt>`.db'</tt> file the
path to the file as it was created. (This was done to be able to
detect locks in a multi-user environment that supports symlinks).
The effect of this is that <code>BDB</code> tables are not movable
between directories!</li>

<li>When taking backups of <code>BDB</code> tables, you have to
either use <code>mysqldump</code> or take a backup of all
<code>table_name.db</code> files and the <code>BDB</code> log
files. The <code>BDB</code> log files are the files in the base
data directory named <code>log.XXXXXXXXXX</code> (ten digits); The
<code>BDB</code> storage engine stores unfinished transactions in
the log files and requires these to be present when
<code>mysqld</code> starts.</li>
</ul>

<h3><a id="BDB_errors" name="BDB_errors"
href="manual_toc.html#BDB_errors">7.6.8 Errors That May Occur When
Using <code>BDB</code> Tables</a></h3>

<ul>
<li>If you get the following error in the <code>hostname.err
log</code> when starting <code>mysqld</code>: 

<pre>
bdb:  Ignoring log file: .../log.XXXXXXXXXX: unsupported log version #
</pre>

it means that the new <code>BDB</code> version doesn't support the
old log file format. In this case you have to delete all
<code>BDB</code> logs from your database directory (the files with
names that have the format <code>log.XXXXXXXXXX</code>) and restart
<code>mysqld</code>. We would also recommend you to do a
<code>mysqldump --opt</code> of your old <code>BDB</code> tables,
delete the old tables, and restore the dump.</li>

<li>If you are not running in auto-commit mode and delete a table
you are using by another thread you may get the following error
messages in the MySQL error file: 

<pre>
001119 23:43:56  bdb:  Missing log fileid entry
001119 23:43:56  bdb:  txn_abort: Log undo failed for LSN:
                       1 3644744: Invalid
</pre>

This is not fatal but we don't recommend that you delete tables if
you are not in auto-commit mode, until this problem is fixed (the
fix is not trivial).</li>
</ul>

<h1><a id="Clients" name="Clients" href="manual_toc.html#Clients">8
MySQL APIs</a></h1>

<p><a id="IDX1529" name="IDX1529"></a> <a id="IDX1530"
name="IDX1530"></a> <a id="IDX1531" name="IDX1531"></a> <a
id="IDX1532" name="IDX1532"></a> <a id="IDX1533"
name="IDX1533"></a></p>

<p>This chapter describes the APIs available for MySQL, where to
get them, and how to use them. The C API is the most extensively
covered, as it was developed by the MySQL team, and is the basis
for most of the other APIs.</p>

<h2><a id="PHP" name="PHP" href="manual_toc.html#PHP">8.1 MySQL PHP
API</a></h2>

<p><a id="IDX1534" name="IDX1534"></a></p>

<p>PHP is a server-side, HTML-embedded scripting language that may
be used to create dynamic web pages. It contains support for
accessing several databases, including MySQL. PHP may be run as a
separate program or compiled as a module for use with the Apache
web server.</p>

<p>The distribution and documentation are available at the PHP web
site (<a href="http://www.php.net/">http://www.php.net/</a>).</p>

<h3><a id="PHP_problems" name="PHP_problems"
href="manual_toc.html#PHP_problems">8.1.1 Common Problems with
MySQL and PHP</a></h3>

<ul>
<li>Error: "Maximum Execution Time Exceeded" This is a PHP limit;
go into the <tt>`php3.ini'</tt> file and set the maximum execution
time up from 30 seconds to something higher, as needed. It is also
not a bad idea to double the ram allowed per script to 16MB instead
of 8 MB.</li>

<li>Error: "Fatal error: Call to unsupported or undefined function
mysql_connect() in .." This means that your PHP version isn't
compiled with MySQL support. You can either compile a dynamic MySQL
module and load it into PHP or recompile PHP with built-in MySQL
support. This is described in detail in the PHP manual.</li>

<li>Error: "undefined reference to `uncompress'" This means that
the client library is compiled with support for a compressed
client/server protocol. The fix is to add <code>-lz</code> last
when linking with <code>-lmysqlclient</code>.</li>
</ul>

<h2><a id="Perl" name="Perl" href="manual_toc.html#Perl">8.2 MySQL
Perl API</a></h2>

<p><a id="IDX1535" name="IDX1535"></a> <a id="IDX1536"
name="IDX1536"></a></p>

<p>This section documents the Perl <code>DBI</code> interface. The
former interface was called <code>mysqlperl</code>.
<code>DBI</code>/<code>DBD</code> now is the recommended Perl
interface, so <code>mysqlperl</code> is obsolete and is not
documented here.</p>

<h3><a id="DBI_with_DBD" name="DBI_with_DBD"
href="manual_toc.html#DBI_with_DBD">8.2.1 <code>DBI</code> with
<code>DBD::mysql</code></a></h3>

<p><a id="IDX1537" name="IDX1537"></a></p>

<p><code>DBI</code> is a generic interface for many databases. That
means that you can write a script that works with many different
database engines without change. You need a DataBase Driver (DBD)
defined for each database type. For MySQL, this driver is called
<code>DBD::mysql</code>.</p>

<p>For more information on the Perl5 DBI, please visit the
<code>DBI</code> web page and read the documentation:</p>

<pre>
<a href="http://dbi.perl.org/">http://dbi.perl.org/</a>
</pre>

<p>For more information on Object Oriented Programming (OOP) as
defined in Perl5, see the Perl OOP page:</p>

<pre>
<a
href="http://language.perl.com/info/documentation.html">http://language.perl.com/info/documentation.html</a>
</pre>

<p>Note that if you want to use transactions with Perl, you need to
have <code>Msql-Mysql-modules</code> version 1.2216 or newer.</p>

<p>The recommended perl module is <code>DBD-mysql-2.1022</code> or
newer.</p>

<p>Installation instructions for MySQL Perl support are given in
section <a href="manual.html#Perl_support">2.7 Perl Installation
Comments</a>.</p>

<p>If you have the MySQL module installed, you can find information
about specific MySQL functionallity with one of the following
command</p>

<pre>
shell&gt; <code>perldoc DBD/mysql</code>
shell&gt; <code>perldoc mysql</code>
</pre>

<h3><a id="Perl_DBI_Class" name="Perl_DBI_Class"
href="manual_toc.html#Perl_DBI_Class">8.2.2 The <code>DBI</code>
Interface</a></h3>

<p><a id="IDX1538" name="IDX1538"></a></p>

<p><strong>Portable DBI Methods</strong></p>

<table border="1" width="100%">
<tr>
<td><strong>Method</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>connect</code></td>
<td>Establishes a connection to a database server.</td>
</tr>

<tr>
<td><code>disconnect</code></td>
<td>Disconnects from the database server.</td>
</tr>

<tr>
<td><code>prepare</code></td>
<td>Prepares a SQL statement for execution.</td>
</tr>

<tr>
<td><code>execute</code></td>
<td>Executes prepared statements.</td>
</tr>

<tr>
<td><code>do</code></td>
<td>Prepares and executes a SQL statement.</td>
</tr>

<tr>
<td><code>quote</code></td>
<td>Quotes string or <code>BLOB</code> values to be inserted.</td>
</tr>

<tr>
<td><code>fetchrow_array</code></td>
<td>Fetches the next row as an array of fields.</td>
</tr>

<tr>
<td><code>fetchrow_arrayref</code></td>
<td>Fetches next row as a reference array of fields.</td>
</tr>

<tr>
<td><code>fetchrow_hashref</code></td>
<td>Fetches next row as a reference to a hashtable.</td>
</tr>

<tr>
<td><code>fetchall_arrayref</code></td>
<td>Fetches all data as an array of arrays.</td>
</tr>

<tr>
<td><code>finish</code></td>
<td>Finishes a statement and lets the system free resources.</td>
</tr>

<tr>
<td><code>rows</code></td>
<td>Returns the number of rows affected.</td>
</tr>

<tr>
<td><code>data_sources</code></td>
<td>Returns an array of databases available on localhost.</td>
</tr>

<tr>
<td><code>ChopBlanks</code></td>
<td>Controls whether <code>fetchrow_*</code> methods trim
spaces.</td>
</tr>

<tr>
<td><code>NUM_OF_PARAMS</code></td>
<td>The number of placeholders in the prepared statement.</td>
</tr>

<tr>
<td><code>NULLABLE</code></td>
<td>Which columns can be <code>NULL</code>.</td>
</tr>

<tr>
<td><code>trace</code></td>
<td>Perform tracing for debugging.</td>
</tr>
</table>

<p><strong>MySQL-specific Methods</strong></p>

<table border="1" width="100%">
<tr>
<td><strong>Method</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>insertid</code></td>
<td>The latest <code>AUTO_INCREMENT</code> value.</td>
</tr>

<tr>
<td><code>is_blob</code></td>
<td>Which columns are <code>BLOB</code> values.</td>
</tr>

<tr>
<td><code>is_key</code></td>
<td>Which columns are keys.</td>
</tr>

<tr>
<td><code>is_num</code></td>
<td>Which columns are numeric.</td>
</tr>

<tr>
<td><code>is_pri_key</code></td>
<td>Which columns are primary keys.</td>
</tr>

<tr>
<td><code>is_not_null</code></td>
<td>Which columns CANNOT be <code>NULL</code>. See
<code>NULLABLE</code>.</td>
</tr>

<tr>
<td><code>length</code></td>
<td>Maximum possible column sizes.</td>
</tr>

<tr>
<td><code>max_length</code></td>
<td>Maximum column sizes actually present in result.</td>
</tr>

<tr>
<td><code>NAME</code></td>
<td>Column names.</td>
</tr>

<tr>
<td><code>NUM_OF_FIELDS</code></td>
<td>Number of fields returned.</td>
</tr>

<tr>
<td><code>table</code></td>
<td>Table names in returned set.</td>
</tr>

<tr>
<td><code>type</code></td>
<td>All column types.</td>
</tr>
</table>

<p>The Perl methods are described in more detail in the following
sections. Variables used for method return values have these
meanings:</p>

<dl compact="compact">
<dt><code>$dbh</code></dt>

<dd>Database handle</dd>

<dt><code>$sth</code></dt>

<dd>Statement handle</dd>

<dt><code>$rc</code></dt>

<dd>Return code (often a status)</dd>

<dt><code>$rv</code></dt>

<dd>Return value (often a row count)</dd>
</dl>

<p><strong>Portable DBI Methods</strong></p>

<dl compact="compact">
<dt><code>connect($data_source, $username, $password)</code></dt>

<dd><a id="IDX1539" name="IDX1539"></a> <a id="IDX1540"
name="IDX1540"></a> Use the <code>connect</code> method to make a
database connection to the data source. The
<code>$data_source</code> value should begin with
<code>DBI:driver_name:</code>. Example uses of <code>connect</code>
with the <code>DBD::mysql</code> driver: 

<pre>
$dbh = DBI-&gt;connect("DBI:mysql:$database", $user, $password);
$dbh = DBI-&gt;connect("DBI:mysql:$database:$hostname",
                    $user, $password);
$dbh = DBI-&gt;connect("DBI:mysql:$database:$hostname:$port",
                    $user, $password);
</pre>

If the user name and/or password are undefined, <code>DBI</code>
uses the values of the <code>DBI_USER</code> and
<code>DBI_PASS</code> environment variables, respectively. If you
don't specify a hostname, it defaults to <code>'localhost'</code>.
If you don't specify a port number, it defaults to the default
MySQL port (3306). As of <code>Msql-Mysql-modules</code> Version
1.2009, the <code>$data_source</code> value allows certain
modifiers: 

<dl compact="compact">
<dt><code>mysql_read_default_file=file_name</code></dt>

<dd>Read <tt>`filename'</tt> as an option file. For information on
option files, see section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</dd>

<dt><code>mysql_read_default_group=group_name</code></dt>

<dd>The default group when reading an option file is normally the
<code>[client]</code> group. By specifying the
<code>mysql_read_default_group</code> option, the default group
becomes the <code>[group_name]</code> group.</dd>

<dt><code>mysql_compression=1</code></dt>

<dd>Use compressed communication between the client and server
(MySQL Version 3.22.3 or later).</dd>

<dt><code>mysql_socket=/path/to/socket</code></dt>

<dd>Specify the pathname of the Unix socket that is used to connect
to the server (MySQL Version 3.21.15 or later).</dd>
</dl>

Multiple modifiers may be given; each must be preceded by a
semicolon. For example, if you want to avoid hardcoding the user
name and password into a <code>DBI</code> script, you can take them
from the user's <tt>`~/.my.cnf'</tt> option file instead by writing
your <code>connect</code> call like this: 

<pre>
$dbh = DBI-&gt;connect("DBI:mysql:$database"
                . ";mysql_read_default_file=$ENV{HOME}/.my.cnf",
                $user, $password);
</pre>

This call will read options defined for the <code>[client]</code>
group in the option file. If you wanted to do the same thing but
use options specified for the <code>[perl]</code> group as well,
you could use this: 

<pre>
$dbh = DBI-&gt;connect("DBI:mysql:$database"
                . ";mysql_read_default_file=$ENV{HOME}/.my.cnf"
                . ";mysql_read_default_group=perl",
                $user, $password);
</pre>

<a id="IDX1541" name="IDX1541"></a> <a id="IDX1542"
name="IDX1542"></a></dd>

<dt><code>disconnect</code></dt>

<dd>The <code>disconnect</code> method disconnects the database
handle from the database. This is typically called right before you
exit from the program. Example: 

<pre>
$rc = $dbh-&gt;disconnect;
</pre>

<a id="IDX1543" name="IDX1543"></a> <a id="IDX1544"
name="IDX1544"></a></dd>

<dt><code>prepare($statement)</code></dt>

<dd>Prepares a SQL statement for execution by the database engine
and returns a statement handle <code>($sth)</code>, which you can
use to invoke the <code>execute</code> method. Typically you handle
<code>SELECT</code> statements (and <code>SELECT</code>-like
statements such as <code>SHOW</code>, <code>DESCRIBE</code>, and
<code>EXPLAIN</code>) by means of <code>prepare</code> and
<code>execute</code>. Example: 

<pre>
$sth = $dbh-&gt;prepare($statement)
    or die "Can't prepare $statement: $dbh-&gt;errstr\n";
</pre>

If you want to read big results to your client you can tell Perl to
use <code>mysql_use_result()</code> with: 

<pre>
my $sth = $dbh-&gt;prepare($statement { "mysql_use_result" =&gt; 1});
</pre>

<a id="IDX1545" name="IDX1545"></a> <a id="IDX1546"
name="IDX1546"></a></dd>

<dt><code>execute</code></dt>

<dd>The <code>execute</code> method executes a prepared statement.
For non-<code>SELECT</code> statements, <code>execute</code>
returns the number of rows affected. If no rows are affected,
<code>execute</code> returns <code>"0E0"</code>, which Perl treats
as zero but regards as true. If an error occurs,
<code>execute</code> returns <code>undef</code>. For
<code>SELECT</code> statements, <code>execute</code> only starts
the SQL query in the database; you need to use one of the
<code>fetch_*</code> methods described here to retrieve the data.
Example: 

<pre>
$rv = $sth-&gt;execute
          or die "can't execute the query: $sth-&gt;errstr;
</pre>

<a id="IDX1547" name="IDX1547"></a> <a id="IDX1548"
name="IDX1548"></a></dd>

<dt><code>do($statement)</code></dt>

<dd>The <code>do</code> method prepares and executes a SQL
statement and returns the number of rows affected. If no rows are
affected, <code>do</code> returns <code>"0E0"</code>, which Perl
treats as zero but regards as true. This method is generally used
for non-<code>SELECT</code> statements that cannot be prepared in
advance (due to driver limitations) or that do not need to be
executed more than once (inserts, deletes, etc.). Example: 

<pre>
$rv = $dbh-&gt;do($statement)
        or die "Can't execute $statement: $dbh- &gt;errstr\n";
</pre>

Generally the 'do' statement is much faster (and is preferable)
than prepare/execute for statements that don't contain parameters.
<a id="IDX1549" name="IDX1549"></a> <a id="IDX1550"
name="IDX1550"></a> <a id="IDX1551" name="IDX1551"></a> <a
id="IDX1552" name="IDX1552"></a></dd>

<dt><code>quote($string)</code></dt>

<dd>The <code>quote</code> method is used to "escape" any special
characters contained in the string and to add the required outer
quotation marks. Example: 

<pre>
$sql = $dbh-&gt;quote($string)
</pre>

<a id="IDX1553" name="IDX1553"></a> <a id="IDX1554"
name="IDX1554"></a></dd>

<dt><code>fetchrow_array</code></dt>

<dd>This method fetches the next row of data and returns it as an
array of field values. Example: 

<pre>
while(@row = $sth-&gt;fetchrow_array) {
        print qw($row[0]\t$row[1]\t$row[2]\n);
}
</pre>

<a id="IDX1555" name="IDX1555"></a> <a id="IDX1556"
name="IDX1556"></a></dd>

<dt><code>fetchrow_arrayref</code></dt>

<dd>This method fetches the next row of data and returns it as a
reference to an array of field values. Example: 

<pre>
while($row_ref = $sth-&gt;fetchrow_arrayref) {
        print qw($row_ref-&gt;[0]\t$row_ref-&gt;[1]\t$row_ref-&gt;[2]\n);
}
</pre>

<a id="IDX1557" name="IDX1557"></a> <a id="IDX1558"
name="IDX1558"></a></dd>

<dt><code>fetchrow_hashref</code></dt>

<dd>This method fetches a row of data and returns a reference to a
hash table containing field name/value pairs. This method is not
nearly as efficient as using array references as demonstrated
above. Example: 

<pre>
while($hash_ref = $sth-&gt;fetchrow_hashref) {
        print qw($hash_ref-&gt;{firstname}\t$hash_ref-&gt;{lastname}\t\
                $hash_ref- &gt; title}\n);
}
</pre>

<a id="IDX1559" name="IDX1559"></a> <a id="IDX1560"
name="IDX1560"></a></dd>

<dt><code>fetchall_arrayref</code></dt>

<dd>This method is used to get all the data (rows) to be returned
from the SQL statement. It returns a reference to an array of
references to arrays for each row. You access or print the data by
using a nested loop. Example: 

<pre>
my $table = $sth-&gt;fetchall_arrayref
                or die "$sth-&gt;errstr\n";
my($i, $j);
for $i ( 0 .. $#{$table} ) {
        for $j ( 0 .. $#{$table-&gt;[$i]} ) {
                print "$table-&gt;[$i][$j]\t";
        }
        print "\n";
}
</pre>

<a id="IDX1561" name="IDX1561"></a> <a id="IDX1562"
name="IDX1562"></a></dd>

<dt><code>finish</code></dt>

<dd>Indicates that no more data will be fetched from this statement
handle. You call this method to free up the statement handle and
any system resources associated with it. Example: 

<pre>
$rc = $sth-&gt;finish;
</pre>

<a id="IDX1563" name="IDX1563"></a> <a id="IDX1564"
name="IDX1564"></a></dd>

<dt><code>rows</code></dt>

<dd>Returns the number of rows changed (updated, deleted, etc.) by
the last command. This is usually used after a
non-<code>SELECT</code> <code>execute</code> statement. Example: 

<pre>
$rv = $sth-&gt;rows;
</pre>

<a id="IDX1565" name="IDX1565"></a> <a id="IDX1566"
name="IDX1566"></a></dd>

<dt><code>NULLABLE</code></dt>

<dd>Returns a reference to an array of values that indicate whether
columns may contain <code>NULL</code> values. The possible values
for each array element are 0 or the empty string if the column
cannot be <code>NULL</code>, 1 if it can, and 2 if the column's
<code>NULL</code> status is unknown. Example: 

<pre>
$null_possible = $sth-&gt;{NULLABLE};
</pre>

<a id="IDX1567" name="IDX1567"></a> <a id="IDX1568"
name="IDX1568"></a></dd>

<dt><code>NUM_OF_FIELDS</code></dt>

<dd>This attribute indicates the number of fields returned by a
<code>SELECT</code> or <code>SHOW FIELDS</code> statement. You may
use this for checking whether a statement returned a result: A zero
value indicates a non-<code>SELECT</code> statement like
<code>INSERT</code>, <code>DELETE</code>, or <code>UPDATE</code>.
Example: 

<pre>
$nr_of_fields = $sth-&gt;{NUM_OF_FIELDS};
</pre>

<a id="IDX1569" name="IDX1569"></a> <a id="IDX1570"
name="IDX1570"></a></dd>

<dt><code>data_sources($driver_name)</code></dt>

<dd>This method returns an array containing names of databases
available to the MySQL server on the host <code>'localhost'</code>.
Example: 

<pre>
@dbs = DBI-&gt;data_sources("mysql");
</pre>

<a id="IDX1571" name="IDX1571"></a> <a id="IDX1572"
name="IDX1572"></a></dd>

<dt><code>ChopBlanks</code></dt>

<dd>This attribute determines whether the <code>fetchrow_*</code>
methods will chop leading and trailing blanks from the returned
values. Example: 

<pre>
$sth-&gt;{'ChopBlanks'} =1;
</pre>

<a id="IDX1573" name="IDX1573"></a> <a id="IDX1574"
name="IDX1574"></a></dd>

<dt><code>trace($trace_level)</code></dt>

<dt><code>trace($trace_level, $trace_filename)</code></dt>

<dd>The <code>trace</code> method enables or disables tracing. When
invoked as a <code>DBI</code> class method, it affects tracing for
all handles. When invoked as a database or statement handle method,
it affects tracing for the given handle (and any future children of
the handle). Setting <code>$trace_level</code> to 2 provides
detailed trace information. Setting <code>$trace_level</code> to 0
disables tracing. Trace output goes to the standard error output by
default. If <code>$trace_filename</code> is specified, the file is
opened in append mode and output for <strong>all</strong> traced
handles is written to that file. Example: 

<pre>
DBI-&gt;trace(2);                # trace everything
DBI-&gt;trace(2,"/tmp/dbi.out"); # trace everything to
                              # /tmp/dbi.out
$dth-&gt;trace(2);               # trace this database handle
$sth-&gt;trace(2);               # trace this statement handle
</pre>

<a id="IDX1575" name="IDX1575"></a> <a id="IDX1576"
name="IDX1576"></a> You can also enable <code>DBI</code> tracing by
setting the <code>DBI_TRACE</code> environment variable. Setting it
to a numeric value is equivalent to calling
<code>DBI-&gt;(value)</code>. Setting it to a pathname is
equivalent to calling <code>DBI-&gt;(2,value)</code>.</dd>
</dl>

<p><strong>MySQL-specific Methods</strong></p>

<p>The methods shown here are MySQL-specific and not part of the
<code>DBI</code> standard. Several of them are now deprecated:
<code>is_blob</code>, <code>is_key</code>, <code>is_num</code>,
<code>is_pri_key</code>, <code>is_not_null</code>,
<code>length</code>, <code>max_length</code>, and
<code>table</code>. Where <code>DBI</code>-standard alternatives
exist, they are noted here:</p>

<dl compact="compact">
<dt><code>insertid</code></dt>

<dd><a id="IDX1577" name="IDX1577"></a> <a id="IDX1578"
name="IDX1578"></a> <a id="IDX1579" name="IDX1579"></a> If you use
the <code>AUTO_INCREMENT</code> feature of MySQL, the new
auto-incremented values will be stored here. Example: 

<pre>
$new_id = $sth-&gt;{insertid};
</pre>

As an alternative, you can use
<code>$dbh-&gt;{'mysql_insertid'}</code>. <a id="IDX1580"
name="IDX1580"></a> <a id="IDX1581" name="IDX1581"></a></dd>

<dt><code>is_blob</code></dt>

<dd>Returns a reference to an array of boolean values; for each
element of the array, a value of TRUE indicates that the respective
column is a <code>BLOB</code>. Example: 

<pre>
$keys = $sth-&gt;{is_blob};
</pre>

<a id="IDX1582" name="IDX1582"></a> <a id="IDX1583"
name="IDX1583"></a></dd>

<dt><code>is_key</code></dt>

<dd>Returns a reference to an array of boolean values; for each
element of the array, a value of TRUE indicates that the respective
column is a key. Example: 

<pre>
$keys = $sth-&gt;{is_key};
</pre>

<a id="IDX1584" name="IDX1584"></a> <a id="IDX1585"
name="IDX1585"></a></dd>

<dt><code>is_num</code></dt>

<dd>Returns a reference to an array of boolean values; for each
element of the array, a value of TRUE indicates that the respective
column contains numeric values. Example: 

<pre>
$nums = $sth-&gt;{is_num};
</pre>

<a id="IDX1586" name="IDX1586"></a> <a id="IDX1587"
name="IDX1587"></a></dd>

<dt><code>is_pri_key</code></dt>

<dd>Returns a reference to an array of boolean values; for each
element of the array, a value of TRUE indicates that the respective
column is a primary key. Example: 

<pre>
$pri_keys = $sth-&gt;{is_pri_key};
</pre>

<a id="IDX1588" name="IDX1588"></a> <a id="IDX1589"
name="IDX1589"></a></dd>

<dt><code>is_not_null</code></dt>

<dd>Returns a reference to an array of boolean values; for each
element of the array, a value of FALSE indicates that this column
may contain <code>NULL</code> values. Example: 

<pre>
$not_nulls = $sth-&gt;{is_not_null};
</pre>

<code>is_not_null</code> is deprecated; it is preferable to use the
<code>NULLABLE</code> attribute (described above), because that is
a DBI standard. <a id="IDX1590" name="IDX1590"></a> <a id="IDX1591"
name="IDX1591"></a> <a id="IDX1592" name="IDX1592"></a> <a
id="IDX1593" name="IDX1593"></a></dd>

<dt><code>length</code></dt>

<dt><code>max_length</code></dt>

<dd>Each of these methods returns a reference to an array of column
sizes. The <code>length</code> array indicates the maximum possible
sizes that each column may be (as declared in the table
description). The <code>max_length</code> array indicates the
maximum sizes actually present in the result table. Example: 

<pre>
$lengths = $sth-&gt;{length};
$max_lengths = $sth-&gt;{max_length};
</pre>

<a id="IDX1594" name="IDX1594"></a> <a id="IDX1595"
name="IDX1595"></a></dd>

<dt><code>NAME</code></dt>

<dd>Returns a reference to an array of column names. Example: 

<pre>
$names = $sth-&gt;{NAME};
</pre>

<a id="IDX1596" name="IDX1596"></a> <a id="IDX1597"
name="IDX1597"></a></dd>

<dt><code>table</code></dt>

<dd>Returns a reference to an array of table names. Example: 

<pre>
$tables = $sth-&gt;{table};
</pre>

<a id="IDX1598" name="IDX1598"></a> <a id="IDX1599"
name="IDX1599"></a></dd>

<dt><code>type</code></dt>

<dd>Returns a reference to an array of column types. Example: 

<pre>
$types = $sth-&gt;{type};
</pre>
</dd>
</dl>

<h3><a id="DBI-info" name="DBI-info"
href="manual_toc.html#DBI-info">8.2.3 More
<code>DBI</code>/<code>DBD</code> Information</a></h3>

<p><a id="IDX1600" name="IDX1600"></a></p>

<p>You can use the <code>perldoc</code> command to get more
information about <code>DBI</code>.</p>

<pre>
perldoc DBI
perldoc DBI::FAQ
perldoc DBD::mysql
</pre>

<p>You can also use the <code>pod2man</code>,
<code>pod2html</code>, etc., tools to translate to other
formats.</p>

<p>You can find the latest <code>DBI</code> information at the
<code>DBI</code> web page: <a
href="http://dbi.perl.org/">http://dbi.perl.org/</a>.</p>

<h2><a id="ODBC" name="ODBC" href="manual_toc.html#ODBC">8.3 MySQL
ODBC Support</a></h2>

<p><a id="IDX1601" name="IDX1601"></a> <a id="IDX1602"
name="IDX1602"></a> <a id="IDX1603" name="IDX1603"></a></p>

<p>MySQL provides support for ODBC by means of the
<code>MyODBC</code> program. This chapter will teach you how to
install <code>MyODBC</code>, and how to use it. Here, you will also
find a list of common programs that are known to work with
<code>MyODBC</code>.</p>

<h3><a id="Installing_MyODBC" name="Installing_MyODBC"
href="manual_toc.html#Installing_MyODBC">8.3.1 How To Install
MyODBC</a></h3>

<p><code>MyODBC</code> 2.50 is a 32-bit ODBC 2.50 specification
level 0 (with level 1 and level 2 features) driver for connecting
an ODBC-aware application to MySQL. <code>MyODBC</code> works on
Windows 9x/Me/NT/2000/XP and most Unix platforms.
<code>MyODBC</code> 3.51 is an enhanced version with ODBC 3.5x
specification level 1 (complete core API + level 2 features).</p>

<p><code>MyODBC</code> is <code>Open Source</code>, and you can
find the newest version at <a
href="http://www.mysql.com/downloads/api-myodbc.html">http://www.mysql.com/downloads/api-myodbc.html</a>.
Please note that the 2.50.x versions are <code>LGPL</code>
licensed, whereas the 3.51.x versions are <code>GPL</code>
licensed.</p>

<p>If you have problem with <code>MyODBC</code> and your program
also works with OLEDB, you should try the OLEDB driver.</p>

<p>Normally you only need to install <code>MyODBC</code> on Windows
machines. You only need <code>MyODBC</code> for Unix if you have a
program like ColdFusion that is running on the Unix machine and
uses ODBC to connect to the databases.</p>

<p>If you want to install <code>MyODBC</code> on a Unix box, you
will also need an <code>ODBC</code> manager. <code>MyODBC</code> is
known to work with most of the Unix ODBC managers.</p>

<p>To install <code>MyODBC</code> on Windows, you should download
the appropriate <code>MyODBC</code> <tt>`.zip'</tt> file, unpack it
with <code>WinZIP</code> or some similar program, and execute the
<tt>`SETUP.EXE'</tt> file.</p>

<p>On Windows/NT/XP you may get the following error when trying to
install <code>MyODBC</code>:</p>

<pre>
An error occurred while copying C:\WINDOWS\SYSTEM\MFC30.DLL. Restart
Windows and try installing again (before running any applications which
use ODBC)
</pre>

<p>The problem in this case is that some other program is using
ODBC and because of how Windows is designed, you may not in this
case be able to install a new ODBC drivers with Microsoft's ODBC
setup program. In most cases you can continue by just pressing
<code>Ignore</code> to copy the rest of the MyODBC files and the
final installation should still work. If this doesn't work, the
solution is to reboot your computer in ``safe mode`` (Choose this
by pressing F8 just before your machine starts Windows during
rebooting), install <code>MyODBC</code>, and reboot to normal
mode.</p>

<ul>
<li>To make a connection to a Unix box from a Windows box, with an
ODBC application (one that doesn't support MySQL natively), you
must first install <code>MyODBC</code> on the Windows machine.</li>

<li>The user and Windows machine must have the access privileges to
the MySQL server on the Unix machine. This is set up with the
<code>GRANT</code> command. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</li>

<li>You must create an ODBC DSN entry as follows: 

<ul>
<li>Open the Control Panel on the Windows machine.</li>

<li>Double-click the ODBC Data Sources 32-bit icon.</li>

<li>Click the tab User DSN.</li>

<li>Click the button Add.</li>

<li>Select MySQL in the screen Create New Data Source and click the
Finish button.</li>

<li>The MySQL Driver default configuration screen is shown. See
section <a href="manual.html#ODBC_administrator">8.3.2 How to Fill
in the Various Fields in the ODBC Administrator Program</a>.</li>
</ul>
</li>

<li>Now start your application and select the ODBC driver with the
DSN you specified in the ODBC administrator.</li>
</ul>

<p>Notice that there are other configuration options on the screen
of MySQL (trace, don't prompt on connect, etc) that you can try if
you run into problems.</p>

<h3><a id="ODBC_administrator" name="ODBC_administrator"
href="manual_toc.html#ODBC_administrator">8.3.2 How to Fill in the
Various Fields in the ODBC Administrator Program</a></h3>

<p><a id="IDX1604" name="IDX1604"></a></p>

<p>There are three possibilities for specifying the server name on
Windows95:</p>

<ul>
<li>Use the IP address of the server.</li>

<li>Add a file <tt>`\windows\lmhosts'</tt> with the following
information: 

<pre>
ip hostname
</pre>

For example: 

<pre>
194.216.84.21 my_hostname
</pre>
</li>

<li>Configure the PC to use DNS.</li>
</ul>

<p>Example of how to fill in the <code>ODBC setup</code>:</p>

<pre>
Windows DSN name:   test
Description:        This is my test database
MySql Database:     test
Server:             194.216.84.21
User:               monty
Password:           my_password
Port:
</pre>

<p>The value for the <code>Windows DSN name</code> field is any
name that is unique in your Windows ODBC setup.</p>

<p>You don't have to specify values for the <code>Server</code>,
<code>User</code>, <code>Password</code>, or <code>Port</code>
fields in the ODBC setup screen. However, if you do, the values
will be used as the defaults later when you attempt to make a
connection. You have the option of changing the values at that
time.</p>

<p>If the port number is not given, the default port (3306) is
used.</p>

<p>If you specify the option <code>Read options from
C:\my.cnf</code>, the groups <code>client</code> and
<code>odbc</code> will be read from the <tt>`C:\my.cnf'</tt> file.
You can use all options that are usable by
<code>mysql_options()</code>. See section <a
href="manual.html#mysql_options">8.4.3.159
<code>mysql_options()</code></a>.</p>

<h3><a id="MyODBC_connect_parameters"
name="MyODBC_connect_parameters"
href="manual_toc.html#MyODBC_connect_parameters">8.3.3 Connect
parameters for MyODBC</a></h3>

<p>One can specify the following parameters for <code>MyODBC</code>
on the <code>[Servername]</code> section of an <tt>`ODBC.INI'</tt>
file or through the <code>InConnectionString</code> argument in the
<code>SQLDriverConnect()</code> call.</p>

<table border="1" width="100%">
<tr>
<td><strong>Parameter</strong></td>
<td><strong>Default value</strong></td>
<td><strong>Comment</strong></td>
</tr>

<tr>
<td>user</td>
<td>ODBC (on Windows)</td>
<td>The username used to connect to MySQL.</td>
</tr>

<tr>
<td>server</td>
<td>localhost</td>
<td>The hostname of the MySQL server.</td>
</tr>

<tr>
<td>database</td>
<td></td>
<td>The default database.</td>
</tr>

<tr>
<td>option</td>
<td>0</td>
<td>A integer by which you can specify how <code>MyODBC</code>
should work. See below.</td>
</tr>

<tr>
<td>port</td>
<td>3306</td>
<td>The TCP/IP port to use if <code>server</code> is not
<code>localhost</code>.</td>
</tr>

<tr>
<td>stmt</td>
<td></td>
<td>A statement that will be executed when connecting to
<code>MySQL</code>.</td>
</tr>

<tr>
<td>password</td>
<td></td>
<td>The password for the <code>server</code> <code>user</code>
combination.</td>
</tr>

<tr>
<td>socket</td>
<td></td>
<td>The socket or Windows pipe to connect to.</td>
</tr>
</table>

<p>The option argument is used to tell <code>MyODBC</code> that the
client isn't 100% ODBC compliant. On Windows, one normally sets the
option flag by toggling the different options on the connection
screen but one can also set this in the opton argument. The
following options are listed in the same order as they appear in
the <code>MyODBC</code> connect screen:</p>

<table border="1" width="100%">
<tr>
<td><strong>Bit</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>1</td>
<td>The client can't handle that <code>MyODBC</code> returns the
real width of a column.</td>
</tr>

<tr>
<td>2</td>
<td>The client can't handle that MySQL returns the true value of
affected rows. If this flag is set then MySQL returns 'found rows'
instead. One must have MySQL 3.21.14 or newer to get this to
work.</td>
</tr>

<tr>
<td>4</td>
<td>Make a debug log in c:\myodbc.log. This is the same as putting
<code>MYSQL_DEBUG=d:t:O,c::\myodbc.log</code> in
<tt>`AUTOEXEC.BAT'</tt></td>
</tr>

<tr>
<td>8</td>
<td>Don't set any packet limit for results and parameters.</td>
</tr>

<tr>
<td>16</td>
<td>Don't prompt for questions even if driver would like to
prompt</td>
</tr>

<tr>
<td>32</td>
<td>Simulate a ODBC 1.0 driver in some context.</td>
</tr>

<tr>
<td>64</td>
<td>Ignore use of database name in 'database.table.column'.</td>
</tr>

<tr>
<td>128</td>
<td>Force use of ODBC manager cursors (experimental).</td>
</tr>

<tr>
<td>256</td>
<td>Disable the use of extended fetch (experimental).</td>
</tr>

<tr>
<td>512</td>
<td>Pad CHAR fields to full column length.</td>
</tr>

<tr>
<td>1024</td>
<td>SQLDescribeCol() will return fully qualifed column names</td>
</tr>

<tr>
<td>2048</td>
<td>Use the compressed server/client protocol</td>
</tr>

<tr>
<td>4096</td>
<td>Tell server to ignore space after function name and before
<code>'('</code> (needed by PowerBuilder). This will make all
function names keywords!</td>
</tr>

<tr>
<td>8192</td>
<td>Connect with named pipes to a <code>mysqld</code> server
running on NT.</td>
</tr>

<tr>
<td>16384</td>
<td>Change LONGLONG columns to INT columns (some applications can't
handle LONGLONG).</td>
</tr>

<tr>
<td>32768</td>
<td>Return 'user' as Table_qualifier and Table_owner from SQLTables
(experimental)</td>
</tr>

<tr>
<td>65536</td>
<td>Read parameters from the <code>client</code> and
<code>odbc</code> groups from <tt>`my.cnf'</tt></td>
</tr>

<tr>
<td>131072</td>
<td>Add some extra safety checks (should not bee needed
but...)</td>
</tr>
</table>

<p>If you want to have many options, you should add the above
flags! For example setting option to 12 (4+8) gives you debugging
without package limits!</p>

<p>The default <tt>`MYODBC.DLL'</tt> is compiled for optimal
performance. If you want to debug <code>MyODBC</code> (for example
to enable tracing), you should instead use <tt>`MYODBCD.DLL'</tt>.
To install this file, copy <tt>`MYODBCD.DLL'</tt> over the
installed <tt>`MYODBC.DLL'</tt> file.</p>

<h3><a id="ODBC_Problems" name="ODBC_Problems"
href="manual_toc.html#ODBC_Problems">8.3.4 How to Report Problems
with MyODBC</a></h3>

<p><code>MyODBC</code> has been tested with Access, Admndemo.exe,
C++-Builder, Borland Builder 4, Centura Team Developer (formerly
Gupta SQL/Windows), ColdFusion (on Solaris and NT with svc pack 5),
Crystal Reports, DataJunction, Delphi, ERwin, Excel, iHTML,
FileMaker Pro, FoxPro, Notes 4.5/4.6, SBSS, Perl DBD-ODBC, Paradox,
Powerbuilder, Powerdesigner 32 bit, VC++, and Visual Basic.</p>

<p>If you know of any other applications that work with
<code>MyODBC</code>, please send mail to <a
href="mailto:myodbc@lists.mysql.com">myodbc@lists.mysql.com</a>
about this!</p>

<p>With some programs you may get an error like: <code>Another user
has modifies the record that you have modified</code>. In most
cases this can be solved by doing one of the following things:</p>

<ul>
<li>Add a primary key for the table if there isn't one
already.</li>

<li>Add a timestamp column if there isn't one already.</li>

<li>Only use double float fields. Some programs may fail when they
compare single floats.</li>
</ul>

<p>If the above doesn't help, you should do a <code>MyODBC</code>
trace file and try to figure out why things go wrong.</p>

<h3><a id="MyODBC_clients" name="MyODBC_clients"
href="manual_toc.html#MyODBC_clients">8.3.5 Programs Known to Work
with MyODBC</a></h3>

<p>Most programs should work with <code>MyODBC</code>, but for each
of those listed here, we have tested it ourselves or received
confirmation from some user that it works:</p>

<dl compact="compact">
<dt><strong>Program</strong></dt>

<dd><strong>Comment</strong> <a id="IDX1605"
name="IDX1605"></a></dd>

<dt>Access</dt>

<dd>To make Access work: 

<ul>
<li>If you are using Access 2000, you should get and install the
newest (version 2.6 or above) Microsoft MDAC (<code>Microsoft Data
Access Components</code>) from <a
href="http://www.microsoft.com/data/">http://www.microsoft.com/data/</a>.
This will fix the following bug in Access: when you export data to
MySQL, the table and column names aren't specified. Another way to
around this bug is to upgrade to MyODBC Version 2.50.33 and MySQL
Version 3.23.x, which together provide a workaround for this bug!
You should also get and apply the Microsoft Jet 4.0 Service Pack 5
(SP5) which can be found here <a
href="http://support.microsoft.com/support/kb/articles/Q%20239/1/14.ASP">
http://support.microsoft.com/support/kb/articles/Q
239/1/14.ASP</a>. This will fix some cases where columns are marked
as <code>#deleted#</code> in Access. Note that if you are using
MySQL Version 3.22, you must to apply the MDAC patch and use MyODBC
2.50.32 or 2.50.34 and above to go around this problem.</li>

<li>For all Access versions, you should enable the MyODBC option
flag <code>Return matching rows</code>. For Access 2.0, you should
additionally enable <code>Simulate ODBC 1.0</code>.</li>

<li>You should have a timestamp in all tables you want to be able
to update. For maximum portability <code>TIMESTAMP(14)</code> or
simple <code>TIMESTAMP</code> is recommended instead of other
<code>TIMESTAMP(X)</code> variations.</li>

<li>You should have a primary key in the table. If not, new or
updated rows may show up as <code>#DELETED#</code>.</li>

<li>Only use <code>DOUBLE</code> float fields. Access fails when
comparing with single floats. The symptom usually is that new or
updated rows may show up as <code>#DELETED#</code> or that you
can't find or update rows.</li>

<li>If you are linking a table through MyODBC, which has
<code>BIGINT</code> as one of the column, then the results will be
displayed as <code>#DELETED</code>. The work around solution is: 

<ul>
<li>Have one more dummy column with <code>TIMESTAMP</code> as the
data type, preferably <code>TIMESTAMP(14)</code>.</li>

<li>Check the <code>'Change BIGINT columns to INT'</code> in
connection options dialog in ODBC DSN Administrator</li>

<li>Delete the table link from access and re-create it.</li>
</ul>

It still displays the previous records as <code>#DELETED#</code>,
but newly added/updated records will be displayed properly.</li>

<li>If you still get the error <code>Another user has changed your
data</code> after adding a <code>TIMESTAMP</code> column, the
following trick may help you: Don't use <code>table</code> data
sheet view. Create instead a form with the fields you want, and use
that <code>form</code> data sheet view. You should set the
<code>DefaultValue</code> property for the <code>TIMESTAMP</code>
column to <code>NOW()</code>. It may be a good idea to hide the
<code>TIMESTAMP</code> column from view so your users are not
confused.</li>

<li>In some cases, Access may generate illegal SQL queries that
MySQL can't understand. You can fix this by selecting
<code>"Query|SQLSpecific|Pass-Through"</code> from the Access
menu.</li>

<li>Access on NT will report <code>BLOB</code> columns as <code>OLE
OBJECTS</code>. If you want to have <code>MEMO</code> columns
instead, you should change the column to <code>TEXT</code> with
<code>ALTER TABLE</code>.</li>

<li>Access can't always handle <code>DATE</code> columns properly.
If you have a problem with these, change the columns to
<code>DATETIME</code>.</li>

<li>If you have in Access a column defined as <code>BYTE</code>,
Access will try to export this as <code>TINYINT</code> instead of
<code>TINYINT UNSIGNED</code>. This will give you problems if you
have values &gt; 127 in the column!</li>
</ul>

<a id="IDX1606" name="IDX1606"></a></dd>

<dt>ADO</dt>

<dd>When you are coding with the ADO API and <code>MyODBC</code>
you need to put attention in some default properties that aren't
supported by the MySQL server. For example, using the
<code>CursorLocation Property</code> as <code>adUseServer</code>
will return for the <code>RecordCount Property</code> a result of
-1. To have the right value, you need to set this property to
<code>adUseClient</code>, like is showing in the VB code here: 

<pre>
Dim myconn As New ADODB.Connection
Dim myrs As New Recordset
Dim mySQL As String
Dim myrows As Long

myconn.Open "DSN=MyODBCsample"
mySQL = "SELECT * from user"
myrs.Source = mySQL
Set myrs.ActiveConnection = myconn
myrs.CursorLocation = adUseClient
myrs.Open
myrows = myrs.RecordCount

myrs.Close
myconn.Close
</pre>

Another workaround is to use a <code>SELECT COUNT(*)</code>
statement for a similar query to get the correct row count.</dd>

<dt>Active server pages (ASP)</dt>

<dd>You should use the option flag <code>Return matching
rows</code>.</dd>

<dt>BDE applications</dt>

<dd>To get these to work, you should set the option flags
<code>Don't optimize column widths</code> and <code>Return matching
rows</code>. <a id="IDX1607" name="IDX1607"></a></dd>

<dt>Borland Builder 4</dt>

<dd>When you start a query you can use the property
<code>Active</code> or use the method <code>Open</code>. Note that
<code>Active</code> will start by automatically issuing a
<code>SELECT * FROM ...</code> query that may not be a good thing
if your tables are big!</dd>

<dt>ColdFusion (On Unix)</dt>

<dd>The following information is taken from the ColdFusion
documentation: Use the following information to configure
ColdFusion Server for Linux to use the unixODBC driver with
<code>MyODBC</code> for MySQL data sources. Allaire has verified
that <code>MyODBC</code> Version 2.50.26 works with MySQL Version
3.22.27 and ColdFusion for Linux. (Any newer version should also
work.) You can download <code>MyODBC</code> at <a
href="http://www.mysql.com/downloads/api-myodbc.html">http://www.mysql.com/downloads/api-myodbc.html</a>
<a id="IDX1608" name="IDX1608"></a> ColdFusion Version 4.5.1 allows
you to us the ColdFusion Administrator to add the MySQL data
source. However, the driver is not included with ColdFusion Version
4.5.1. Before the MySQL driver will appear in the ODBC datasources
drop-down list, you must build and copy the <code>MyODBC</code>
driver to <tt>`/opt/coldfusion/lib/libmyodbc.so'</tt>. The Contrib
directory contains the program <tt>`mydsn-xxx.zip'</tt> which
allows you to build and remove the DSN registry file for the MyODBC
driver on Coldfusion applications. <a id="IDX1609"
name="IDX1609"></a></dd>

<dt>DataJunction</dt>

<dd>You have to change it to output <code>VARCHAR</code> rather
than <code>ENUM</code>, as it exports the latter in a manner that
causes MySQL grief. <a id="IDX1610" name="IDX1610"></a></dd>

<dt>Excel</dt>

<dd>Works. A few tips: 

<ul>
<li>If you have problems with dates, try to select them as strings
using the <code>CONCAT()</code> function. For example: 

<pre>
select CONCAT(rise_time), CONCAT(set_time)
    from sunrise_sunset;
</pre>

Values retrieved as strings this way should be correctly recognised
as time values by Excel97. The purpose of <code>CONCAT()</code> in
this example is to fool ODBC into thinking the column is of
``string type''. Without the <code>CONCAT()</code>, ODBC knows the
column is of time type, and Excel does not understand that. Note
that this is a bug in Excel, because it automatically converts a
string to a time. This would be great if the source was a text
file, but is plain stupid when the source is an ODBC connection
that reports exact types for each column.</li>
</ul>

<a id="IDX1611" name="IDX1611"></a></dd>

<dt>Word</dt>

<dd>To retrieve data from MySQL to Word/Excel documents, you need
to use the <code>MyODBC</code> driver and the Add-in Microsoft
Query help. For example, create a db with a table containing 2
columns of text: 

<ul>
<li>Insert rows using the <code>mysql</code> client command-line
tool.</li>

<li>Create a DSN file using the ODBC manager, for example,
<tt>`my'</tt> for the db above.</li>

<li>Open the Word application.</li>

<li>Create a blank new documentation.</li>

<li>Using the tool bar called Database, press the button insert
database.</li>

<li>Press the button Get Data.</li>

<li>At the right hand of the screen Get Data, press the button Ms
Query.</li>

<li>In the Ms Query create a New Data Source using the DSN file
my.</li>

<li>Select the new query.</li>

<li>Select the columns that you want.</li>

<li>Make a filter if you want.</li>

<li>Make a Sort if you want.</li>

<li>Select Return Data to Microsoft Word.</li>

<li>Click Finish.</li>

<li>Click Insert data and select the records.</li>

<li>Click OK and you see the rows in your Word document.</li>
</ul>

<a id="IDX1612" name="IDX1612"></a></dd>

<dt>odbcadmin</dt>

<dd>Test program for ODBC. <a id="IDX1613" name="IDX1613"></a></dd>

<dt>Delphi</dt>

<dd>You must use BDE Version 3.2 or newer. Set the <code>Don't
optimize column width</code> option field when connecting to MySQL.
Also, here is some potentially useful Delphi code that sets up both
an ODBC entry and a BDE entry for <code>MyODBC</code> (the BDE
entry requires a BDE Alias Editor that is free at a Delphi Super
Page near you. (Thanks to Bryan Brunton <a
href="mailto:bryan@flesherfab.com">bryan@flesherfab.com</a> for
this): 

<pre>
fReg:= TRegistry.Create;
  fReg.OpenKey('\Software\ODBC\ODBC.INI\DocumentsFab', True);
  fReg.WriteString('Database', 'Documents');
  fReg.WriteString('Description', ' ');
  fReg.WriteString('Driver', 'C:\WINNT\System32\myodbc.dll');
  fReg.WriteString('Flag', '1');
  fReg.WriteString('Password', '');
  fReg.WriteString('Port', ' ');
  fReg.WriteString('Server', 'xmark');
  fReg.WriteString('User', 'winuser');
  fReg.OpenKey('\Software\ODBC\ODBC.INI\ODBC Data Sources', True);
  fReg.WriteString('DocumentsFab', 'MySQL');
  fReg.CloseKey;
  fReg.Free;

  Memo1.Lines.Add('DATABASE NAME=');
  Memo1.Lines.Add('USER NAME=');
  Memo1.Lines.Add('ODBC DSN=DocumentsFab');
  Memo1.Lines.Add('OPEN MODE=READ/WRITE');
  Memo1.Lines.Add('BATCH COUNT=200');
  Memo1.Lines.Add('LANGDRIVER=');
  Memo1.Lines.Add('MAX ROWS=-1');
  Memo1.Lines.Add('SCHEMA CACHE DIR=');
  Memo1.Lines.Add('SCHEMA CACHE SIZE=8');
  Memo1.Lines.Add('SCHEMA CACHE TIME=-1');
  Memo1.Lines.Add('SQLPASSTHRU MODE=SHARED AUTOCOMMIT');
  Memo1.Lines.Add('SQLQRYMODE=');
  Memo1.Lines.Add('ENABLE SCHEMA CACHE=FALSE');
  Memo1.Lines.Add('ENABLE BCD=FALSE');
  Memo1.Lines.Add('ROWSET SIZE=20');
  Memo1.Lines.Add('BLOBS TO CACHE=64');
  Memo1.Lines.Add('BLOB SIZE=32');

  AliasEditor.Add('DocumentsFab','MySQL',Memo1.Lines);
</pre>

<a id="IDX1614" name="IDX1614"></a></dd>

<dt>C++ Builder</dt>

<dd>Tested with BDE Version 3.0. The only known problem is that
when the table schema changes, query fields are not updated. BDE,
however, does not seem to recognise primary keys, only the index
PRIMARY, though this has not been a problem.</dd>

<dt>Vision</dt>

<dd>You should use the option flag <code>Return matching
rows</code>. <a id="IDX1615" name="IDX1615"></a></dd>

<dt>Visual Basic</dt>

<dd>To be able to update a table, you must define a primary key for
the table. Visual Basic with ADO can't handle big integers. This
means that some queries like <code>SHOW PROCESSLIST</code> will not
work properly. The fix is to set the option
<code>OPTION=16384</code> in the ODBC connect string or to set the
<code>Change BIGINT columns to INT</code> option in the MyODBC
connect screen. You may also want to set the <code>Return matching
rows</code> option.</dd>

<dt>VisualInterDev</dt>

<dd>If you get the error <code>[Microsoft][ODBC Driver Manager]
Driver does not support this parameter</code> the reason may be
that you have a <code>BIGINT</code> in your result. Try setting the
<code>Change BIGINT columns to INT</code> option in the MyODBC
connect screen.</dd>

<dt>Visual Objects</dt>

<dd>You should use the option flag <code>Don't optimize column
widths</code>.</dd>
</dl>

<h3><a id="ODBC_and_last_insert_id" name="ODBC_and_last_insert_id"
href="manual_toc.html#ODBC_and_last_insert_id">8.3.6 How to Get the
Value of an <code>AUTO_INCREMENT</code> Column in ODBC</a></h3>

<p><a id="IDX1616" name="IDX1616"></a></p>

<p>A common problem is how to get the value of an automatically
generated ID from an <code>INSERT</code>. With ODBC, you can do
something like this (assuming that <code>auto</code> is an
<code>AUTO_INCREMENT</code> field):</p>

<pre>
INSERT INTO foo (auto,text) VALUES(NULL,'text');
SELECT LAST_INSERT_ID();
</pre>

<p>Or, if you are just going to insert the ID into another table,
you can do this:</p>

<pre>
INSERT INTO foo (auto,text) VALUES(NULL,'text');
INSERT INTO foo2 (id,text) VALUES(LAST_INSERT_ID(),'text');
</pre>

<p>See section <a href="manual.html#Getting_unique_ID">8.4.6.3 How
Can I Get the Unique ID for the Last Inserted Row?</a>.</p>

<p>For the benefit of some ODBC applications (at least Delphi and
Access), the following query can be used to find a newly inserted
row:</p>

<pre>
SELECT * FROM tbl_name WHERE auto IS NULL;
</pre>

<h3><a id="MyODBC_bug_report" name="MyODBC_bug_report"
href="manual_toc.html#MyODBC_bug_report">8.3.7 Reporting Problems
with MyODBC</a></h3>

<p><a id="IDX1617" name="IDX1617"></a> <a id="IDX1618"
name="IDX1618"></a> <a id="IDX1619" name="IDX1619"></a></p>

<p>If you encounter difficulties with <code>MyODBC</code>, you
should start by making a log file from the ODBC manager (the log
you get when requesting logs from ODBCADMIN) and a
<code>MyODBC</code> log.</p>

<p>To get a <code>MyODBC</code> log, you need to do the
following:</p>

<ol>
<li>Ensure that you are using <tt>`myodbcd.dll'</tt> and not
<tt>`myodbc.dll'</tt>. The easiest way to do this is to get
<tt>`myodbcd.dll'</tt> from the MyODBC distribution and copy it
over the <tt>`myodbc.dll'</tt>, which is probably in your
<tt>`C:\windows\system32'</tt> or <tt>`C:\winnt\system32'</tt>
directory. Note that you probably want to restore the old
myodbc.dll file when you have finished testing, as this is a lot
faster than <tt>`myodbcd.dll'</tt>.</li>

<li>Tag the `Trace MyODBC' option flag in the <code>MyODBC</code>
connect/configure screen. The log will be written to file
<tt>`C:\myodbc.log'</tt>. If the trace option is not remembered
when you are going back to the above screen, it means that you are
not using the <code>myodbcd.dll</code> driver (see the item
above).</li>

<li>Start your application and try to get it to fail.</li>
</ol>

<p>Check the <code>MyODBC trace file</code>, to find out what could
be wrong. You should be able to find out the issued queries by
searching after the string <code>&gt;mysql_real_query</code> in the
<tt>`myodbc.log'</tt> file.</p>

<p>You should also try duplicating the queries in the
<code>mysql</code> monitor or <code>admndemo</code> to find out if
the error is MyODBC or MySQL.</p>

<p>If you find out something is wrong, please only send the
relevant rows (max 40 rows) to <a
href="mailto:myodbc@lists.mysql.com">myodbc@lists.mysql.com</a>.
Please never send the whole MyODBC or ODBC log file!</p>

<p>If you are unable to find out what's wrong, the last option is
to make an archive (tar or zip) that contains a MyODBC trace file,
the ODBC log file, and a README file that explains the problem. You
can send this to <a
href="ftp://support.mysql.com/pub/mysql/secret/">ftp://support.mysql.com/pub/mysql/secret/</a>.
Only we at MySQL AB will have access to the files you upload, and
we will be very discrete with the data!</p>

<p>If you can create a program that also shows this problem, please
upload this too!</p>

<p>If the program works with some other SQL server, you should make
an ODBC log file where you do exactly the same thing in the other
SQL server.</p>

<p>Remember that the more information you can supply to us, the
more likely it is that we can fix the problem!</p>

<h2><a id="C" name="C" href="manual_toc.html#C">8.4 MySQL C
API</a></h2>

<p><a id="IDX1620" name="IDX1620"></a> <a id="IDX1621"
name="IDX1621"></a></p>

<p>The C API code is distributed with MySQL. It is included in the
<code>mysqlclient</code> library and allows C programs to access a
database.</p>

<p>Many of the clients in the MySQL source distribution are written
in C. If you are looking for examples that demonstrate how to use
the C API, take a look at these clients. You can find these in the
<code>clients</code> directory in the MySQL source
distribution.</p>

<p>Most of the other client APIs (all except Java) use the
<code>mysqlclient</code> library to communicate with the MySQL
server. This means that, for example, you can take advantage of
many of the same environment variables that are used by other
client programs, because they are referenced from the library. See
section <a href="manual.html#Client-Side_Scripts">4.8 MySQL
Client-Side Scripts and Utilities</a>, for a list of these
variables.</p>

<p>The client has a maximum communication buffer size. The size of
the buffer that is allocated initially (16K bytes) is automatically
increased up to the maximum size (the maximum is 16M). Because
buffer sizes are increased only as demand warrants, simply
increasing the default maximum limit does not in itself cause more
resources to be used. This size check is mostly a check for
erroneous queries and communication packets.</p>

<p>The communication buffer must be large enough to contain a
single SQL statement (for client-to-server traffic) and one row of
returned data (for server-to-client traffic). Each thread's
communication buffer is dynamically enlarged to handle any query or
row up to the maximum limit. For example, if you have
<code>BLOB</code> values that contain up to 16M of data, you must
have a communication buffer limit of at least 16M (in both server
and client). The client's default maximum is 16M, but the default
maximum in the server is 1M. You can increase this by changing the
value of the <code>max_allowed_packet</code> parameter when the
server is started. See section <a
href="manual.html#Server_parameters">5.5.2 Tuning Server
Parameters</a>.</p>

<p>The MySQL server shrinks each communication buffer to
<code>net_buffer_length</code> bytes after each query. For clients,
the size of the buffer associated with a connection is not
decreased until the connection is closed, at which time client
memory is reclaimed.</p>

<p>For programming with threads, see section <a
href="manual.html#Threaded_clients">8.4.8 How to Make a Threaded
Client</a>. For creating a stand-alone application which includes
the "server" and "client" in the same program (and does not
communicate with an external MySQL server), see section <a
href="manual.html#libmysqld">8.4.9 libmysqld, the Embedded MySQL
Server Library</a>.</p>

<h3><a id="C_API_datatypes" name="C_API_datatypes"
href="manual_toc.html#C_API_datatypes">8.4.1 C API
Datatypes</a></h3>

<dl compact="compact">
<dt><code>MYSQL</code></dt>

<dd><a id="IDX1622" name="IDX1622"></a> This structure represents a
handle to one database connection. It is used for almost all MySQL
functions. <a id="IDX1623" name="IDX1623"></a></dd>

<dt><code>MYSQL_RES</code></dt>

<dd>This structure represents the result of a query that returns
rows (<code>SELECT</code>, <code>SHOW</code>,
<code>DESCRIBE</code>, <code>EXPLAIN</code>). The information
returned from a query is called the <em>result set</em> in the
remainder of this section. <a id="IDX1624" name="IDX1624"></a></dd>

<dt><code>MYSQL_ROW</code></dt>

<dd>This is a type-safe representation of one row of data. It is
currently implemented as an array of counted byte strings. (You
cannot treat these as null-terminated strings if field values may
contain binary data, because such values may contain null bytes
internally.) Rows are obtained by calling
<code>mysql_fetch_row()</code>. <a id="IDX1625"
name="IDX1625"></a></dd>

<dt><code>MYSQL_FIELD</code></dt>

<dd>This structure contains information about a field, such as the
field's name, type, and size. Its members are described in more
detail here. You may obtain the <code>MYSQL_FIELD</code> structures
for each field by calling <code>mysql_fetch_field()</code>
repeatedly. Field values are not part of this structure; they are
contained in a <code>MYSQL_ROW</code> structure. <a id="IDX1626"
name="IDX1626"></a></dd>

<dt><code>MYSQL_FIELD_OFFSET</code></dt>

<dd>This is a type-safe representation of an offset into a MySQL
field list. (Used by <code>mysql_field_seek()</code>.) Offsets are
field numbers within a row, beginning at zero. <a id="IDX1627"
name="IDX1627"></a> <a id="IDX1628" name="IDX1628"></a></dd>

<dt><code>my_ulonglong</code></dt>

<dd>The type used for the number of rows and for
<code>mysql_affected_rows()</code>, <code>mysql_num_rows()</code>,
and <code>mysql_insert_id()</code>. This type provides a range of
<code>0</code> to <code>1.84e19</code>. On some systems, attempting
to print a value of type <code>my_ulonglong</code> will not work.
To print such a value, convert it to <code>unsigned long</code> and
use a <code>%lu</code> print format. Example: 

<pre>
printf (Number of rows: %lu\n", (unsigned long) mysql_num_rows(result));
</pre>
</dd>
</dl>

<p>The <code>MYSQL_FIELD</code> structure contains the members
listed here:</p>

<dl compact="compact">
<dt><code>char * name</code></dt>

<dd>The name of the field, as a null-terminated string.</dd>

<dt><code>char * table</code></dt>

<dd>The name of the table containing this field, if it isn't a
calculated field. For calculated fields, the <code>table</code>
value is an empty string.</dd>

<dt><code>char * def</code></dt>

<dd>The default value of this field, as a null-terminated string.
This is set only if you use <code>mysql_list_fields()</code>.</dd>

<dt><code>enum enum_field_types type</code></dt>

<dd>The type of the field. The <code>type</code> value may be one
of the following: 

<table border="1" width="100%">
<tr>
<td><strong>Type value</strong></td>
<td><strong>Type description</strong></td>
</tr>

<tr>
<td><code>FIELD_TYPE_TINY</code></td>
<td><code>TINYINT</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_SHORT</code></td>
<td><code>SMALLINT</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_LONG</code></td>
<td><code>INTEGER</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_INT24</code></td>
<td><code>MEDIUMINT</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_LONGLONG</code></td>
<td><code>BIGINT</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_DECIMAL</code></td>
<td><code>DECIMAL</code> or <code>NUMERIC</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_FLOAT</code></td>
<td><code>FLOAT</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_DOUBLE</code></td>
<td><code>DOUBLE</code> or <code>REAL</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_TIMESTAMP</code></td>
<td><code>TIMESTAMP</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_DATE</code></td>
<td><code>DATE</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_TIME</code></td>
<td><code>TIME</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_DATETIME</code></td>
<td><code>DATETIME</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_YEAR</code></td>
<td><code>YEAR</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_STRING</code></td>
<td>String (<code>CHAR</code> or <code>VARCHAR</code>) field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_BLOB</code></td>
<td><code>BLOB</code> or <code>TEXT</code> field (use
<code>max_length</code> to determine the maximum length)</td>
</tr>

<tr>
<td><code>FIELD_TYPE_SET</code></td>
<td><code>SET</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_ENUM</code></td>
<td><code>ENUM</code> field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_NULL</code></td>
<td><code>NULL</code>-type field</td>
</tr>

<tr>
<td><code>FIELD_TYPE_CHAR</code></td>
<td>Deprecated; use <code>FIELD_TYPE_TINY</code> instead</td>
</tr>
</table>

You can use the <code>IS_NUM()</code> macro to test whether a field
has a numeric type. Pass the <code>type</code> value to
<code>IS_NUM()</code> and it will evaluate to TRUE if the field is
numeric: 

<pre>
if (IS_NUM(field-&gt;type))
    printf("Field is numeric\n");
</pre>
</dd>

<dt><code>unsigned int length</code></dt>

<dd>The width of the field, as specified in the table
definition.</dd>

<dt><code>unsigned int max_length</code></dt>

<dd>The maximum width of the field for the result set (the length
of the longest field value for the rows actually in the result
set). If you use <code>mysql_store_result()</code> or
<code>mysql_list_fields()</code>, this contains the maximum length
for the field. If you use <code>mysql_use_result()</code>, the
value of this variable is zero.</dd>

<dt><code>unsigned int flags</code></dt>

<dd>Different bit-flags for the field. The <code>flags</code> value
may have zero or more of the following bits set: 

<table border="1" width="100%">
<tr>
<td><strong>Flag value</strong></td>
<td><strong>Flag description</strong></td>
</tr>

<tr>
<td><code>NOT_NULL_FLAG</code></td>
<td>Field can't be <code>NULL</code></td>
</tr>

<tr>
<td><code>PRI_KEY_FLAG</code></td>
<td>Field is part of a primary key</td>
</tr>

<tr>
<td><code>UNIQUE_KEY_FLAG</code></td>
<td>Field is part of a unique key</td>
</tr>

<tr>
<td><code>MULTIPLE_KEY_FLAG</code></td>
<td>Field is part of a non-unique key</td>
</tr>

<tr>
<td><code>UNSIGNED_FLAG</code></td>
<td>Field has the <code>UNSIGNED</code> attribute</td>
</tr>

<tr>
<td><code>ZEROFILL_FLAG</code></td>
<td>Field has the <code>ZEROFILL</code> attribute</td>
</tr>

<tr>
<td><code>BINARY_FLAG</code></td>
<td>Field has the <code>BINARY</code> attribute</td>
</tr>

<tr>
<td><code>AUTO_INCREMENT_FLAG</code></td>
<td>Field has the <code>AUTO_INCREMENT</code> attribute</td>
</tr>

<tr>
<td><code>ENUM_FLAG</code></td>
<td>Field is an <code>ENUM</code> (deprecated)</td>
</tr>

<tr>
<td><code>SET_FLAG</code></td>
<td>Field is a <code>SET</code> (deprecated)</td>
</tr>

<tr>
<td><code>BLOB_FLAG</code></td>
<td>Field is a <code>BLOB</code> or <code>TEXT</code>
(deprecated)</td>
</tr>

<tr>
<td><code>TIMESTAMP_FLAG</code></td>
<td>Field is a <code>TIMESTAMP</code> (deprecated)</td>
</tr>
</table>

Use of the <code>BLOB_FLAG</code>, <code>ENUM_FLAG</code>,
<code>SET_FLAG</code>, and <code>TIMESTAMP_FLAG</code> flags is
deprecated because they indicate the type of a field rather than an
attribute of its type. It is preferable to test
<code>field-&gt;type</code> against <code>FIELD_TYPE_BLOB</code>,
<code>FIELD_TYPE_ENUM</code>, <code>FIELD_TYPE_SET</code>, or
<code>FIELD_TYPE_TIMESTAMP</code> instead. The following example
illustrates a typical use of the <code>flags</code> value: 

<pre>
if (field-&gt;flags &amp; NOT_NULL_FLAG)
    printf("Field can't be null\n");
</pre>

You may use the following convenience macros to determine the
boolean status of the <code>flags</code> value: 

<table border="1" width="100%">
<tr>
<td><strong>Flag status</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>IS_NOT_NULL(flags)</code></td>
<td>True if this field is defined as <code>NOT NULL</code></td>
</tr>

<tr>
<td><code>IS_PRI_KEY(flags)</code></td>
<td>True if this field is a primary key</td>
</tr>

<tr>
<td><code>IS_BLOB(flags)</code></td>
<td>True if this field is a <code>BLOB</code> or <code>TEXT</code>
(deprecated; test <code>field-&gt;type</code> instead)</td>
</tr>
</table>
</dd>

<dt><code>unsigned int decimals</code></dt>

<dd>The number of decimals for numeric fields.</dd>
</dl>

<h3><a id="C_API_function_overview" name="C_API_function_overview"
href="manual_toc.html#C_API_function_overview">8.4.2 C API Function
Overview</a></h3>

<p><a id="IDX1629" name="IDX1629"></a> <a id="IDX1630"
name="IDX1630"></a></p>

<p>The functions available in the C API are listed here and are
described in greater detail in a later section. See section <a
href="manual.html#C_API_functions">8.4.3 C API Function
Descriptions</a>.</p>

<table border="1" width="100%">
<tr>
<td><strong>Function</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><strong>mysql_affected_rows()</strong></td>
<td>Returns the number of rows changed/deleted/inserted by the last
<code>UPDATE</code>, <code>DELETE</code>, or <code>INSERT</code>
query.</td>
</tr>

<tr>
<td><strong>mysql_change_user()</strong></td>
<td>Changes user and database on an open connection.</td>
</tr>

<tr>
<td><strong>mysql_character_set_name()</strong></td>
<td>Returns the name of the default character set for the
connection.</td>
</tr>

<tr>
<td><strong>mysql_close()</strong></td>
<td>Closes a server connection.</td>
</tr>

<tr>
<td><strong>mysql_connect()</strong></td>
<td>Connects to a MySQL server. This function is deprecated; use
<code>mysql_real_connect()</code> instead.</td>
</tr>

<tr>
<td><strong>mysql_create_db()</strong></td>
<td>Creates a database. This function is deprecated; use the SQL
command <code>CREATE DATABASE</code> instead.</td>
</tr>

<tr>
<td><strong>mysql_data_seek()</strong></td>
<td>Seeks to an arbitrary row in a query result set.</td>
</tr>

<tr>
<td><strong>mysql_debug()</strong></td>
<td>Does a <code>DBUG_PUSH</code> with the given string.</td>
</tr>

<tr>
<td><strong>mysql_drop_db()</strong></td>
<td>Drops a database. This function is deprecated; use the SQL
command <code>DROP DATABASE</code> instead.</td>
</tr>

<tr>
<td><strong>mysql_dump_debug_info()</strong></td>
<td>Makes the server write debug information to the log.</td>
</tr>

<tr>
<td><strong>mysql_eof()</strong></td>
<td>Determines whether the last row of a result set has been read.
This function is deprecated; <code>mysql_errno()</code> or
<code>mysql_error()</code> may be used instead.</td>
</tr>

<tr>
<td><strong>mysql_errno()</strong></td>
<td>Returns the error number for the most recently invoked MySQL
function.</td>
</tr>

<tr>
<td><strong>mysql_error()</strong></td>
<td>Returns the error message for the most recently invoked MySQL
function.</td>
</tr>

<tr>
<td><strong>mysql_escape_string()</strong></td>
<td>Escapes special characters in a string for use in a SQL
statement.</td>
</tr>

<tr>
<td><strong>mysql_fetch_field()</strong></td>
<td>Returns the type of the next table field.</td>
</tr>

<tr>
<td><strong>mysql_fetch_field_direct()</strong></td>
<td>Returns the type of a table field, given a field number.</td>
</tr>

<tr>
<td><strong>mysql_fetch_fields()</strong></td>
<td>Returns an array of all field structures.</td>
</tr>

<tr>
<td><strong>mysql_fetch_lengths()</strong></td>
<td>Returns the lengths of all columns in the current row.</td>
</tr>

<tr>
<td><strong>mysql_fetch_row()</strong></td>
<td>Fetches the next row from the result set.</td>
</tr>

<tr>
<td><strong>mysql_field_seek()</strong></td>
<td>Puts the column cursor on a specified column.</td>
</tr>

<tr>
<td><strong>mysql_field_count()</strong></td>
<td>Returns the number of result columns for the most recent
query.</td>
</tr>

<tr>
<td><strong>mysql_field_tell()</strong></td>
<td>Returns the position of the field cursor used for the last
<code>mysql_fetch_field()</code>.</td>
</tr>

<tr>
<td><strong>mysql_free_result()</strong></td>
<td>Frees memory used by a result set.</td>
</tr>

<tr>
<td><strong>mysql_get_client_info()</strong></td>
<td>Returns client version information.</td>
</tr>

<tr>
<td><strong>mysql_get_host_info()</strong></td>
<td>Returns a string describing the connection.</td>
</tr>

<tr>
<td><strong>mysql_get_proto_info()</strong></td>
<td>Returns the protocol version used by the connection.</td>
</tr>

<tr>
<td><strong>mysql_get_server_info()</strong></td>
<td>Returns the server version number.</td>
</tr>

<tr>
<td><strong>mysql_info()</strong></td>
<td>Returns information about the most recently executed
query.</td>
</tr>

<tr>
<td><strong>mysql_init()</strong></td>
<td>Gets or initialises a <code>MYSQL</code> structure.</td>
</tr>

<tr>
<td><strong>mysql_insert_id()</strong></td>
<td>Returns the ID generated for an <code>AUTO_INCREMENT</code>
column by the previous query.</td>
</tr>

<tr>
<td><strong>mysql_kill()</strong></td>
<td>Kills a given thread.</td>
</tr>

<tr>
<td><strong>mysql_list_dbs()</strong></td>
<td>Returns database names matching a simple regular
expression.</td>
</tr>

<tr>
<td><strong>mysql_list_fields()</strong></td>
<td>Returns field names matching a simple regular expression.</td>
</tr>

<tr>
<td><strong>mysql_list_processes()</strong></td>
<td>Returns a list of the current server threads.</td>
</tr>

<tr>
<td><strong>mysql_list_tables()</strong></td>
<td>Returns table names matching a simple regular expression.</td>
</tr>

<tr>
<td><strong>mysql_num_fields()</strong></td>
<td>Returns the number of columns in a result set.</td>
</tr>

<tr>
<td><strong>mysql_num_rows()</strong></td>
<td>Returns the number of rows in a result set.</td>
</tr>

<tr>
<td><strong>mysql_options()</strong></td>
<td>Sets connect options for <code>mysql_connect()</code>.</td>
</tr>

<tr>
<td><strong>mysql_ping()</strong></td>
<td>Checks whether the connection to the server is working,
reconnecting as necessary.</td>
</tr>

<tr>
<td><strong>mysql_query()</strong></td>
<td>Executes a SQL query specified as a null-terminated
string.</td>
</tr>

<tr>
<td><strong>mysql_real_connect()</strong></td>
<td>Connects to a MySQL server.</td>
</tr>

<tr>
<td><strong>mysql_real_escape_string()</strong></td>
<td>Escapes special characters in a string for use in a SQL
statement, taking into account the current charset of the
connection.</td>
</tr>

<tr>
<td><strong>mysql_real_query()</strong></td>
<td>Executes a SQL query specified as a counted string.</td>
</tr>

<tr>
<td><strong>mysql_reload()</strong></td>
<td>Tells the server to reload the grant tables.</td>
</tr>

<tr>
<td><strong>mysql_row_seek()</strong></td>
<td>Seeks to a row in a result set, using value returned from
<code>mysql_row_tell()</code>.</td>
</tr>

<tr>
<td><strong>mysql_row_tell()</strong></td>
<td>Returns the row cursor position.</td>
</tr>

<tr>
<td><strong>mysql_select_db()</strong></td>
<td>Selects a database.</td>
</tr>

<tr>
<td><strong>mysql_shutdown()</strong></td>
<td>Shuts down the database server.</td>
</tr>

<tr>
<td><strong>mysql_stat()</strong></td>
<td>Returns the server status as a string.</td>
</tr>

<tr>
<td><strong>mysql_store_result()</strong></td>
<td>Retrieves a complete result set to the client.</td>
</tr>

<tr>
<td><strong>mysql_thread_id()</strong></td>
<td>Returns the current thread ID.</td>
</tr>

<tr>
<td><strong>mysql_thread_safe()</strong></td>
<td>Returns 1 if the clients are compiled as thread-safe.</td>
</tr>

<tr>
<td><strong>mysql_use_result()</strong></td>
<td>Initiates a row-by-row result set retrieval.</td>
</tr>
</table>

<p>To connect to the server, call <code>mysql_init()</code> to
initialise a connection handler, then call
<code>mysql_real_connect()</code> with that handler (along with
other information such as the hostname, user name, and password).
Upon connection, <code>mysql_real_connect()</code> sets the
<code>reconnect</code> flag (part of the MYSQL structure) to a
value of <code>1</code>. This flag indicates, in the event that a
query cannot be performed because of a lost connection, to try
reconnecting to the server before giving up. When you are done with
the connection, call <code>mysql_close()</code> to terminate
it.</p>

<p>While a connection is active, the client may send SQL queries to
the server using <code>mysql_query()</code> or
<code>mysql_real_query()</code>. The difference between the two is
that <code>mysql_query()</code> expects the query to be specified
as a null-terminated string whereas <code>mysql_real_query()</code>
expects a counted string. If the string contains binary data (which
may include null bytes), you must use
<code>mysql_real_query()</code>.</p>

<p>For each non-<code>SELECT</code> query (for example,
<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>), you
can find out how many rows were changed (affected) by calling
<code>mysql_affected_rows()</code>.</p>

<p>For <code>SELECT</code> queries, you retrieve the selected rows
as a result set. (Note that some statements are
<code>SELECT</code>-like in that they return rows. These include
<code>SHOW</code>, <code>DESCRIBE</code>, and <code>EXPLAIN</code>.
They should be treated the same way as <code>SELECT</code>
statements.)</p>

<p>There are two ways for a client to process result sets. One way
is to retrieve the entire result set all at once by calling
<code>mysql_store_result()</code>. This function acquires from the
server all the rows returned by the query and stores them in the
client. The second way is for the client to initiate a row-by-row
result set retrieval by calling <code>mysql_use_result()</code>.
This function initialises the retrieval, but does not actually get
any rows from the server.</p>

<p>In both cases, you access rows by calling
<code>mysql_fetch_row()</code>. With
<code>mysql_store_result()</code>, <code>mysql_fetch_row()</code>
accesses rows that have already been fetched from the server. With
<code>mysql_use_result()</code>, <code>mysql_fetch_row()</code>
actually retrieves the row from the server. Information about the
size of the data in each row is available by calling
<code>mysql_fetch_lengths()</code>.</p>

<p>After you are done with a result set, call
<code>mysql_free_result()</code> to free the memory used for
it.</p>

<p>The two retrieval mechanisms are complementary. Client programs
should choose the approach that is most appropriate for their
requirements. In practice, clients tend to use
<code>mysql_store_result()</code> more commonly.</p>

<p>An advantage of <code>mysql_store_result()</code> is that
because the rows have all been fetched to the client, you not only
can access rows sequentially, you can move back and forth in the
result set using <code>mysql_data_seek()</code> or
<code>mysql_row_seek()</code> to change the current row position
within the result set. You can also find out how many rows there
are by calling <code>mysql_num_rows()</code>. On the other hand,
the memory requirements for <code>mysql_store_result()</code> may
be very high for large result sets and you are more likely to
encounter out-of-memory conditions.</p>

<p>An advantage of <code>mysql_use_result()</code> is that the
client requires less memory for the result set because it maintains
only one row at a time (and because there is less allocation
overhead, <code>mysql_use_result()</code> can be faster).
Disadvantages are that you must process each row quickly to avoid
tying up the server, you don't have random access to rows within
the result set (you can only access rows sequentially), and you
don't know how many rows are in the result set until you have
retrieved them all. Furthermore, you <strong>must</strong> retrieve
all the rows even if you determine in mid-retrieval that you've
found the information you were looking for.</p>

<p>The API makes it possible for clients to respond appropriately
to queries (retrieving rows only as necessary) without knowing
whether or not the query is a <code>SELECT</code>. You can do this
by calling <code>mysql_store_result()</code> after each
<code>mysql_query()</code> (or <code>mysql_real_query()</code>). If
the result set call succeeds, the query was a <code>SELECT</code>
and you can read the rows. If the result set call fails, call
<code>mysql_field_count()</code> to determine whether a result was
actually to be expected. If <code>mysql_field_count()</code>
returns zero, the query returned no data (indicating that it was an
<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>,
etc.), and was not expected to return rows. If
<code>mysql_field_count()</code> is non-zero, the query should have
returned rows, but didn't. This indicates that the query was a
<code>SELECT</code> that failed. See the description for
<code>mysql_field_count()</code> for an example of how this can be
done.</p>

<p>Both <code>mysql_store_result()</code> and
<code>mysql_use_result()</code> allow you to obtain information
about the fields that make up the result set (the number of fields,
their names and types, etc.). You can access field information
sequentially within the row by calling
<code>mysql_fetch_field()</code> repeatedly, or by field number
within the row by calling <code>mysql_fetch_field_direct()</code>.
The current field cursor position may be changed by calling
<code>mysql_field_seek()</code>. Setting the field cursor affects
subsequent calls to <code>mysql_fetch_field()</code>. You can also
get information for fields all at once by calling
<code>mysql_fetch_fields()</code>.</p>

<p>For detecting and reporting errors, MySQL provides access to
error information by means of the <code>mysql_errno()</code> and
<code>mysql_error()</code> functions. These return the error code
or error message for the most recently invoked function that can
succeed or fail, allowing you to determine when an error occurred
and what it was.</p>

<h3><a id="C_API_functions" name="C_API_functions"
href="manual_toc.html#C_API_functions">8.4.3 C API Function
Descriptions</a></h3>

<p>In the descriptions here, a parameter or return value of
<code>NULL</code> means <code>NULL</code> in the sense of the C
programming language, not a MySQL <code>NULL</code> value.</p>

<p>Functions that return a value generally return a pointer or an
integer. Unless specified otherwise, functions returning a pointer
return a non-<code>NULL</code> value to indicate success or a
<code>NULL</code> value to indicate an error, and functions
returning an integer return zero to indicate success or non-zero to
indicate an error. Note that ``non-zero'' means just that. Unless
the function description says otherwise, do not test against a
value other than zero:</p>

<pre>
if (result)                   /* correct */
    ... error ...

if (result &lt; 0)               /* incorrect */
    ... error ...

if (result == -1)             /* incorrect */
    ... error ...
</pre>

<p>When a function returns an error, the <strong>Errors</strong>
subsection of the function description lists the possible types of
errors. You can find out which of these occurred by calling
<code>mysql_errno()</code>. A string representation of the error
may be obtained by calling <code>mysql_error()</code>.</p>

<h4><a id="mysql_affected_rows" name="mysql_affected_rows"
href="manual_toc.html#mysql_affected_rows">8.4.3.1
<code>mysql_affected_rows()</code></a></h4>

<p><a id="IDX1631" name="IDX1631"></a></p>

<p><code>my_ulonglong mysql_affected_rows(MYSQL *mysql)</code></p>

<h4>8.4.3.2 Description</h4>

<p>Returns the number of rows changed by the last
<code>UPDATE</code>, deleted by the last <code>DELETE</code> or
inserted by the last <code>INSERT</code> statement. May be called
immediately after <code>mysql_query()</code> for
<code>UPDATE</code>, <code>DELETE</code>, or <code>INSERT</code>
statements. For <code>SELECT</code> statements,
<code>mysql_affected_rows()</code> works like
<code>mysql_num_rows()</code>.</p>

<h4>8.4.3.3 Return Values</h4>

<p>An integer greater than zero indicates the number of rows
affected or retrieved. Zero indicates that no records where updated
for an <code>UPDATE</code> statement, no rows matched the
<code>WHERE</code> clause in the query or that no query has yet
been executed. -1 indicates that the query returned an error or
that, for a <code>SELECT</code> query,
<code>mysql_affected_rows()</code> was called prior to calling
<code>mysql_store_result()</code>.</p>

<h4>8.4.3.4 Errors</h4>

<p>None.</p>

<h4>8.4.3.5 Example</h4>

<pre>
mysql_query(&amp;mysql,"UPDATE products SET cost=cost*1.25 WHERE group=10");
printf("%ld products updated",(long) mysql_affected_rows(&amp;mysql));
</pre>

<p>If one specifies the flag <code>CLIENT_FOUND_ROWS</code> when
connecting to <code>mysqld</code>,
<code>mysql_affected_rows()</code> will return the number of rows
matched by the <code>WHERE</code> statement for <code>UPDATE</code>
statements.</p>

<p>Note that when one uses a <code>REPLACE</code> command,
<code>mysql_affected_rows()</code> will return 2 if the new row
replaced and old row. This is because in this case one row was
inserted and then the duplicate was deleted.</p>

<h4><a id="mysql_change_user" name="mysql_change_user"
href="manual_toc.html#mysql_change_user">8.4.3.6
<code>mysql_change_user()</code></a></h4>

<p><a id="IDX1632" name="IDX1632"></a></p>

<p><code>my_bool mysql_change_user(MYSQL *mysql, const char *user,
const char *password, const char *db)</code></p>

<h4>8.4.3.7 Description</h4>

<p>Changes the user and causes the database specified by
<code>db</code> to become the default (current) database on the
connection specified by <code>mysql</code>. In subsequent queries,
this database is the default for table references that do not
include an explicit database specifier.</p>

<p>This function was introduced in MySQL Version 3.23.3.</p>

<p><code>mysql_change_user()</code> fails unless the connected user
can be authenticated or if he doesn't have permission to use the
database. In this case the user and database are not changed</p>

<p>The <code>db</code> parameter may be set to <code>NULL</code> if
you don't want to have a default database.</p>

<p>Starting from MySQL 4.0.6 this command will always
<code>ROLLBACK</code> any active transactions, close all temporary
tables, unlock all locked tables and reset the state as if one had
done a new connect. This will happen even if the user didn't
change.</p>

<h4>8.4.3.8 Return Values</h4>

<p>Zero for success. Non-zero if an error occurred.</p>

<h4>8.4.3.9 Errors</h4>

<p>The same that you can get from
<code>mysql_real_connect()</code>.</p>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>

<dt><code>ER_UNKNOWN_COM_ERROR</code></dt>

<dd>The MySQL server doesn't implement this command (probably an
old server)</dd>

<dt><code>ER_ACCESS_DENIED_ERROR</code></dt>

<dd>The user or password was wrong.</dd>

<dt><code>ER_BAD_DB_ERROR</code></dt>

<dd>The database didn't exist.</dd>

<dt><code>ER_DBACCESS_DENIED_ERROR</code></dt>

<dd>The user did not have access rights to the database.</dd>

<dt><code>ER_WRONG_DB_NAME</code></dt>

<dd>The database name was too long.</dd>
</dl>

<h4>8.4.3.10 Example</h4>

<pre>
if (mysql_change_user(&amp;mysql, "user", "password", "new_database"))
{
   fprintf(stderr, "Failed to change user.  Error: %s\n",
           mysql_error(&amp;mysql));
}
</pre>

<h4><a id="mysql_character_set_name"
name="mysql_character_set_name"
href="manual_toc.html#mysql_character_set_name">8.4.3.11
<code>mysql_character_set_name()</code></a></h4>

<p><a id="IDX1633" name="IDX1633"></a></p>

<p><code>const char *mysql_character_set_name(MYSQL
*mysql)</code></p>

<h4>8.4.3.12 Description</h4>

<p>Returns the default character set for the current
connection.</p>

<h4>8.4.3.13 Return Values</h4>

<p>The default character set</p>

<h4>8.4.3.14 Errors</h4>

<p>None.</p>

<h4><a id="mysql_close" name="mysql_close"
href="manual_toc.html#mysql_close">8.4.3.15
<code>mysql_close()</code></a></h4>

<p><a id="IDX1634" name="IDX1634"></a></p>

<p><code>void mysql_close(MYSQL *mysql)</code></p>

<h4>8.4.3.16 Description</h4>

<p>Closes a previously opened connection.
<code>mysql_close()</code> also deallocates the connection handle
pointed to by <code>mysql</code> if the handle was allocated
automatically by <code>mysql_init()</code> or
<code>mysql_connect()</code>.</p>

<h4>8.4.3.17 Return Values</h4>

<p>None.</p>

<h4>8.4.3.18 Errors</h4>

<p>None.</p>

<h4><a id="mysql_connect" name="mysql_connect"
href="manual_toc.html#mysql_connect">8.4.3.19
<code>mysql_connect()</code></a></h4>

<p><a id="IDX1635" name="IDX1635"></a></p>

<p><code>MYSQL *mysql_connect(MYSQL *mysql, const char *host, const
char *user, const char *passwd)</code></p>

<h4>8.4.3.20 Description</h4>

<p>This function is deprecated. It is preferable to use
<code>mysql_real_connect()</code> instead.</p>

<p><code>mysql_connect()</code> attempts to establish a connection
to a MySQL database engine running on <code>host</code>.
<code>mysql_connect()</code> must complete successfully before you
can execute any of the other API functions, with the exception of
<code>mysql_get_client_info()</code>.</p>

<p>The meanings of the parameters are the same as for the
corresponding parameters for <code>mysql_real_connect()</code> with
the difference that the connection parameter may be
<code>NULL</code>. In this case the C API allocates memory for the
connection structure automatically and frees it when you call
<code>mysql_close()</code>. The disadvantage of this approach is
that you can't retrieve an error message if the connection fails.
(To get error information from <code>mysql_errno()</code> or
<code>mysql_error()</code>, you must provide a valid
<code>MYSQL</code> pointer.)</p>

<h4>8.4.3.21 Return Values</h4>

<p>Same as for <code>mysql_real_connect()</code>.</p>

<h4>8.4.3.22 Errors</h4>

<p>Same as for <code>mysql_real_connect()</code>.</p>

<h4><a id="mysql_create_db" name="mysql_create_db"
href="manual_toc.html#mysql_create_db">8.4.3.23
<code>mysql_create_db()</code></a></h4>

<p><a id="IDX1636" name="IDX1636"></a></p>

<p><code>int mysql_create_db(MYSQL *mysql, const char
*db)</code></p>

<h4>8.4.3.24 Description</h4>

<p>Creates the database named by the <code>db</code> parameter.</p>

<p>This function is deprecated. It is preferable to use
<code>mysql_query()</code> to issue a SQL <code>CREATE
DATABASE</code> statement instead.</p>

<h4>8.4.3.25 Return Values</h4>

<p>Zero if the database was created successfully. Non-zero if an
error occurred.</p>

<h4>8.4.3.26 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4>8.4.3.27 Example</h4>

<pre>
if(mysql_create_db(&amp;mysql, "my_database"))
{
   fprintf(stderr, "Failed to create new database.  Error: %s\n",
           mysql_error(&amp;mysql));
}
</pre>

<h4><a id="mysql_data_seek" name="mysql_data_seek"
href="manual_toc.html#mysql_data_seek">8.4.3.28
<code>mysql_data_seek()</code></a></h4>

<p><a id="IDX1637" name="IDX1637"></a></p>

<p><code>void mysql_data_seek(MYSQL_RES *result, my_ulonglong
offset)</code></p>

<h4>8.4.3.29 Description</h4>

<p>Seeks to an arbitrary row in a query result set. This requires
that the result set structure contains the entire result of the
query, so <code>mysql_data_seek()</code> may be used in conjunction
only with <code>mysql_store_result()</code>, not with
<code>mysql_use_result()</code>.</p>

<p>The offset should be a value in the range from 0 to
<code>mysql_num_rows(result)-1</code>.</p>

<h4>8.4.3.30 Return Values</h4>

<p>None.</p>

<h4>8.4.3.31 Errors</h4>

<p>None.</p>

<h4><a id="mysql_debug" name="mysql_debug"
href="manual_toc.html#mysql_debug">8.4.3.32
<code>mysql_debug()</code></a></h4>

<p><a id="IDX1638" name="IDX1638"></a></p>

<p><code>void mysql_debug(const char *debug)</code></p>

<h4>8.4.3.33 Description</h4>

<p>Does a <code>DBUG_PUSH</code> with the given string.
<code>mysql_debug()</code> uses the Fred Fish debug library. To use
this function, you must compile the client library to support
debugging. See section <a href="manual.html#Debugging_server">E.1
Debugging a MySQL server</a>. See section <a
href="manual.html#Debugging_client">E.2 Debugging a MySQL
client</a>.</p>

<h4>8.4.3.34 Return Values</h4>

<p>None.</p>

<h4>8.4.3.35 Errors</h4>

<p>None.</p>

<h4>8.4.3.36 Example</h4>

<p>The call shown here causes the client library to generate a
trace file in <tt>`/tmp/client.trace'</tt> on the client
machine:</p>

<pre>
mysql_debug("d:t:O,/tmp/client.trace");
</pre>

<h4><a id="mysql_drop_db" name="mysql_drop_db"
href="manual_toc.html#mysql_drop_db">8.4.3.37
<code>mysql_drop_db()</code></a></h4>

<p><a id="IDX1639" name="IDX1639"></a></p>

<p><code>int mysql_drop_db(MYSQL *mysql, const char *db)</code></p>

<h4>8.4.3.38 Description</h4>

<p>Drops the database named by the <code>db</code> parameter.</p>

<p>This function is deprecated. It is preferable to use
<code>mysql_query()</code> to issue a SQL <code>DROP
DATABASE</code> statement instead.</p>

<h4>8.4.3.39 Return Values</h4>

<p>Zero if the database was dropped successfully. Non-zero if an
error occurred.</p>

<h4>8.4.3.40 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4>8.4.3.41 Example</h4>

<pre>
if(mysql_drop_db(&amp;mysql, "my_database"))
  fprintf(stderr, "Failed to drop the database: Error: %s\n",
          mysql_error(&amp;mysql));
</pre>

<h4><a id="mysql_dump_debug_info" name="mysql_dump_debug_info"
href="manual_toc.html#mysql_dump_debug_info">8.4.3.42
<code>mysql_dump_debug_info()</code></a></h4>

<p><a id="IDX1640" name="IDX1640"></a></p>

<p><code>int mysql_dump_debug_info(MYSQL *mysql)</code></p>

<h4>8.4.3.43 Description</h4>

<p>Instructs the server to write some debug information to the log.
For this to work, the connected user must have the
<code>SUPER</code> privilege.</p>

<h4>8.4.3.44 Return Values</h4>

<p>Zero if the command was successful. Non-zero if an error
occurred.</p>

<h4>8.4.3.45 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_eof" name="mysql_eof"
href="manual_toc.html#mysql_eof">8.4.3.46
<code>mysql_eof()</code></a></h4>

<p><a id="IDX1641" name="IDX1641"></a></p>

<p><code>my_bool mysql_eof(MYSQL_RES *result)</code></p>

<h4>8.4.3.47 Description</h4>

<p>This function is deprecated. <code>mysql_errno()</code> or
<code>mysql_error()</code> may be used instead.</p>

<p><code>mysql_eof()</code> determines whether the last row of a
result set has been read.</p>

<p>If you acquire a result set from a successful call to
<code>mysql_store_result()</code>, the client receives the entire
set in one operation. In this case, a <code>NULL</code> return from
<code>mysql_fetch_row()</code> always means the end of the result
set has been reached and it is unnecessary to call
<code>mysql_eof()</code>. When used with
<code>mysql_store_result()</code>, <code>mysql_eof()</code> will
always return true.</p>

<p>On the other hand, if you use <code>mysql_use_result()</code> to
initiate a result set retrieval, the rows of the set are obtained
from the server one by one as you call
<code>mysql_fetch_row()</code> repeatedly. Because an error may
occur on the connection during this process, a <code>NULL</code>
return value from <code>mysql_fetch_row()</code> does not
necessarily mean the end of the result set was reached normally. In
this case, you can use <code>mysql_eof()</code> to determine what
happened. <code>mysql_eof()</code> returns a non-zero value if the
end of the result set was reached and zero if an error
occurred.</p>

<p>Historically, <code>mysql_eof()</code> predates the standard
MySQL error functions <code>mysql_errno()</code> and
<code>mysql_error()</code>. Because those error functions provide
the same information, their use is preferred over
<code>mysql_eof()</code>, which is now deprecated. (In fact, they
provide more information, because <code>mysql_eof()</code> returns
only a boolean value whereas the error functions indicate a reason
for the error when one occurs.)</p>

<h4>8.4.3.48 Return Values</h4>

<p>Zero if no error occurred. Non-zero if the end of the result set
has been reached.</p>

<h4>8.4.3.49 Errors</h4>

<p>None.</p>

<h4>8.4.3.50 Example</h4>

<p>The following example shows how you might use
<code>mysql_eof()</code>:</p>

<pre>
mysql_query(&amp;mysql,"SELECT * FROM some_table");
result = mysql_use_result(&amp;mysql);
while((row = mysql_fetch_row(result)))
{
    // do something with data
}
if(!mysql_eof(result))  // mysql_fetch_row() failed due to an error
{
    fprintf(stderr, "Error: %s\n", mysql_error(&amp;mysql));
}
</pre>

<p>However, you can achieve the same effect with the standard MySQL
error functions:</p>

<pre>
mysql_query(&amp;mysql,"SELECT * FROM some_table");
result = mysql_use_result(&amp;mysql);
while((row = mysql_fetch_row(result)))
{
    // do something with data
}
if(mysql_errno(&amp;mysql))  // mysql_fetch_row() failed due to an error
{
    fprintf(stderr, "Error: %s\n", mysql_error(&amp;mysql));
}
</pre>

<h4><a id="mysql_errno" name="mysql_errno"
href="manual_toc.html#mysql_errno">8.4.3.51
<code>mysql_errno()</code></a></h4>

<p><a id="IDX1642" name="IDX1642"></a></p>

<p><code>unsigned int mysql_errno(MYSQL *mysql)</code></p>

<h4>8.4.3.52 Description</h4>

<p>For the connection specified by <code>mysql</code>,
<code>mysql_errno()</code> returns the error code for the most
recently invoked API function that can succeed or fail. A return
value of zero means that no error occurred. Client error message
numbers are listed in the MySQL <tt>`errmsg.h'</tt> header file.
Server error message numbers are listed in
<tt>`mysqld_error.h'</tt>. In the MySQL source distribution you can
find a complete list of error messages and error numbers in the
file <tt>`Docs/mysqld_error.txt'</tt>.</p>

<h4>8.4.3.53 Return Values</h4>

<p>An error code value. Zero if no error occurred.</p>

<h4>8.4.3.54 Errors</h4>

<p>None.</p>

<h4><a id="mysql_error" name="mysql_error"
href="manual_toc.html#mysql_error">8.4.3.55
<code>mysql_error()</code></a></h4>

<p><a id="IDX1643" name="IDX1643"></a></p>

<p><code>char *mysql_error(MYSQL *mysql)</code></p>

<h4>8.4.3.56 Description</h4>

<p>For the connection specified by <code>mysql</code>,
<code>mysql_error()</code> returns the error message for the most
recently invoked API function that can succeed or fail. An empty
string (<code>""</code>) is returned if no error occurred. This
means the following two tests are equivalent:</p>

<pre>
if(mysql_errno(&amp;mysql))
{
    // an error occurred
}

if(mysql_error(&amp;mysql)[0] != '\0')
{
    // an error occurred
}
</pre>

<p>The language of the client error messages may be changed by
recompiling the MySQL client library. Currently you can choose
error messages in several different languages. See section <a
href="manual.html#Languages">4.6.2 Non-English Error
Messages</a>.</p>

<h4>8.4.3.57 Return Values</h4>

<p>A character string that describes the error. An empty string if
no error occurred.</p>

<h4>8.4.3.58 Errors</h4>

<p>None.</p>

<h4><a id="mysql_escape_string" name="mysql_escape_string"
href="manual_toc.html#mysql_escape_string">8.4.3.59
<code>mysql_escape_string()</code></a></h4>

<p><a id="IDX1644" name="IDX1644"></a></p>

<p>You should use <code>mysql_real_escape_string()</code>
instead!</p>

<p>This function is identical to
<code>mysql_real_escape_string()</code> except that
<code>mysql_real_escape_string()</code> takes a connection handler
as its first argument and escapes the string according to the
current character set. <code>mysql_escape_string()</code> does not
take a connection argument and does not respect the current charset
setting.</p>

<h4><a id="mysql_fetch_field" name="mysql_fetch_field"
href="manual_toc.html#mysql_fetch_field">8.4.3.60
<code>mysql_fetch_field()</code></a></h4>

<p><a id="IDX1645" name="IDX1645"></a></p>

<p><code>MYSQL_FIELD *mysql_fetch_field(MYSQL_RES
*result)</code></p>

<h4>8.4.3.61 Description</h4>

<p>Returns the definition of one column of a result set as a
<code>MYSQL_FIELD</code> structure. Call this function repeatedly
to retrieve information about all columns in the result set.
<code>mysql_fetch_field()</code> returns <code>NULL</code> when no
more fields are left.</p>

<p><code>mysql_fetch_field()</code> is reset to return information
about the first field each time you execute a new
<code>SELECT</code> query. The field returned by
<code>mysql_fetch_field()</code> is also affected by calls to
<code>mysql_field_seek()</code>.</p>

<p>If you've called <code>mysql_query()</code> to perform a
<code>SELECT</code> on a table but have not called
<code>mysql_store_result()</code>, MySQL returns the default blob
length (8K bytes) if you call <code>mysql_fetch_field()</code> to
ask for the length of a <code>BLOB</code> field. (The 8K size is
chosen because MySQL doesn't know the maximum length for the
<code>BLOB</code>. This should be made configurable sometime.) Once
you've retrieved the result set, <code>field-&gt;max_length</code>
contains the length of the largest value for this column in the
specific query.</p>

<h4>8.4.3.62 Return Values</h4>

<p>The <code>MYSQL_FIELD</code> structure for the current column.
<code>NULL</code> if no columns are left.</p>

<h4>8.4.3.63 Errors</h4>

<p>None.</p>

<h4>8.4.3.64 Example</h4>

<pre>
MYSQL_FIELD *field;

while((field = mysql_fetch_field(result)))
{
    printf("field name %s\n", field-&gt;name);
}
</pre>

<h4><a id="mysql_fetch_fields" name="mysql_fetch_fields"
href="manual_toc.html#mysql_fetch_fields">8.4.3.65
<code>mysql_fetch_fields()</code></a></h4>

<p><a id="IDX1646" name="IDX1646"></a></p>

<p><code>MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES
*result)</code></p>

<h4>8.4.3.66 Description</h4>

<p>Returns an array of all <code>MYSQL_FIELD</code> structures for
a result set. Each structure provides the field definition for one
column of the result set.</p>

<h4>8.4.3.67 Return Values</h4>

<p>An array of <code>MYSQL_FIELD</code> structures for all columns
of a result set.</p>

<h4>8.4.3.68 Errors</h4>

<p>None.</p>

<h4>8.4.3.69 Example</h4>

<pre>
unsigned int num_fields;
unsigned int i;
MYSQL_FIELD *fields;

num_fields = mysql_num_fields(result);
fields = mysql_fetch_fields(result);
for(i = 0; i &lt; num_fields; i++)
{
   printf("Field %u is %s\n", i, fields[i].name);
}
</pre>

<h4><a id="mysql_fetch_field_direct"
name="mysql_fetch_field_direct"
href="manual_toc.html#mysql_fetch_field_direct">8.4.3.70
<code>mysql_fetch_field_direct()</code></a></h4>

<p><a id="IDX1647" name="IDX1647"></a></p>

<p><code>MYSQL_FIELD *mysql_fetch_field_direct(MYSQL_RES *result,
unsigned int fieldnr)</code></p>

<h4>8.4.3.71 Description</h4>

<p>Given a field number <code>fieldnr</code> for a column within a
result set, returns that column's field definition as a
<code>MYSQL_FIELD</code> structure. You may use this function to
retrieve the definition for an arbitrary column. The value of
<code>fieldnr</code> should be in the range from 0 to
<code>mysql_num_fields(result)-1</code>.</p>

<h4>8.4.3.72 Return Values</h4>

<p>The <code>MYSQL_FIELD</code> structure for the specified
column.</p>

<h4>8.4.3.73 Errors</h4>

<p>None.</p>

<h4>8.4.3.74 Example</h4>

<pre>
unsigned int num_fields;
unsigned int i;
MYSQL_FIELD *field;

num_fields = mysql_num_fields(result);
for(i = 0; i &lt; num_fields; i++)
{
    field = mysql_fetch_field_direct(result, i);
    printf("Field %u is %s\n", i, field-&gt;name);
}
</pre>

<h4><a id="mysql_fetch_lengths" name="mysql_fetch_lengths"
href="manual_toc.html#mysql_fetch_lengths">8.4.3.75
<code>mysql_fetch_lengths()</code></a></h4>

<p><a id="IDX1648" name="IDX1648"></a></p>

<p><code>unsigned long *mysql_fetch_lengths(MYSQL_RES
*result)</code></p>

<h4>8.4.3.76 Description</h4>

<p>Returns the lengths of the columns of the current row within a
result set. If you plan to copy field values, this length
information is also useful for optimisation, because you can avoid
calling <code>strlen()</code>. In addition, if the result set
contains binary data, you <strong>must</strong> use this function
to determine the size of the data, because <code>strlen()</code>
returns incorrect results for any field containing null
characters.</p>

<p>The length for empty columns and for columns containing
<code>NULL</code> values is zero. To see how to distinguish these
two cases, see the description for
<code>mysql_fetch_row()</code>.</p>

<h4>8.4.3.77 Return Values</h4>

<p>An array of unsigned long integers representing the size of each
column (not including any terminating null characters).
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.78 Errors</h4>

<p><code>mysql_fetch_lengths()</code> is valid only for the current
row of the result set. It returns <code>NULL</code> if you call it
before calling <code>mysql_fetch_row()</code> or after retrieving
all rows in the result.</p>

<h4>8.4.3.79 Example</h4>

<pre>
MYSQL_ROW row;
unsigned long *lengths;
unsigned int num_fields;
unsigned int i;

row = mysql_fetch_row(result);
if (row)
{
    num_fields = mysql_num_fields(result);
    lengths = mysql_fetch_lengths(result);
    for(i = 0; i &lt; num_fields; i++)
    {
         printf("Column %u is %lu bytes in length.\n", i, lengths[i]);
    }
}
</pre>

<h4><a id="mysql_fetch_row" name="mysql_fetch_row"
href="manual_toc.html#mysql_fetch_row">8.4.3.80
<code>mysql_fetch_row()</code></a></h4>

<p><a id="IDX1649" name="IDX1649"></a></p>

<p><code>MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</code></p>

<h4>8.4.3.81 Description</h4>

<p>Retrieves the next row of a result set. When used after
<code>mysql_store_result()</code>, <code>mysql_fetch_row()</code>
returns <code>NULL</code> when there are no more rows to retrieve.
When used after <code>mysql_use_result()</code>,
<code>mysql_fetch_row()</code> returns <code>NULL</code> when there
are no more rows to retrieve or if an error occurred.</p>

<p>The number of values in the row is given by
<code>mysql_num_fields(result)</code>. If <code>row</code> holds
the return value from a call to <code>mysql_fetch_row()</code>,
pointers to the values are accessed as <code>row[0]</code> to
<code>row[mysql_num_fields(result)-1]</code>. <code>NULL</code>
values in the row are indicated by <code>NULL</code> pointers.</p>

<p>The lengths of the field values in the row may be obtained by
calling <code>mysql_fetch_lengths()</code>. Empty fields and fields
containing <code>NULL</code> both have length 0; you can
distinguish these by checking the pointer for the field value. If
the pointer is <code>NULL</code>, the field is <code>NULL</code>;
otherwise, the field is empty.</p>

<h4>8.4.3.82 Return Values</h4>

<p>A <code>MYSQL_ROW</code> structure for the next row.
<code>NULL</code> if there are no more rows to retrieve or if an
error occurred.</p>

<h4>8.4.3.83 Errors</h4>

<dl compact="compact">
<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4>8.4.3.84 Example</h4>

<pre>
MYSQL_ROW row;
unsigned int num_fields;
unsigned int i;

num_fields = mysql_num_fields(result);
while ((row = mysql_fetch_row(result)))
{
   unsigned long *lengths;
   lengths = mysql_fetch_lengths(result);
   for(i = 0; i &lt; num_fields; i++)
   {
       printf("[%.*s] ", (int) lengths[i], row[i] ? row[i] : "NULL");
   }
   printf("\n");
}
</pre>

<h4><a id="mysql_field_count" name="mysql_field_count"
href="manual_toc.html#mysql_field_count">8.4.3.85
<code>mysql_field_count()</code></a></h4>

<p><a id="IDX1650" name="IDX1650"></a></p>

<p><code>unsigned int mysql_field_count(MYSQL *mysql)</code></p>

<p>If you are using a version of MySQL earlier than Version
3.22.24, you should use <code>unsigned int mysql_num_fields(MYSQL
*mysql)</code> instead.</p>

<h4>8.4.3.86 Description</h4>

<p>Returns the number of columns for the most recent query on the
connection.</p>

<p>The normal use of this function is when
<code>mysql_store_result()</code> returned <code>NULL</code> (and
thus you have no result set pointer). In this case, you can call
<code>mysql_field_count()</code> to determine whether
<code>mysql_store_result()</code> should have produced a non-empty
result. This allows the client program to take proper action
without knowing whether the query was a <code>SELECT</code> (or
<code>SELECT</code>-like) statement. The example shown here
illustrates how this may be done.</p>

<p>See section <a
href="manual.html#NULL_mysql_store_result">8.4.6.1 Why Is It that
After <code>mysql_query()</code> Returns Success,
<code>mysql_store_result()</code> Sometimes Returns
<code>NULL</code>?</a>.</p>

<h4>8.4.3.87 Return Values</h4>

<p>An unsigned integer representing the number of fields in a
result set.</p>

<h4>8.4.3.88 Errors</h4>

<p>None.</p>

<h4>8.4.3.89 Example</h4>

<pre>
MYSQL_RES *result;
unsigned int num_fields;
unsigned int num_rows;

if (mysql_query(&amp;mysql,query_string))
{
    // error
}
else // query succeeded, process any data returned by it
{
    result = mysql_store_result(&amp;mysql);
    if (result)  // there are rows
    {
        num_fields = mysql_num_fields(result);
        // retrieve rows, then call mysql_free_result(result)
    }
    else  // mysql_store_result() returned nothing; should it have?
    {
        if(mysql_field_count(&amp;mysql) == 0)
        {
            // query does not return data
            // (it was not a SELECT)
            num_rows = mysql_affected_rows(&amp;mysql);
        }
        else // mysql_store_result() should have returned data
        {
            fprintf(stderr, "Error: %s\n", mysql_error(&amp;mysql));
        }
    }
}
</pre>

<p>An alternative is to replace the
<code>mysql_field_count(&amp;mysql)</code> call with
<code>mysql_errno(&amp;mysql)</code>. In this case, you are
checking directly for an error from
<code>mysql_store_result()</code> rather than inferring from the
value of <code>mysql_field_count()</code> whether the statement was
a <code>SELECT</code>.</p>

<h4><a id="mysql_field_seek" name="mysql_field_seek"
href="manual_toc.html#mysql_field_seek">8.4.3.90
<code>mysql_field_seek()</code></a></h4>

<p><a id="IDX1651" name="IDX1651"></a></p>

<p><code>MYSQL_FIELD_OFFSET mysql_field_seek(MYSQL_RES *result,
MYSQL_FIELD_OFFSET offset)</code></p>

<h4>8.4.3.91 Description</h4>

<p>Sets the field cursor to the given offset. The next call to
<code>mysql_fetch_field()</code> will retrieve the field definition
of the column associated with that offset.</p>

<p>To seek to the beginning of a row, pass an <code>offset</code>
value of zero.</p>

<h4>8.4.3.92 Return Values</h4>

<p>The previous value of the field cursor.</p>

<h4>8.4.3.93 Errors</h4>

<p>None.</p>

<h4><a id="mysql_field_tell" name="mysql_field_tell"
href="manual_toc.html#mysql_field_tell">8.4.3.94
<code>mysql_field_tell()</code></a></h4>

<p><a id="IDX1652" name="IDX1652"></a></p>

<p><code>MYSQL_FIELD_OFFSET mysql_field_tell(MYSQL_RES
*result)</code></p>

<h4>8.4.3.95 Description</h4>

<p>Returns the position of the field cursor used for the last
<code>mysql_fetch_field()</code>. This value can be used as an
argument to <code>mysql_field_seek()</code>.</p>

<h4>8.4.3.96 Return Values</h4>

<p>The current offset of the field cursor.</p>

<h4>8.4.3.97 Errors</h4>

<p>None.</p>

<h4><a id="mysql_free_result" name="mysql_free_result"
href="manual_toc.html#mysql_free_result">8.4.3.98
<code>mysql_free_result()</code></a></h4>

<p><a id="IDX1653" name="IDX1653"></a></p>

<p><code>void mysql_free_result(MYSQL_RES *result)</code></p>

<h4>8.4.3.99 Description</h4>

<p>Frees the memory allocated for a result set by
<code>mysql_store_result()</code>, <code>mysql_use_result()</code>,
<code>mysql_list_dbs()</code>, etc. When you are done with a result
set, you must free the memory it uses by calling
<code>mysql_free_result()</code>.</p>

<h4>8.4.3.100 Return Values</h4>

<p>None.</p>

<h4>8.4.3.101 Errors</h4>

<p>None.</p>

<h4><a id="mysql_get_client_info" name="mysql_get_client_info"
href="manual_toc.html#mysql_get_client_info">8.4.3.102
<code>mysql_get_client_info()</code></a></h4>

<p><a id="IDX1654" name="IDX1654"></a></p>

<p><code>char *mysql_get_client_info(void)</code></p>

<h4>8.4.3.103 Description</h4>

<p>Returns a string that represents the client library version.</p>

<h4>8.4.3.104 Return Values</h4>

<p>A character string that represents the MySQL client library
version.</p>

<h4>8.4.3.105 Errors</h4>

<p>None.</p>

<h4><a id="mysql_get_host_info" name="mysql_get_host_info"
href="manual_toc.html#mysql_get_host_info">8.4.3.106
<code>mysql_get_host_info()</code></a></h4>

<p><a id="IDX1655" name="IDX1655"></a></p>

<p><code>char *mysql_get_host_info(MYSQL *mysql)</code></p>

<h4>8.4.3.107 Description</h4>

<p>Returns a string describing the type of connection in use,
including the server host name.</p>

<h4>8.4.3.108 Return Values</h4>

<p>A character string representing the server host name and the
connection type.</p>

<h4>8.4.3.109 Errors</h4>

<p>None.</p>

<h4><a id="mysql_get_proto_info" name="mysql_get_proto_info"
href="manual_toc.html#mysql_get_proto_info">8.4.3.110
<code>mysql_get_proto_info()</code></a></h4>

<p><a id="IDX1656" name="IDX1656"></a></p>

<p><code>unsigned int mysql_get_proto_info(MYSQL *mysql)</code></p>

<h4>8.4.3.111 Description</h4>

<p>Returns the protocol version used by current connection.</p>

<h4>8.4.3.112 Return Values</h4>

<p>An unsigned integer representing the protocol version used by
the current connection.</p>

<h4>8.4.3.113 Errors</h4>

<p>None.</p>

<h4><a id="mysql_get_server_info" name="mysql_get_server_info"
href="manual_toc.html#mysql_get_server_info">8.4.3.114
<code>mysql_get_server_info()</code></a></h4>

<p><a id="IDX1657" name="IDX1657"></a></p>

<p><code>char *mysql_get_server_info(MYSQL *mysql)</code></p>

<h4>8.4.3.115 Description</h4>

<p>Returns a string that represents the server version number.</p>

<h4>8.4.3.116 Return Values</h4>

<p>A character string that represents the server version
number.</p>

<h4>8.4.3.117 Errors</h4>

<p>None.</p>

<h4><a id="mysql_info" name="mysql_info"
href="manual_toc.html#mysql_info">8.4.3.118
<code>mysql_info()</code></a></h4>

<p><a id="IDX1658" name="IDX1658"></a></p>

<p><code>char *mysql_info(MYSQL *mysql)</code></p>

<h4>8.4.3.119 Description</h4>

<p>Retrieves a string providing information about the most recently
executed query, but only for the statements listed here. For other
statements, <code>mysql_info()</code> returns <code>NULL</code>.
The format of the string varies depending on the type of query, as
described here. The numbers are illustrative only; the string will
contain values appropriate for the query.</p>

<dl compact="compact">
<dt><code>INSERT INTO ... SELECT ...</code></dt>

<dd>String format: <code>Records: 100 Duplicates: 0 Warnings:
0</code></dd>

<dt><code>INSERT INTO ... VALUES (...),(...),(...)...</code></dt>

<dd>String format: <code>Records: 3 Duplicates: 0 Warnings:
0</code></dd>

<dt><code>LOAD DATA INFILE ...</code></dt>

<dd>String format: <code>Records: 1 Deleted: 0 Skipped: 0 Warnings:
0</code></dd>

<dt><code>ALTER TABLE</code></dt>

<dd>String format: <code>Records: 3 Duplicates: 0 Warnings:
0</code></dd>

<dt><code>UPDATE</code></dt>

<dd>String format: <code>Rows matched: 40 Changed: 40 Warnings:
0</code></dd>
</dl>

<p>Note that <code>mysql_info()</code> returns a
non-<code>NULL</code> value for the <code>INSERT ... VALUES</code>
statement only if multiple value lists are specified in the
statement.</p>

<h4>8.4.3.120 Return Values</h4>

<p>A character string representing additional information about the
most recently executed query. <code>NULL</code> if no information
is available for the query.</p>

<h4>8.4.3.121 Errors</h4>

<p>None.</p>

<h4><a id="mysql_init" name="mysql_init"
href="manual_toc.html#mysql_init">8.4.3.122
<code>mysql_init()</code></a></h4>

<p><a id="IDX1659" name="IDX1659"></a></p>

<p><code>MYSQL *mysql_init(MYSQL *mysql)</code></p>

<h4>8.4.3.123 Description</h4>

<p>Allocates or initialises a <code>MYSQL</code> object suitable
for <code>mysql_real_connect()</code>. If <code>mysql</code> is a
<code>NULL</code> pointer, the function allocates, initialises, and
returns a new object. Otherwise, the object is initialised and the
address of the object is returned. If <code>mysql_init()</code>
allocates a new object, it will be freed when
<code>mysql_close()</code> is called to close the connection.</p>

<h4>8.4.3.124 Return Values</h4>

<p>An initialised <code>MYSQL*</code> handle. <code>NULL</code> if
there was insufficient memory to allocate a new object.</p>

<h4>8.4.3.125 Errors</h4>

<p>In case of insufficient memory, <code>NULL</code> is
returned.</p>

<h4><a id="mysql_insert_id" name="mysql_insert_id"
href="manual_toc.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a></h4>

<p><a id="IDX1660" name="IDX1660"></a></p>

<p><code>my_ulonglong mysql_insert_id(MYSQL *mysql)</code></p>

<h4>8.4.3.127 Description</h4>

<p>Returns the ID generated for an <code>AUTO_INCREMENT</code>
column by the previous query. Use this function after you have
performed an <code>INSERT</code> query into a table that contains
an <code>AUTO_INCREMENT</code> field.</p>

<p>Note that <code>mysql_insert_id()</code> returns <code>0</code>
if the previous query does not generate an
<code>AUTO_INCREMENT</code> value. If you need to save the value
for later, be sure to call <code>mysql_insert_id()</code>
immediately after the query that generates the value.</p>

<p><code>mysql_insert_id()</code> is updated after
<code>INSERT</code> and <code>UPDATE</code> statements that
generate an <code>AUTO_INCREMENT</code> value or that set a column
value to <code>LAST_INSERT_ID(expr)</code>. See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</p>

<p>Also note that the value of the SQL
<code>LAST_INSERT_ID()</code> function always contains the most
recently generated <code>AUTO_INCREMENT</code> value, and is not
reset between queries because the value of that function is
maintained in the server.</p>

<h4>8.4.3.128 Return Values</h4>

<p>The value of the <code>AUTO_INCREMENT</code> field that was
updated by the previous query. Returns zero if there was no
previous query on the connection or if the query did not update an
<code>AUTO_INCREMENT</code> value.</p>

<h4>8.4.3.129 Errors</h4>

<p>None.</p>

<h4><a id="mysql_kill" name="mysql_kill"
href="manual_toc.html#mysql_kill">8.4.3.130
<code>mysql_kill()</code></a></h4>

<p><a id="IDX1661" name="IDX1661"></a></p>

<p><code>int mysql_kill(MYSQL *mysql, unsigned long pid)</code></p>

<h4>8.4.3.131 Description</h4>

<p>Asks the server to kill the thread specified by
<code>pid</code>.</p>

<h4>8.4.3.132 Return Values</h4>

<p>Zero for success. Non-zero if an error occurred.</p>

<h4>8.4.3.133 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_list_dbs" name="mysql_list_dbs"
href="manual_toc.html#mysql_list_dbs">8.4.3.134
<code>mysql_list_dbs()</code></a></h4>

<p><a id="IDX1662" name="IDX1662"></a></p>

<p><code>MYSQL_RES *mysql_list_dbs(MYSQL *mysql, const char
*wild)</code></p>

<h4>8.4.3.135 Description</h4>

<p>Returns a result set consisting of database names on the server
that match the simple regular expression specified by the
<code>wild</code> parameter. <code>wild</code> may contain the
wildcard characters <samp>`%'</samp> or <samp>`_'</samp>, or may be
a <code>NULL</code> pointer to match all databases. Calling
<code>mysql_list_dbs()</code> is similar to executing the query
<code>SHOW databases [LIKE wild]</code>.</p>

<p>You must free the result set with
<code>mysql_free_result()</code>.</p>

<h4>8.4.3.136 Return Values</h4>

<p>A <code>MYSQL_RES</code> result set for success.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.137 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_OUT_OF_MEMORY</code></dt>

<dd>Out of memory.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_list_fields" name="mysql_list_fields"
href="manual_toc.html#mysql_list_fields">8.4.3.138
<code>mysql_list_fields()</code></a></h4>

<p><a id="IDX1663" name="IDX1663"></a></p>

<p><code>MYSQL_RES *mysql_list_fields(MYSQL *mysql, const char
*table, const char *wild)</code></p>

<h4>8.4.3.139 Description</h4>

<p>Returns a result set consisting of field names in the given
table that match the simple regular expression specified by the
<code>wild</code> parameter. <code>wild</code> may contain the
wildcard characters <samp>`%'</samp> or <samp>`_'</samp>, or may be
a <code>NULL</code> pointer to match all fields. Calling
<code>mysql_list_fields()</code> is similar to executing the query
<code>SHOW COLUMNS FROM tbl_name [LIKE wild]</code>.</p>

<p>Note that it's recommended that you use <code>SHOW COLUMNS FROM
tbl_name</code> instead of <code>mysql_list_fields()</code>.</p>

<p>You must free the result set with
<code>mysql_free_result()</code>.</p>

<h4>8.4.3.140 Return Values</h4>

<p>A <code>MYSQL_RES</code> result set for success.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.141 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_list_processes" name="mysql_list_processes"
href="manual_toc.html#mysql_list_processes">8.4.3.142
<code>mysql_list_processes()</code></a></h4>

<p><a id="IDX1664" name="IDX1664"></a></p>

<p><code>MYSQL_RES *mysql_list_processes(MYSQL *mysql)</code></p>

<h4>8.4.3.143 Description</h4>

<p>Returns a result set describing the current server threads. This
is the same kind of information as that reported by
<code>mysqladmin processlist</code> or a <code>SHOW
PROCESSLIST</code> query.</p>

<p>You must free the result set with
<code>mysql_free_result()</code>.</p>

<h4>8.4.3.144 Return Values</h4>

<p>A <code>MYSQL_RES</code> result set for success.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.145 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_list_tables" name="mysql_list_tables"
href="manual_toc.html#mysql_list_tables">8.4.3.146
<code>mysql_list_tables()</code></a></h4>

<p><a id="IDX1665" name="IDX1665"></a></p>

<p><code>MYSQL_RES *mysql_list_tables(MYSQL *mysql, const char
*wild)</code></p>

<h4>8.4.3.147 Description</h4>

<p>Returns a result set consisting of table names in the current
database that match the simple regular expression specified by the
<code>wild</code> parameter. <code>wild</code> may contain the
wildcard characters <samp>`%'</samp> or <samp>`_'</samp>, or may be
a <code>NULL</code> pointer to match all tables. Calling
<code>mysql_list_tables()</code> is similar to executing the query
<code>SHOW tables [LIKE wild]</code>.</p>

<p>You must free the result set with
<code>mysql_free_result()</code>.</p>

<h4>8.4.3.148 Return Values</h4>

<p>A <code>MYSQL_RES</code> result set for success.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.149 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_num_fields" name="mysql_num_fields"
href="manual_toc.html#mysql_num_fields">8.4.3.150
<code>mysql_num_fields()</code></a></h4>

<p><a id="IDX1666" name="IDX1666"></a> <a id="IDX1667"
name="IDX1667"></a></p>

<p><code>unsigned int mysql_num_fields(MYSQL_RES
*result)</code></p>

<p>or</p>

<p><code>unsigned int mysql_num_fields(MYSQL *mysql)</code></p>

<p>The second form doesn't work on MySQL Version 3.22.24 or newer.
To pass a <code>MYSQL*</code> argument, you must use <code>unsigned
int mysql_field_count(MYSQL *mysql)</code> instead.</p>

<h4>8.4.3.151 Description</h4>

<p>Returns the number of columns in a result set.</p>

<p>Note that you can get the number of columns either from a
pointer to a result set or to a connection handle. You would use
the connection handle if <code>mysql_store_result()</code> or
<code>mysql_use_result()</code> returned <code>NULL</code> (and
thus you have no result set pointer). In this case, you can call
<code>mysql_field_count()</code> to determine whether
<code>mysql_store_result()</code> should have produced a non-empty
result. This allows the client program to take proper action
without knowing whether or not the query was a <code>SELECT</code>
(or <code>SELECT</code>-like) statement. The example shown here
illustrates how this may be done.</p>

<p>See section <a
href="manual.html#NULL_mysql_store_result">8.4.6.1 Why Is It that
After <code>mysql_query()</code> Returns Success,
<code>mysql_store_result()</code> Sometimes Returns
<code>NULL</code>?</a>.</p>

<h4>8.4.3.152 Return Values</h4>

<p>An unsigned integer representing the number of fields in a
result set.</p>

<h4>8.4.3.153 Errors</h4>

<p>None.</p>

<h4>8.4.3.154 Example</h4>

<pre>
MYSQL_RES *result;
unsigned int num_fields;
unsigned int num_rows;

if (mysql_query(&amp;mysql,query_string))
{
    // error
}
else // query succeeded, process any data returned by it
{
    result = mysql_store_result(&amp;mysql);
    if (result)  // there are rows
    {
        num_fields = mysql_num_fields(result);
        // retrieve rows, then call mysql_free_result(result)
    }
    else  // mysql_store_result() returned nothing; should it have?
    {
        if (mysql_errno(&amp;mysql))
    {
           fprintf(stderr, "Error: %s\n", mysql_error(&amp;mysql));
    }
        else if (mysql_field_count(&amp;mysql) == 0)
        {
            // query does not return data
            // (it was not a SELECT)
            num_rows = mysql_affected_rows(&amp;mysql);
        }
    }
}
</pre>

<p>An alternative (if you know that your query should have returned
a result set) is to replace the
<code>mysql_errno(&amp;mysql)</code> call with a check if
<code>mysql_field_count(&amp;mysql)</code> is = 0. This will only
happen if something went wrong.</p>

<h4><a id="mysql_num_rows" name="mysql_num_rows"
href="manual_toc.html#mysql_num_rows">8.4.3.155
<code>mysql_num_rows()</code></a></h4>

<p><a id="IDX1668" name="IDX1668"></a></p>

<p><code>my_ulonglong mysql_num_rows(MYSQL_RES *result)</code></p>

<h4>8.4.3.156 Description</h4>

<p>Returns the number of rows in the result set.</p>

<p>The use of <code>mysql_num_rows()</code> depends on whether you
use <code>mysql_store_result()</code> or
<code>mysql_use_result()</code> to return the result set. If you
use <code>mysql_store_result()</code>,
<code>mysql_num_rows()</code> may be called immediately. If you use
<code>mysql_use_result()</code>, <code>mysql_num_rows()</code> will
not return the correct value until all the rows in the result set
have been retrieved.</p>

<h4>8.4.3.157 Return Values</h4>

<p>The number of rows in the result set.</p>

<h4>8.4.3.158 Errors</h4>

<p>None.</p>

<h4><a id="mysql_options" name="mysql_options"
href="manual_toc.html#mysql_options">8.4.3.159
<code>mysql_options()</code></a></h4>

<p><a id="IDX1669" name="IDX1669"></a></p>

<p><code>int mysql_options(MYSQL *mysql, enum mysql_option option,
const char *arg)</code></p>

<h4>8.4.3.160 Description</h4>

<p>Can be used to set extra connect options and affect behaviour
for a connection. This function may be called multiple times to set
several options.</p>

<p><code>mysql_options()</code> should be called after
<code>mysql_init()</code> and before <code>mysql_connect()</code>
or <code>mysql_real_connect()</code>.</p>

<p>The <code>option</code> argument is the option that you want to
set; the <code>arg</code> argument is the value for the option. If
the option is an integer, then <code>arg</code> should point to the
value of the integer.</p>

<p>Possible options values:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Argument type</strong></td>
<td><strong>Function</strong></td>
</tr>

<tr>
<td><code>MYSQL_OPT_CONNECT_TIMEOUT</code></td>
<td><code>unsigned int *</code></td>
<td>Connect timeout in seconds.</td>
</tr>

<tr>
<td><code>MYSQL_OPT_COMPRESS</code></td>
<td>Not used</td>
<td>Use the compressed client/server protocol.</td>
</tr>

<tr>
<td><code>MYSQL_OPT_LOCAL_INFILE</code></td>
<td>optional pointer to uint</td>
<td>If no pointer is given or if pointer points to an
<code>unsigned int != 0</code> the command <code>LOAD LOCAL
INFILE</code> is enabled.</td>
</tr>

<tr>
<td><code>MYSQL_OPT_NAMED_PIPE</code></td>
<td>Not used</td>
<td>Use named pipes to connect to a MySQL server on NT.</td>
</tr>

<tr>
<td><code>MYSQL_INIT_COMMAND</code></td>
<td><code>char *</code></td>
<td>Command to execute when connecting to the MySQL server. Will
automatically be re-executed when reconnecting.</td>
</tr>

<tr>
<td><code>MYSQL_READ_DEFAULT_FILE</code></td>
<td><code>char *</code></td>
<td>Read options from the named option file instead of from
<tt>`my.cnf'</tt>.</td>
</tr>

<tr>
<td><code>MYSQL_READ_DEFAULT_GROUP</code></td>
<td><code>char *</code></td>
<td>Read options from the named group from <tt>`my.cnf'</tt> or the
file specified with <code>MYSQL_READ_DEFAULT_FILE</code>.</td>
</tr>
</table>

<p>Note that the group <code>client</code> is always read if you
use <code>MYSQL_READ_DEFAULT_FILE</code> or
<code>MYSQL_READ_DEFAULT_GROUP</code>.</p>

<p>The specified group in the option file may contain the following
options:</p>

<table border="1" width="100%">
<tr>
<td><strong>Option</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>connect-timeout</code></td>
<td>Connect timeout in seconds. On Linux this timeout is also used
for waiting for the first answer from the server.</td>
</tr>

<tr>
<td><code>compress</code></td>
<td>Use the compressed client/server protocol.</td>
</tr>

<tr>
<td><code>database</code></td>
<td>Connect to this database if no database was specified in the
connect command.</td>
</tr>

<tr>
<td><code>debug</code></td>
<td>Debug options.</td>
</tr>

<tr>
<td><code>disable-local-infile</code></td>
<td>Disable use of <code>LOAD DATA LOCAL</code>.</td>
</tr>

<tr>
<td><code>host</code></td>
<td>Default host name.</td>
</tr>

<tr>
<td><code>init-command</code></td>
<td>Command to execute when connecting to MySQL server. Will
automatically be re-executed when reconnecting.</td>
</tr>

<tr>
<td><code>interactive-timeout</code></td>
<td>Same as specifying <code>CLIENT_INTERACTIVE</code> to
<code>mysql_real_connect()</code>. See section <a
href="manual.html#mysql_real_connect">8.4.3.171
<code>mysql_real_connect()</code></a>.</td>
</tr>

<tr>
<td><code>local-infile[=(0|1)]</code></td>
<td>If no argument or argument != 0 then enable use of <code>LOAD
DATA LOCAL</code>.</td>
</tr>

<tr>
<td><code>max_allowed_packet</code></td>
<td>Max size of packet client can read from server.</td>
</tr>

<tr>
<td><code>password</code></td>
<td>Default password.</td>
</tr>

<tr>
<td><code>pipe</code></td>
<td>Use named pipes to connect to a MySQL server on NT.</td>
</tr>

<tr>
<td><code>port</code></td>
<td>Default port number.</td>
</tr>

<tr>
<td><code>return-found-rows</code></td>
<td>Tell <code>mysql_info()</code> to return found rows instead of
updated rows when using <code>UPDATE</code>.</td>
</tr>

<tr>
<td><code>socket</code></td>
<td>Default socket number.</td>
</tr>

<tr>
<td><code>user</code></td>
<td>Default user.</td>
</tr>
</table>

<p>Note that <code>timeout</code> has been replaced by
<code>connect-timeout</code>, but <code>timeout</code> will still
work for a while.</p>

<p>For more information about option files, see section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</p>

<h4>8.4.3.161 Return Values</h4>

<p>Zero for success. Non-zero if you used an unknown option.</p>

<h4>8.4.3.162 Example</h4>

<pre>
MYSQL mysql;

mysql_init(&amp;mysql);
mysql_options(&amp;mysql,MYSQL_OPT_COMPRESS,0);
mysql_options(&amp;mysql,MYSQL_READ_DEFAULT_GROUP,"odbc");
if (!mysql_real_connect(&amp;mysql,"host","user","passwd","database",0,NULL,0))
{
    fprintf(stderr, "Failed to connect to database: Error: %s\n",
          mysql_error(&amp;mysql));
}
</pre>

<p>The above requests the client to use the compressed
client/server protocol and read the additional options from the
<code>odbc</code> section in the <tt>`my.cnf'</tt> file.</p>

<h4><a id="mysql_ping" name="mysql_ping"
href="manual_toc.html#mysql_ping">8.4.3.163
<code>mysql_ping()</code></a></h4>

<p><a id="IDX1670" name="IDX1670"></a></p>

<p><code>int mysql_ping(MYSQL *mysql)</code></p>

<h4>8.4.3.164 Description</h4>

<p>Checks whether the connection to the server is working. If it
has gone down, an automatic reconnection is attempted.</p>

<p>This function can be used by clients that remain idle for a long
while, to check whether the server has closed the connection and
reconnect if necessary.</p>

<h4>8.4.3.165 Return Values</h4>

<p>Zero if the server is alive. Non-zero if an error occurred.</p>

<h4>8.4.3.166 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_query" name="mysql_query"
href="manual_toc.html#mysql_query">8.4.3.167
<code>mysql_query()</code></a></h4>

<p><a id="IDX1671" name="IDX1671"></a></p>

<p><code>int mysql_query(MYSQL *mysql, const char
*query)</code></p>

<h4>8.4.3.168 Description</h4>

<p>Executes the SQL query pointed to by the null-terminated string
<code>query</code>. The query must consist of a single SQL
statement. You should not add a terminating semicolon
(<samp>`;'</samp>) or <code>\g</code> to the statement.</p>

<p><code>mysql_query()</code> cannot be used for queries that
contain binary data; you should use <code>mysql_real_query()</code>
instead. (Binary data may contain the <samp>`\0'</samp> character,
which <code>mysql_query()</code> interprets as the end of the query
string.)</p>

<p>If you want to know if the query should return a result set or
not, you can use <code>mysql_field_count()</code> to check for
this. See section <a href="manual.html#mysql_field_count">8.4.3.85
<code>mysql_field_count()</code></a>.</p>

<h4>8.4.3.169 Return Values</h4>

<p>Zero if the query was successful. Non-zero if an error
occurred.</p>

<h4>8.4.3.170 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_real_connect" name="mysql_real_connect"
href="manual_toc.html#mysql_real_connect">8.4.3.171
<code>mysql_real_connect()</code></a></h4>

<p><a id="IDX1672" name="IDX1672"></a></p>

<p><code>MYSQL *mysql_real_connect(MYSQL *mysql, const char *host,
const char *user, const char *passwd, const char *db, unsigned int
port, const char *unix_socket, unsigned int client_flag)</code></p>

<h4>8.4.3.172 Description</h4>

<p><code>mysql_real_connect()</code> attempts to establish a
connection to a MySQL database engine running on <code>host</code>.
<code>mysql_real_connect()</code> must complete successfully before
you can execute any of the other API functions, with the exception
of <code>mysql_get_client_info()</code>.</p>

<p>The parameters are specified as follows:</p>

<ul>
<li>The first parameter should be the address of an existing
<code>MYSQL</code> structure. Before calling
<code>mysql_real_connect()</code> you must call
<code>mysql_init()</code> to initialise the <code>MYSQL</code>
structure. You can change a lot of connect options with the
<code>mysql_options()</code> call. See section <a
href="manual.html#mysql_options">8.4.3.159
<code>mysql_options()</code></a>.</li>

<li>The value of <code>host</code> may be either a hostname or an
IP address. If <code>host</code> is <code>NULL</code> or the string
<code>"localhost"</code>, a connection to the local host is
assumed. If the OS supports sockets (Unix) or named pipes
(Windows), they are used instead of TCP/IP to connect to the
server.</li>

<li>The <code>user</code> parameter contains the user's MySQL login
ID. If <code>user</code> is <code>NULL</code>, the current user is
assumed. Under Unix, this is the current login name. Under Windows
ODBC, the current user name must be specified explicitly. See
section <a href="manual.html#ODBC_administrator">8.3.2 How to Fill
in the Various Fields in the ODBC Administrator Program</a>.</li>

<li>The <code>passwd</code> parameter contains the password for
<code>user</code>. If <code>passwd</code> is <code>NULL</code>,
only entries in the <code>user</code> table for the user that have
a blank (empty) password field will be checked for a match. This
allows the database administrator to set up the MySQL privilege
system in such a way that users get different privileges depending
on whether or not they have specified a password. Note: Do not
attempt to encrypt the password before calling
<code>mysql_real_connect()</code>; password encryption is handled
automatically by the client API.</li>

<li><code>db</code> is the database name. If <code>db</code> is not
<code>NULL</code>, the connection will set the default database to
this value.</li>

<li>If <code>port</code> is not 0, the value will be used as the
port number for the TCP/IP connection. Note that the
<code>host</code> parameter determines the type of the
connection.</li>

<li>If <code>unix_socket</code> is not <code>NULL</code>, the
string specifies the socket or named pipe that should be used. Note
that the <code>host</code> parameter determines the type of the
connection.</li>

<li>The value of <code>client_flag</code> is usually 0, but can be
set to a combination of the following flags in very special
circumstances: 

<table border="1" width="100%">
<tr>
<td><strong>Flag name</strong></td>
<td><strong>Flag description</strong></td>
</tr>

<tr>
<td><code>CLIENT_COMPRESS</code></td>
<td>Use compression protocol.</td>
</tr>

<tr>
<td><code>CLIENT_FOUND_ROWS</code></td>
<td>Return the number of found (matched) rows, not the number of
affected rows.</td>
</tr>

<tr>
<td><code>CLIENT_IGNORE_SPACE</code></td>
<td>Allow spaces after function names. Makes all functions names
reserved words.</td>
</tr>

<tr>
<td><code>CLIENT_INTERACTIVE</code></td>
<td>Allow <code>interactive_timeout</code> seconds (instead of
<code>wait_timeout</code> seconds) of inactivity before closing the
connection.</td>
</tr>

<tr>
<td><code>CLIENT_NO_SCHEMA</code></td>
<td>Don't allow the <code>db_name.tbl_name.col_name</code> syntax.
This is for ODBC. It causes the parser to generate an error if you
use that syntax, which is useful for trapping bugs in some ODBC
programs.</td>
</tr>

<tr>
<td><code>CLIENT_ODBC</code></td>
<td>The client is an ODBC client. This changes <code>mysqld</code>
to be more ODBC-friendly.</td>
</tr>

<tr>
<td><code>CLIENT_SSL</code></td>
<td>Use SSL (encrypted protocol).</td>
</tr>
</table>
</li>
</ul>

<h4>8.4.3.173 Return Values</h4>

<p>A <code>MYSQL*</code> connection handle if the connection was
successful, <code>NULL</code> if the connection was unsuccessful.
For a successful connection, the return value is the same as the
value of the first parameter.</p>

<h4>8.4.3.174 Errors</h4>

<dl compact="compact">
<dt><code>CR_CONN_HOST_ERROR</code></dt>

<dd>Failed to connect to the MySQL server.</dd>

<dt><code>CR_CONNECTION_ERROR</code></dt>

<dd>Failed to connect to the local MySQL server.</dd>

<dt><code>CR_IPSOCK_ERROR</code></dt>

<dd>Failed to create an IP socket.</dd>

<dt><code>CR_OUT_OF_MEMORY</code></dt>

<dd>Out of memory.</dd>

<dt><code>CR_SOCKET_CREATE_ERROR</code></dt>

<dd>Failed to create a Unix socket.</dd>

<dt><code>CR_UNKNOWN_HOST</code></dt>

<dd>Failed to find the IP address for the hostname.</dd>

<dt><code>CR_VERSION_ERROR</code></dt>

<dd>A protocol mismatch resulted from attempting to connect to a
server with a client library that uses a different protocol
version. This can happen if you use a very old client library to
connect to a new server that wasn't started with the
<code>--old-protocol</code> option.</dd>

<dt><code>CR_NAMEDPIPEOPEN_ERROR</code></dt>

<dd>Failed to create a named pipe on Windows.</dd>

<dt><code>CR_NAMEDPIPEWAIT_ERROR</code></dt>

<dd>Failed to wait for a named pipe on Windows.</dd>

<dt><code>CR_NAMEDPIPESETSTATE_ERROR</code></dt>

<dd>Failed to get a pipe handler on Windows.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>If <code>connect_timeout</code> &gt; 0 and it took longer then
<code>connect_timeout</code> seconds to connect to the server or if
the server died while executing the <code>init-command</code>.</dd>
</dl>

<h4>8.4.3.175 Example</h4>

<pre>
MYSQL mysql;

mysql_init(&amp;mysql);
mysql_options(&amp;mysql,MYSQL_READ_DEFAULT_GROUP,"your_prog_name");
if (!mysql_real_connect(&amp;mysql,"host","user","passwd","database",0,NULL,0))
{
    fprintf(stderr, "Failed to connect to database: Error: %s\n",
          mysql_error(&amp;mysql));
}
</pre>

<p>By using <code>mysql_options()</code> the MySQL library will
read the <code>[client]</code> and <code>[your_prog_name]</code>
sections in the <tt>`my.cnf'</tt> file which will ensure that your
program will work, even if someone has set up MySQL in some
non-standard way.</p>

<p>Note that upon connection, <code>mysql_real_connect()</code>
sets the <code>reconnect</code> flag (part of the
<code>MYSQL</code> structure) to a value of <code>1</code>. This
flag indicates, in the event that a query cannot be performed
because of a lost connection, to try reconnecting to the server
before giving up.</p>

<h4><a id="mysql_real_escape_string"
name="mysql_real_escape_string"
href="manual_toc.html#mysql_real_escape_string">8.4.3.176
<code>mysql_real_escape_string()</code></a></h4>

<p><a id="IDX1673" name="IDX1673"></a></p>

<p><code>unsigned long mysql_real_escape_string(MYSQL *mysql, char
*to, const char *from, unsigned long length)</code></p>

<h4>8.4.3.177 Description</h4>

<p>This function is used to create a legal SQL string that you can
use in a SQL statement. See section <a
href="manual.html#String_syntax">6.1.1.1 Strings</a>.</p>

<p>The string in <code>from</code> is encoded to an escaped SQL
string, taking into account the current character set of the
connection. The result is placed in <code>to</code> and a
terminating null byte is appended. Characters encoded are
<code>NUL</code> (ASCII 0), <samp>`\n'</samp>, <samp>`\r'</samp>,
<samp>`\'</samp>, <samp>`''</samp>, <samp>`"'</samp>, and Control-Z
(see section <a href="manual.html#Literals">6.1.1 Literals: How to
Write Strings and Numbers</a>). (Strictly speaking, MySQL requires
only that backslash and the quote character used to quote the
string in the query be escaped. This function quotes the other
characters to make them easier to read in log files.)</p>

<p>The string pointed to by <code>from</code> must be
<code>length</code> bytes long. You must allocate the
<code>to</code> buffer to be at least <code>length*2+1</code> bytes
long. (In the worst case, each character may need to be encoded as
using two bytes, and you need room for the terminating null byte.)
When <code>mysql_real_escape_string()</code> returns, the contents
of <code>to</code> will be a null-terminated string. The return
value is the length of the encoded string, not including the
terminating null character.</p>

<h4>8.4.3.178 Example</h4>

<pre>
char query[1000],*end;

end = strmov(query,"INSERT INTO test_table values(");
*end++ = '\'';
end += mysql_real_escape_string(&amp;mysql, end,"What's this",11);
*end++ = '\'';
*end++ = ',';
*end++ = '\'';
end += mysql_real_escape_string(&amp;mysql, end,"binary data: \0\r\n",16);
*end++ = '\'';
*end++ = ')';

if (mysql_real_query(&amp;mysql,query,(unsigned int) (end - query)))
{
   fprintf(stderr, "Failed to insert row, Error: %s\n",
           mysql_error(&amp;mysql));
}
</pre>

<p>The <code>strmov()</code> function used in the example is
included in the <code>mysqlclient</code> library and works like
<code>strcpy()</code> but returns a pointer to the terminating null
of the first parameter.</p>

<h4>8.4.3.179 Return Values</h4>

<p>The length of the value placed into <code>to</code>, not
including the terminating null character.</p>

<h4>8.4.3.180 Errors</h4>

<p>None.</p>

<h4><a id="mysql_real_query" name="mysql_real_query"
href="manual_toc.html#mysql_real_query">8.4.3.181
<code>mysql_real_query()</code></a></h4>

<p><a id="IDX1674" name="IDX1674"></a></p>

<p><code>int mysql_real_query(MYSQL *mysql, const char *query,
unsigned long length)</code></p>

<h4>8.4.3.182 Description</h4>

<p>Executes the SQL query pointed to by <code>query</code>, which
should be a string <code>length</code> bytes long. The query must
consist of a single SQL statement. You should not add a terminating
semicolon (<samp>`;'</samp>) or <code>\g</code> to the
statement.</p>

<p>You <strong>must</strong> use <code>mysql_real_query()</code>
rather than <code>mysql_query()</code> for queries that contain
binary data, because binary data may contain the <samp>`\0'</samp>
character. In addition, <code>mysql_real_query()</code> is faster
than <code>mysql_query()</code> because it does not call
<code>strlen()</code> on the query string.</p>

<p>If you want to know if the query should return a result set or
not, you can use <code>mysql_field_count()</code> to check for
this. See section <a href="manual.html#mysql_field_count">8.4.3.85
<code>mysql_field_count()</code></a>.</p>

<h4>8.4.3.183 Return Values</h4>

<p>Zero if the query was successful. Non-zero if an error
occurred.</p>

<h4>8.4.3.184 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_reload" name="mysql_reload"
href="manual_toc.html#mysql_reload">8.4.3.185
<code>mysql_reload()</code></a></h4>

<p><a id="IDX1675" name="IDX1675"></a></p>

<p><code>int mysql_reload(MYSQL *mysql)</code></p>

<h4>8.4.3.186 Description</h4>

<p>Asks the MySQL server to reload the grant tables. The connected
user must have the <code>RELOAD</code> privilege.</p>

<p>This function is deprecated. It is preferable to use
<code>mysql_query()</code> to issue a SQL <code>FLUSH
PRIVILEGES</code> statement instead.</p>

<h4>8.4.3.187 Return Values</h4>

<p>Zero for success. Non-zero if an error occurred.</p>

<h4>8.4.3.188 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_row_seek" name="mysql_row_seek"
href="manual_toc.html#mysql_row_seek">8.4.3.189
<code>mysql_row_seek()</code></a></h4>

<p><a id="IDX1676" name="IDX1676"></a></p>

<p><code>MYSQL_ROW_OFFSET mysql_row_seek(MYSQL_RES *result,
MYSQL_ROW_OFFSET offset)</code></p>

<h4>8.4.3.190 Description</h4>

<p>Sets the row cursor to an arbitrary row in a query result set.
This requires that the result set structure contains the entire
result of the query, so <code>mysql_row_seek()</code> may be used
in conjunction only with <code>mysql_store_result()</code>, not
with <code>mysql_use_result()</code>.</p>

<p>The offset should be a value returned from a call to
<code>mysql_row_tell()</code> or to <code>mysql_row_seek()</code>.
This value is not simply a row number; if you want to seek to a row
within a result set using a row number, use
<code>mysql_data_seek()</code> instead.</p>

<h4>8.4.3.191 Return Values</h4>

<p>The previous value of the row cursor. This value may be passed
to a subsequent call to <code>mysql_row_seek()</code>.</p>

<h4>8.4.3.192 Errors</h4>

<p>None.</p>

<h4><a id="mysql_row_tell" name="mysql_row_tell"
href="manual_toc.html#mysql_row_tell">8.4.3.193
<code>mysql_row_tell()</code></a></h4>

<p><a id="IDX1677" name="IDX1677"></a></p>

<p><code>MYSQL_ROW_OFFSET mysql_row_tell(MYSQL_RES
*result)</code></p>

<h4>8.4.3.194 Description</h4>

<p>Returns the current position of the row cursor for the last
<code>mysql_fetch_row()</code>. This value can be used as an
argument to <code>mysql_row_seek()</code>.</p>

<p>You should use <code>mysql_row_tell()</code> only after
<code>mysql_store_result()</code>, not after
<code>mysql_use_result()</code>.</p>

<h4>8.4.3.195 Return Values</h4>

<p>The current offset of the row cursor.</p>

<h4>8.4.3.196 Errors</h4>

<p>None.</p>

<h4><a id="mysql_select_db" name="mysql_select_db"
href="manual_toc.html#mysql_select_db">8.4.3.197
<code>mysql_select_db()</code></a></h4>

<p><a id="IDX1678" name="IDX1678"></a></p>

<p><code>int mysql_select_db(MYSQL *mysql, const char
*db)</code></p>

<h4>8.4.3.198 Description</h4>

<p>Causes the database specified by <code>db</code> to become the
default (current) database on the connection specified by
<code>mysql</code>. In subsequent queries, this database is the
default for table references that do not include an explicit
database specifier.</p>

<p><code>mysql_select_db()</code> fails unless the connected user
can be authenticated as having permission to use the database.</p>

<h4>8.4.3.199 Return Values</h4>

<p>Zero for success. Non-zero if an error occurred.</p>

<h4>8.4.3.200 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_shutdown" name="mysql_shutdown"
href="manual_toc.html#mysql_shutdown">8.4.3.201
<code>mysql_shutdown()</code></a></h4>

<p><a id="IDX1679" name="IDX1679"></a></p>

<p><code>int mysql_shutdown(MYSQL *mysql)</code></p>

<h4>8.4.3.202 Description</h4>

<p>Asks the database server to shut down. The connected user must
have <code>SHUTDOWN</code> privileges.</p>

<h4>8.4.3.203 Return Values</h4>

<p>Zero for success. Non-zero if an error occurred.</p>

<h4>8.4.3.204 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_stat" name="mysql_stat"
href="manual_toc.html#mysql_stat">8.4.3.205
<code>mysql_stat()</code></a></h4>

<p><a id="IDX1680" name="IDX1680"></a></p>

<p><code>char *mysql_stat(MYSQL *mysql)</code></p>

<h4>8.4.3.206 Description</h4>

<p>Returns a character string containing information similar to
that provided by the <code>mysqladmin status</code> command. This
includes uptime in seconds and the number of running threads,
questions, reloads, and open tables.</p>

<h4>8.4.3.207 Return Values</h4>

<p>A character string describing the server status.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.208 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_store_result" name="mysql_store_result"
href="manual_toc.html#mysql_store_result">8.4.3.209
<code>mysql_store_result()</code></a></h4>

<p><a id="IDX1681" name="IDX1681"></a></p>

<p><code>MYSQL_RES *mysql_store_result(MYSQL *mysql)</code></p>

<h4>8.4.3.210 Description</h4>

<p>You must call <code>mysql_store_result()</code> or
<code>mysql_use_result()</code> for every query that successfully
retrieves data (<code>SELECT</code>, <code>SHOW</code>,
<code>DESCRIBE</code>, <code>EXPLAIN</code>).</p>

<p>You don't have to call <code>mysql_store_result()</code> or
<code>mysql_use_result()</code> for other queries, but it will not
do any harm or cause any notable performance if you call
<code>mysql_store_result()</code> in all cases. You can detect if
the query didn't have a result set by checking if
<code>mysql_store_result()</code> returns 0 (more about this later
one).</p>

<p>If you want to know if the query should return a result set or
not, you can use <code>mysql_field_count()</code> to check for
this. See section <a href="manual.html#mysql_field_count">8.4.3.85
<code>mysql_field_count()</code></a>.</p>

<p><code>mysql_store_result()</code> reads the entire result of a
query to the client, allocates a <code>MYSQL_RES</code> structure,
and places the result into this structure.</p>

<p><code>mysql_store_result()</code> returns a null pointer if the
query didn't return a result set (if the query was, for example, an
<code>INSERT</code> statement).</p>

<p><code>mysql_store_result()</code> also returns a null pointer if
reading of the result set failed. You can check if you got an error
by checking if <code>mysql_error()</code> doesn't return a null
pointer, if <code>mysql_errno()</code> returns &lt;&gt; 0, or if
<code>mysql_field_count()</code> returns &lt;&gt; 0.</p>

<p>An empty result set is returned if there are no rows returned.
(An empty result set differs from a null pointer as a return
value.)</p>

<p>Once you have called <code>mysql_store_result()</code> and got a
result back that isn't a null pointer, you may call
<code>mysql_num_rows()</code> to find out how many rows are in the
result set.</p>

<p>You can call <code>mysql_fetch_row()</code> to fetch rows from
the result set, or <code>mysql_row_seek()</code> and
<code>mysql_row_tell()</code> to obtain or set the current row
position within the result set.</p>

<p>You must call <code>mysql_free_result()</code> once you are done
with the result set.</p>

<p>See section <a
href="manual.html#NULL_mysql_store_result">8.4.6.1 Why Is It that
After <code>mysql_query()</code> Returns Success,
<code>mysql_store_result()</code> Sometimes Returns
<code>NULL</code>?</a>.</p>

<h4>8.4.3.211 Return Values</h4>

<p>A <code>MYSQL_RES</code> result structure with the results.
<code>NULL</code> if an error occurred.</p>

<h4>8.4.3.212 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_OUT_OF_MEMORY</code></dt>

<dd>Out of memory.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h4><a id="mysql_thread_id" name="mysql_thread_id"
href="manual_toc.html#mysql_thread_id">8.4.3.213
<code>mysql_thread_id()</code></a></h4>

<p><a id="IDX1682" name="IDX1682"></a></p>

<p><code>unsigned long mysql_thread_id(MYSQL *mysql)</code></p>

<h4>8.4.3.214 Description</h4>

<p>Returns the thread ID of the current connection. This value can
be used as an argument to <code>mysql_kill()</code> to kill the
thread.</p>

<p>If the connection is lost and you reconnect with
<code>mysql_ping()</code>, the thread ID will change. This means
you should not get the thread ID and store it for later. You should
get it when you need it.</p>

<h4>8.4.3.215 Return Values</h4>

<p>The thread ID of the current connection.</p>

<h4>8.4.3.216 Errors</h4>

<p>None.</p>

<h4><a id="mysql_use_result" name="mysql_use_result"
href="manual_toc.html#mysql_use_result">8.4.3.217
<code>mysql_use_result()</code></a></h4>

<p><a id="IDX1683" name="IDX1683"></a></p>

<p><code>MYSQL_RES *mysql_use_result(MYSQL *mysql)</code></p>

<h4>8.4.3.218 Description</h4>

<p>You must call <code>mysql_store_result()</code> or
<code>mysql_use_result()</code> for every query that successfully
retrieves data (<code>SELECT</code>, <code>SHOW</code>,
<code>DESCRIBE</code>, <code>EXPLAIN</code>).</p>

<p><code>mysql_use_result()</code> initiates a result set retrieval
but does not actually read the result set into the client like
<code>mysql_store_result()</code> does. Instead, each row must be
retrieved individually by making calls to
<code>mysql_fetch_row()</code>. This reads the result of a query
directly from the server without storing it in a temporary table or
local buffer, which is somewhat faster and uses much less memory
than <code>mysql_store_result()</code>. The client will only
allocate memory for the current row and a communication buffer that
may grow up to <code>max_allowed_packet</code> bytes.</p>

<p>On the other hand, you shouldn't use
<code>mysql_use_result()</code> if you are doing a lot of
processing for each row on the client side, or if the output is
sent to a screen on which the user may type a <code>^S</code> (stop
scroll). This will tie up the server and prevent other threads from
updating any tables from which the data is being fetched.</p>

<p>When using <code>mysql_use_result()</code>, you must execute
<code>mysql_fetch_row()</code> until a <code>NULL</code> value is
returned, otherwise, the unfetched rows will be returned as part of
the result set for your next query. The C API will give the error
<code>Commands out of sync; you can't run this command now</code>
if you forget to do this!</p>

<p>You may not use <code>mysql_data_seek()</code>,
<code>mysql_row_seek()</code>, <code>mysql_row_tell()</code>,
<code>mysql_num_rows()</code>, or
<code>mysql_affected_rows()</code> with a result returned from
<code>mysql_use_result()</code>, nor may you issue other queries
until the <code>mysql_use_result()</code> has finished. (However,
after you have fetched all the rows, <code>mysql_num_rows()</code>
will accurately return the number of rows fetched.)</p>

<p>You must call <code>mysql_free_result()</code> once you are done
with the result set.</p>

<h4>8.4.3.219 Return Values</h4>

<p>A <code>MYSQL_RES</code> result structure. <code>NULL</code> if
an error occurred.</p>

<h4>8.4.3.220 Errors</h4>

<dl compact="compact">
<dt><code>CR_COMMANDS_OUT_OF_SYNC</code></dt>

<dd>Commands were executed in an improper order.</dd>

<dt><code>CR_OUT_OF_MEMORY</code></dt>

<dd>Out of memory.</dd>

<dt><code>CR_SERVER_GONE_ERROR</code></dt>

<dd>The MySQL server has gone away.</dd>

<dt><code>CR_SERVER_LOST</code></dt>

<dd>The connection to the server was lost during the query.</dd>

<dt><code>CR_UNKNOWN_ERROR</code></dt>

<dd>An unknown error occurred.</dd>
</dl>

<h3><a id="C_Thread_functions" name="C_Thread_functions"
href="manual_toc.html#C_Thread_functions">8.4.4 C Threaded Function
Descriptions</a></h3>

<p>You need to use the following functions when you want to create
a threaded client. See section <a
href="manual.html#Threaded_clients">8.4.8 How to Make a Threaded
Client</a>.</p>

<h4><a id="my_init" name="my_init"
href="manual_toc.html#my_init">8.4.4.1
<code>my_init()</code></a></h4>

<p><a id="IDX1684" name="IDX1684"></a></p>

<p><code>void my_init(void)</code></p>

<h4>8.4.4.2 Description</h4>

<p>This function needs to be called once in the program before
calling any MySQL function. This initialises some global variables
that MySQL needs. If you are using a thread-safe client library,
this will also call <code>mysql_thread_init()</code> for this
thread.</p>

<p>This is automatically called by <code>mysql_init()</code>,
<code>mysql_server_init()</code> and
<code>mysql_connect()</code>.</p>

<h4>8.4.4.3 Return Values</h4>

<p>None.</p>

<h4><a id="mysql_thread_init" name="mysql_thread_init"
href="manual_toc.html#mysql_thread_init">8.4.4.4
<code>mysql_thread_init()</code></a></h4>

<p><a id="IDX1685" name="IDX1685"></a></p>

<p><code>my_bool mysql_thread_init(void)</code></p>

<h4>8.4.4.5 Description</h4>

<p>This function needs to be called for each created thread to
initialise thread-specific variables.</p>

<p>This is automatically called by <code>my_init()</code> and
<code>mysql_connect()</code>.</p>

<h4>8.4.4.6 Return Values</h4>

<p>None.</p>

<h4><a id="mysql_thread_end" name="mysql_thread_end"
href="manual_toc.html#mysql_thread_end">8.4.4.7
<code>mysql_thread_end()</code></a></h4>

<p><a id="IDX1686" name="IDX1686"></a></p>

<p><code>void mysql_thread_end(void)</code></p>

<h4>8.4.4.8 Description</h4>

<p>This function needs to be called before calling
<code>pthread_exit()</code> to free memory allocated by
<code>mysql_thread_init()</code>.</p>

<p>Note that this function <strong>is not invoked
automatically</strong> by the client library. It must be called
explicitly to avoid a memory leak.</p>

<h4>8.4.4.9 Return Values</h4>

<p>None.</p>

<h4><a id="mysql_thread_safe" name="mysql_thread_safe"
href="manual_toc.html#mysql_thread_safe">8.4.4.10
<code>mysql_thread_safe()</code></a></h4>

<p><a id="IDX1687" name="IDX1687"></a></p>

<p><code>unsigned int mysql_thread_safe(void)</code></p>

<h4>8.4.4.11 Description</h4>

<p>This function indicates whether the client is compiled as
thread-safe.</p>

<h4>8.4.4.12 Return Values</h4>

<p>1 is the client is thread-safe, 0 otherwise.</p>

<h3><a id="C_Embedded_Server_func" name="C_Embedded_Server_func"
href="manual_toc.html#C_Embedded_Server_func">8.4.5 C Embedded
Server Function Descriptions</a></h3>

<p>You must use the following functions if you want to allow your
application to be linked against the embedded MySQL server library.
See section <a href="manual.html#libmysqld">8.4.9 libmysqld, the
Embedded MySQL Server Library</a>.</p>

<p>If the program is linked with <code>-lmysqlclient</code> instead
of <code>-lmysqld</code>, these functions do nothing. This makes it
possible to choose between using the embedded MySQL server and a
stand-alone server without modifying any code.</p>

<h4><a id="mysql_server_init" name="mysql_server_init"
href="manual_toc.html#mysql_server_init">8.4.5.1
<code>mysql_server_init()</code></a></h4>

<p><a id="IDX1688" name="IDX1688"></a></p>

<p><code>int mysql_server_init(int argc, char **argv, char
**groups)</code></p>

<h4>8.4.5.2 Description</h4>

<p>This function <strong>must</strong> be called once in the
program using the embedded server before calling any other MySQL
function. It starts up the server and initialises any subsystems
(<code>mysys</code>, InnoDB, etc.) that the server uses. If this
function is not called, the program will crash. If you are using
the DBUG package that comes with MySQL, you should call this after
you have called <code>MY_INIT()</code>.</p>

<p>The <code>argc</code> and <code>argv</code> arguments are
analogous to the arguments to <code>main()</code>. The first
element of <code>argv</code> is ignored (it typically contains the
program name). For convenience, <code>argc</code> may be
<code>0</code> (zero) if there are no command-line arguments for
the server. <code>mysql_server_init()</code> makes a copy of the
arguments so it's safe to destroy <code>argv</code> or
<code>groups</code> after the call.</p>

<p>The <code>NULL</code>-terminated list of strings in
<code>groups</code> selects which groups in the option files will
be active. See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>. For convenience,
<code>groups</code> may be <code>NULL</code>, in which case the
<code>[server]</code> and <code>[emedded]</code> groups will be
active.</p>

<h4>8.4.5.3 Example</h4>

<pre>
#include &lt;mysql.h&gt;
#include &lt;stdlib.h&gt;

static char *server_args[] = {
  "this_program",       /* this string is not used */
  "--datadir=.",
  "--key_buffer_size=32M"
};
static char *server_groups[] = {
  "embedded",
  "server",
  "this_program_SERVER",
  (char *)NULL
};

int main(void) {
  mysql_server_init(sizeof(server_args) / sizeof(char *),
                    server_args, server_groups);

  /* Use any MySQL API functions here */

  mysql_server_end();

  return EXIT_SUCCESS;
}
</pre>

<h4>8.4.5.4 Return Values</h4>

<p>0 if okay, 1 if an error occurred.</p>

<h4><a id="mysql_server_end" name="mysql_server_end"
href="manual_toc.html#mysql_server_end">8.4.5.5
<code>mysql_server_end()</code></a></h4>

<p><a id="IDX1689" name="IDX1689"></a></p>

<p><code>void mysql_server_end(void)</code></p>

<h4>8.4.5.6 Description</h4>

<p>This function <strong>must</strong> be called once in the
program after all other MySQL functions. It shuts down the embedded
server.</p>

<h4>8.4.5.7 Return Values</h4>

<p>None.</p>

<h3><a id="C_API_problems" name="C_API_problems"
href="manual_toc.html#C_API_problems">8.4.6 Common questions and
problems when using the C API</a></h3>

<p><a id="IDX1690" name="IDX1690"></a> <a id="IDX1691"
name="IDX1691"></a></p>

<h4><a id="NULL_mysql_store_result" name="NULL_mysql_store_result"
href="manual_toc.html#NULL_mysql_store_result">8.4.6.1 Why Is It
that After <code>mysql_query()</code> Returns Success,
<code>mysql_store_result()</code> Sometimes Returns
<code>NULL</code>?</a></h4>

<p>It is possible for <code>mysql_store_result()</code> to return
<code>NULL</code> following a successful call to
<code>mysql_query()</code>. When this happens, it means one of the
following conditions occurred:</p>

<ul>
<li>There was a <code>malloc()</code> failure (for example, if the
result set was too large).</li>

<li>The data couldn't be read (an error occurred on the
connection).</li>

<li>The query returned no data (for example, it was an
<code>INSERT</code>, <code>UPDATE</code>, or
<code>DELETE</code>).</li>
</ul>

<p>You can always check whether the statement should have produced
a non-empty result by calling <code>mysql_field_count()</code>. If
<code>mysql_field_count()</code> returns zero, the result is empty
and the last query was a statement that does not return values (for
example, an <code>INSERT</code> or a <code>DELETE</code>). If
<code>mysql_field_count()</code> returns a non-zero value, the
statement should have produced a non-empty result. See the
description of the <code>mysql_field_count()</code> function for an
example.</p>

<p>You can test for an error by calling <code>mysql_error()</code>
or <code>mysql_errno()</code>.</p>

<h4><a id="Query_results" name="Query_results"
href="manual_toc.html#Query_results">8.4.6.2 What Results Can I Get
From a Query?</a></h4>

<p>In addition to the result set returned by a query, you can also
get the following information:</p>

<ul>
<li><code>mysql_affected_rows()</code> returns the number of rows
affected by the last query when doing an <code>INSERT</code>,
<code>UPDATE</code>, or <code>DELETE</code>. An exception is that
if <code>DELETE</code> is used without a <code>WHERE</code> clause,
the table is re-created empty, which is much faster! In this case,
<code>mysql_affected_rows()</code> returns zero for the number of
records affected.</li>

<li><code>mysql_num_rows()</code> returns the number of rows in a
result set. With <code>mysql_store_result()</code>,
<code>mysql_num_rows()</code> may be called as soon as
<code>mysql_store_result()</code> returns. With
<code>mysql_use_result()</code>, <code>mysql_num_rows()</code> may
be called only after you have fetched all the rows with
<code>mysql_fetch_row()</code>.</li>

<li><code>mysql_insert_id()</code> returns the ID generated by the
last query that inserted a row into a table with an
<code>AUTO_INCREMENT</code> index. See section <a
href="manual.html#mysql_insert_id">8.4.3.126
<code>mysql_insert_id()</code></a>.</li>

<li>Some queries (<code>LOAD DATA INFILE ...</code>, <code>INSERT
INTO ... SELECT ...</code>, <code>UPDATE</code>) return additional
information. The result is returned by <code>mysql_info()</code>.
See the description for <code>mysql_info()</code> for the format of
the string that it returns. <code>mysql_info()</code> returns a
<code>NULL</code> pointer if there is no additional
information.</li>
</ul>

<h4><a id="Getting_unique_ID" name="Getting_unique_ID"
href="manual_toc.html#Getting_unique_ID">8.4.6.3 How Can I Get the
Unique ID for the Last Inserted Row?</a></h4>

<p><a id="IDX1692" name="IDX1692"></a> <a id="IDX1693"
name="IDX1693"></a> <a id="IDX1694" name="IDX1694"></a> <a
id="IDX1695" name="IDX1695"></a></p>

<p>If you insert a record in a table containing a column that has
the <code>AUTO_INCREMENT</code> attribute, you can get the most
recently generated ID by calling the <code>mysql_insert_id()</code>
function.</p>

<p>You can also retrieve the ID by using the
<code>LAST_INSERT_ID()</code> function in a query string that you
pass to <code>mysql_query()</code>.</p>

<p>You can check if an <code>AUTO_INCREMENT</code> index is used by
executing the following code. This also checks if the query was an
<code>INSERT</code> with an <code>AUTO_INCREMENT</code> index:</p>

<pre>
if (mysql_error(&amp;mysql)[0] == 0 &amp;&amp;
    mysql_num_fields(result) == 0 &amp;&amp;
    mysql_insert_id(&amp;mysql) != 0)
{
    used_id = mysql_insert_id(&amp;mysql);
}
</pre>

<p>The most recently generated ID is maintained in the server on a
per-connection basis. It will not be changed by another client. It
will not even be changed if you update another
<code>AUTO_INCREMENT</code> column with a non-magic value (that is,
a value that is not <code>NULL</code> and not <code>0</code>).</p>

<p>If you want to use the ID that was generated for one table and
insert it into a second table, you can use SQL statements like
this:</p>

<pre>
INSERT INTO foo (auto,text)
    VALUES(NULL,'text');              # generate ID by inserting NULL
INSERT INTO foo2 (id,text)
    VALUES(LAST_INSERT_ID(),'text');  # use ID in second table
</pre>

<h4><a id="C_API_linking_problems" name="C_API_linking_problems"
href="manual_toc.html#C_API_linking_problems">8.4.6.4 Problems
Linking with the C API</a></h4>

<p><a id="IDX1696" name="IDX1696"></a> <a id="IDX1697"
name="IDX1697"></a></p>

<p>When linking with the C API, the following errors may occur on
some systems:</p>

<pre>
gcc -g -o client test.o -L/usr/local/lib/mysql -lmysqlclient -lsocket -lnsl

Undefined        first referenced
 symbol          in file
floor            /usr/local/lib/mysql/libmysqlclient.a(password.o)
ld: fatal: Symbol referencing errors. No output written to client
</pre>

<p>If this happens on your system, you must include the math
library by adding <code>-lm</code> to the end of the compile/link
line.</p>

<h3><a id="Building_clients" name="Building_clients"
href="manual_toc.html#Building_clients">8.4.7 Building Client
Programs</a></h3>

<p><a id="IDX1698" name="IDX1698"></a> <a id="IDX1699"
name="IDX1699"></a> <a id="IDX1700" name="IDX1700"></a> <a
id="IDX1701" name="IDX1701"></a></p>

<p>If you compile MySQL clients that you've written yourself or
that you obtain from a third-party, they must be linked using the
<code>-lmysqlclient -lz</code> option on the link command. You may
also need to specify a <code>-L</code> option to tell the linker
where to find the library. For example, if the library is installed
in <tt>`/usr/local/mysql/lib'</tt>, use
<code>-L/usr/local/mysql/lib -lmysqlclient -lz</code> on the link
command.</p>

<p>For clients that use MySQL header files, you may need to specify
a <code>-I</code> option when you compile them (for example,
<code>-I/usr/local/mysql/include</code>), so the compiler can find
the header files.</p>

<h3><a id="Threaded_clients" name="Threaded_clients"
href="manual_toc.html#Threaded_clients">8.4.8 How to Make a
Threaded Client</a></h3>

<p><a id="IDX1702" name="IDX1702"></a> <a id="IDX1703"
name="IDX1703"></a></p>

<p>The client library is almost thread-safe. The biggest problem is
that the subroutines in <tt>`net.c'</tt> that read from sockets are
not interrupt safe. This was done with the thought that you might
want to have your own alarm that can break a long read to a server.
If you install interrupt handlers for the <code>SIGPIPE</code>
interrupt, the socket handling should be thread-safe.</p>

<p>In the older binaries we distribute on our web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>), the client
libraries are not normally compiled with the thread-safe option
(the Windows binaries are by default compiled to be thread-safe).
Newer binary distributions should have both a normal and a
thread-safe client library.</p>

<p>To get a threaded client where you can interrupt the client from
other threads and set timeouts when talking with the MySQL server,
you should use the <code>-lmysys</code>, <code>-lmystrings</code>,
and <code>-ldbug</code> libraries and the <code>net_serv.o</code>
code that the server uses.</p>

<p>If you don't need interrupts or timeouts, you can just compile a
thread-safe client library <code>(mysqlclient_r)</code> and use
this. See section <a href="manual.html#C">8.4 MySQL C API</a>. In
this case you don't have to worry about the <code>net_serv.o</code>
object file or the other MySQL libraries.</p>

<p>When using a threaded client and you want to use timeouts and
interrupts, you can make great use of the routines in the
<tt>`thr_alarm.c'</tt> file. If you are using routines from the
<code>mysys</code> library, the only thing you must remember is to
call <code>my_init()</code> first! See section <a
href="manual.html#C_Thread_functions">8.4.4 C Threaded Function
Descriptions</a>.</p>

<p>All functions except <code>mysql_real_connect()</code> are by
default thread-safe. The following notes describe how to compile a
thread-safe client library and use it in a thread-safe manner. (The
notes below for <code>mysql_real_connect()</code> actually apply to
<code>mysql_connect()</code> as well, but because
<code>mysql_connect()</code> is deprecated, you should be using
<code>mysql_real_connect()</code> anyway.)</p>

<p>To make <code>mysql_real_connect()</code> thread-safe, you must
recompile the client library with this command:</p>

<pre>
shell&gt; ./configure --enable-thread-safe-client
</pre>

<p>This will create a thread-safe client library
<code>libmysqlclient_r</code>. (Assuming your OS has a thread-safe
<code>gethostbyname_r()</code> function.) This library is
thread-safe per connection. You can let two threads share the same
connection with the following caveats:</p>

<ul>
<li>Two threads can't send a query to the MySQL server at the same
time on the same connection. In particular, you have to ensure that
between a <code>mysql_query()</code> and
<code>mysql_store_result()</code> no other thread is using the same
connection.</li>

<li>Many threads can access different result sets that are
retrieved with <code>mysql_store_result()</code>.</li>

<li>If you use <code>mysql_use_result</code>, you have to ensure
that no other thread is using the same connection until the result
set is closed. However, it really is best for threaded clients that
share the same connection to use
<code>mysql_store_result()</code>.</li>

<li>If you want to use multiple threads on the same connection, you
must have a mutex lock around your <code>mysql_query()</code> and
<code>mysql_store_result()</code> call combination. Once
<code>mysql_store_result()</code> is ready, the lock can be
released and other threads may query the same connection.</li>

<li>If you program with POSIX threads, you can use
<code>pthread_mutex_lock()</code> and
<code>pthread_mutex_unlock()</code> to establish and release a
mutex lock.</li>
</ul>

<p>You need to know the following if you have a thread that is
calling MySQL functions which did not create the connection to the
MySQL database:</p>

<p>When you call <code>mysql_init()</code> or
<code>mysql_connect()</code>, MySQL will create a thread-specific
variable for the thread that is used by the debug library (among
other things).</p>

<p>If you call a MySQL function, before the thread has called
<code>mysql_init()</code> or <code>mysql_connect()</code>, the
thread will not have the necessary thread-specific variables in
place and you are likely to end up with a core dump sooner or
later.</p>

<p>The get things to work smoothly you have to do the
following:</p>

<ol>
<li>Call <code>my_init()</code> at the start of your program if it
calls any other MySQL function before calling
<code>mysql_real_connect()</code>.</li>

<li>Call <code>mysql_thread_init()</code> in the thread handler
before calling any MySQL function.</li>

<li>In the thread, call <code>mysql_thread_end()</code> before
calling <code>pthread_exit()</code>. This will free the memory used
by MySQL thread-specific variables.</li>
</ol>

<p>You may get some errors because of undefined symbols when
linking your client with <code>libmysqlclient_r</code>. In most
cases this is because you haven't included the thread libraries on
the link/compile line.</p>

<h3><a id="libmysqld" name="libmysqld"
href="manual_toc.html#libmysqld">8.4.9 libmysqld, the Embedded
MySQL Server Library</a></h3>

<p><a id="IDX1704" name="IDX1704"></a> <a id="IDX1705"
name="IDX1705"></a></p>

<h4><a id="libmysqld_overview" name="libmysqld_overview"
href="manual_toc.html#libmysqld_overview">8.4.9.1 Overview of the
Embedded MySQL Server Library</a></h4>

<p>The embedded MySQL server library makes it possible to run a
full-featured MySQL server inside the client application. The main
benefits are increased speed and more simple management for
embedded applications.</p>

<p>The API is identical for the embedded MySQL version and the
client/server version. To change an old threaded application to use
the embedded library, you normally only have to add calls to the
following functions:</p>

<table border="1" width="100%">
<tr>
<td><strong>Function</strong></td>
<td><strong>When to call</strong></td>
</tr>

<tr>
<td><code>mysql_server_init()</code></td>
<td>Should be called before any other MySQL function is called,
preferably early in the <code>main()</code> function.</td>
</tr>

<tr>
<td><code>mysql_server_end()</code></td>
<td>Should be called before your program exits.</td>
</tr>

<tr>
<td><code>mysql_thread_init()</code></td>
<td>Should be called in each thread you create that will access
MySQL.</td>
</tr>

<tr>
<td><code>mysql_thread_end()</code></td>
<td>Should be called before calling
<code>pthread_exit()</code></td>
</tr>
</table>

<p>Then you must link your code with <tt>`libmysqld.a'</tt> instead
of <tt>`libmysqlclient.a'</tt>.</p>

<p>The above <code>mysql_server_xxx</code> functions are also
included in <tt>`libmysqlclient.a'</tt> to allow you to change
between the embedded and the client/server version by just linking
your application with the right library. See section <a
href="manual.html#mysql_server_init">8.4.5.1
<code>mysql_server_init()</code></a>.</p>

<h4><a id="libmysqld_compiling" name="libmysqld_compiling"
href="manual_toc.html#libmysqld_compiling">8.4.9.2 Compiling
Programs with <code>libmysqld</code></a></h4>

<p>To get a <code>libmysqld</code> library you should configure
MySQL with the <code>--with-embedded-server</code> option.</p>

<p>When you link your program with <code>libmysqld</code>, you must
also include the system-specific <code>pthread</code> libraries and
some libraries that the MySQL server uses. You can get the full
list of libraries by executing <code>mysql_config
--libmysqld-libs</code>.</p>

<p>The correct flags for compiling and linking a threaded program
must be used, even if you do not directly call any thread functions
in your code.</p>

<h4><a id="libmysqld_restrictions" name="libmysqld_restrictions"
href="manual_toc.html#libmysqld_restrictions">8.4.9.3 Restrictions
when using the Embedded MySQL Server</a></h4>

<p>The embedded server has the following limitations:</p>

<ul>
<li>No support for ISAM tables. (This is mainly done to make the
library smaller)</li>

<li>No UDF functions.</li>

<li>No stack trace on core dump.</li>

<li>No internal RAID support. (This is not normally needed as most
OS has nowadays support for big files).</li>

<li>You can set this up as a server or a master (no
replication).</li>

<li>You can't connect to the embedded server from an outside
process with sockets or TCP/IP.</li>
</ul>

<p>Some of these limitations can be changed by editing the
<tt>`mysql_embed.h'</tt> include file and recompiling MySQL.</p>

<h4><a id="libmysqld_options" name="libmysqld_options"
href="manual_toc.html#libmysqld_options">8.4.9.4 Using Option Files
with the Embedded Server</a></h4>

<p><a id="IDX1706" name="IDX1706"></a></p>

<p>The following is the recommended way to use option files to make
it easy to switch between a client/server application and one where
MySQL is embedded. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</p>

<ul>
<li>Put common options in the <code>[server]</code> section. These
will be read by both MySQL versions.</li>

<li>Put client/server-specific options in the <code>[mysqld]</code>
section.</li>

<li>Put embedded MySQL-specific options in the
<code>[embedded]</code> section.</li>

<li>Put application-specific options in a
<code>[ApplicationName_SERVER]</code> section.</li>
</ul>

<h4><a id="libmysqld_TODO" name="libmysqld_TODO"
href="manual_toc.html#libmysqld_TODO">8.4.9.5 Things left to do in
Embedded Server (TODO)</a></h4>

<p><a id="IDX1707" name="IDX1707"></a></p>

<ul>
<li>We are going to provide options to leave out some parts of
MySQL to make the library smaller.</li>

<li>There is still a lot of speed optimisation to do.</li>

<li>Errors are written to stderr. We will add an option to specify
a filename for these.</li>

<li>We have to change InnoDB to not be so verbose when using in the
embedded version.</li>
</ul>

<h4><a id="libmysqld_example" name="libmysqld_example"
href="manual_toc.html#libmysqld_example">8.4.9.6 A Simple Embedded
Server Example</a></h4>

<p>This example program and makefile should work without any
changes on a Linux or FreeBSD system. For other operating systems,
minor changes will be needed. This example is designed to give
enough details to understand the problem, without the clutter that
is a necessary part of a real application.</p>

<p>To try out the example, create an <tt>`test_libmysqld'</tt>
directory at the same level as the mysql-4.0 source directory. Save
the <tt>`test_libmysqld.c'</tt> source and the
<tt>`GNUmakefile'</tt> in the directory, and run GNU
<tt>`make'</tt> from inside the <tt>`test_libmysqld'</tt>
directory.</p>

<p><tt>`test_libmysqld.c'</tt></p>

<pre>
/*
 * A simple example client, using the embedded MySQL server library
 */

#include &lt;mysql.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

MYSQL *db_connect(const char *dbname);
void db_disconnect(MYSQL *db);
void db_do_query(MYSQL *db, const char *query);

const char *server_groups[] = {
  "test_libmysqld_SERVER", "embedded", "server", NULL
};

int
main(int argc, char **argv)
{
  MYSQL *one, *two;

  /* mysql_server_init() must be called before any other mysql
   * functions.
   *
   * You can use mysql_server_init(0, NULL, NULL), and it will
   * initialise the server using groups = {
   *   "server", "embedded", NULL
   *  }.
   *
   * In your $HOME/.my.cnf file, you probably want to put:

[test_libmysqld_SERVER]
language = /path/to/source/of/mysql/sql/share/english

   * You could, of course, modify argc and argv before passing
   * them to this function.  Or you could create new ones in any
   * way you like.  But all of the arguments in argv (except for
   * argv[0], which is the program name) should be valid options
   * for the MySQL server.
   *
   * If you link this client against the normal mysqlclient
   * library, this function is just a stub that does nothing.
   */
  mysql_server_init(argc, argv, (char **)server_groups);

  one = db_connect("test");
  two = db_connect(NULL);

  db_do_query(one, "SHOW TABLE STATUS");
  db_do_query(two, "SHOW DATABASES");

  mysql_close(two);
  mysql_close(one);

  /* This must be called after all other mysql functions */
  mysql_server_end();

  exit(EXIT_SUCCESS);
}

static void
die(MYSQL *db, char *fmt, ...)
{
  va_list ap;
  va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  va_end(ap);
  (void)putc('\n', stderr);
  if (db)
    db_disconnect(db);
  exit(EXIT_FAILURE);
}

MYSQL *
db_connect(const char *dbname)
{
  MYSQL *db = mysql_init(NULL);
  if (!db)
    die(db, "mysql_init failed: no memory");
  /*
   * Notice that the client and server use separate group names.
   * This is critical, because the server will not accept the
   * client's options, and vice versa.
   */
  mysql_options(db, MYSQL_READ_DEFAULT_GROUP, "test_libmysqld_CLIENT");
  if (!mysql_real_connect(db, NULL, NULL, NULL, dbname, 0, NULL, 0))
    die(db, "mysql_real_connect failed: %s", mysql_error(db));

  return db;
}

void
db_disconnect(MYSQL *db)
{
  mysql_close(db);
}

void
db_do_query(MYSQL *db, const char *query)
{
  if (mysql_query(db, query) != 0)
    goto err;

  if (mysql_field_count(db) &gt; 0)
  {
    MYSQL_RES   *res;
    MYSQL_ROW    row, end_row;
    int num_fields;

    if (!(res = mysql_store_result(db)))
      goto err;
    num_fields = mysql_num_fields(res);
    while ((row = mysql_fetch_row(res)))
    {
      (void)fputs("&gt;&gt; ", stdout);
      for (end_row = row + num_fields; row &lt; end_row; ++row)
        (void)printf("%s\t", row ? (char*)*row : "NULL");
      (void)fputc('\n', stdout);
    }
    (void)fputc('\n', stdout);
  }
  else
    (void)printf("Affected rows: %lld\n", mysql_affected_rows(db));

  return;

err:
  die(db, "db_do_query failed: %s [%s]", mysql_error(db), query);
}
</pre>

<p><tt>`GNUmakefile'</tt></p>

<pre>
# This assumes the MySQL software is installed in /usr/local/mysql
inc      := /usr/local/mysql/include/mysql
lib      := /usr/local/mysql/lib

# If you have not installed the MySQL software yet, try this instead
#inc      := $(HOME)/mysql-4.0/include
#lib      := $(HOME)/mysql-4.0/libmysqld

CC       := gcc
CPPFLAGS := -I$(inc) -D_THREAD_SAFE -D_REENTRANT
CFLAGS   := -g -W -Wall
LDFLAGS  := -static
# You can change -lmysqld to -lmysqlclient to use the
# client/server library
LDLIBS    = -L$(lib) -lmysqld -lz -lm -lcrypt

ifneq (,$(shell grep FreeBSD /COPYRIGHT 2&gt;/dev/null))
# FreeBSD
LDFLAGS += -pthread
else
# Assume Linux
LDLIBS += -lpthread
endif

# This works for simple one-file test programs
sources := $(wildcard *.c)
objects := $(patsubst %c,%o,$(sources))
targets := $(basename $(sources))

all: $(targets)

clean:
    rm -f $(targets) $(objects) *.core
</pre>

<h4><a id="libmysqld_licensing" name="libmysqld_licensing"
href="manual_toc.html#libmysqld_licensing">8.4.9.7 Licensing the
Embedded Server</a></h4>

<p>The MySQL source code is covered by the GNU GPL license (see
section <a href="manual.html#GPL_license">H GNU General Public
License</a>). One result of this is that any program which
includes, by linking with <code>libmysqld</code>, the MySQL source
code must be released as free software (under a license compatible
with the GPL).</p>

<p>We encourage everyone to promote free software by releasing code
under the GPL or a compatible license. For those who are not able
to do this, another option is to purchase a commercial licence for
the MySQL code from MySQL AB. For details, please see section <a
href="manual.html#MySQL_licenses">1.4.3 MySQL Licenses</a>.</p>

<h2><a id="Cplusplus" name="Cplusplus"
href="manual_toc.html#Cplusplus">8.5 MySQL C++ APIs</a></h2>

<p><a id="IDX1708" name="IDX1708"></a></p>

<p>MySQL Connector/C++ (or <code>MySQL++</code>) is the official
MySQL API for C++. More information can be found at <a
href="http://www.mysql.com/products/mysql++/">http://www.mysql.com/products/mysql++/</a>.</p>

<h3><a id="Borland_C++" name="Borland_C++"
href="manual_toc.html#Borland_C++">8.5.1 Borland C++</a></h3>

<p><a id="IDX1709" name="IDX1709"></a></p>

<p>You can compile the MySQL Windows source with Borland C++ 5.02.
(The Windows source includes only projects for Microsoft VC++, for
Borland C++ you have to do the project files yourself.)</p>

<p>One known problem with Borland C++ is that it uses a different
structure alignment than VC++. This means that you will run into
problems if you try to use the default <code>libmysql.dll</code>
libraries (that was compiled with VC++) with Borland C++. You can
do one of the following to avoid this problem.</p>

<ul>
<li>You can use the static MySQL libraries for Borland C++ that you
can find on <a
href="http://www.mysql.com/downloads/os-win32.html">http://www.mysql.com/downloads/os-win32.html</a>.</li>

<li>Only call <code>mysql_init()</code> with <code>NULL</code> as
an argument, not a pre-allocated MYSQL struct.</li>
</ul>

<h2><a id="Java" name="Java" href="manual_toc.html#Java">8.6 MySQL
Java Connectivity (JDBC)</a></h2>

<p><a id="IDX1710" name="IDX1710"></a> <a id="IDX1711"
name="IDX1711"></a></p>

<p>There are 2 supported JDBC drivers for MySQL (the Connector/J
driver and the Resin JDBC driver). You can find a copy of the
Connector/J driver at <a
href="http://www.mysql.com/products/connector-j/">http://www.mysql.com/products/connector-j/</a>
and the Resin driver at <a
href="http://www.caucho.com/projects/jdbc-mysql/index.xtp">http://www.caucho.com/projects/jdbc-mysql/index.xtp</a>
For documentation consult any JDBC documentation and the driver's
own documentation for MySQL-specific features.</p>

<h2><a id="Python" name="Python" href="manual_toc.html#Python">8.7
MySQL Python APIs</a></h2>

<p><a id="IDX1712" name="IDX1712"></a></p>

<p>MySQLdb provides MySQL support for Python, compliant with the
Python DB API version 2.0. It can be found at <a
href="http://sourceforge.net/projects/mysql-python/">http://sourceforge.net/projects/mysql-python/</a>.</p>

<h2><a id="Tcl" name="Tcl" href="manual_toc.html#Tcl">8.8 MySQL Tcl
APIs</a></h2>

<p><a id="IDX1713" name="IDX1713"></a></p>

<p>MySQLtcl is a simple API for accessing a MySQL database server
from the Tcl programming language. It can be found at <a
href="http://www.xdobry.de/mysqltcl/">http://www.xdobry.de/mysqltcl/</a>.</p>

<h2><a id="Eiffel" name="Eiffel" href="manual_toc.html#Eiffel">8.9
MySQL Eiffel wrapper</a></h2>

<p><a id="IDX1714" name="IDX1714"></a> <a id="IDX1715"
name="IDX1715"></a></p>

<p>Eiffel MySQL is an interface to the MySQL database server using
the Eiffel programming language, written by Michael Ravits. It can
be found at <a
href="http://efsa.sourceforge.net/archive/ravits/mysql.htm">http://efsa.sourceforge.net/archive/ravits/mysql.htm</a>.</p>

<h1><a id="Extending_MySQL" name="Extending_MySQL"
href="manual_toc.html#Extending_MySQL">9 Extending MySQL</a></h1>

<h2><a id="MySQL_internals" name="MySQL_internals"
href="manual_toc.html#MySQL_internals">9.1 MySQL Internals</a></h2>

<p><a id="IDX1716" name="IDX1716"></a> <a id="IDX1717"
name="IDX1717"></a></p>

<p>This chapter describes a lot of things that you need to know
when working on the MySQL code. If you plan to contribute to MySQL
development, want to have access to the bleeding-edge in-between
versions code, or just want to keep track of development, follow
the instructions in section <a
href="manual.html#Installing_source_tree">2.3.4 Installing from the
Development Source Tree</a>. If you are interested in MySQL
internals, you should also subscribe to our <code>internals</code>
mailing list. This list is relatively low traffic. For details on
how to subscribe, please see section <a
href="manual.html#Mailing-list">1.6.1.1 The MySQL Mailing
Lists</a>. All developers at MySQL AB are on the
<code>internals</code> list and we help other people who are
working on the MySQL code. Feel free to use this list both to ask
questions about the code and to send patches that you would like to
contribute to the MySQL project!</p>

<h3><a id="MySQL_threads" name="MySQL_threads"
href="manual_toc.html#MySQL_threads">9.1.1 MySQL Threads</a></h3>

<p>The MySQL server creates the following threads:</p>

<ul>
<li>The TCP/IP connection thread handles all connection requests
and creates a new dedicated thread to handle the authentication and
SQL query processing for each connection.</li>

<li>On Windows NT there is a named pipe handler thread that does
the same work as the TCP/IP connection thread on named pipe connect
requests.</li>

<li>The signal thread handles all signals. This thread also
normally handles alarms and calls <code>process_alarm()</code> to
force timeouts on connections that have been idle too long.</li>

<li>If <code>mysqld</code> is compiled with
<code>-DUSE_ALARM_THREAD</code>, a dedicated thread that handles
alarms is created. This is only used on some systems where there
are problems with <code>sigwait()</code> or if one wants to use the
<code>thr_alarm()</code> code in ones application without a
dedicated signal handling thread.</li>

<li>If one uses the <code>--flush_time=#</code> option, a dedicated
thread is created to flush all tables at the given interval.</li>

<li>Every connection has its own thread.</li>

<li>Every different table on which one uses <code>INSERT
DELAYED</code> gets its own thread.</li>

<li>If you use <code>--master-host</code>, a slave replication
thread will be started to read and apply updates from the
master.</li>
</ul>

<p><code>mysqladmin processlist</code> only shows the connection,
<code>INSERT DELAYED</code>, and replication threads.</p>

<h3><a id="MySQL_test_suite" name="MySQL_test_suite"
href="manual_toc.html#MySQL_test_suite">9.1.2 MySQL Test
Suite</a></h3>

<p><a id="IDX1718" name="IDX1718"></a> <a id="IDX1719"
name="IDX1719"></a></p>

<p>Until recently, our main full-coverage test suite was based on
proprietary customer data and for that reason has not been publicly
available. The only publicly available part of our testing process
consisted of the <code>crash-me</code> test, a Perl DBI/DBD
benchmark found in the <code>sql-bench</code> directory, and
miscellaneous tests located in <code>tests</code> directory. The
lack of a standardised publicly available test suite has made it
difficult for our users, as well developers, to do regression tests
on the MySQL code. To address this problem, we have created a new
test system that is included in the source and binary distributions
starting in Version 3.23.29.</p>

<p>The current set of test cases doesn't test everything in MySQL,
but it should catch most obvious bugs in the SQL processing code,
OS/library issues, and is quite thorough in testing replication.
Our eventual goal is to have the tests cover 100% of the code. We
welcome contributions to our test suite. You may especially want to
contribute tests that examine the functionality critical to your
system, as this will ensure that all future MySQL releases will
work well with your applications.</p>

<h4><a id="running_mysqltest" name="running_mysqltest"
href="manual_toc.html#running_mysqltest">9.1.2.1 Running the MySQL
Test Suite</a></h4>

<p>The test system consist of a test language interpreter
(<code>mysqltest</code>), a shell script to run all
tests(<code>mysql-test-run</code>), the actual test cases written
in a special test language, and their expected results. To run the
test suite on your system after a build, type <code>make
test</code> or <code>mysql-test/mysql-test-run</code> from the
source root. If you have installed a binary distribution,
<code>cd</code> to the install root (eg.
<code>/usr/local/mysql</code>), and do
<code>scripts/mysql-test-run</code>. All tests should succeed. If
not, you should try to find out why and report the problem if this
is a bug in MySQL. See section <a
href="manual.html#Reporting_mysqltest_bugs">9.1.2.3 Reporting Bugs
in the MySQL Test Suite</a>.</p>

<p>If you have a copy of <code>mysqld</code> running on the machine
where you want to run the test suite you do not have to stop it, as
long as it is not using ports <code>9306</code> and
<code>9307</code>. If one of those ports is taken, you should edit
<code>mysql-test-run</code> and change the values of the master
and/or slave port to one that is available.</p>

<p>You can run one individual test case with
<code>mysql-test/mysql-test-run test_name</code>.</p>

<p>If one test fails, you should test running
<code>mysql-test-run</code> with the <code>--force</code> option to
check if any other tests fails.</p>

<h4><a id="extending_mysqltest" name="extending_mysqltest"
href="manual_toc.html#extending_mysqltest">9.1.2.2 Extending the
MySQL Test Suite</a></h4>

<p>You can use the <code>mysqltest</code> language to write your
own test cases. Unfortunately, we have not yet written full
documentation for it - we plan to do this shortly. You can,
however, look at our current test cases and use them as an example.
The following points should help you get started:</p>

<ul>
<li>The tests are located in <code>mysql-test/t/*.test</code></li>

<li>A test case consists of <code>;</code> terminated statements
and is similar to the input of <code>mysql</code> command-line
client. A statement by default is a query to be sent to MySQL
server, unless it is recognised as internal command (eg.
<code>sleep</code>).</li>

<li>All queries that produce results—e.g., <code>SELECT</code>,
<code>SHOW</code>, <code>EXPLAIN</code>, etc., must be preceded
with <code>@/path/to/result/file</code>. The file must contain the
expected results. An easy way to generate the result file is to run
<code>mysqltest -r &lt; t/test-case-name.test</code> from
<code>mysql-test</code> directory, and then edit the generated
result files, if needed, to adjust them to the expected output. In
that case, be very careful about not adding or deleting any
invisible characters - make sure to only change the text and/or
delete lines. If you have to insert a line, make sure the fields
are separated with a hard tab, and there is a hard tab at the end.
You may want to use <code>od -c</code> to make sure your text
editor has not messed anything up during edit. We, of course, hope
that you will never have to edit the output of <code>mysqltest
-r</code> as you only have to do it when you find a bug.</li>

<li>To be consistent with our setup, you should put your result
files in <code>mysql-test/r</code> directory and name them
<code>test_name.result</code>. If the test produces more than one
result, you should use <code>test_name.a.result</code>,
<code>test_name.b.result</code>, etc.</li>

<li>If a statement returns an error, you should on the line before
the statement specify with the <code>--error error-number</code>.
The error number can be a list of possible error numbers separated
with <code>','</code>.</li>

<li>If you are writing a replication test case, you should on the
first line of the test file, put <code>source
include/master-slave.inc;</code>. To switch between master and
slave, use <code>connection master;</code> and <code>connection
slave;</code>. If you need to do something on an alternate
connection, you can do <code>connection master1;</code> for the
master, and <code>connection slave1;</code> for the slave.</li>

<li>If you need to do something in a loop, you can use something
like this: 

<pre>
let $1=1000;
while ($1)
{
 # do your queries here
 dec $1;
}
</pre>
</li>

<li>To sleep between queries, use the <code>sleep</code> command.
It supports fractions of a second, so you can do <code>sleep
1.3;</code>, for example, to sleep 1.3 seconds.</li>

<li>To run the slave with additional options for your test case,
put them in the command-line format in
<code>mysql-test/t/test_name-slave.opt</code>. For the master, put
them in <code>mysql-test/t/test_name-master.opt</code>.</li>

<li>If you have a question about the test suite, or have a test
case to contribute, e-mail to <a
href="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.
As the list does not accept attachments, you should ftp all the
relevant files to: <a
href="ftp://support.mysql.com/pub/mysql/Incoming/">ftp://support.mysql.com/pub/mysql/Incoming/</a></li>
</ul>

<h4><a id="Reporting_mysqltest_bugs"
name="Reporting_mysqltest_bugs"
href="manual_toc.html#Reporting_mysqltest_bugs">9.1.2.3 Reporting
Bugs in the MySQL Test Suite</a></h4>

<p>If your MySQL version doesn't pass the test suite you should do
the following:</p>

<ul>
<li>Don't send a bug report before you have found out as much as
possible of what when wrong! When you do it, please use the
<code>mysqlbug</code> script so that we can get information about
your system and <code>MySQL</code> version. See section <a
href="manual.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a>.</li>

<li>Make sure to include the output of <code>mysql-test-run</code>,
as well as contents of all <code>.reject</code> files in
<code>mysql-test/r</code> directory.</li>

<li>If a test in the test suite fails, check if the test fails also
when run by its own: 

<pre>
cd mysql-test
mysql-test-run --local test-name
</pre>

If this fails, then you should configure MySQL with
<code>--with-debug</code> and run <code>mysql-test-run</code> with
the <code>--debug</code> option. If this also fails send the trace
file <tt>`var/tmp/master.trace'</tt> to
ftp://support.mysql.com/pub/mysql/secret so that we can examine it.
Please remember to also include a full description of your system,
the version of the mysqld binary and how you compiled it.</li>

<li>Try also to run <code>mysql-test-run</code> with the
<code>--force</code> option to see if there is any other test that
fails.</li>

<li>If you have compiled MySQL yourself, check our manual for how
to compile MySQL on your platform or, preferable, use one of the
binaries we have compiled for you at <a
href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a>.
All our standard binaries should pass the test suite !</li>

<li>If you get an error, like <code>Result length mismatch</code>
or <code>Result content mismatch</code> it means that the output of
the test didn't match exactly the expected output. This could be a
bug in MySQL or that your mysqld version produces slight different
results under some circumstances. Failed test results are put in a
file with the same base name as the result file with the
<code>.reject</code> extension. If your test case is failing, you
should do a diff on the two files. If you cannot see how they are
different, examine both with <code>od -c</code> and also check
their lengths.</li>

<li>If a test fails totally, you should check the logs file in the
<code>mysql-test/var/log</code> directory for hints of what went
wrong.</li>

<li>If you have compiled MySQL with debugging you can try to debug
this by running <code>mysql-test-run</code> with the
<code>--gdb</code> and/or <code>--debug</code> options. See section
<a href="manual.html#Making_trace_files">E.1.2 Creating Trace
Files</a>. If you have not compiled MySQL for debugging you should
probably do that. Just specify the <code>--with-debug</code>
options to <code>configure</code>! See section <a
href="manual.html#Installing_source">2.3 Installing a MySQL Source
Distribution</a>.</li>
</ul>

<h2><a id="Adding_functions" name="Adding_functions"
href="manual_toc.html#Adding_functions">9.2 Adding New Functions to
MySQL</a></h2>

<p><a id="IDX1720" name="IDX1720"></a> <a id="IDX1721"
name="IDX1721"></a> <a id="IDX1722" name="IDX1722"></a> <a
id="IDX1723" name="IDX1723"></a> <a id="IDX1724"
name="IDX1724"></a></p>

<p>There are two ways to add new functions to MySQL:</p>

<ul>
<li>You can add the function through the user-definable function
(UDF) interface. User-definable functions are added and removed
dynamically using the <code>CREATE FUNCTION</code> and <code>DROP
FUNCTION</code> statements. See section <a
href="manual.html#CREATE_FUNCTION">9.2.1 <code>CREATE FUNCTION/DROP
FUNCTION</code> Syntax</a>.</li>

<li>You can add the function as a native (built in) MySQL function.
Native functions are compiled into the <code>mysqld</code> server
and become available on a permanent basis.</li>
</ul>

<p>Each method has advantages and disadvantages:</p>

<ul>
<li>If you write a user-definable function, you must install the
object file in addition to the server itself. If you compile your
function into the server, you don't need to do that.</li>

<li>You can add UDFs to a binary MySQL distribution. Native
functions require you to modify a source distribution.</li>

<li>If you upgrade your MySQL distribution, you can continue to use
your previously installed UDFs. For native functions, you must
repeat your modifications each time you upgrade.</li>
</ul>

<p>Whichever method you use to add new functions, they may be used
just like native functions such as <code>ABS()</code> or
<code>SOUNDEX()</code>.</p>

<h3><a id="CREATE_FUNCTION" name="CREATE_FUNCTION"
href="manual_toc.html#CREATE_FUNCTION">9.2.1 <code>CREATE
FUNCTION/DROP FUNCTION</code> Syntax</a></h3>

<p><a id="IDX1725" name="IDX1725"></a> <a id="IDX1726"
name="IDX1726"></a> <a id="IDX1727" name="IDX1727"></a> <a
id="IDX1728" name="IDX1728"></a> <a id="IDX1729"
name="IDX1729"></a> <a id="IDX1730" name="IDX1730"></a> <a
id="IDX1731" name="IDX1731"></a></p>

<pre>
CREATE [AGGREGATE] FUNCTION function_name RETURNS {STRING|REAL|INTEGER}
       SONAME shared_library_name

DROP FUNCTION function_name
</pre>

<p>A user-definable function (UDF) is a way to extend MySQL with a
new function that works like native (built in) MySQL functions such
as <code>ABS()</code> and <code>CONCAT()</code>.</p>

<p><code>AGGREGATE</code> is a new option for MySQL Version 3.23.
An <code>AGGREGATE</code> function works exactly like a native
MySQL <code>GROUP</code> function like <code>SUM</code> or
<code>COUNT()</code>.</p>

<p><code>CREATE FUNCTION</code> saves the function's name, type,
and shared library name in the <code>mysql.func</code> system
table. You must have the <code>INSERT</code> and
<code>DELETE</code> privileges for the <code>mysql</code> database
to create and drop functions.</p>

<p>All active functions are reloaded each time the server starts,
unless you start <code>mysqld</code> with the
<code>--skip-grant-tables</code> option. In this case, UDF
initialisation is skipped and UDFs are unavailable. (An active
function is one that has been loaded with <code>CREATE
FUNCTION</code> and not removed with <code>DROP
FUNCTION</code>.)</p>

<p>For instructions on writing user-definable functions, see
section <a href="manual.html#Adding_functions">9.2 Adding New
Functions to MySQL</a>. For the UDF mechanism to work, functions
must be written in C or C++, your operating system must support
dynamic loading and you must have compiled <code>mysqld</code>
dynamically (not statically).</p>

<p>Note that to make <code>AGGREGATE</code> work, you must have a
<code>mysql.func</code> table that contains the column
<code>type</code>. If this is not the case, you should run the
script <code>mysql_fix_privilege_tables</code> to get this
fixed.</p>

<h3><a id="Adding_UDF" name="Adding_UDF"
href="manual_toc.html#Adding_UDF">9.2.2 Adding a New User-definable
Function</a></h3>

<p><a id="IDX1732" name="IDX1732"></a> <a id="IDX1733"
name="IDX1733"></a> <a id="IDX1734" name="IDX1734"></a></p>

<p>For the UDF mechanism to work, functions must be written in C or
C++ and your operating system must support dynamic loading. The
MySQL source distribution includes a file
<tt>`sql/udf_example.cc'</tt> that defines 5 new functions. Consult
this file to see how UDF calling conventions work.</p>

<p>For <code>mysqld</code> to be able to use UDF functions, you
should configure MySQL with
<code>--with-mysqld-ldflags=-rdynamic</code> The reason is that to
on many platforms (including Linux) you can load a dynamic library
(with <code>dlopen()</code>) from a static linked program, which
you would get if you are using
<code>--with-mysqld-ldflags=-all-static</code> If you want to use
an UDF that needs to access symbols from <code>mysqld</code> (like
the <code>methaphone</code> example in
<tt>`sql/udf_example.cc'</tt> that uses
<code>default_charset_info</code>), you must link the program with
<code>-rdynamic</code> (see <code>man dlopen</code>).</p>

<p>For each function that you want to use in SQL statements, you
should define corresponding C (or C++) functions. In the discussion
below, the name ``xxx'' is used for an example function name. To
distinquish between SQL and C/C++ usage, <code>XXX()</code>
(uppercase) indicates a SQL function call, and <code>xxx()</code>
(lowercase) indicates a C/C++ function call.</p>

<p>The C/C++ functions that you write to implement the interface
for <code>XXX()</code> are:</p>

<dl compact="compact">
<dt><code>xxx()</code> (required)</dt>

<dd>The main function. This is where the function result is
computed. The correspondence between the SQL type and return type
of your C/C++ function is shown here: 

<table border="1" width="100%">
<tr>
<td><strong>SQL type</strong></td>
<td><strong>C/C++ type</strong></td>
</tr>

<tr>
<td><code>STRING</code></td>
<td><code>char *</code></td>
</tr>

<tr>
<td><code>INTEGER</code></td>
<td><code>long long</code></td>
</tr>

<tr>
<td><code>REAL</code></td>
<td><code>double</code></td>
</tr>
</table>
</dd>

<dt><code>xxx_init()</code> (optional)</dt>

<dd>The initialisation function for <code>xxx()</code>. It can be
used to: 

<ul>
<li>Check the number of arguments to <code>XXX()</code>.</li>

<li>Check that the arguments are of a required type or,
alternatively, tell MySQL to coerce arguments to the types you want
when the main function is called.</li>

<li>Allocate any memory required by the main function.</li>

<li>Specify the maximum length of the result.</li>

<li>Specify (for <code>REAL</code> functions) the maximum number of
decimals.</li>

<li>Specify whether the result can be <code>NULL</code>.</li>
</ul>
</dd>

<dt><code>xxx_deinit()</code> (optional)</dt>

<dd>The deinitialisation function for <code>xxx()</code>. It should
deallocate any memory allocated by the initialisation
function.</dd>
</dl>

<p>When a SQL statement invokes <code>XXX()</code>, MySQL calls the
initialisation function <code>xxx_init()</code> to let it perform
any required setup, such as argument checking or memory allocation.
If <code>xxx_init()</code> returns an error, the SQL statement is
aborted with an error message and the main and deinitialisation
functions are not called. Otherwise, the main function
<code>xxx()</code> is called once for each row. After all rows have
been processed, the deinitialisation function
<code>xxx_deinit()</code> is called so it can perform any required
cleanup.</p>

<p>For aggregate functions (like <code>SUM()</code>), you must also
provide the following functions:</p>

<dl compact="compact">
<dt><code>xxx_reset()</code> (required)</dt>

<dd>Reset sum and insert the argument as the initial value for a
new group.</dd>

<dt><code>xxx_add()</code> (required)</dt>

<dd>Add the argument to the old sum.</dd>
</dl>

<p>When using aggregate UDF functions MySQL works the following
way:</p>

<ol>
<li>Call <code>xxx_init()</code> to let the aggregate function
allocate the memory it will need to store results.</li>

<li>Sort the table according to the <code>GROUP BY</code>
expression.</li>

<li>For the first row in a new group, call the
<code>xxx_reset()</code> function.</li>

<li>For each new row that belongs in the same group, call the
<code>xxx_add()</code> function.</li>

<li>When the group changes or after the last row has been
processed, call <code>xxx()</code> to get the result for the
aggregate.</li>

<li>Repeat 3-5 until all rows has been processed</li>

<li>Call <code>xxx_deinit()</code> to let the UDF free any memory
it has allocated.</li>
</ol>

<p>All functions must be thread-safe (not just the main function,
but the initialisation and deinitialisation functions as well).
This means that you are not allowed to allocate any global or
static variables that change! If you need memory, you should
allocate it in <code>xxx_init()</code> and free it in
<code>xxx_deinit()</code>.</p>

<h4><a id="UDF_calling" name="UDF_calling"
href="manual_toc.html#UDF_calling">9.2.2.1 UDF Calling Sequences
for simple functions</a></h4>

<p><a id="IDX1735" name="IDX1735"></a></p>

<p>The main function should be declared as shown here. Note that
the return type and parameters differ, depending on whether you
will declare the SQL function <code>XXX()</code> to return
<code>STRING</code>, <code>INTEGER</code>, or <code>REAL</code> in
the <code>CREATE FUNCTION</code> statement:</p>

<p>For <code>STRING</code> functions:</p>

<pre>
char *xxx(UDF_INIT *initid, UDF_ARGS *args,
          char *result, unsigned long *length,
          char *is_null, char *error);
</pre>

<p>For <code>INTEGER</code> functions:</p>

<pre>
long long xxx(UDF_INIT *initid, UDF_ARGS *args,
              char *is_null, char *error);
</pre>

<p>For <code>REAL</code> functions:</p>

<pre>
double xxx(UDF_INIT *initid, UDF_ARGS *args,
              char *is_null, char *error);
</pre>

<p>The initialisation and deinitialisation functions are declared
like this:</p>

<pre>
my_bool xxx_init(UDF_INIT *initid, UDF_ARGS *args, char *message);

void xxx_deinit(UDF_INIT *initid);
</pre>

<p>The <code>initid</code> parameter is passed to all three
functions. It points to a <code>UDF_INIT</code> structure that is
used to communicate information between functions. The
<code>UDF_INIT</code> structure members are listed below. The
initialisation function should fill in any members that it wishes
to change. (To use the default for a member, leave it
unchanged.):</p>

<dl compact="compact">
<dt><code>my_bool maybe_null</code></dt>

<dd><code>xxx_init()</code> should set <code>maybe_null</code> to
<code>1</code> if <code>xxx()</code> can return <code>NULL</code>.
The default value is <code>1</code> if any of the arguments are
declared <code>maybe_null</code>.</dd>

<dt><code>unsigned int decimals</code></dt>

<dd>Number of decimals. The default value is the maximum number of
decimals in the arguments passed to the main function. (For
example, if the function is passed <code>1.34</code>,
<code>1.345</code>, and <code>1.3</code>, the default would be 3,
because <code>1.345</code> has 3 decimals.</dd>

<dt><code>unsigned int max_length</code></dt>

<dd>The maximum length of the string result. The default value
differs depending on the result type of the function. For string
functions, the default is the length of the longest argument. For
integer functions, the default is 21 digits. For real functions,
the default is 13 plus the number of decimals indicated by
<code>initid-&gt;decimals</code>. (For numeric functions, the
length includes any sign or decimal point characters.) If you want
to return a blob, you can set this to 65K or 16M; this memory is
not allocated but used to decide which column type to use if there
is a need to temporary store the data.</dd>

<dt><code>char *ptr</code></dt>

<dd>A pointer that the function can use for its own purposes. For
example, functions can use <code>initid-&gt;ptr</code> to
communicate allocated memory between functions. In
<code>xxx_init()</code>, allocate the memory and assign it to this
pointer: 

<pre>
initid-&gt;ptr = allocated_memory;
</pre>

In <code>xxx()</code> and <code>xxx_deinit()</code>, refer to
<code>initid-&gt;ptr</code> to use or deallocate the memory.</dd>
</dl>

<h4><a id="UDF_aggr._calling" name="UDF_aggr._calling"
href="manual_toc.html#UDF_aggr._calling">9.2.2.2 UDF Calling
Sequences for aggregate functions</a></h4>

<p><a id="IDX1736" name="IDX1736"></a></p>

<p>Here follows a description of the different functions you need
to define when you want to create an aggregate UDF function.</p>

<pre>
char *xxx_reset(UDF_INIT *initid, UDF_ARGS *args,
                char *is_null, char *error);
</pre>

<p>This function is called when MySQL finds the first row in a new
group. In the function you should reset any internal summary
variables and then set the given argument as the first argument in
the group.</p>

<p>In many cases this is implemented internally by reseting all
variables and then calling <code>xxx_add()</code>.</p>

<pre>
char *xxx_add(UDF_INIT *initid, UDF_ARGS *args,
              char *is_null, char *error);
</pre>

<p>This function is called for all rows that belongs to the same
group, except for the first row. In this you should add the value
in UDF_ARGS to your internal summary variable.</p>

<p>The <code>xxx()</code> function should be declared identical as
when you define a simple UDF function. See section <a
href="manual.html#UDF_calling">9.2.2.1 UDF Calling Sequences for
simple functions</a>.</p>

<p>This function is called when all rows in the group has been
processed. You should normally never access the <code>args</code>
variable here but return your value based on your internal summary
variables.</p>

<p>All argument processing in <code>xxx_reset()</code> and
<code>xxx_add()</code> should be done identically as for normal UDF
functions. See section <a href="manual.html#UDF_arguments">9.2.2.3
Argument Processing</a>.</p>

<p>The return value handling in <code>xxx()</code> should be done
identically as for a normal UDF. See section <a
href="manual.html#UDF_return_values">9.2.2.4 Return Values and
Error Handling</a>.</p>

<p>The pointer argument to <code>is_null</code> and
<code>error</code> is the same for all calls to
<code>xxx_reset()</code>, <code>xxx_add()</code> and
<code>xxx()</code>. You can use this to remember that you got an
error or if the <code>xxx()</code> function should return
<code>NULL</code>. Note that you should not store a string into
<code>*error</code>! This is just a 1 byte flag!</p>

<p><code>is_null</code> is reset for each group (before calling
<code>xxx_reset()</code>. <code>error</code> is never reset.</p>

<p>If <code>isnull</code> or <code>error</code> are set after
<code>xxx()</code> then MySQL will return <code>NULL</code> as the
result for the group function.</p>

<h4><a id="UDF_arguments" name="UDF_arguments"
href="manual_toc.html#UDF_arguments">9.2.2.3 Argument
Processing</a></h4>

<p><a id="IDX1737" name="IDX1737"></a> <a id="IDX1738"
name="IDX1738"></a></p>

<p>The <code>args</code> parameter points to a
<code>UDF_ARGS</code> structure that has the members listed
here:</p>

<dl compact="compact">
<dt><code>unsigned int arg_count</code></dt>

<dd>The number of arguments. Check this value in the initialisation
function if you want your function to be called with a particular
number of arguments. For example: 

<pre>
if (args-&gt;arg_count != 2)
{
    strcpy(message,"XXX() requires two arguments");
    return 1;
}
</pre>
</dd>

<dt><code>enum Item_result *arg_type</code></dt>

<dd>The types for each argument. The possible type values are
<code>STRING_RESULT</code>, <code>INT_RESULT</code>, and
<code>REAL_RESULT</code>. To make sure that arguments are of a
given type and return an error if they are not, check the
<code>arg_type</code> array in the initialisation function. For
example: 

<pre>
if (args-&gt;arg_type[0] != STRING_RESULT ||
    args-&gt;arg_type[1] != INT_RESULT)
{
    strcpy(message,"XXX() requires a string and an integer");
    return 1;
}
</pre>

As an alternative to requiring your function's arguments to be of
particular types, you can use the initialisation function to set
the <code>arg_type</code> elements to the types you want. This
causes MySQL to coerce arguments to those types for each call to
<code>xxx()</code>. For example, to specify coercion of the first
two arguments to string and integer, do this in
<code>xxx_init()</code>: 

<pre>
args-&gt;arg_type[0] = STRING_RESULT;
args-&gt;arg_type[1] = INT_RESULT;
</pre>
</dd>

<dt><code>char **args</code></dt>

<dd><code>args-&gt;args</code> communicates information to the
initialisation function about the general nature of the arguments
your function was called with. For a constant argument
<code>i</code>, <code>args-&gt;args[i]</code> points to the
argument value. (See below for instructions on how to access the
value properly.) For a non-constant argument,
<code>args-&gt;args[i]</code> is <code>0</code>. A constant
argument is an expression that uses only constants, such as
<code>3</code> or <code>4*7-2</code> or <code>SIN(3.14)</code>. A
non-constant argument is an expression that refers to values that
may change from row to row, such as column names or functions that
are called with non-constant arguments. For each invocation of the
main function, <code>args-&gt;args</code> contains the actual
arguments that are passed for the row currently being processed.
Functions can refer to an argument <code>i</code> as follows: 

<ul>
<li>An argument of type <code>STRING_RESULT</code> is given as a
string pointer plus a length, to allow handling of binary data or
data of arbitrary length. The string contents are available as
<code>args-&gt;args[i]</code> and the string length is
<code>args-&gt;lengths[i]</code>. You should not assume that
strings are null-terminated.</li>

<li>For an argument of type <code>INT_RESULT</code>, you must cast
<code>args-&gt;args[i]</code> to a <code>long long</code> value: 

<pre>
long long int_val;
int_val = *((long long*) args-&gt;args[i]);
</pre>
</li>

<li>For an argument of type <code>REAL_RESULT</code>, you must cast
<code>args-&gt;args[i]</code> to a <code>double</code> value: 

<pre>
double    real_val;
real_val = *((double*) args-&gt;args[i]);
</pre>
</li>
</ul>
</dd>

<dt><code>unsigned long *lengths</code></dt>

<dd>For the initialisation function, the <code>lengths</code> array
indicates the maximum string length for each argument. You should
not change these. For each invocation of the main function,
<code>lengths</code> contains the actual lengths of any string
arguments that are passed for the row currently being processed.
For arguments of types <code>INT_RESULT</code> or
<code>REAL_RESULT</code>, <code>lengths</code> still contains the
maximum length of the argument (as for the initialisation
function).</dd>
</dl>

<h4><a id="UDF_return_values" name="UDF_return_values"
href="manual_toc.html#UDF_return_values">9.2.2.4 Return Values and
Error Handling</a></h4>

<p><a id="IDX1739" name="IDX1739"></a> <a id="IDX1740"
name="IDX1740"></a> <a id="IDX1741" name="IDX1741"></a> <a
id="IDX1742" name="IDX1742"></a></p>

<p>The initialisation function should return <code>0</code> if no
error occurred and <code>1</code> otherwise. If an error occurs,
<code>xxx_init()</code> should store a null-terminated error
message in the <code>message</code> parameter. The message will be
returned to the client. The message buffer is
<code>MYSQL_ERRMSG_SIZE</code> characters long, but you should try
to keep the message to less than 80 characters so that it fits the
width of a standard terminal screen.</p>

<p>The return value of the main function <code>xxx()</code> is the
function value, for <code>long long</code> and <code>double</code>
functions. A string functions should return a pointer to the result
and store the length of the string in the <code>length</code>
arguments.</p>

<p>Set these to the contents and length of the return value. For
example:</p>

<pre>
memcpy(result, "result string", 13);
*length = 13;
</pre>

<p>The <code>result</code> buffer that is passed to the calc
function is 255 byte big. If your result fits in this, you don't
have to worry about memory allocation for results.</p>

<p>If your string function needs to return a string longer than 255
bytes, you must allocate the space for it with
<code>malloc()</code> in your <code>xxx_init()</code> function or
your <code>xxx()</code> function and free it in your
<code>xxx_deinit()</code> function. You can store the allocated
memory in the <code>ptr</code> slot in the <code>UDF_INIT</code>
structure for reuse by future <code>xxx()</code> calls. See section
<a href="manual.html#UDF_calling">9.2.2.1 UDF Calling Sequences for
simple functions</a>.</p>

<p>To indicate a return value of <code>NULL</code> in the main
function, set <code>is_null</code> to <code>1</code>:</p>

<pre>
*is_null = 1;
</pre>

<p>To indicate an error return in the main function, set the
<code>error</code> parameter to <code>1</code>:</p>

<pre>
*error = 1;
</pre>

<p>If <code>xxx()</code> sets <code>*error</code> to <code>1</code>
for any row, the function value is <code>NULL</code> for the
current row and for any subsequent rows processed by the statement
in which <code>XXX()</code> was invoked. (<code>xxx()</code> will
not even be called for subsequent rows.) <strong>Note</strong>: in
MySQL versions prior to 3.22.10, you should set both
<code>*error</code> and <code>*is_null</code>:</p>

<pre>
*error = 1;
*is_null = 1;
</pre>

<h4><a id="UDF_compiling" name="UDF_compiling"
href="manual_toc.html#UDF_compiling">9.2.2.5 Compiling and
Installing User-definable Functions</a></h4>

<p><a id="IDX1743" name="IDX1743"></a> <a id="IDX1744"
name="IDX1744"></a> <a id="IDX1745" name="IDX1745"></a></p>

<p>Files implementing UDFs must be compiled and installed on the
host where the server runs. This process is described below for the
example UDF file <tt>`udf_example.cc'</tt> that is included in the
MySQL source distribution. This file contains the following
functions:</p>

<ul>
<li><code>metaphon()</code> returns a metaphon string of the string
argument. This is something like a soundex string, but it's more
tuned for English.</li>

<li><code>myfunc_double()</code> returns the sum of the ASCII
values of the characters in its arguments, divided by the sum of
the length of its arguments.</li>

<li><code>myfunc_int()</code> returns the sum of the length of its
arguments.</li>

<li><code>sequence([const int])</code> returns an sequence starting
from the given number or 1 if no number has been given.</li>

<li><code>lookup()</code> returns the IP number for a
hostname.</li>

<li><code>reverse_lookup()</code> returns the hostname for an IP
number. The function may be called with a string
<code>"xxx.xxx.xxx.xxx"</code> or four numbers.</li>
</ul>

<p>A dynamically loadable file should be compiled as a sharable
object file, using a command something like this:</p>

<pre>
shell&gt; gcc -shared -o udf_example.so myfunc.cc
</pre>

<p>You can easily find out the correct compiler options for your
system by running this command in the <tt>`sql'</tt> directory of
your MySQL source tree:</p>

<pre>
shell&gt; make udf_example.o
</pre>

<p>You should run a compile command similar to the one that
<code>make</code> displays, except that you should remove the
<code>-c</code> option near the end of the line and add <code>-o
udf_example.so</code> to the end of the line. (On some systems, you
may need to leave the <code>-c</code> on the command.)</p>

<p>Once you compile a shared object containing UDFs, you must
install it and tell MySQL about it. Compiling a shared object from
<tt>`udf_example.cc'</tt> produces a file named something like
<tt>`udf_example.so'</tt> (the exact name may vary from platform to
platform). Copy this file to some directory searched by
<code>ld</code>, such as <tt>`/usr/lib'</tt>. On many systems, you
can set the <code>LD_LIBRARY</code> or <code>LD_LIBRARY_PATH</code>
environment variable to point at the directory where you have your
UDF function files. The <code>dlopen</code> manual page tells you
which variable you should use on your system. You should set this
in <code>mysql.server</code> or <code>safe_mysqld</code> startup
scripts and restart <code>mysqld</code>.</p>

<p>After the library is installed, notify <code>mysqld</code> about
the new functions with these commands:</p>

<pre>
mysql&gt; CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
mysql&gt; CREATE FUNCTION myfunc_double RETURNS REAL SONAME "udf_example.so";
mysql&gt; CREATE FUNCTION myfunc_int RETURNS INTEGER SONAME "udf_example.so";
mysql&gt; CREATE FUNCTION lookup RETURNS STRING SONAME "udf_example.so";
mysql&gt; CREATE FUNCTION reverse_lookup
    -&gt;        RETURNS STRING SONAME "udf_example.so";
mysql&gt; CREATE AGGREGATE FUNCTION avgcost
    -&gt;        RETURNS REAL SONAME "udf_example.so";
</pre>

<p>Functions can be deleted using <code>DROP FUNCTION</code>:</p>

<pre>
mysql&gt; DROP FUNCTION metaphon;
mysql&gt; DROP FUNCTION myfunc_double;
mysql&gt; DROP FUNCTION myfunc_int;
mysql&gt; DROP FUNCTION lookup;
mysql&gt; DROP FUNCTION reverse_lookup;
mysql&gt; DROP FUNCTION avgcost;
</pre>

<p>The <code>CREATE FUNCTION</code> and <code>DROP FUNCTION</code>
statements update the system table <code>func</code> in the
<code>mysql</code> database. The function's name, type and shared
library name are saved in the table. You must have the
<code>INSERT</code> and <code>DELETE</code> privileges for the
<code>mysql</code> database to create and drop functions.</p>

<p>You should not use <code>CREATE FUNCTION</code> to add a
function that has already been created. If you need to reinstall a
function, you should remove it with <code>DROP FUNCTION</code> and
then reinstall it with <code>CREATE FUNCTION</code>. You would need
to do this, for example, if you recompile a new version of your
function, so that <code>mysqld</code> gets the new version.
Otherwise, the server will continue to use the old version.</p>

<p>Active functions are reloaded each time the server starts,
unless you start <code>mysqld</code> with the
<code>--skip-grant-tables</code> option. In this case, UDF
initialisation is skipped and UDFs are unavailable. (An active
function is one that has been loaded with <code>CREATE
FUNCTION</code> and not removed with <code>DROP
FUNCTION</code>.)</p>

<h3><a id="Adding_native_function" name="Adding_native_function"
href="manual_toc.html#Adding_native_function">9.2.3 Adding a New
Native Function</a></h3>

<p><a id="IDX1746" name="IDX1746"></a> <a id="IDX1747"
name="IDX1747"></a> <a id="IDX1748" name="IDX1748"></a></p>

<p>The procedure for adding a new native function is described
here. Note that you cannot add native functions to a binary
distribution because the procedure involves modifying MySQL source
code. You must compile MySQL yourself from a source distribution.
Also note that if you migrate to another version of MySQL (for
example, when a new version is released), you will need to repeat
the procedure with the new version.</p>

<p>To add a new native MySQL function, follow these steps:</p>

<ol>
<li>Add one line to <tt>`lex.h'</tt> that defines the function name
in the <code>sql_functions[]</code> array.</li>

<li>If the function prototype is simple (just takes zero, one, two
or three arguments), you should in lex.h specify SYM(FUNC_ARG#)
(where # is the number of arguments) as the second argument in the
<code>sql_functions[]</code> array and add a function that creates
a function object in <tt>`item_create.cc'</tt>. Take a look at
<code>"ABS"</code> and <code>create_funcs_abs()</code> for an
example of this. If the function prototype is complicated (for
example takes a variable number of arguments), you should add two
lines to <tt>`sql_yacc.yy'</tt>. One indicates the preprocessor
symbol that <code>yacc</code> should define (this should be added
at the beginning of the file). Then define the function parameters
and add an ``item'' with these parameters to the
<code>simple_expr</code> parsing rule. For an example, check all
occurrences of <code>ATAN</code> in <tt>`sql_yacc.yy'</tt> to see
how this is done.</li>

<li>In <tt>`item_func.h'</tt>, declare a class inheriting from
<code>Item_num_func</code> or <code>Item_str_func</code>, depending
on whether your function returns a number or a string.</li>

<li>In <tt>`item_func.cc'</tt>, add one of the following
declarations, depending on whether you are defining a numeric or
string function: 

<pre>
double   Item_func_newname::val()
longlong Item_func_newname::val_int()
String  *Item_func_newname::Str(String *str)
</pre>

If you inherit your object from any of the standard items (like
<code>Item_num_func</code> you probably only have to define one of
the above functions and let the parent object take care of the
other functions. For example, the <code>Item_str_func</code> class
defines a <code>val()</code> function that executes
<code>atof()</code> on the value returned by
<code>::str()</code>.</li>

<li>You should probably also define the following object function: 

<pre>
void Item_func_newname::fix_length_and_dec()
</pre>

This function should at least calculate <code>max_length</code>
based on the given arguments. <code>max_length</code> is the
maximum number of characters the function may return. This function
should also set <code>maybe_null = 0</code> if the main function
can't return a <code>NULL</code> value. The function can check if
any of the function arguments can return <code>NULL</code> by
checking the arguments <code>maybe_null</code> variable. You can
take a look at <code>Item_func_mod::fix_length_and_dec</code> for a
typical example of how to do this.</li>
</ol>

<p>All functions must be thread-safe (in other words, don't use any
global or static variables in the functions without protecting them
with mutexes).</p>

<p>If you want to return <code>NULL</code>, from
<code>::val()</code>, <code>::val_int()</code> or
<code>::str()</code> you should set <code>null_value</code> to 1
and return 0.</p>

<p>For <code>::str()</code> object functions, there are some
additional considerations to be aware of:</p>

<ul>
<li>The <code>String *str</code> argument provides a string buffer
that may be used to hold the result. (For more information about
the <code>String</code> type, take a look at the
<tt>`sql_string.h'</tt> file.)</li>

<li>The <code>::str()</code> function should return the string that
holds the result or <code>(char*) 0</code> if the result is
<code>NULL</code>.</li>

<li>All current string functions try to avoid allocating any memory
unless absolutely necessary!</li>
</ul>

<h2><a id="Adding_procedures" name="Adding_procedures"
href="manual_toc.html#Adding_procedures">9.3 Adding New Procedures
to MySQL</a></h2>

<p><a id="IDX1749" name="IDX1749"></a> <a id="IDX1750"
name="IDX1750"></a> <a id="IDX1751" name="IDX1751"></a></p>

<p>In MySQL, you can define a procedure in C++ that can access and
modify the data in a query before it is sent to the client. The
modification can be done on row-by-row or <code>GROUP BY</code>
level.</p>

<p>We have created an example procedure in MySQL Version 3.23 to
show you what can be done.</p>

<p>Additionally we recommend you to take a look at
<code>mylua</code>. With this you can use the LUA language to load
a procedure at runtime into <code>mysqld</code>.</p>

<h3><a id="procedure_analyse" name="procedure_analyse"
href="manual_toc.html#procedure_analyse">9.3.1 Procedure
Analyse</a></h3>

<p><code>analyse([max elements,[max memory]])</code></p>

<p>This procedure is defined in the <tt>`sql/sql_analyse.cc'</tt>.
This examines the result from your query and returns an analysis of
the results:</p>

<ul>
<li><code>max elements</code> (default 256) is the maximum number
of distinct values <code>analyse</code> will notice per column.
This is used by <code>analyse</code> to check if the optimal column
type should be of type <code>ENUM</code>.</li>

<li><code>max memory</code> (default 8192) is the maximum memory
<code>analyse</code> should allocate per column while trying to
find all distinct values.</li>
</ul>

<pre>
SELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max elements,[max memory]])
</pre>

<h3><a id="Writing_a_procedure" name="Writing_a_procedure"
href="manual_toc.html#Writing_a_procedure">9.3.2 Writing a
Procedure</a></h3>

<p>For the moment, the only documentation for this is the
source.</p>

<p>You can find all information about procedures by examining the
following files:</p>

<ul>
<li><tt>`sql/sql_analyse.cc'</tt></li>

<li><tt>`sql/procedure.h'</tt></li>

<li><tt>`sql/procedure.cc'</tt></li>

<li><tt>`sql/sql_select.cc'</tt></li>
</ul>

<h1><a id="Problems" name="Problems"
href="manual_toc.html#Problems">A Problems and Common
Errors</a></h1>

<p><a id="IDX1752" name="IDX1752"></a> <a id="IDX1753"
name="IDX1753"></a></p>

<p>This chapter lists some common problems and error messages that
users have run into. You will learn how to figure out what the
problem is, and what to do to solve it. You will also find proper
solutions to some common problems.</p>

<h2><a id="What_is_crashing" name="What_is_crashing"
href="manual_toc.html#What_is_crashing">A.1 How to Determine What
Is Causing Problems</a></h2>

<p>When you run into problems, the first thing you should do is to
find out which program / piece of equipment is causing
problems:</p>

<ul>
<li>If you have one of the following symptoms, then it is probably
a hardware (like memory, motherboard, CPU, or hard disk) or kernel
problem: 

<ul>
<li>The keyboard doesn't work. This can normally be checked by
pressing Caps Lock. If the Caps Lock light doesn't change you have
to replace your keyboard. (Before doing this, you should try to
reboot your computer and check all cables to the keyboard.)</li>

<li>The mouse pointer doesn't move.</li>

<li>The machine doesn't answer to a remote machine's pings.</li>

<li>Different, unrelated programs don't behave correctly.</li>

<li>If your system rebooted unexpectedly (a faulty user level
program should <strong>never</strong> be able to take down your
system).</li>
</ul>

In this case you should start by checking all your cables and run
some diagnostic tool to check your hardware! You should also check
if there are any patches, updates, or service packs for your
operating system that could likely solve your problems. Check also
that all your libraries (like glibc) are up to date. It's always
good to use a machine with ECC memory to discover memory problems
early!</li>

<li>If your keyboard is locked up, you may be able to fix this by
logging into your machine from another machine and execute
<code>kbd_mode -a</code> on it.</li>

<li>Please examine your system log file (/var/log/messages or
similar) for reasons for your problems. If you think the problem is
in MySQL then you should also examine MySQL's log files. See
section <a href="manual.html#Update_log">4.9.3 The Update
Log</a>.</li>

<li>If you don't think you have hardware problems, you should try
to find out which program is causing problems. Try using
<code>top</code>, <code>ps</code>, <code>taskmanager</code>, or
some similar program, to check which program is taking all CPU or
is locking the machine.</li>

<li>Check with <code>top</code>, <code>df</code>, or a similar
program if you are out of memory, disk space, open files, or some
other critical resource.</li>

<li>If the problem is some runaway process, you can always try to
kill it. If it doesn't want to die, there is probably a bug in the
operating system.</li>
</ul>

<p>If after you have examined all other possibilities and you have
concluded that it's the MySQL server or a MySQL client that is
causing the problem, it's time to do a bug report for our mailing
list or our support team. In the bug report, try to give a very
detailed description of how the system is behaving and what you
think is happening. You should also state why you think it's MySQL
that is causing the problems. Take into consideration all the
situations in this chapter. State any problems exactly how they
appear when you examine your system. Use the 'cut and paste' method
for any output and/or error messages from programs and/or log
files!</p>

<p>Try to describe in detail which program is not working and all
symptoms you see! We have in the past received many bug reports
that just state "the system doesn't work". This doesn't provide us
with any information about what could be the problem.</p>

<p>If a program fails, it's always useful to know:</p>

<ul>
<li>Has the program in question made a segmentation fault (core
dumped)?</li>

<li>Is the program taking up the whole CPU? Check with
<code>top</code>. Let the program run for a while, it may be
evaluating something heavy.</li>

<li>If it's the <code>mysqld</code> server that is causing
problems, can you do <code>mysqladmin -u root ping</code> or
<code>mysqladmin -u root processlist</code>?</li>

<li>What does a client program say (try with <code>mysql</code>,
for example) when you try to connect to the MySQL server? Does the
client jam? Do you get any output from the program?</li>
</ul>

<p>When sending a bug report, you should of follow the outlines
described in this manual. See section <a
href="manual.html#Asking_questions">1.6.1.2 Asking Questions or
Reporting Bugs</a>.</p>

<h2><a id="Common_errors" name="Common_errors"
href="manual_toc.html#Common_errors">A.2 Common Errors When Using
MySQL</a></h2>

<p><a id="IDX1754" name="IDX1754"></a></p>

<p>This section lists some errors that users frequently get. You
will find descriptions of the errors, and how to solve the problem
here.</p>

<h3><a id="Error_Access_denied" name="Error_Access_denied"
href="manual_toc.html#Error_Access_denied">A.2.1 <code>Access
denied</code> Error</a></h3>

<p><a id="IDX1755" name="IDX1755"></a> <a id="IDX1756"
name="IDX1756"></a> <a id="IDX1757" name="IDX1757"></a></p>

<p>See section <a href="manual.html#Access_denied">4.2.11 Causes of
<code>Access denied</code> Errors</a>. See section <a
href="manual.html#Privileges">4.2.6 How the Privilege System
Works</a>.</p>

<h3><a id="Gone_away" name="Gone_away"
href="manual_toc.html#Gone_away">A.2.2 <code>MySQL server has gone
away</code> Error</a></h3>

<p>This section also covers the related <code>Lost connection to
server during query</code> error.</p>

<p>The most common reason for the <code>MySQL server has gone
away</code> error is that the server timed out and closed the
connection. By default, the server closes the connection after 8
hours if nothing has happened. You can change the time limit by
setting the <code>wait_timeout</code> variable when you start
<code>mysqld</code>.</p>

<p>Another common reason to receive the <code>MySQL server has gone
away</code> error is because you have issued a ``close'' on your
MySQL connection and then tried to run a query on the closed
connection.</p>

<p>If you have a script, you just have to issue the query again for
the client to do an automatic reconnection.</p>

<p>You normally can get the following error codes in this case
(which one you get is OS-dependent):</p>

<table border="1" width="100%">
<tr>
<td><strong>Error code</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>CR_SERVER_GONE_ERROR</code></td>
<td>The client couldn't send a question to the server.</td>
</tr>

<tr>
<td><code>CR_SERVER_LOST</code></td>
<td>The client didn't get an error when writing to the server, but
it didn't get a full answer (or any answer) to the question.</td>
</tr>
</table>

<p>You will also get this error if someone has kills the running
thread with <code>kill #threadid#</code>.</p>

<p>You can check that the MySQL hasn't died by executing
<code>mysqladmin version</code> and examining the uptime. If the
problem is that mysqld crashed you should concentrate one finding
the reason for the crash. You should in this case start by checking
if issuing the query again will kill MySQL again. See section <a
href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</p>

<p>You can also get these errors if you send a query to the server
that is incorrect or too large. If <code>mysqld</code> gets a
packet that is too large or out of order, it assumes that something
has gone wrong with the client and closes the connection. If you
need big queries (for example, if you are working with big
<code>BLOB</code> columns), you can increase the query limit by
starting <code>mysqld</code> with the <code>-O
max_allowed_packet=#</code> option (default 1M). The extra memory
is allocated on demand, so <code>mysqld</code> will allocate more
memory only when you issue a big query or when <code>mysqld</code>
must return a big result row!</p>

<p>You will also get a lost connection if you are sending a packet
&gt;= 16M if your client is older than 4.0.8 and your server is
4.0.8 and above, or the other way around.</p>

<p>If you want to make a bug report regarding this problem, be sure
that you include the following information:</p>

<ul>
<li>Include information if MySQL died or not. (You can find this in
the <code>hostname.err file</code>. See section <a
href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</li>

<li>If a specific query kills <code>mysqld</code> and the involved
tables where checked with <code>CHECK TABLE</code> before you did
the query, can you do a test case for this? See section <a
href="manual.html#Reproduceable_test_case">E.1.6 Making a Test Case
When You Experience Table Corruption</a>.</li>

<li>What is the value of the <code>wait_timeout</code> variable in
the MySQL server ? <code>mysqladmin variables</code> gives you the
value of this</li>

<li>Have you tried to run <code>mysqld</code> with
<code>--log</code> and check if the issued query appears in the log
?</li>
</ul>

<p>See section <a href="manual.html#Asking_questions">1.6.1.2
Asking Questions or Reporting Bugs</a>.</p>

<h3><a id="Can_not_connect_to_server"
name="Can_not_connect_to_server"
href="manual_toc.html#Can_not_connect_to_server">A.2.3 <code>Can't
connect to [local] MySQL server</code> Error</a></h3>

<p>A MySQL client on Unix can connect to the <code>mysqld</code>
server in two different ways: Unix sockets, which connect through a
file in the file system (default <tt>`/tmp/mysqld.sock'</tt>) or
TCP/IP, which connects through a port number. Unix sockets are
faster than TCP/IP but can only be used when connecting to a server
on the same computer. Unix sockets are used if you don't specify a
hostname or if you specify the special hostname
<code>localhost</code>.</p>

<p>On Windows, if the <code>mysqld</code> server is running on
9x/Me, you can connect only via TCP/IP. If the server is running on
NT/2000/XP and mysqld is started with
<code>--enable-named-pipe</code>, you can also connect with named
pipes. The name of the named pipe is MySQL. If you don't give a
hostname when connecting to <code>mysqld</code>, a MySQL client
will first try to connect to the named pipe, and if this doesn't
work it will connect to the TCP/IP port. You can force the use of
named pipes on Windows by using <code>.</code> as the hostname.</p>

<p>The error (2002) <code>Can't connect to ...</code> normally
means that there isn't a MySQL server running on the system or that
you are using a wrong socket file or TCP/IP port when trying to
connect to the <code>mysqld</code> server.</p>

<p>Start by checking (using <code>ps</code> or the task manager on
Windows) that there is a process running named <code>mysqld</code>
on your server! If there isn't any <code>mysqld</code> process, you
should start one. See section <a
href="manual.html#Starting_server">2.4.2 Problems Starting the
MySQL Server</a>.</p>

<p>If a <code>mysqld</code> process is running, you can check the
server by trying these different connections (the port number and
socket pathname might be different in your setup, of course):</p>

<pre>
shell&gt; mysqladmin version
shell&gt; mysqladmin variables
shell&gt; mysqladmin -h `hostname` version variables
shell&gt; mysqladmin -h `hostname` --port=3306 version
shell&gt; mysqladmin -h 'ip for your host' version
shell&gt; mysqladmin --socket=/tmp/mysql.sock version
</pre>

<p>Note the use of backquotes rather than forward quotes with the
<code>hostname</code> command; these cause the output of
<code>hostname</code> (that is, the current hostname) to be
substituted into the <code>mysqladmin</code> command.</p>

<p>Here are some reasons the <code>Can't connect to local MySQL
server</code> error might occur:</p>

<ul>
<li><code>mysqld</code> is not running.</li>

<li>You are running on a system that uses MIT-pthreads. If you are
running on a system that doesn't have native threads,
<code>mysqld</code> uses the MIT-pthreads package. See section <a
href="manual.html#Which_OS">2.2.2 Operating Systems Supported by
MySQL</a>. However, not all MIT-pthreads versions support Unix
sockets. On a system without sockets support you must always
specify the hostname explicitly when connecting to the server. Try
using this command to check the connection to the server: 

<pre>
shell&gt; mysqladmin -h `hostname` version
</pre>
</li>

<li>Someone has removed the Unix socket that <code>mysqld</code>
uses (default <tt>`/tmp/mysqld.sock'</tt>). You might have a
<code>cron</code> job that removes the MySQL socket (for example, a
job that removes old files from the <tt>`/tmp'</tt> directory). You
can always run <code>mysqladmin version</code> and check that the
socket <code>mysqladmin</code> is trying to use really exists. The
fix in this case is to change the <code>cron</code> job to not
remove <tt>`mysqld.sock'</tt> or to place the socket somewhere
else. See section <a
href="manual.html#Problems_with_mysql.sock">A.4.5 How to Protect or
Change the MySQL Socket File <tt>`/tmp/mysql.sock'</tt></a>.</li>

<li>You have started the <code>mysqld</code> server with the
<code>--socket=/path/to/socket</code> option. If you change the
socket pathname for the server, you must also notify the MySQL
clients about the new path. You can do this by providing the socket
path as an argument to the client. See section <a
href="manual.html#Problems_with_mysql.sock">A.4.5 How to Protect or
Change the MySQL Socket File <tt>`/tmp/mysql.sock'</tt></a>.</li>

<li>You are using Linux and one thread has died (core dumped). In
this case you must kill the other <code>mysqld</code> threads (for
example, with the <code>mysql_zap</code> script before you can
start a new MySQL server. See section <a
href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</li>

<li>You may not have read and write privilege to either the
directory that holds the socket file or privilege to the socket
file itself. In this case you have to either change the privilege
for the directory / file or restart <code>mysqld</code> so that it
uses a directory that you can access.</li>
</ul>

<p>If you get the error message <code>Can't connect to MySQL server
on some_hostname</code>, you can try the following things to find
out what the problem is :</p>

<ul>
<li>Check if the server is up by doing <code>telnet your-host-name
tcp-ip-port-number</code> and press Enter a couple of times. If
there is a MySQL server running on this port you should get a
responses that includes the version number of the running MySQL
server. If you get an error like <code>telnet: Unable to connect to
remote host: Connection refused</code>, then there is no server
running on the given port.</li>

<li>Try connecting to the <code>mysqld</code> daemon on the local
machine and check the TCP/IP port that <code>mysqld</code> it's
configured to use (variable <code>port</code>) with
<code>mysqladmin variables</code>.</li>

<li>Check that your <code>mysqld</code> server is not started with
the <code>--skip-networking</code> option.</li>
</ul>

<h3><a id="Blocked_host" name="Blocked_host"
href="manual_toc.html#Blocked_host">A.2.4 <code>Host '...' is
blocked</code> Error</a></h3>

<p>If you get an error like this:</p>

<pre>
Host 'hostname' is blocked because of many connection errors.
Unblock with 'mysqladmin flush-hosts'
</pre>

<p>this means that <code>mysqld</code> has gotten a lot
(<code>max_connect_errors</code>) of connect requests from the host
<code>'hostname'</code> that have been interrupted in the middle.
After <code>max_connect_errors</code> failed requests,
<code>mysqld</code> assumes that something is wrong (like an attack
from a cracker), and blocks the site from further connections until
someone executes the command <code>mysqladmin
flush-hosts</code>.</p>

<p>By default, <code>mysqld</code> blocks a host after 10
connection errors. You can easily adjust this by starting the
server like this:</p>

<pre>
shell&gt; safe_mysqld -O max_connect_errors=10000 &amp;
</pre>

<p>Note that if you get this error message for a given host, you
should first check that there isn't anything wrong with TCP/IP
connections from that host. If your TCP/IP connections aren't
working, it won't do you any good to increase the value of the
<code>max_connect_errors</code> variable!</p>

<h3><a id="Too_many_connections" name="Too_many_connections"
href="manual_toc.html#Too_many_connections">A.2.5 <code>Too many
connections</code> Error</a></h3>

<p>If you get the error <code>Too many connections</code> when you
try to connect to MySQL, this means that there is already
<code>max_connections</code> clients connected to the
<code>mysqld</code> server.</p>

<p>If you need more connections than the default (100), then you
should restart <code>mysqld</code> with a bigger value for the
<code>max_connections</code> variable.</p>

<p>Note that <code>mysqld</code> actually allows
(<code>max_connections</code>+1) clients to connect. The last
connection is reserved for a user with the <code>SUPER</code>
privilege. By not giving this privilege to normal users (they
shouldn't need this), an administrator with this privilege can log
in and use <code>SHOW PROCESSLIST</code> to find out what could be
wrong. See section <a href="manual.html#SHOW_PROCESSLIST">4.5.6.6
<code>SHOW PROCESSLIST</code></a>.</p>

<p>The maximum number of connects MySQL is depending on how good
the thread library is on a given platform. Linux or Solaris should
be able to support 500-1000 simultaneous connections, depending on
how much RAM you have and what your clients are doing.</p>

<h3><a id="Non-transactional_tables"
name="Non-transactional_tables"
href="manual_toc.html#Non-transactional_tables">A.2.6 <code>Some
non-transactional changed tables couldn't be rolled back</code>
Error</a></h3>

<p><a id="IDX1758" name="IDX1758"></a></p>

<p>If you get the error/warning: <code>Warning: Some
non-transactional changed tables couldn't be rolled back</code>
when trying to do a <code>ROLLBACK</code>, this means that some of
the tables you used in the transaction didn't support transactions.
These non-transactional tables will not be affected by the
<code>ROLLBACK</code> statement.</p>

<p>The most typical case when this happens is when you have tried
to create a table of a type that is not supported by your
<code>mysqld</code> binary. If <code>mysqld</code> doesn't support
a table type (or if the table type is disabled by a startup option)
, it will instead create the table type with the table type that is
most resembles to the one you requested, probably
<code>MyISAM</code>.</p>

<p>You can check the table type for a table by doing:</p>

<p><code>SHOW TABLE STATUS LIKE 'table_name'</code>. See section <a
href="manual.html#SHOW_TABLE_STATUS">4.5.6.2 <code>SHOW TABLE
STATUS</code></a>.</p>

<p>You can check the extensions your <code>mysqld</code> binary
supports by doing:</p>

<p><code>show variables like 'have_%'</code>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</p>

<h3><a id="Out_of_memory" name="Out_of_memory"
href="manual_toc.html#Out_of_memory">A.2.7 <code>Out of
memory</code> Error</a></h3>

<p>If you issue a query and get something like the following
error:</p>

<pre>
mysql: Out of memory at line 42, 'malloc.c'
mysql: needed 8136 byte (8k), memory in use: 12481367 bytes (12189k)
ERROR 2008: MySQL client ran out of memory
</pre>

<p>note that the error refers to the MySQL client
<code>mysql</code>. The reason for this error is simply that the
client does not have enough memory to store the whole result.</p>

<p>To remedy the problem, first check that your query is correct.
Is it reasonable that it should return so many rows? If so, you can
use <code>mysql --quick</code>, which uses
<code>mysql_use_result()</code> to retrieve the result set. This
places less of a load on the client (but more on the server).</p>

<h3><a id="Packet_too_large" name="Packet_too_large"
href="manual_toc.html#Packet_too_large">A.2.8 <code>Packet too
large</code> Error</a></h3>

<p>When a MySQL client or the <code>mysqld</code> server gets a
packet bigger than <code>max_allowed_packet</code> bytes, it issues
a <code>Packet too large</code> error and closes the
connection.</p>

<p>In MySQL 3.23 the biggest possible packet is 16M (due to limits
in the client/server protocol). In MySQL 4.0.1 and up, this is only
limited by the amount on memory you have on your server (up to a
theoretical maximum of 2G).</p>

<p>A communication packet is a single SQL statement sent to the
MySQL server or a single row that is sent to the client.</p>

<p>When a MySQL client or the <code>mysqld</code> server gets a
packet bigger than <code>max_allowed_packet</code> bytes, it issues
a <code>Packet too large</code> error and closes the connection.
With some clients, you may also get <code>Lost connection to MySQL
server during query</code> error if the communication packet is too
big.</p>

<p>Note that both the client and the server has it's own
<code>max_allowed_packet</code> variable. If you want to handle big
packets, you have to increase this variable both in the client and
in the server.</p>

<p>It's safe to increase this variable as memory is only allocated
when needed; this variable is more a precaution to catch wrong
packets between the client/server and also to ensure that you don't
accidentally use big packets so that you run out of memory.</p>

<p>If you are using the <code>mysql</code> client, you may specify
a bigger buffer by starting the client with <code>mysql
--set-variable=max_allowed_packet=8M</code>. Other clients have
different methods to set this variable. Please note that
<code>--set-variable</code> is deprecated since MySQL 4.0, just use
<code>--max-allowed-packet=8M</code> instead. You can use the
option file to set <code>max_allowed_packet</code> to a larger size
in <code>mysqld</code>. For example, if you are expecting to store
the full length of a <code>MEDIUMBLOB</code> into a table, you'll
need to start the server with the
<code>set-variable=max_allowed_packet=16M</code> option.</p>

<p>You can also get strange problems with large packets if you are
using big blobs, but you haven't given <code>mysqld</code> access
to enough memory to handle the query. If you suspect this is the
case, try adding <code>ulimit -d 256000</code> to the beginning of
the <code>safe_mysqld</code> script and restart
<code>mysqld</code>.</p>

<h3><a id="Communication_errors" name="Communication_errors"
href="manual_toc.html#Communication_errors">A.2.9 Communication
Errors / Aborted Connection</a></h3>

<p><a id="IDX1759" name="IDX1759"></a> <a id="IDX1760"
name="IDX1760"></a> <a id="IDX1761" name="IDX1761"></a></p>

<p>Starting with <code>MySQL 3.23.40</code> you only get the
<code>Aborted connection</code> error of you start
<code>mysqld</code> with <code>--warnings</code>.</p>

<p>If you find errors like the following in your error log.</p>

<pre>
010301 14:38:23  Aborted connection 854 to db: 'users' user: 'josh'
</pre>

<p>See section <a href="manual.html#Error_log">4.9.1 The Error
Log</a>.</p>

<p>This means that something of the following has happened:</p>

<ul>
<li>The client program did not call <code>mysql_close()</code>
before exit.</li>

<li>The client had been sleeping more than
<code>wait_timeout</code> or <code>interactive_timeout</code>
without doing any requests. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</li>

<li>The client program ended abruptly in the middle of the
transfer.</li>
</ul>

<p>When the above happens, the server variable
<code>Aborted_clients</code> is incremented.</p>

<p>The server variable <code>Aborted_connects</code> is incremented
when:</p>

<ul>
<li>When a connection packet doesn't contain the right
information.</li>

<li>When the user didn't have privileges to connect to a
database.</li>

<li>When a user uses a wrong password.</li>

<li>When it takes more than <code>connect_timeout</code> seconds to
get a connect package. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>.</li>
</ul>

<p>Note that the above could indicate that someone is trying to
break into your database!</p>

<p>Other reasons for problems with Aborted clients / Aborted
connections.</p>

<ul>
<li>Usage of duplex Ethernet protocol, both half and full with
Linux. Many Linux Ethernet drivers have this bug. You should test
for this bug by transferring a huge file via ftp between these two
machines. If a transfer goes in burst-pause-burst-pause ... mode
then you are experiencing a Linux duplex syndrome. The only
solution to this problem is switching of both half and full
duplexing on hubs and switches.</li>

<li>Some problem with the thread library that causes interrupts on
reads.</li>

<li>Badly configured TCP/IP.</li>

<li>Faulty Ethernets or hubs or switches, cables ... This can be
diagnosed properly only by replacing hardware.</li>

<li><code>max_allowed_packet</code> is too small or queries require
more memory than you have alloacated for <code>mysqld</code>. See
section <a href="manual.html#Packet_too_large">A.2.8 <code>Packet
too large</code> Error</a>.</li>
</ul>

<h3><a id="Full_table" name="Full_table"
href="manual_toc.html#Full_table">A.2.10 <code>The table is
full</code> Error</a></h3>

<p><a id="IDX1762" name="IDX1762"></a></p>

<p>There is a couple of different cases when you can get this
error:</p>

<ul>
<li>You are using an older MySQL version (before 3.23.0) when an
in-memory temporary table becomes larger than
<code>tmp_table_size</code> bytes. To avoid this problem, you can
use the <code>-O tmp_table_size=#</code> option to make
<code>mysqld</code> increase the temporary table size or use the
SQL option <code>BIG_TABLES</code> before you issue the problematic
query. See section <a href="manual.html#SET_OPTION">5.5.6
<code>SET</code> Syntax</a>. You can also start <code>mysqld</code>
with the <code>--big-tables</code> option. This is exactly the same
as using <code>BIG_TABLES</code> for all queries. In MySQL Version
3.23, in-memory temporary tables will automatically be converted to
a disk-based <code>MyISAM</code> table after the table size gets
bigger than <code>tmp_table_size</code>.</li>

<li>You are using <code>InnoDB</code> tables and run out of room in
the <code>InnoDB</code> tablespace. In this case the solution is to
extend the <code>InnoDB</code> tablespace.</li>

<li>You are using <code>ISAM</code> or <code>MyISAM</code> tables
on an OS that only supports files of 2G in size and you have hit
this limit for the data or index file.</li>

<li>You are using <code>MyISAM</code> tables and the needed data or
index size is bigger than what MySQL has allocated pointers for.
(If you don't specify <code>MAX_ROWS</code> to <code>CREATE
TABLE</code> MySQL will only allocate pointers to hold 4G of data).
You can check the maximum data/index sizes by doing 

<pre>
SHOW TABLE STATUS FROM database LIKE 'table_name';
</pre>

or using <code>myisamchk -dv database/table_name</code>. If this is
the problem, you can fix it by doing something like: 

<pre>
ALTER TABLE table_name MAX_ROWS=1000000000 AVG_ROW_LENGTH=nnn;
</pre>

You only have to specify <code>AVG_ROW_LENGTH</code> for tables
with BLOB/TEXT fields as in this case MySQL can't optimise the
space required based only on the number of rows.</li>
</ul>

<h3><a id="Cannot_create" name="Cannot_create"
href="manual_toc.html#Cannot_create">A.2.11 <code>Can't
create/write to file</code> Error</a></h3>

<p><a id="IDX1763" name="IDX1763"></a></p>

<p>If you get an error for some queries of type:</p>

<pre>
Can't create/write to file '\\sqla3fe_0.ism'.
</pre>

<p>this means that MySQL can't create a temporary file for the
result set in the given temporary directory. (The above error is a
typical error message on Windows, and the Unix error message is
similar.) The fix is to start <code>mysqld</code> with
<code>--tmpdir=path</code> or to add to your option file:</p>

<pre>
[mysqld]
tmpdir=C:/temp
</pre>

<p>assuming that the <tt>`c:\\temp'</tt> directory exists. See
section <a href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt>
Option Files</a>.</p>

<p>Check also the error code that you get with <code>perror</code>.
One reason may also be a disk full error;</p>

<pre>
shell&gt; perror 28
Error code  28:  No space left on device
</pre>

<h3><a id="Commands_out_of_sync" name="Commands_out_of_sync"
href="manual_toc.html#Commands_out_of_sync">A.2.12 <code>Commands
out of sync</code> Error in Client</a></h3>

<p><a id="IDX1764" name="IDX1764"></a></p>

<p>If you get <code>Commands out of sync; you can't run this
command now</code> in your client code, you are calling client
functions in the wrong order!</p>

<p>This can happen, for example, if you are using
<code>mysql_use_result()</code> and try to execute a new query
before you have called <code>mysql_free_result()</code>. It can
also happen if you try to execute two queries that return data
without a <code>mysql_use_result()</code> or
<code>mysql_store_result()</code> in between.</p>

<h3><a id="Ignoring_user" name="Ignoring_user"
href="manual_toc.html#Ignoring_user">A.2.13 <code>Ignoring
user</code> Error</a></h3>

<p>If you get the following error:</p>

<p><code>Found wrong password for user: 'some_user@some_host';
ignoring user</code></p>

<p>this means that when <code>mysqld</code> was started or when it
reloaded the permissions tables, it found an entry in the
<code>user</code> table with an invalid password. As a result, the
entry is simply ignored by the permission system.</p>

<p>Possible causes of and fixes for this problem:</p>

<ul>
<li>You may be running a new version of <code>mysqld</code> with an
old <code>user</code> table. You can check this by executing
<code>mysqlshow mysql user</code> to see if the password field is
shorter than 16 characters. If so, you can correct this condition
by running the <code>scripts/add_long_password</code> script.</li>

<li>The user has an old password (8 characters long) and you didn't
start <code>mysqld</code> with the <code>--old-protocol</code>
option. Update the user in the <code>user</code> table with a new
password or restart <code>mysqld</code> with
<code>--old-protocol</code>.</li>

<li><a id="IDX1765" name="IDX1765"></a> You have specified a
password in the <code>user</code> table without using the
<code>PASSWORD()</code> function. Use <code>mysql</code> to update
the user in the <code>user</code> table with a new password. Make
sure to use the <code>PASSWORD()</code> function: 

<pre>
mysql&gt; UPDATE user SET password=PASSWORD('your password')
    -&gt;             WHERE user='XXX';
</pre>
</li>
</ul>

<h3><a id="Cannot_find_table" name="Cannot_find_table"
href="manual_toc.html#Cannot_find_table">A.2.14 <code>Table 'xxx'
doesn't exist</code> Error</a></h3>

<p>If you get the error <code>Table 'xxx' doesn't exist</code> or
<code>Can't find file: 'xxx' (errno: 2)</code>, this means that no
table exists in the current database with the name
<code>xxx</code>.</p>

<p>Note that as MySQL uses directories and files to store databases
and tables, the database and table names are
<strong>case-sensitive</strong>! (On Windows the databases and
tables names are not case-sensitive, but all references to a given
table within a query must use the same case!)</p>

<p>You can check which tables you have in the current database with
<code>SHOW TABLES</code>. See section <a
href="manual.html#SHOW">4.5.6 <code>SHOW</code> Syntax</a>.</p>

<h3><a id="Cannot_initialize_character_set"
name="Cannot_initialize_character_set"
href="manual_toc.html#Cannot_initialize_character_set">A.2.15
<code>Can't initialize character set xxx</code> error</a></h3>

<p><a id="IDX1766" name="IDX1766"></a></p>

<p>If you get an error like:</p>

<pre>
MySQL Connection Failed: Can't initialize character set xxx
</pre>

<p>This means one of the following things:</p>

<ul>
<li>The character set is a multi-byte character set and you have no
support for the character set in the client. In this case you need
to recompile the client with <code>--with-charset=xxx</code> or
with <code>--with-extra-charsets=xxx</code>. See section <a
href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>. All standard MySQL binaries are
compiled with <code>--with-extra-character-sets=complex</code>
which will enable support for all multi-byte character sets. See
section <a href="manual.html#Character_sets">4.6.1 The Character
Set Used for Data and Sorting</a>.</li>

<li>The character set is a simple character set which is not
compiled into <code>mysqld</code> and the character set definition
files are not in the place where the client expects to find them.
In this case you need to: 

<ul>
<li>Recompile the client with support for the character set. See
section <a href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>.</li>

<li>Specify to the client where the character set definition files
are. For many clients you can do this with the
<code>--character-sets-dir=path-to-charset-dir</code> option.</li>

<li>Copy the character definition files to the path where the
client expects them to be.</li>
</ul>
</li>
</ul>

<h3><a id="Not_enough_file_handles" name="Not_enough_file_handles"
href="manual_toc.html#Not_enough_file_handles">A.2.16 File Not
Found</a></h3>

<p>If you get <code>ERROR '...' not found (errno: 23)</code>,
<code>Can't open file: ... (errno: 24)</code>, or any other error
with <code>errno 23</code> or <code>errno 24</code> from MySQL, it
means that you haven't allocated enough file descriptors for MySQL.
You can use the <code>perror</code> utility to get a description of
what the error number means:</p>

<pre>
shell&gt; perror 23
File table overflow
shell&gt; perror 24
Too many open files
shell&gt; perror 11
Resource temporarily unavailable
</pre>

<p>The problem here is that <code>mysqld</code> is trying to keep
open too many files simultaneously. You can either tell
<code>mysqld</code> not to open so many files at once or increase
the number of file descriptors available to
<code>mysqld</code>.</p>

<p>To tell <code>mysqld</code> to keep open fewer files at a time,
you can make the table cache smaller by using the <code>-O
table_cache=32</code> option to <code>safe_mysqld</code> (the
default value is 64). Reducing the value of
<code>max_connections</code> will also reduce the number of open
files (the default value is 90).</p>

<p><a id="IDX1767" name="IDX1767"></a> To change the number of file
descriptors available to <code>mysqld</code>, you can use the
option <code>--open-files-limit=#</code> to
<code>safe_mysqld</code> or <code>-O open-files-limit=#</code> to
<code>mysqld</code>. See section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>. The easiest way to do that is to add the
option to your option file. See section <a
href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>. If you have an old <code>mysqld</code> version that
doesn't support this, you can edit the <code>safe_mysqld</code>
script. There is a commented-out line <code>ulimit -n 256</code> in
the script. You can remove the <code>'#'</code> character to
uncomment this line, and change the number 256 to affect the number
of file descriptors available to <code>mysqld</code>.</p>

<p><code>ulimit</code> (and <code>open-files-limit</code>) can
increase the number of file descriptors, but only up to the limit
imposed by the operating system. There is also a 'hard' limit that
can only be overrided if you start <code>safe_mysqld</code> or
<code>mysqld</code> as root (just remember that you need to also
use the <code>--user=...</code> option in this case). If you need
to increase the OS limit on the number of file descriptors
available to each process, consult the documentation for your
operating system.</p>

<p>Note that if you run the <code>tcsh</code> shell,
<code>ulimit</code> will not work! <code>tcsh</code> will also
report incorrect values when you ask for the current limits! In
this case you should start <code>safe_mysqld</code> with
<code>sh</code>!</p>

<h2><a id="Installation_Issues" name="Installation_Issues"
href="manual_toc.html#Installation_Issues">A.3 Installation Related
Issues</a></h2>

<h3><a id="Link_errors" name="Link_errors"
href="manual_toc.html#Link_errors">A.3.1 Problems When Linking with
the MySQL Client Library</a></h3>

<p><a id="IDX1768" name="IDX1768"></a> <a id="IDX1769"
name="IDX1769"></a> <a id="IDX1770" name="IDX1770"></a></p>

<p>If you are linking your program and you get errors for
unreferenced symbols that start with <code>mysql_</code>, like the
following:</p>

<pre>
/tmp/ccFKsdPa.o: In function `main':
/tmp/ccFKsdPa.o(.text+0xb): undefined reference to `mysql_init'
/tmp/ccFKsdPa.o(.text+0x31): undefined reference to `mysql_real_connect'
/tmp/ccFKsdPa.o(.text+0x57): undefined reference to `mysql_real_connect'
/tmp/ccFKsdPa.o(.text+0x69): undefined reference to `mysql_error'
/tmp/ccFKsdPa.o(.text+0x9a): undefined reference to `mysql_close'
</pre>

<p>you should be able to solve this by adding
<code>-Lpath-to-the-mysql-library -lmysqlclient</code>
<strong>last</strong> on your link line.</p>

<p>If you get <code>undefined reference</code> errors for the
<code>uncompress</code> or <code>compress</code> function, add
<code>-lz</code> <strong>last</strong> on your link line and try
again!</p>

<p>If you get <code>undefined reference</code> errors for functions
that should exist on your system, like <code>connect</code>, check
the man page for the function in question, for which libraries you
should add to the link line!</p>

<p>If you get <code>undefined reference</code> errors for functions
that don't exist on your system, like the following:</p>

<pre>
mf_format.o(.text+0x201): undefined reference to `__lxstat'
</pre>

<p>it usually means that your library is compiled on a system that
is not 100% compatible with yours. In this case you should download
the latest MySQL source distribution and compile this yourself. See
section <a href="manual.html#Installing_source">2.3 Installing a
MySQL Source Distribution</a>.</p>

<p>If you are trying to run a program and you then get errors for
unreferenced symbols that start with <code>mysql_</code> or that
the <code>mysqlclient</code> library can't be found, this means
that your system can't find the share <tt>`libmysqlclient.so'</tt>
library.</p>

<p>The fix for this is to tell your system to search after shared
libraries where the library is located by one of the following
methods:</p>

<ul>
<li>Add the path to the directory where you have
<tt>`libmysqlclient.so'</tt> the <code>LD_LIBRARY_PATH</code>
environment variable.</li>

<li>Add the path to the directory where you have
<tt>`libmysqlclient.so'</tt> the <code>LD_LIBRARY</code>
environment variable.</li>

<li>Copy <tt>`libmysqlclient.so'</tt> to some place that is
searched by your system, like <tt>`/lib'</tt>, and update the
shared library information by executing <code>ldconfig</code>.</li>
</ul>

<p>Another way to solve this problem is to link your program
statically, with <code>-static</code>, or by removing the dynamic
MySQL libraries before linking your code. In the second case you
should be sure that no other programs are using the dynamic
libraries!</p>

<h3><a id="Changing_MySQL_user" name="Changing_MySQL_user"
href="manual_toc.html#Changing_MySQL_user">A.3.2 How to Run MySQL
As a Normal User</a></h3>

<p><a id="IDX1771" name="IDX1771"></a> <a id="IDX1772"
name="IDX1772"></a></p>

<p>The MySQL server <code>mysqld</code> can be started and run by
any user. In order to change <code>mysqld</code> to run as a Unix
user <code>user_name</code>, you must do the following:</p>

<ol>
<li>Stop the server if it's running (use <code>mysqladmin
shutdown</code>).</li>

<li>Change the database directories and files so that
<code>user_name</code> has privileges to read and write files in
them (you may need to do this as the Unix <code>root</code> user): 

<pre>
shell&gt; chown -R user_name /path/to/mysql/datadir
</pre>

If directories or files within the MySQL data directory are
symlinks, you'll also need to follow those links and change the
directories and files they point to. <code>chown -R</code> may not
follow symlinks for you.</li>

<li>Start the server as user <code>user_name</code>, or, if you are
using MySQL Version 3.22 or later, start <code>mysqld</code> as the
Unix <code>root</code> user and use the
<code>--user=user_name</code> option. <code>mysqld</code> will
switch to run as the Unix user <code>user_name</code> before
accepting any connections.</li>

<li>To start the server as the given user name automatically at
system startup time, add a <code>user</code> line that specifies
the user name to the <code>[mysqld]</code> group of the
<tt>`/etc/my.cnf'</tt> option file or the <tt>`my.cnf'</tt> option
file in the server's data directory. For example: 

<pre>
[mysqld]
user=user_name
</pre>
</li>
</ol>

<p>At this point, your <code>mysqld</code> process should be
running fine and dandy as the Unix user <code>user_name</code>. One
thing hasn't changed, though: the contents of the permissions
tables. By default (right after running the permissions table
install script <code>mysql_install_db</code>), the MySQL user
<code>root</code> is the only user with permission to access the
<code>mysql</code> database or to create or drop databases. Unless
you have changed those permissions, they still hold. This shouldn't
stop you from accessing MySQL as the MySQL <code>root</code> user
when you're logged in as a Unix user other than <code>root</code>;
just specify the <code>-u root</code> option to the client
program.</p>

<p>Note that accessing MySQL as <code>root</code>, by supplying
<code>-u root</code> on the command-line, has
<strong>nothing</strong> to do with MySQL running as the Unix
<code>root</code> user, or, indeed, as another Unix user. The
access permissions and user names of MySQL are completely separate
from Unix user names. The only connection with Unix user names is
that if you don't provide a <code>-u</code> option when you invoke
a client program, the client will try to connect using your Unix
login name as your MySQL user name.</p>

<p>If your Unix box itself isn't secured, you should probably at
least put a password on the MySQL <code>root</code> users in the
access tables. Otherwise, any user with an account on that machine
can run <code>mysql -u root db_name</code> and do whatever he
likes.</p>

<h3><a id="File_permissions" name="File_permissions"
href="manual_toc.html#File_permissions">A.3.3 Problems with File
Permissions</a></h3>

<p><a id="IDX1773" name="IDX1773"></a> <a id="IDX1774"
name="IDX1774"></a> <a id="IDX1775" name="IDX1775"></a></p>

<p>If you have problems with file permissions, for example, if
<code>mysql</code> issues the following error message when you
create a table:</p>

<pre>
ERROR: Can't find file: 'path/with/filename.frm' (Errcode: 13)
</pre>

<p><a id="IDX1776" name="IDX1776"></a> <a id="IDX1777"
name="IDX1777"></a> then the environment variable
<code>UMASK</code> might be set incorrectly when
<code>mysqld</code> starts up. The default umask value is
<code>0660</code>. You can change this behaviour by starting
<code>safe_mysqld</code> as follows:</p>

<pre>
shell&gt; UMASK=384  # = 600 in octal
shell&gt; export UMASK
shell&gt; /path/to/safe_mysqld &amp;
</pre>

<p><a id="IDX1778" name="IDX1778"></a> <a id="IDX1779"
name="IDX1779"></a> By default MySQL will create database and
<code>RAID</code> directories with permission type 0700. You can
modify this behaviour by setting the <code>UMASK_DIR</code>
variable. If you set this, new directories are created with the
combined <code>UMASK</code> and <code>UMASK_DIR</code>. For
example, if you want to give group access to all new directories,
you can do:</p>

<pre>
shell&gt; UMASK_DIR=504  # = 770 in octal
shell&gt; export UMASK_DIR
shell&gt; /path/to/safe_mysqld &amp;
</pre>

<p>In MySQL Version 3.23.25 and above, MySQL assumes that the value
for <code>UMASK</code> and <code>UMASK_DIR</code> is in octal if it
starts with a zero.</p>

<p>See section <a href="manual.html#Environment_variables">F
Environment Variables</a>.</p>

<h2><a id="Administration_Issues" name="Administration_Issues"
href="manual_toc.html#Administration_Issues">A.4 Administration
Related Issues</a></h2>

<h3><a id="Crashing" name="Crashing"
href="manual_toc.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a></h3>

<p><a id="IDX1780" name="IDX1780"></a></p>

<p>All MySQL versions are tested on many platforms before they are
released. This doesn't mean that there aren't any bugs in MySQL,
but it means if there are bugs, they are very few and can be hard
to find. If you have a problem, it will always help if you try to
find out exactly what crashes your system, as you will have a much
better chance of getting this fixed quickly.</p>

<p>First, you should try to find out whether the problem is that
the <code>mysqld</code> daemon dies or whether your problem has to
do with your client. You can check how long your
<code>mysqld</code> server has been up by executing
<code>mysqladmin version</code>. If <code>mysqld</code> has died,
you may find the reason for this in the file
<tt>`mysql-data-directory/`hostname`.err'</tt>. See section <a
href="manual.html#Error_log">4.9.1 The Error Log</a>.</p>

<p>Many crashes of MySQL are caused by corrupted index / data
files. MySQL will update the data on disk, with the
<code>write()</code> system call, after every SQL statement and
before the client is notified about the result. (This is not true
if you are running with <code>delay_key_write</code>, in which case
only the data is written.) This means that the data is safe even if
<code>mysqld</code> crashes, as the OS will ensure that the not
flushed data is written to disk. You can force MySQL to sync
everything to disk after every SQL command by starting
<code>mysqld</code> with <code>--flush</code>.</p>

<p>The above means that normally you shouldn't get corrupted tables
unless:</p>

<ul>
<li>Someone/something killed <code>mysqld</code> or the machine in
the middle of an update.</li>

<li>You have found a bug in <code>mysqld</code> that caused it to
die in the middle of an update.</li>

<li>Someone is manipulating the data/index files outside of
<strong>mysqld</strong> without locking the table properly.</li>

<li>If you are running many <code>mysqld</code> servers on the same
data on a system that doesn't support good filesystem locks
(normally handled by the <code>lockd</code> daemon ) or if you are
running multiple servers with
<code>--skip-external-locking</code></li>

<li>You have a crashed index/datafile that contains very wrong data
that got <code>mysqld</code> confused.</li>

<li>You have found a bug in the data storage code. This isn't that
likely, but it's at least possible. In this case you can try to
change the file type to another storage engine by using <code>ALTER
TABLE</code> on a repaired copy of the table!</li>
</ul>

<p>Because it is very difficult to know why something is crashing,
first try to check whether things that work for others crash for
you. Please try the following things:</p>

<ul>
<li style="list-style: none">Take down the <code>mysqld</code>
daemon with <code>mysqladmin shutdown</code>, run <code>myisamchk
--silent --force */*.MYI</code> on all tables, and restart the
<code>mysqld</code> daemon. This will ensure that you are running
from a clean state. See section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>.</li>

<li>Use <code>mysqld --log</code> and try to determine from the
information in the log whether some specific query kills the
server. About 95% of all bugs are related to a particular query!
Normally this is one of the last queries in the log file just
before MySQL restarted. See section <a
href="manual.html#Query_log">4.9.2 The General Query Log</a>. If
you can repeatadly kill MySQL with one of the queries, even when
you have checked all tables just before doing the query, then you
have been able to locate the bug and should do a bug report for
this! See section <a href="manual.html#Bug_reports">1.6.1.3 How to
Report Bugs or Problems</a>.</li>

<li>Try to make a test case that we can use to reproduce the
problem. See section <a
href="manual.html#Reproduceable_test_case">E.1.6 Making a Test Case
When You Experience Table Corruption</a>.</li>

<li>Try running the included mysql-test test and the MySQL
benchmarks. See section <a
href="manual.html#MySQL_test_suite">9.1.2 MySQL Test Suite</a>.
They should test MySQL rather well. You can also add code that to
the benchmarks to simulates your application! The benchmarks can be
found in the <tt>`bench'</tt> directory in the source distribution
or, for a binary distribution, in the <tt>`sql-bench'</tt>
directory under your MySQL installation directory.</li>

<li>Try <code>fork_test.pl</code> and
<code>fork2_test.pl</code>.</li>

<li>If you configure MySQL for debugging, it will be much easier to
gather information about possible errors if something goes wrong.
Reconfigure MySQL with the <code>--with-debug</code> option or
<code>--with-debug=full</code> to <code>configure</code> and then
recompile. See section <a href="manual.html#Debugging_server">E.1
Debugging a MySQL server</a>.</li>

<li>Configuring MySQL for debugging causes a safe memory allocator
to be included that can find some errors. It also provides a lot of
output about what is happening.</li>

<li>Have you applied the latest patches for your operating
system?</li>

<li>Use the <code>--skip-external-locking</code> option to
<code>mysqld</code>. On some systems, the <code>lockd</code> lock
manager does not work properly; the
<code>--skip-external-locking</code> option tells
<code>mysqld</code> not to use external locking. (This means that
you cannot run 2 <code>mysqld</code> servers on the same data and
that you must be careful if you use <code>myisamchk</code>, but it
may be instructive to try the option as a test.)</li>

<li>Have you tried <code>mysqladmin -u root processlist</code> when
<code>mysqld</code> appears to be running but not responding?
Sometimes <code>mysqld</code> is not comatose even though you might
think so. The problem may be that all connections are in use, or
there may be some internal lock problem. <code>mysqladmin
processlist</code> will usually be able to make a connection even
in these cases, and can provide useful information about the
current number of connections and their status.</li>

<li>Run the command <code>mysqladmin -i 5 status</code> or
<code>mysqladmin -i 5 -r status</code> or in a separate window to
produce statistics while you run your other queries.</li>

<li>Try the following: 

<ol>
<li>Start <code>mysqld</code> from <code>gdb</code> (or in another
debugger). See section <a
href="manual.html#Using_gdb_on_mysqld">E.1.3 Debugging mysqld under
gdb</a>.</li>

<li>Run your test scripts.</li>

<li>Print the backtrace and the local variables at the 3 lowest
levels. In gdb you can do this with the following commands when
<code>mysqld</code> has crashed inside gdb: 

<pre>
backtrace
info local
up
info local
up
info local
</pre>

With gdb you can also examine which threads exist with <code>info
threads</code> and switch to a specific thread with <code>thread
#</code>, where <code>#</code> is the thread id.</li>
</ol>
</li>

<li>Try to simulate your application with a Perl script to force
MySQL to crash or misbehave.</li>

<li>Send a normal bug report. See section <a
href="manual.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a>. Be even more detailed than usual. Because MySQL works
for many people, it may be that the crash results from something
that exists only on your computer (for example, an error that is
related to your particular system libraries).</li>

<li>If you have a problem with tables with dynamic-length rows and
you are not using <code>BLOB/TEXT</code> columns (but only
<code>VARCHAR</code> columns), you can try to change all
<code>VARCHAR</code> to <code>CHAR</code> with <code>ALTER
TABLE</code>. This will force MySQL to use fixed-size rows.
Fixed-size rows take a little extra space, but are much more
tolerant to corruption! The current dynamic row code has been in
use at MySQL AB for at least 3 years without any problems, but by
nature dynamic-length rows are more prone to errors, so it may be a
good idea to try the above to see if it helps!</li>
</ul>

<h3><a id="Resetting_permissions" name="Resetting_permissions"
href="manual_toc.html#Resetting_permissions">A.4.2 How to Reset a
Forgotten Root Password</a></h3>

<p><a id="IDX1781" name="IDX1781"></a> <a id="IDX1782"
name="IDX1782"></a> <a id="IDX1783" name="IDX1783"></a></p>

<p>If you never set a <code>root</code> password for MySQL, then
the server will not require a password at all for connecting as
<code>root</code>. It is recommended to always set a password for
each user. See section <a href="manual.html#Security">4.2.2 How to
Make MySQL Secure Against Crackers</a>.</p>

<p>If you have set a <code>root</code> password, but forgot what it
was, you can set a new password with the following procedure:</p>

<ol>
<li>Take down the <code>mysqld</code> server by sending a
<code>kill</code> (not <code>kill -9</code>) to the
<code>mysqld</code> server. The pid is stored in a <tt>`.pid'</tt>
file, which is normally in the MySQL database directory: 

<pre>
shell&gt; kill `cat /mysql-data-directory/hostname.pid`
</pre>

You must be either the Unix <code>root</code> user or the same user
<code>mysqld</code> runs as to do this.</li>

<li>Restart <code>mysqld</code> with the
<code>--skip-grant-tables</code> option.</li>

<li>Set a new password with the <code>mysqladmin password</code>
command: 

<pre>
shell&gt; mysqladmin -u root password 'mynewpassword'
</pre>
</li>

<li>Now you can either stop <code>mysqld</code> and restart it
normally, or just load the privilege tables with: 

<pre>
shell&gt; mysqladmin -h hostname flush-privileges
</pre>
</li>

<li>After this, you should be able to connect using the new
password.</li>
</ol>

<p>Alternatively, you can set the new password using the
<code>mysql</code> client:</p>

<ol>
<li>Take down and restart <code>mysqld</code> with the
<code>--skip-grant-tables</code> option as described above.</li>

<li>Connect to the <code>mysqld</code> server with: 

<pre>
shell&gt; mysql -u root mysql
</pre>
</li>

<li>Issue the following commands in the <code>mysql</code> client: 

<pre>
mysql&gt; UPDATE user SET Password=PASSWORD('mynewpassword')
    -&gt;             WHERE User='root';
mysql&gt; FLUSH PRIVILEGES;
</pre>
</li>

<li>After this, you should be able to connect using the new
password.</li>

<li>You can now stop <code>mysqld</code> and restart it
normally.</li>
</ol>

<h3><a id="Full_disk" name="Full_disk"
href="manual_toc.html#Full_disk">A.4.3 How MySQL Handles a Full
Disk</a></h3>

<p><a id="IDX1784" name="IDX1784"></a> <a id="IDX1785"
name="IDX1785"></a></p>

<p>When a disk-full condition occurs, MySQL does the following:</p>

<ul>
<li>It checks once every minute to see whether there is enough
space to write the current row. If there is enough space, it
continues as if nothing had happened.</li>

<li>Every 6 minutes it writes an entry to the log file warning
about the disk full condition.</li>
</ul>

<p>To alleviate the problem, you can take the following
actions:</p>

<ul>
<li>To continue, you only have to free enough disk space to insert
all records.</li>

<li>To abort the thread, you must send a <code>mysqladmin
kill</code> to the thread. The thread will be aborted the next time
it checks the disk (in 1 minute).</li>

<li>Note that other threads may be waiting for the table that
caused the disk full condition. If you have several ``locked''
threads, killing the one thread that is waiting on the disk-full
condition will allow the other threads to continue.</li>
</ul>

<p>Exceptions to the above behaveour is when you use
<code>REPAIR</code> or <code>OPTIMIZE</code> or when the indexes
are created in a batch after an <code>LOAD DATA INFILE</code> or
after an <code>ALTER TABLE</code> statement.</p>

<p>All of the above commands may use big temporary files that left
to themself would cause big problems for the rest of the system. If
MySQL gets disk full while doing any of the above operations, it
will remove the big temporary files and mark the table as crashed
(except for <code>ALTER TABLE</code>, in which the old table will
be left unchanged).</p>

<h3><a id="Temporary_files" name="Temporary_files"
href="manual_toc.html#Temporary_files">A.4.4 Where MySQL Stores
Temporary Files</a></h3>

<p>MySQL uses the value of the <code>TMPDIR</code> environment
variable as the pathname of the directory in which to store
temporary files. If you don't have <code>TMPDIR</code> set, MySQL
uses the system default, which is normally <tt>`/tmp'</tt> or
<tt>`/usr/tmp'</tt>. If the filesystem containing your temporary
file directory is too small, you should edit
<code>safe_mysqld</code> to set <code>TMPDIR</code> to point to a
directory in a filesystem where you have enough space! You can also
set the temporary directory using the <code>--tmpdir</code> option
to <code>mysqld</code>.</p>

<p>MySQL creates all temporary files as hidden files. This ensures
that the temporary files will be removed if <code>mysqld</code> is
terminated. The disadvantage of using hidden files is that you will
not see a big temporary file that fills up the filesystem in which
the temporary file directory is located.</p>

<p>When sorting (<code>ORDER BY</code> or <code>GROUP BY</code>),
MySQL normally uses one or two temporary files. The maximum
disk-space needed is:</p>

<pre>
(length of what is sorted + sizeof(database pointer))
* number of matched rows
* 2
</pre>

<p><code>sizeof(database pointer)</code> is usually 4, but may grow
in the future for really big tables.</p>

<p>For some <code>SELECT</code> queries, MySQL also creates
temporary SQL tables. These are not hidden and have names of the
form <tt>`SQL_*'</tt>.</p>

<p><code>ALTER TABLE</code> creates a temporary table in the same
directory as the original table.</p>

<h3><a id="Problems_with_mysql.sock"
name="Problems_with_mysql.sock"
href="manual_toc.html#Problems_with_mysql.sock">A.4.5 How to
Protect or Change the MySQL Socket File
<tt>`/tmp/mysql.sock'</tt></a></h3>

<p><a id="IDX1786" name="IDX1786"></a> <a id="IDX1787"
name="IDX1787"></a></p>

<p>If you have problems with the fact that anyone can delete the
MySQL communication socket <tt>`/tmp/mysql.sock'</tt>, you can, on
most versions of Unix, protect your <tt>`/tmp'</tt> filesystem by
setting the <code>sticky</code> bit on it. Log in as
<code>root</code> and do the following:</p>

<pre>
shell&gt; chmod +t /tmp
</pre>

<p>This will protect your <tt>`/tmp'</tt> filesystem so that files
can be deleted only by their owners or the superuser
(<code>root</code>).</p>

<p>You can check if the <code>sticky</code> bit is set by executing
<code>ls -ld /tmp</code>. If the last permission bit is
<code>t</code>, the bit is set.</p>

<p><a id="IDX1788" name="IDX1788"></a></p>

<p>You can change the place where MySQL uses / puts the socket file
the following ways:</p>

<ul>
<li>Specify the path in a global or local option file. For example,
put in <code>/etc/my.cnf</code>: 

<pre>
[client]
socket=path-for-socket-file

[mysqld]
socket=path-for-socket-file
</pre>

See section <a href="manual.html#Option_files">4.1.2
<tt>`my.cnf'</tt> Option Files</a>.</li>

<li>Specifying this on the command-line to <code>safe_mysqld</code>
and most clients with the
<code>--socket=path-for-socket-file</code> option.</li>

<li>Specify the path to the socket in the
<code>MYSQL_UNIX_PORT</code> environment variable.</li>

<li>Defining the path with the <code>configure</code> option
<code>--with-unix-socket-path=path-for-socket-file</code>. See
section <a href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>.</li>
</ul>

<p>You can test that the socket works with this command:</p>

<pre>
shell&gt; mysqladmin --socket=/path/to/socket version
</pre>

<h3><a id="Timezone_problems" name="Timezone_problems"
href="manual_toc.html#Timezone_problems">A.4.6 Time Zone
Problems</a></h3>

<p><a id="IDX1789" name="IDX1789"></a> <a id="IDX1790"
name="IDX1790"></a></p>

<p><a id="IDX1791" name="IDX1791"></a> <a id="IDX1792"
name="IDX1792"></a></p>

<p>If you have a problem with <code>SELECT NOW()</code> returning
values in GMT and not your local time, you have to set the
<code>TZ</code> environment variable to your current time zone.
This should be done for the environment in which the server runs,
for example, in <code>safe_mysqld</code> or
<code>mysql.server</code>. See section <a
href="manual.html#Environment_variables">F Environment
Variables</a>.</p>

<h2><a id="Query_Issues" name="Query_Issues"
href="manual_toc.html#Query_Issues">A.5 Query Related
Issues</a></h2>

<h3><a id="Case_sensitivity" name="Case_sensitivity"
href="manual_toc.html#Case_sensitivity">A.5.1 Case-Sensitivity in
Searches</a></h3>

<p><a id="IDX1793" name="IDX1793"></a> <a id="IDX1794"
name="IDX1794"></a> <a id="IDX1795" name="IDX1795"></a> <a
id="IDX1796" name="IDX1796"></a></p>

<p>By default, MySQL searches are case-insensitive (although there
are some character sets that are never case-insensitive, such as
<code>czech</code>). That means that if you search with
<code>col_name LIKE 'a%'</code>, you will get all column values
that start with <code>A</code> or <code>a</code>. If you want to
make this search case-sensitive, use something like
<code>INSTR(col_name, "A")=1</code> to check a prefix. Or use
<code>STRCMP(col_name, "A") = 0</code> if the column value must be
exactly <code>"A"</code>.</p>

<p>Simple comparison operations (<code>&gt;=, &gt;, = , &lt; ,
&lt;=</code>, sorting and grouping) are based on each character's
``sort value''. Characters with the same sort value (like E, e and
é) are treated as the same character!</p>

<p>In older MySQL versions <code>LIKE</code> comparisons where done
on the uppercase value of each character (E == e but E &lt;&gt; é).
In newer MySQL versions <code>LIKE</code> works just like the other
comparison operators.</p>

<p>If you want a column always to be treated in case-sensitive
fashion, declare it as <code>BINARY</code>. See section <a
href="manual.html#CREATE_TABLE">6.5.3 <code>CREATE TABLE</code>
Syntax</a>.</p>

<p>If you are using Chinese data in the so-called big5 encoding,
you want to make all character columns <code>BINARY</code>. This
works because the sorting order of big5 encoding characters is
based on the order of ASCII codes.</p>

<h3><a id="Using_DATE" name="Using_DATE"
href="manual_toc.html#Using_DATE">A.5.2 Problems Using
<code>DATE</code> Columns</a></h3>

<p><a id="IDX1797" name="IDX1797"></a></p>

<p><a id="IDX1798" name="IDX1798"></a> <a id="IDX1799"
name="IDX1799"></a></p>

<p>The format of a <code>DATE</code> value is
<code>'YYYY-MM-DD'</code>. According to ANSI SQL, no other format
is allowed. You should use this format in <code>UPDATE</code>
expressions and in the WHERE clause of <code>SELECT</code>
statements. For example:</p>

<pre>
mysql&gt; SELECT * FROM tbl_name WHERE date &gt;= '1997-05-05';
</pre>

<p>As a convenience, MySQL automatically converts a date to a
number if the date is used in a numeric context (and vice versa).
It is also smart enough to allow a ``relaxed'' string form when
updating and in a <code>WHERE</code> clause that compares a date to
a <code>TIMESTAMP</code>, <code>DATE</code>, or a
<code>DATETIME</code> column. (Relaxed form means that any
punctuation character may be used as the separator between parts.
For example, <code>'1998-08-15'</code> and
<code>'1998#08#15'</code> are equivalent.) MySQL can also convert a
string containing no separators (such as <code>'19980815'</code>),
provided it makes sense as a date.</p>

<p>The special date <code>'0000-00-00'</code> can be stored and
retrieved as <code>'0000-00-00'.</code> When using a
<code>'0000-00-00'</code> date through <code>MyODBC</code>, it will
automatically be converted to <code>NULL</code> in
<code>MyODBC</code> Version 2.50.12 and above, because ODBC can't
handle this kind of date.</p>

<p>Because MySQL performs the conversions described above, the
following statements work:</p>

<pre>
mysql&gt; INSERT INTO tbl_name (idate) VALUES (19970505);
mysql&gt; INSERT INTO tbl_name (idate) VALUES ('19970505');
mysql&gt; INSERT INTO tbl_name (idate) VALUES ('97-05-05');
mysql&gt; INSERT INTO tbl_name (idate) VALUES ('1997.05.05');
mysql&gt; INSERT INTO tbl_name (idate) VALUES ('1997 05 05');
mysql&gt; INSERT INTO tbl_name (idate) VALUES ('0000-00-00');

mysql&gt; SELECT idate FROM tbl_name WHERE idate &gt;= '1997-05-05';
mysql&gt; SELECT idate FROM tbl_name WHERE idate &gt;= 19970505;
mysql&gt; SELECT MOD(idate,100) FROM tbl_name WHERE idate &gt;= 19970505;
mysql&gt; SELECT idate FROM tbl_name WHERE idate &gt;= '19970505';
</pre>

<p>However, the following will not work:</p>

<pre>
mysql&gt; SELECT idate FROM tbl_name WHERE STRCMP(idate,'19970505')=0;
</pre>

<p><code>STRCMP()</code> is a string function, so it converts
<code>idate</code> to a string and performs a string comparison. It
does not convert <code>'19970505'</code> to a date and perform a
date comparison.</p>

<p>Note that MySQL does very limited checking whether the date is
correct. If you store an incorrect date, such as
<code>'1998-2-31'</code>, the wrong date will be stored.</p>

<p>Because MySQL packs dates for storage, it can't store any given
date as it would not fit onto the result buffer. The rules for
accepting a date are:</p>

<ul>
<li>If MySQL can store and retrieve a given date, the wrong date is
accepted for <code>DATE</code> and <code>DATETIME</code>
columns.</li>

<li>All days values between 0-31 are accepted for any date. This
makes it very convenient for web applications where you ask year,
month and day in 3 different fields.</li>

<li>The day or month field may be zero. This is convenient if you
want to store a birthdate in a <code>DATE</code> column and you
only know part of the date.</li>
</ul>

<p>If the date cannot be converted to any reasonable value, a
<code>0</code> is stored in the <code>DATE</code> field, which will
be retrieved as <code>0000-00-00</code>. This is both a speed and
convenience issue as we believe that the database's responsiblity
is to retrieve the same date you stored (even if the data was not
logically correct in all cases). We think it is up to the
application to check the dates, and not the server.</p>

<h3><a id="Problems_with_NULL" name="Problems_with_NULL"
href="manual_toc.html#Problems_with_NULL">A.5.3 Problems with
<code>NULL</code> Values</a></h3>

<p><a id="IDX1800" name="IDX1800"></a></p>

<p><a id="IDX1801" name="IDX1801"></a></p>

<p>The concept of the <code>NULL</code> value is a common source of
confusion for newcomers to SQL, who often think that
<code>NULL</code> is the same thing as an empty string
<code>""</code>. This is not the case! For example, the following
statements are completely different:</p>

<pre>
mysql&gt; INSERT INTO my_table (phone) VALUES (NULL);
mysql&gt; INSERT INTO my_table (phone) VALUES ("");
</pre>

<p>Both statements insert a value into the <code>phone</code>
column, but the first inserts a <code>NULL</code> value and the
second inserts an empty string. The meaning of the first can be
regarded as ``phone number is not known'' and the meaning of the
second can be regarded as ``she has no phone''.</p>

<p>In SQL, the <code>NULL</code> value is always false in
comparison to any other value, even <code>NULL</code>. An
expression that contains <code>NULL</code> always produces a
<code>NULL</code> value unless otherwise indicated in the
documentation for the operators and functions involved in the
expression. All columns in the following example return
<code>NULL</code>:</p>

<pre>
mysql&gt; SELECT NULL,1+NULL,CONCAT('Invisible',NULL);
</pre>

<p>If you want to search for column values that are
<code>NULL</code>, you cannot use the <code>=NULL</code> test. The
following statement returns no rows, because <code>expr =
NULL</code> is FALSE, for any expression:</p>

<pre>
mysql&gt; SELECT * FROM my_table WHERE phone = NULL;
</pre>

<p>To look for <code>NULL</code> values, you must use the <code>IS
NULL</code> test. The following shows how to find the
<code>NULL</code> phone number and the empty phone number:</p>

<pre>
mysql&gt; SELECT * FROM my_table WHERE phone IS NULL;
mysql&gt; SELECT * FROM my_table WHERE phone = "";
</pre>

<p>Note that you can only add an index on a column that can have
<code>NULL</code> values if you are using MySQL Version 3.23.2 or
newer and are using the <code>MyISAM</code> or <code>InnoDB</code>
table type. In earlier versions and with other table types, you
must declare such columns <code>NOT NULL</code>. This also means
you cannot then insert <code>NULL</code> into an indexed
column.</p>

<p><a id="IDX1802" name="IDX1802"></a> When reading data with
<code>LOAD DATA INFILE</code>, empty columns are updated with
<code>''</code>. If you want a <code>NULL</code> value in a column,
you should use <code>\N</code> in the text file. The literal word
<code>'NULL'</code> may also be used under some circumstances. See
section <a href="manual.html#LOAD_DATA">6.4.9 <code>LOAD DATA
INFILE</code> Syntax</a>.</p>

<p>When using <code>ORDER BY</code>, <code>NULL</code> values are
presented first. In versions prior to 4.0.2, if you sort in
descending order using <code>DESC</code>, <code>NULL</code> values
are presented last. When using <code>GROUP BY</code>, all
<code>NULL</code> values are regarded as equal.</p>

<p>To help with <code>NULL</code> handling, you can use the
<code>IS NULL</code> and <code>IS NOT NULL</code> operators and the
<code>IFNULL()</code> function.</p>

<p><a id="IDX1803" name="IDX1803"></a> <a id="IDX1804"
name="IDX1804"></a> <a id="IDX1805" name="IDX1805"></a> <a
id="IDX1806" name="IDX1806"></a> For some column types,
<code>NULL</code> values are handled specially. If you insert
<code>NULL</code> into the first <code>TIMESTAMP</code> column of a
table, the current date and time is inserted. If you insert
<code>NULL</code> into an <code>AUTO_INCREMENT</code> column, the
next number in the sequence is inserted.</p>

<h3><a id="Problems_with_alias" name="Problems_with_alias"
href="manual_toc.html#Problems_with_alias">A.5.4 Problems with
<code>alias</code></a></h3>

<p><a id="IDX1807" name="IDX1807"></a></p>

<p>You can use an alias to refer to a column in the <code>GROUP
BY</code>, <code>ORDER BY</code>, or in the <code>HAVING</code>
part. Aliases can also be used to give columns better names:</p>

<pre>
SELECT SQRT(a*b) as rt FROM table_name GROUP BY rt HAVING rt &gt; 0;
SELECT id,COUNT(*) AS cnt FROM table_name GROUP BY id HAVING cnt &gt; 0;
SELECT id AS "Customer identity" FROM table_name;
</pre>

<p>Note that ANSI SQL doesn't allow you to refer to an alias in a
<code>WHERE</code> clause. This is because when the
<code>WHERE</code> code is executed the column value may not yet be
determined. For example, the following query is
<strong>illegal</strong>:</p>

<pre>
SELECT id,COUNT(*) AS cnt FROM table_name WHERE cnt &gt; 0 GROUP BY id;
</pre>

<p>The <code>WHERE</code> statement is executed to determine which
rows should be included in the <code>GROUP BY</code> part while
<code>HAVING</code> is used to decide which rows from the result
set should be used.</p>

<h3><a id="Deleting_from_related_tables"
name="Deleting_from_related_tables"
href="manual_toc.html#Deleting_from_related_tables">A.5.5 Deleting
Rows from Related Tables</a></h3>

<p><a id="IDX1808" name="IDX1808"></a> <a id="IDX1809"
name="IDX1809"></a> <a id="IDX1810" name="IDX1810"></a></p>

<p>As MySQL doesn't yet support subselects, nor the use of more
than one table in the <code>DELETE</code> statement (prior to
Version 4.0), you should use the following approach to delete rows
from 2 related tables:</p>

<ol>
<li><code>SELECT</code> the rows based on some <code>WHERE</code>
condition in the main table.</li>

<li><code>DELETE</code> the rows in the main table based on the
same condition.</li>

<li><code>DELETE FROM related_table WHERE related_column IN
(selected_rows)</code>.</li>
</ol>

<p>If the total number of characters in the query with
<code>related_column</code> is more than 1,048,576 (the default
value of <code>max_allowed_packet</code>, you should split it into
smaller parts and execute multiple <code>DELETE</code> statements.
You will probably get the fastest <code>DELETE</code> by only
deleting 100-1000 <code>related_column</code> id's per query if the
<code>related_column</code> is an index. If the
<code>related_column</code> isn't an index, the speed is
independent of the number of arguments in the <code>IN</code>
clause.</p>

<h3><a id="No_matching_rows" name="No_matching_rows"
href="manual_toc.html#No_matching_rows">A.5.6 Solving Problems with
No Matching Rows</a></h3>

<p><a id="IDX1811" name="IDX1811"></a> <a id="IDX1812"
name="IDX1812"></a></p>

<p>If you have a complicated query that has many tables and that
doesn't return any rows, you should use the following procedure to
find out what is wrong with your query:</p>

<ol>
<li>Test the query with <code>EXPLAIN</code> and check if you can
find something that is obviously wrong. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</li>

<li>Select only those fields that are used in the
<code>WHERE</code> clause.</li>

<li>Remove one table at a time from the query until it returns some
rows. If the tables are big, it's a good idea to use <code>LIMIT
10</code> with the query.</li>

<li>Do a <code>SELECT</code> for the column that should have
matched a row against the table that was last removed from the
query.</li>

<li>If you are comparing <code>FLOAT</code> or <code>DOUBLE</code>
columns with numbers that have decimals, you can't use
<code>'='</code>. This problem is common in most computer languages
because floating-point values are not exact values. In most cases,
changing the <code>FLOAT</code> to a <code>DOUBLE</code> will fix
this. See section <a href="manual.html#Problems_with_float">A.5.7
Problems with Floating-Point Comparison</a>.</li>

<li>If you still can't figure out what's wrong, create a minimal
test that can be run with <code>mysql test &lt; query.sql</code>
that shows your problems. You can create a test file with
<code>mysqldump --quick database tables &gt; query.sql</code>. Open
the file in an editor, remove some insert lines (if there are too
many of these), and add your select statement at the end of the
file. Test that you still have your problem by doing: 

<pre>
shell&gt; mysqladmin create test2
shell&gt; mysql test2 &lt; query.sql
</pre>

Post the test file using <code>mysqlbug</code> to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>.</li>
</ol>

<h3><a id="Problems_with_float" name="Problems_with_float"
href="manual_toc.html#Problems_with_float">A.5.7 Problems with
Floating-Point Comparison</a></h3>

<p>floating-point numbers cause confusion sometimes, because these
numbers are not stored as exact values inside computer
architecture. What one can see on the screen usually is not the
exact value of the number.</p>

<p>Field types <code>FLOAT</code>, <code>DOUBLE</code> and
<code>DECIMAL</code> are such.</p>

<pre>
CREATE TABLE t1 (i INT, d1 DECIMAL(9,2), d2 DECIMAL(9,2));
INSERT INTO t1 VALUES (1, 101.40, 21.40), (1, -80.00, 0.00),
(2, 0.00, 0.00), (2, -13.20, 0.00), (2, 59.60, 46.40),
(2, 30.40, 30.40), (3, 37.00, 7.40), (3, -29.60, 0.00),
(4, 60.00, 15.40), (4, -10.60, 0.00), (4, -34.00, 0.00),
(5, 33.00, 0.00), (5, -25.80, 0.00), (5, 0.00, 7.20),
(6, 0.00, 0.00), (6, -51.40, 0.00);

mysql&gt; SELECT i, SUM(d1) AS a, SUM(d2) AS b
    -&gt; FROM t1 GROUP BY i HAVING a &lt;&gt; b;
+------+--------+-------+
| i    | a      | b     |
+------+--------+-------+
|    1 |  21.40 | 21.40 |
|    2 |  76.80 | 76.80 |
|    3 |   7.40 |  7.40 |
|    4 |  15.40 | 15.40 |
|    5 |   7.20 |  7.20 |
|    6 | -51.40 |  0.00 |
+------+--------+-------+
</pre>

<p>The result is correct. Although the first five records look like
they shouldn't pass the comparison test, they may do so because the
difference between the numbers show up around tenth decimal, or so
depending on computer architecture.</p>

<p>The problem cannot be solved by using ROUND() (or similar
function), because the result is still a floating-point number.
Example:</p>

<pre>
mysql&gt; SELECT i, ROUND(SUM(d1), 2) AS a, ROUND(SUM(d2), 2) AS b
    -&gt; FROM t1 GROUP BY i HAVING a &lt;&gt; b;
+------+--------+-------+
| i    | a      | b     |
+------+--------+-------+
|    1 |  21.40 | 21.40 |
|    2 |  76.80 | 76.80 |
|    3 |   7.40 |  7.40 |
|    4 |  15.40 | 15.40 |
|    5 |   7.20 |  7.20 |
|    6 | -51.40 |  0.00 |
+------+--------+-------+
</pre>

<p>This is what the numbers in column 'a' look like:</p>

<pre>
mysql&gt; SELECT i, ROUND(SUM(d1), 2)*1.0000000000000000 AS a,
    -&gt; ROUND(SUM(d2), 2) AS b FROM t1 GROUP BY i HAVING a &lt;&gt; b;
+------+----------------------+-------+
| i    | a                    | b     |
+------+----------------------+-------+
|    1 |  21.3999999999999986 | 21.40 |
|    2 |  76.7999999999999972 | 76.80 |
|    3 |   7.4000000000000004 |  7.40 |
|    4 |  15.4000000000000004 | 15.40 |
|    5 |   7.2000000000000002 |  7.20 |
|    6 | -51.3999999999999986 |  0.00 |
+------+----------------------+-------+
</pre>

<p>Depending on the computer architecture you may or may not see
similar results. Each CPU may evaluate floating-point numbers
differently. For example in some machines you may get 'right'
results by multiplaying both arguments with 1, an example
follows.</p>

<p><strong>WARNING: NEVER TRUST THIS METHOD IN YOUR APPLICATION,
THIS IS AN EXAMPLE OF A WRONG METHOD!!!</strong></p>

<pre>
mysql&gt; SELECT i, ROUND(SUM(d1), 2)*1 AS a, ROUND(SUM(d2), 2)*1 AS b
    -&gt; FROM t1 GROUP BY i HAVING a &lt;&gt; b;
+------+--------+------+
| i    | a      | b    |
+------+--------+------+
|    6 | -51.40 | 0.00 |
+------+--------+------+
</pre>

<p>The reason why the above example seems to be working is that on
the particular machine where the test was done, the CPU
floating-point arithmetics happens to round the numbers to same,
but there is no rule that any CPU should do so, so it cannot be
trusted.</p>

<p>The correct way to do floating-point number comparison is to
first decide on what is the wanted tolerance between the numbers
and then do the comparsion against the tolerance number. For
example, if we agree on that floating-point numbers should be
regarded the same, if they are same with precision of one of ten
thousand (0.0001), the comparsion should be done like this:</p>

<pre>
mysql&gt; SELECT i, SUM(d1) AS a, SUM(d2) AS b FROM t1
    -&gt; GROUP BY i HAVING ABS(a - b) &gt; 0.0001;
+------+--------+------+
| i    | a      | b    |
+------+--------+------+
|    6 | -51.40 | 0.00 |
+------+--------+------+
1 row in set (0.00 sec)
</pre>

<p>And vice versa, if we wanted to get rows where the numbers are
the same, the test would be:</p>

<pre>
mysql&gt; SELECT i, SUM(d1) AS a, SUM(d2) AS b FROM t1
    -&gt; GROUP BY i HAVING ABS(a - b) &lt; 0.0001;
+------+-------+-------+
| i    | a     | b     |
+------+-------+-------+
|    1 | 21.40 | 21.40 |
|    2 | 76.80 | 76.80 |
|    3 |  7.40 |  7.40 |
|    4 | 15.40 | 15.40 |
|    5 |  7.20 |  7.20 |
+------+-------+-------+
</pre>

<h2><a id="Table_Definition_Issues" name="Table_Definition_Issues"
href="manual_toc.html#Table_Definition_Issues">A.6 Table Definition
Related Issues</a></h2>

<h3><a id="ALTER_TABLE_problems" name="ALTER_TABLE_problems"
href="manual_toc.html#ALTER_TABLE_problems">A.6.1 Problems with
<code>ALTER TABLE</code>.</a></h3>

<p><a id="IDX1813" name="IDX1813"></a> <a id="IDX1814"
name="IDX1814"></a> <a id="IDX1815" name="IDX1815"></a></p>

<p><code>ALTER TABLE</code> changes a table to the current
character set. If you during <code>ALTER TABLE</code> get a
duplicate key error, then the cause is either that the new
character sets maps to keys to the same value or that the table is
corrupted, in which case you should run <code>REPAIR TABLE</code>
on the table.</p>

<p>If <code>ALTER TABLE</code> dies with an error like this:</p>

<pre>
Error on rename of './database/name.frm' to './database/B-a.frm' (Errcode: 17)
</pre>

<p>the problem may be that MySQL has crashed in a previous
<code>ALTER TABLE</code> and there is an old table named
<tt>`A-something'</tt> or <tt>`B-something'</tt> lying around. In
this case, go to the MySQL data directory and delete all files that
have names starting with <code>A-</code> or <code>B-</code>. (You
may want to move them elsewhere instead of deleting them.)</p>

<p><code>ALTER TABLE</code> works the following way:</p>

<ul>
<li>Create a new table named <tt>`A-xxx'</tt> with the requested
changes.</li>

<li>All rows from the old table are copied to
<tt>`A-xxx'</tt>.</li>

<li>The old table is renamed <tt>`B-xxx'</tt>.</li>

<li><tt>`A-xxx'</tt> is renamed to your old table name.</li>

<li><tt>`B-xxx'</tt> is deleted.</li>
</ul>

<p>If something goes wrong with the renaming operation, MySQL tries
to undo the changes. If something goes seriously wrong (this
shouldn't happen, of course), MySQL may leave the old table as
<tt>`B-xxx'</tt>, but a simple rename on the system level should
get your data back.</p>

<h3><a id="Change_column_order" name="Change_column_order"
href="manual_toc.html#Change_column_order">A.6.2 How To Change the
Order of Columns in a Table</a></h3>

<p><a id="IDX1816" name="IDX1816"></a> <a id="IDX1817"
name="IDX1817"></a> <a id="IDX1818" name="IDX1818"></a> <a
id="IDX1819" name="IDX1819"></a></p>

<p>The whole point of SQL is to abstract the application from the
data storage format. You should always specify the order in which
you wish to retrieve your data. For example:</p>

<pre>
SELECT col_name1, col_name2, col_name3 FROM tbl_name;
</pre>

<p>will return columns in the order <code>col_name1</code>,
<code>col_name2</code>, <code>col_name3</code>, whereas:</p>

<pre>
SELECT col_name1, col_name3, col_name2 FROM tbl_name;
</pre>

<p>will return columns in the order <code>col_name1</code>,
<code>col_name3</code>, <code>col_name2</code>.</p>

<p>You should <strong>never</strong>, in an application, use
<code>SELECT *</code> and retrieve the columns based on their
position, because the order in which columns are returned
<strong>cannot</strong> be guaranteed over time. A simple change to
your database may cause your application to fail rather
dramatically.</p>

<p>If you want to change the order of columns anyway, you can do it
as follows:</p>

<ol>
<li>Create a new table with the columns in the right order.</li>

<li>Execute <code>INSERT INTO new_table SELECT
fields-in-new_table-order FROM old_table</code>.</li>

<li>Drop or rename <code>old_table</code>.</li>

<li><code>ALTER TABLE new_table RENAME old_table</code>.</li>
</ol>

<h3><a id="Temporary_table_problems"
name="Temporary_table_problems"
href="manual_toc.html#Temporary_table_problems">A.6.3 TEMPORARY
TABLE problems</a></h3>

<p><a id="IDX1820" name="IDX1820"></a></p>

<p>The following are a list of the limitations with <code>TEMPORARY
TABLES</code>.</p>

<ul>
<li>A temporary table can only be of type <code>HEAP</code>,
<code>ISAM</code>, <code>MyISAM</code>, <code>MERGE</code>, or
<code>InnoDB</code>.</li>

<li>You can't use temporary tables more than once in the same
query. For example, the following doesn't work. 

<pre>
mysql&gt; SELECT * FROM temporary_table, temporary_table AS t2;
</pre>
</li>

<li>You can't use <code>RENAME</code> on a <code>TEMPORARY</code>
table. Note that <code>ALTER TABLE org_name RENAME new_name</code>
works!</li>
</ul>

<h1><a id="Contrib" name="Contrib" href="manual_toc.html#Contrib">B
Contributed Programs</a></h1>

<p><a id="IDX1821" name="IDX1821"></a> <a id="IDX1822"
name="IDX1822"></a></p>

<p>Many users of MySQL have contributed <em>very</em> useful
support tools and add-ons.</p>

<p>A list of some software available from the MySQL website (or any
mirror) is shown here.</p>

<p>You can also visit our online listing of MySQL-related software
at <a
href="http://www.mysql.com/portal/software/">http://www.mysql.com/portal/software/</a>.
The community facilities there also allow for your input!</p>

<p>If you want to build MySQL support for the Perl
<code>DBI</code>/<code>DBD</code> interface, you should fetch the
<code>Data-Dumper</code>, <code>DBI</code>, and
<code>Msql-Mysql-modules</code> files and install them. See section
<a href="manual.html#Perl_support">2.7 Perl Installation
Comments</a>.</p>

<p>Note: The programs listed here can be freely downloaded and
used. They are copyrighted by their respective owners. Please see
individual product documentation for more details on licensing and
terms. MySQL AB assumes no liability for the correctness of the
information in this chapter or for the proper operation of the
programs listed herein.</p>

<h2><a id="SEC677" name="SEC677" href="manual_toc.html#SEC677">B.1
APIs</a></h2>

<p><a id="IDX1823" name="IDX1823"></a></p>

<ul>
<li>Perl Modules 

<ul>
<li><a
href="http://www.mysql.com/Downloads/Contrib/KAMXbase1.2.tar.gz">http://www.mysql.com/Downloads/Contrib/KAMXbase1.2.tar.gz</a>
Convert between <tt>`.dbf'</tt> files and MySQL tables. Perl module
written by Pratap Pereira <a
href="mailto:pereira@ee.eng.ohio-state.edu">pereira@ee.eng.ohio-state.edu</a>,
extended by Kevin A. McGrail <a
href="mailto:kmcgrail@digital1.peregrinehw.com">kmcgrail@digital1.peregrinehw.com</a>.
This converter can handle MEMO fields.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/HandySQL-1.1.tar.gz">http://www.mysql.com/Downloads/Contrib/HandySQL-1.1.tar.gz</a>
HandySQL is a MySQL access module. It offers a C interface embedded
in Perl and is approximately 20% faster than regular DBI.</li>
</ul>

<a id="IDX1824" name="IDX1824"></a></li>

<li>OLEDB 

<ul>
<li><a
href="http://www.mysql.com/Downloads/Win32/MyOLEDB3.exe">http://www.mysql.com/Downloads/Win32/MyOLEDB3.exe</a>
MyOLEDB 3.0 installation package from SWSoft.</li>

<li><a
href="http://www.mysql.com/Downloads/Win32/mysql-oledb-3.0.0.zip">http://www.mysql.com/Downloads/Win32/mysql-oledb-3.0.0.zip</a>
Source for MyOLEDB 3.0.</li>

<li><a
href="http://www.mysql.com/Downloads/Win32/MySamples.zip">http://www.mysql.com/Downloads/Win32/MySamples.zip</a>
Examples and documentation for MyOLEDB.</li>

<li><a
href="http://www.mysql.com/Downloads/Win32/MyOLEDB.chm">http://www.mysql.com/Downloads/Win32/MyOLEDB.chm</a>
Help files for MyOLEDB.</li>

<li><a
href="http://www.mysql.com/Downloads/Win32/libmyodbc.zip">http://www.mysql.com/Downloads/Win32/libmyodbc.zip</a>
Static MyODBC library used for build MyOLEDB. Based on MyODBC
code.</li>
</ul>

<a id="IDX1825" name="IDX1825"></a></li>

<li>C++ 

<ul>
<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql-c++-0.02.tar.gz">
http://www.mysql.com/Downloads/Contrib/mysql-c++-0.02.tar.gz</a>
MySQL C++ wrapper library. By Roland Haenel, <a
href="mailto:rh@ginster.net">rh@ginster.net</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MyDAO.tar.gz">http://www.mysql.com/Downloads/Contrib/MyDAO.tar.gz</a>
MySQL C++ API. By Satish <a
href="mailto:spitfire@pn3.vsnl.net.in">spitfire@pn3.vsnl.net.in</a>.
Inspired by Roland Haenel's C++ API and Ed Carp's MyC library.</li>

<li><a
href="http://www.mysql.com/products/mysql++/">http://www.mysql.com/products/mysql++/</a>
MySQL C++ API (more than just a wrapper library). Originally by <a
href="mailto:kevina@clark.net">kevina@clark.net</a>. Now maintained
by Sinisa at MySQL AB.</li>

<li><a
href="http://nelsonjr.homepage.com/NJrAPI/">http://nelsonjr.homepage.com/NJrAPI/</a>
A C++ database independent library that supports MySQL.</li>
</ul>

<a id="IDX1826" name="IDX1826"></a></li>

<li>Delphi 

<ul>
<li><a
href="http://www.mysql.com/Downloads/Contrib/DelphiMySQL2.zip">http://www.mysql.com/Downloads/Contrib/DelphiMySQL2.zip</a>
Delphi interface to <code>libmysql.dll</code>, by <a
href="mailto:bsilva@umesd.k12.or.us">bsilva@umesd.k12.or.us</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/Udmysql.pas">http://www.mysql.com/Downloads/Contrib/Udmysql.pas</a>
A wrapper for libmysql.dll for usage in Delphi. By Reiner
Sombrowsky.</li>

<li><a
href="http://www.fichtner.net/delphi/mysql.delphi.phtml">http://www.fichtner.net/delphi/mysql.delphi.phtml</a>
A Delphi Interface to MySQL, with source code. By Matthias
Fichtner.</li>

<li><a
href="http://www.productivity.org/projects/tmysql/">http://www.productivity.org/projects/tmysql/</a>
<code>TmySQL</code>, a library to use MySQL with Delphi.</li>

<li><a
href="https://sourceforge.net/projects/zeoslib/">https://sourceforge.net/projects/zeoslib/</a>
Zeos Library is a set of delphi native datasets and database
components for MySql, PostgreSql, Interbase, MS SQL, Oracle, DB/2.
Also it includes development tools such as Database Explorer and
Database Designer.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/Win32/SBMySQL50Share.exe">
http://www.mysql.com/Downloads/Contrib/Win32/SBMySQL50Share.exe</a>
Delphi 5 Shareware MySQL Dataset Components.</li>
</ul>
</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql-ruby-2.2.0.tar.gz">
http://www.mysql.com/Downloads/Contrib/mysql-ruby-2.2.0.tar.gz</a>
MySQL Ruby module. By TOMITA Masahiro <a
href="mailto:tommy@tmtm.org">tommy@tmtm.org</a> Ruby is an
Object-Oriented Interpreter Language (<a
href="http://www.netlab.co.jp/ruby/">http://www.netlab.co.jp/ruby/</a>).</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/JdmMysqlDriver-0.1.0.tar.gz">
http://www.mysql.com/Downloads/Contrib/JdmMysqlDriver-0.1.0.tar.gz</a>
A VisualWorks 3.0 Smalltalk driver for MySQL. By <a
href="mailto:joshmiller@earthlink.net">joshmiller@earthlink.net</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/Db.py">http://www.mysql.com/Downloads/Contrib/Db.py</a>
Python module with caching. By <a
href="mailto:gandalf@rosmail.com">gandalf@rosmail.com</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQLmodule-1.4.tar.gz">
http://www.mysql.com/Downloads/Contrib/MySQLmodule-1.4.tar.gz</a>
Python interface for MySQL. By Joseph Skinner <a
href="mailto:joe@earthlight.co.nz">joe@earthlight.co.nz</a>.
Modified by Joerg Senekowitsch <a
href="mailto:senekow@ibm.net">senekow@ibm.net</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQL-python-0.3.0.tar.gz">
http://www.mysql.com/Downloads/Contrib/MySQL-python-0.3.0.tar.gz</a>
MySQLdb Python is an DB-API v2.0-compliant interface to MySQL.
Transactions are supported if the server and tables support them.
It is thread-safe, and contains a compatibility module for older
code written for the no-longer-maintained MySQLmodule
interface.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql_mex_12.tar.gz">http://www.mysql.com/Downloads/Contrib/mysql_mex_12.tar.gz</a>
An interface program for the Matlab program by MathWorks. The
interface is done by Kimmo Uutela and John Fisher (not by
Mathworks). Check <a
href="http://boojum.hut.fi/~kuutela/mysqlmex.html">http://boojum.hut.fi/~kuutela/mysqlmex.html</a>
for more information.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysqltcl-1.53.tar.gz">http://www.mysql.com/Downloads/Contrib/mysqltcl-1.53.tar.gz</a>
Tcl interface for MySQL. Based on <tt>`msqltcl-1.50.tar.gz'</tt>.
For version 2.0 and more info, see <a
href="http://www.xdobry.de/mysqltcl/">http://www.xdobry.de/mysqltcl/</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MyC-0.1.tar.gz">http://www.mysql.com/Downloads/Contrib/MyC-0.1.tar.gz</a>
A Visual Basic-like API, by Ed Carp.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/Vdb-dflts-2.1.tar.gz">http://www.mysql.com/Downloads/Contrib/Vdb-dflts-2.1.tar.gz</a>
This is a new version of a set of library utilities intended to
provide a generic interface to SQL database engines such that your
application becomes a 3-tiered application. The advantage is that
you can easily switch between and move to other database engines by
implementing one file for the new backend without making any
changes to your applications. By <a
href="mailto:damian@cablenet.net">damian@cablenet.net</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/DbFramework-1.10.tar.gz">
http://www.mysql.com/Downloads/Contrib/DbFramework-1.10.tar.gz</a>
DbFramework is a collection of classes for manipulating MySQL
databases. The classes are loosely based on the CDIF Data Model
Subject Area. By Paul Sharpe <a
href="mailto:paul@miraclefish.com">paul@miraclefish.com</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/pike-mysql-1.4.tar.gz">
http://www.mysql.com/Downloads/Contrib/pike-mysql-1.4.tar.gz</a>
MySQL module for pike. For use with the Roxen web server.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/squile.tar.gz">http://www.mysql.com/Downloads/Contrib/squile.tar.gz</a>
Module for <code>guile</code> that allows <code>guile</code> to
interact with SQL databases. By Hal Roberts.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/stk-mysql.tar.gz">http://www.mysql.com/Downloads/Contrib/stk-mysql.tar.gz</a>
Interface for Stk. Stk is the Tk widgets with Scheme underneath
instead of Tcl. By Terry Jones.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/eiffel-wrapper-1.0.tar.gz">
http://www.mysql.com/Downloads/Contrib/eiffel-wrapper-1.0.tar.gz</a>
Eiffel wrapper by Michael Ravits.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/SQLmy0.06.tgz">http://www.mysql.com/Downloads/Contrib/SQLmy0.06.tgz</a>
FlagShip Replaceable Database Driver (RDD) for MySQL. By Alejandro
Fernandez Herrero. The Flagship RDD homepage is at <a
href="http://www.fship.com/rdds.html">http://www.fship.com/rdds.html</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mydsn-1.0.zip">http://www.mysql.com/Downloads/Contrib/mydsn-1.0.zip</a>
Binary and source for <code>mydsn.dll</code>. mydsn should be used
to build and remove the DSN registry file for the MyODBC driver in
Coldfusion applications. By Miguel Angel Solórzano.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQL-ADA95_API.zip">http://www.mysql.com/Downloads/Contrib/MySQL-ADA95_API.zip</a>
An ADA95 interface to the MySQL API. By Francois Fabien.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MyTool-DLL_for_VB_and_MySQL.zip">
http://www.mysql.com/Downloads/Contrib/MyTool-DLL_for_VB_and_MySQL.zip</a>
A DLL with MySQL C API for Visual Basic. By Ken Menzel <a
href="mailto:kenm@icarz.com">kenm@icarz.com</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MYSQLX.EXE">http://www.mysql.com/Downloads/Contrib/MYSQLX.EXE</a>
MySQL ActiveX Object for directly accessing your MySQL servers from
IIS/ASP, VB, VC++ skipping the slower ODBC methods. Fully
updatable, multi-threaded with full support for all MySQL
fieldtypes (version 2001.1.1). By SciBit <a
href="http://www.scibit.com/">http://www.scibit.com/</a>.</li>

<li><a
href="http://www.fastflow.it/mylua/">http://www.fastflow.it/mylua/</a>
MyLUA home page; how to use the LUA language to write MySQL
<code>PROCEDURE</code> that can be loaded runtime. 

<ul>
<li><a
href="http://www.mysql.com/Downloads/Contrib/lua-4.0.tar.gz">http://www.mysql.com/Downloads/Contrib/lua-4.0.tar.gz</a>
LUA 4.0</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mylua-3.23.32.1.tar.gz">
http://www.mysql.com/Downloads/Contrib/mylua-3.23.32.1.tar.gz</a>
Patch for MySQL 3.23.32 to use LUA 4.0. By Cristian Giussani.</li>
</ul>
</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/patched_myodbc.zip">http://www.mysql.com/Downloads/Contrib/patched_myodbc.zip</a>
Patch (for Omniform 4.0 support) to the MyODBC driver. By Thomas
Thaele <a
href="mailto:tthaele@papenmeier.de">tthaele@papenmeier.de</a></li>
</ul>

<p><a id="IDX1827" name="IDX1827"></a></p>

<h2><a id="SEC678" name="SEC678" href="manual_toc.html#SEC678">B.2
Converters</a></h2>

<ul>
<li><a
href="http://www.mysql.com/Downloads/Contrib/mssql2mysql.txt">http://www.mysql.com/Downloads/Contrib/mssql2mysql.txt</a>
Converter from MS-SQL to MySQL. By Michael Kofler. The mssql2mysql
home page is at <a
href="http://www.kofler.cc/mysql/mssql2mysql.html">http://www.kofler.cc/mysql/mssql2mysql.html</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dbf2mysql-1.14.tar.gz">
http://www.mysql.com/Downloads/Contrib/dbf2mysql-1.14.tar.gz</a>
Convert between <tt>`.dbf'</tt> files and MySQL tables. By Maarten
Boekhold (<a
href="mailto:boekhold@cindy.et.tudelft.nl">boekhold@cindy.et.tudelft.nl</a>),
William Volkman, and Michael Widenius. This converter includes
rudimentary read-only support for MEMO fields.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dbf2mysql-1.13.tgz">http://www.mysql.com/Downloads/Contrib/dbf2mysql-1.13.tgz</a>
Convert between <tt>`.dbf'</tt> files and MySQL tables. By Maarten
Boekhold, <a
href="mailto:boekhold@cindy.et.tudelft.nl">boekhold@cindy.et.tudelft.nl</a>,
and Michael Widenius. This converter can't handle MEMO fields.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dbf2mysql.zip">http://www.mysql.com/Downloads/Contrib/dbf2mysql.zip</a>
Convert between FoxPro <tt>`.dbf'</tt> files and MySQL tables on
Windows. By Alexander Eltsyn, <a
href="mailto:ae@nica.ru">ae@nica.ru</a> or <a
href="mailto:ae@usa.net">ae@usa.net</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dbf2sql.zip">http://www.mysql.com/Downloads/Contrib/dbf2sql.zip</a>
Short and simple prg that can help you transport your data from
foxpro table into MySQL table. By Danko Josic.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dump2h-1.20.gz">http://www.mysql.com/Downloads/Contrib/dump2h-1.20.gz</a>
Convert from <code>mysqldump</code> output to a C header file. By
Harry Brueckner, <a
href="mailto:brueckner@mail.respublica.de">brueckner@mail.respublica.de</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/exportsql.txt">http://www.mysql.com/Downloads/Contrib/exportsql.txt</a>
A script that is similar to <code>access_to_mysql.txt</code>,
except that this one is fully configurable, has better type
conversion (including detection of <code>TIMESTAMP</code> fields),
provides warnings and suggestions while converting, quotes
<strong>all</strong> special characters in text and binary data,
and so on. It will also convert to <code>mSQL</code> v1 and v2, and
is free of charge for anyone. See <a
href="http://www.cynergi.net/exportsql/">http://www.cynergi.net/exportsql/</a>
for the latest version. By Pedro Freire, <a
href="mailto:support@cynergi.net">support@cynergi.net</a>. Note:
Doesn't work with Access2!</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/access_to_mysql.txt">http://www.mysql.com/Downloads/Contrib/access_to_mysql.txt</a>
Paste this function into an Access module of a database that has
the tables you want to export. See also <code>exportsql</code>. By
Brian Andrews. Note: Doesn't work with Access2!</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/importsql.txt">http://www.mysql.com/Downloads/Contrib/importsql.txt</a>
A script that does the exact reverse of <code>exportsql.txt</code>.
That is, it imports data from MySQL into an Access database via
ODBC. This is very handy when combined with exportsql, because it
lets you use Access for all DB design and administration, and
synchronise with your actual MySQL server either way. Free of
charge. See <a
href="http://www.netdive.com/freebies/importsql/">http://www.netdive.com/freebies/importsql/</a>
for any updates. Created by Laurent Bossavit of NetDIVE.
<strong>Note</strong>: doesn't work with Access2!</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mdb2sql.bas">http://www.mysql.com/Downloads/Contrib/mdb2sql.bas</a>
Converter from Access97 to MySQL by Moshe Gurvich.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/msql2mysqlWrapper-1.0.tgz">
http://www.mysql.com/Downloads/Contrib/msql2mysqlWrapper-1.0.tgz</a>
A C wrapper from <code>mSQL</code> to MySQL. By <a
href="mailto:alfred@sb.net">alfred@sb.net</a></li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/sqlconv.pl">http://www.mysql.com/Downloads/Contrib/sqlconv.pl</a>
A simple script that can be used to copy fields from one MySQL
table to another in bulk. Basically, you can run
<code>mysqldump</code> and pipe it to the <code>sqlconv.pl</code>
script. The script will parse through the <code>mysqldump</code>
output and will rearrange the fields so they can be inserted into a
new table. An example is when you want to create a new table for a
different site you are working on, but the table is just a bit
different (that is - fields in different order, etc.). By Steve
Shreeve.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/oracledump">http://www.mysql.com/Downloads/Contrib/oracledump</a>
Perl program to convert Oracle databases to MySQL. Has same output
format as mysqldump. By Johan Andersson.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/excel2mysql">http://www.mysql.com/Downloads/Contrib/excel2mysql</a>
Perl program to import Excel spreadsheets into a MySQL database. By
Stephen Hurd <a
href="mailto:shurd@sk.sympatico.ca">shurd@sk.sympatico.ca</a></li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/T2S_100.ZIP">http://www.mysql.com/Downloads/Contrib/T2S_100.ZIP</a>.
Windows program to convert text files to MySQL databases. By Asaf
Azulay.</li>
</ul>

<p><a id="IDX1828" name="IDX1828"></a></p>

<h2><a id="SEC679" name="SEC679" href="manual_toc.html#SEC679">B.3
Utilities</a></h2>

<ul>
<li><a
href="http://worldcommunity.com/opensource/utilities/mysql_backup.html">
http://worldcommunity.com/opensource/utilities/mysql_backup.html</a>
MySQL Backup is a backup script for MySQL. By Peter F. Brown.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql_watchdog.pl">http://www.mysql.com/Downloads/Contrib/mysql_watchdog.pl</a>
Monitor the MySQL daemon for possible lockups. By Yermo Lamers, <a
href="mailto:yml@yml.com">yml@yml.com</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql_structure_dumper.tar.gz">
http://www.mysql.com/Downloads/Contrib/mysql_structure_dumper.tar.gz</a></li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql_structure_dumper.tgz">
http://www.mysql.com/Downloads/Contrib/mysql_structure_dumper.tgz</a>
Prints the structure of every table in a database. By Thomas
Wana.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysqlsync">http://www.mysql.com/Downloads/Contrib/mysqlsync</a>.
A Perl script to keep remote copies of a MySQL database in sync
with a central master copy. By Mark Jeftovic. <a
href="mailto:markjr@easydns.com">markjr@easydns.com</a>.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQLTutor-0.2.tar.gz">
http://www.mysql.com/Downloads/Contrib/MySQLTutor-0.2.tar.gz</a>.
MySQLTutor. A MySQL tutorial for beginners.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQLDB.zip">http://www.mysql.com/Downloads/Contrib/MySQLDB.zip</a></li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/MySQLDB-readme.html">http://www.mysql.com/Downloads/Contrib/MySQLDB-readme.html</a>.
A COM library for MySQL by Alok Singh.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mysql_replicate.pl">http://www.mysql.com/Downloads/Contrib/mysql_replicate.pl</a>
Perl program that handles replication. By <a
href="mailto:elble@icculus.nsg.nwu.edu">elble@icculus.nsg.nwu.edu</a></li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/DBIx-TextIndex-0.02.tar.gz">
http://www.mysql.com/Downloads/Contrib/DBIx-TextIndex-0.02.tar.gz</a>
Perl script that uses reverse indexing to handle text searching. By
Daniel Koch.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/dbcheck">http://www.mysql.com/Downloads/Contrib/dbcheck</a>
Perl script that takes a backup of tables before running isamchk on
them. By Elizabeth.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mybackup">http://www.mysql.com/Downloads/Contrib/mybackup</a>.</li>

<li><a
href="http://www.mswanson.com/mybackup">http://www.mswanson.com/mybackup</a>
(mybackup home page) Wrapper for mysqldump to backup all databases.
By Marc Swanson.</li>

<li><a
href="http://www.mysql.com/Downloads/Contrib/mdu.pl.gz">http://www.mysql.com/Downloads/Contrib/mdu.pl.gz</a>
Prints the storage usage of a MySQL database.</li>
</ul>

<h1><a id="Credits" name="Credits" href="manual_toc.html#Credits">C
Credits</a></h1>

<p><a id="IDX1829" name="IDX1829"></a></p>

<p>This appendix lists the developers, contributors, and supporters
that have helped to make MySQL what it is today.</p>

<h2><a id="Developers" name="Developers"
href="manual_toc.html#Developers">C.1 Developers at MySQL
AB</a></h2>

<p>These are the developers that are or have been employed by
<code>MySQL AB</code> to work on the <code>MySQL</code> database
software, roughly in the order they started to work with us.
Following each developer is a small list of the tasks that the
developer is responsible for, or the accomplishments they have
made. All developers are involved in support.</p>

<dl compact="compact">
<dt>Michael (Monty) Widenius</dt>

<dd>
<ul>
<li>Lead developer and main author of the MySQL server
(<code>mysqld</code>).</li>

<li>New functions for the string library.</li>

<li>Most of the <code>mysys</code> library.</li>

<li>The <code>ISAM</code> and <code>MyISAM</code> libraries (B-tree
index file handlers with index compression and different record
formats).</li>

<li>The <code>HEAP</code> library. A memory table system with our
superior full dynamic hashing. In use since 1981 and published
around 1984.</li>

<li>The <code>replace</code> program (take a look at it, it's
<strong>COOL</strong>!).</li>

<li><code>MyODBC</code>, the ODBC driver for Windows95.</li>

<li>Fixing bugs in MIT-pthreads to get it to work for MySQL Server.
And also Unireg, a curses-based application tool with many
utilities.</li>

<li>Porting of <code>mSQL</code> tools like <code>msqlperl</code>,
<code>DBD</code>/<code>DBI</code>, and <code>DB2mysql</code>.</li>

<li>Most of <code>crash-me</code> and the foundation for the MySQL
benchmarks.</li>
</ul>
</dd>

<dt>David Axmark</dt>

<dd>
<ul>
<li>Initial main writer of the <strong>Reference Manual</strong>,
including enhancements to <code>texi2html</code>.</li>

<li>Automatic web site updating from the manual.</li>

<li>Initial Autoconf, Automake, and Libtool support.</li>

<li>Licensing.</li>

<li>Parts of all the text files. (Nowadays only the
<tt>`README'</tt> is left. The rest ended up in the manual.)</li>

<li>Lots of testing of new features.</li>

<li>Our in-house Free Software legal expert.</li>

<li>Mailing list maintainer (who never has the time to do it
right...).</li>

<li>Our original portability code (more than 10 years old now).
Nowadays only some parts of <code>mysys</code> are left.</li>

<li>Someone for Monty to call in the middle of the night when he
just got that new feature to work.</li>

<li>Chief "Open Sourcerer" (MySQL community relations).</li>
</ul>
</dd>

<dt>Jani Tolonen</dt>

<dd>
<ul>
<li><code>mysqlimport</code></li>

<li>A lot of extensions to the command-line clients.</li>

<li><code>PROCEDURE ANALYSE()</code></li>
</ul>
</dd>

<dt>Sinisa Milivojevic</dt>

<dd>
<ul>
<li>Compression (with <code>zlib</code>) in the client/server
protocol.</li>

<li>Perfect hashing for the lexical analyser phase.</li>

<li>Multi-row <code>INSERT</code></li>

<li><code>mysqldump</code> -e option</li>

<li><code>LOAD DATA LOCAL INFILE</code></li>

<li><code>SQL_CALC_FOUND_ROWS</code> <code>SELECT</code>
option</li>

<li><code>--max-user-connections=...</code> option</li>

<li><code>net_read</code> and <code>net_write_timeout</code></li>

<li><code>GRANT</code>/<code>REVOKE</code> and <code>SHOW GRANTS
FOR</code></li>

<li>New client-server protocol for 4.0</li>

<li><code>UNION</code> in 4.0</li>

<li>Multi-table <code>DELETE</code>/<code>UPDATE</code></li>

<li>Derived tables in 4.1</li>

<li>User resources management</li>

<li>Initial developer of the <code>MySQL++</code> C++ API and the
<code>MySQLGUI</code> client.</li>
</ul>
</dd>

<dt>Tonu Samuel (past developer)</dt>

<dd>
<ul>
<li>VIO interface (the foundation for the encrypted client/server
protocol).</li>

<li>MySQL Filesystem (a way to use MySQL databases as files and
directories).</li>

<li>The <code>CASE</code> expression.</li>

<li>The <code>MD5()</code> and <code>COALESCE()</code>
functions.</li>

<li><code>RAID</code> support for <code>MyISAM</code> tables.</li>
</ul>
</dd>

<dt>Sasha Pachev</dt>

<dd>
<ul>
<li>Initial implementation of replication (upto version 4.0).</li>

<li><code>SHOW CREATE TABLE</code>.</li>

<li><code>mysql-bench</code></li>
</ul>
</dd>

<dt>Matt Wagner</dt>

<dd>
<ul>
<li>MySQL test suite.</li>

<li>Webmaster (until 2002).</li>

<li>Coordinator of development.</li>
</ul>
</dd>

<dt>Miguel Solorzano</dt>

<dd>
<ul>
<li>Win32 development and release builds.</li>

<li>Windows NT server code.</li>

<li>WinMySQLAdmin</li>
</ul>
</dd>

<dt>Timothy Smith (past developer)</dt>

<dd>
<ul>
<li>Dynamic character sets support.</li>

<li>configure, RPMs and other parts of the build system.</li>

<li>Initial developer of <code>libmysqld</code>, the embedded
server.</li>
</ul>
</dd>

<dt>Sergei Golubchik</dt>

<dd>
<ul>
<li>Full-text search.</li>

<li>Added keys to the <code>MERGE</code> library.</li>
</ul>
</dd>

<dt>Jeremy Cole</dt>

<dd>
<ul>
<li>Proofreading and editing this fine manual.</li>

<li><code>ALTER TABLE ... ORDER BY ...</code>.</li>

<li><code>UPDATE ... ORDER BY ...</code>.</li>

<li><code>DELETE ... ORDER BY ...</code>.</li>
</ul>
</dd>

<dt>Indrek Siitan</dt>

<dd>
<ul>
<li>Designing/programming of our web interface.</li>

<li>Author of our newsletter management system.</li>
</ul>
</dd>

<dt>Jorge del Conde</dt>

<dd>
<ul>
<li><code>MySQLCC</code> (<code>MySQL Control Center</code>)</li>

<li>Win32 development</li>

<li>Initial implementation of the website portals.</li>
</ul>
</dd>

<dt>Venu Anuganti</dt>

<dd>
<ul>
<li>MyODBC 3.51</li>

<li>New client/server protocol for 4.1 (for prepared
statements).</li>
</ul>
</dd>

<dt>Arjen Lentz</dt>

<dd>
<ul>
<li>Maintainer of the MySQL Reference Manual.</li>

<li>Preparing the O'Reilly printed edition of the manual.</li>
</ul>
</dd>

<dt>Alexander (Bar) Barkov, Alexey (Holyfoot) Botchkov, and Ramil
Kallimullin</dt>

<dd>
<ul>
<li>Spatial data (GIS) and R-Trees implementation for 4.1</li>

<li>Unicode and character sets for 4.1</li>
</ul>
</dd>

<dt>Alexander (Sanja) Belkin</dt>

<dd>
<ul>
<li>Query cache in 4.0</li>

<li>Implementation of subqueries (4.1).</li>
</ul>
</dd>

<dt>Aleksey (Walrus) Kishkin and Alexey (Ranger) Stroganov</dt>

<dd>
<ul>
<li>Benchmarks design and analysis.</li>

<li>Maintenance of the MySQL test suite.</li>
</ul>
</dd>

<dt>Zak Greant</dt>

<dd>
<ul>
<li>Open Source advocate, MySQL community relations.</li>
</ul>
</dd>

<dt>Carsten Pedersen</dt>

<dd>
<ul>
<li>The MySQL Certification program.</li>
</ul>
</dd>

<dt>Lenz Grimmer</dt>

<dd>
<ul>
<li>Production (build and release) engineering.</li>
</ul>
</dd>

<dt>Peter Zaitsev</dt>

<dd>
<ul>
<li><code>SHA1()</code>, <code>AES_ENCRYPT()</code> and
<code>AES_DECRYPT()</code> functions.</li>

<li>Debugging, cleaning up various features.</li>
</ul>
</dd>

<dt>Alexander (Salle) Keremidarski</dt>

<dd>
<ul>
<li>Documentation of existing MySQL code/algorithms.</li>

<li>Debugging.</li>
</ul>
</dd>

<dt>Per-Erik Martin</dt>

<dd>
<ul>
<li>Lead developer for stored procedures and triggers.</li>
</ul>
</dd>

<dt>Jim Winstead</dt>

<dd>
<ul>
<li>Lead web developer.</li>
</ul>
</dd>

<dt>Mark Matthews</dt>

<dd>
<ul>
<li>Connector/J driver (Java).</li>
</ul>
</dd>
</dl>

<h2><a id="Contributors" name="Contributors"
href="manual_toc.html#Contributors">C.2 Contributors to
MySQL</a></h2>

<p><a id="IDX1830" name="IDX1830"></a></p>

<p>While <code>MySQL AB</code> owns all copyrights in the
<code>MySQL server</code> and the <code>MySQL manual</code>, we
wish to recognise those who have made contributions of one kind or
another to the <code>MySQL distribution</code>. Contributors are
listed here, in somewhat random order:</p>

<dl compact="compact">
<dt>Paul DuBois</dt>

<dd>Ongoing help with making this manual correct and
understandable. That includes rewriting Monty's and David's
attempts at English into English as other people know it.</dd>

<dt>Gianmassimo Vigazzola <a
href="mailto:qwerg@mbox.vol.it">qwerg@mbox.vol.it</a> or <a
href="mailto:qwerg@tin.it">qwerg@tin.it</a></dt>

<dd>The initial port to Win32/NT.</dd>

<dt>Kim Aldale</dt>

<dd>Helped to rewrite Monty's and David's early attempts at English
into English.</dd>

<dt>Per Eric Olsson</dt>

<dd>For more or less constructive criticism and real testing of the
dynamic record format.</dd>

<dt>Irena Pancirov <a
href="mailto:irena@mail.yacc.it">irena@mail.yacc.it</a></dt>

<dd>Win32 port with Borland compiler.
<code>mysqlshutdown.exe</code> and <code>mysqlwatch.exe</code></dd>

<dt>David J. Hughes</dt>

<dd>For the effort to make a shareware SQL database. At TcX, the
predecessor of MySQL AB, we started with <code>mSQL</code>, but
found that it couldn't satisfy our purposes so instead we wrote a
SQL interface to our application builder Unireg.
<code>mysqladmin</code> and <code>mysql</code> client are programs
that were largely influenced by their <code>mSQL</code>
counterparts. We have put a lot of effort into making the MySQL
syntax a superset of <code>mSQL</code>. Many of the API's ideas are
borrowed from <code>mSQL</code> to make it easy to port free
<code>mSQL</code> programs to the MySQL API. The MySQL software
doesn't contain any code from <code>mSQL</code>. Two files in the
distribution (<tt>`client/insert_test.c'</tt> and
<tt>`client/select_test.c'</tt>) are based on the corresponding
(non-copyrighted) files in the <code>mSQL</code> distribution, but
are modified as examples showing the changes necessary to convert
code from <code>mSQL</code> to MySQL Server. (<code>mSQL</code> is
copyrighted David J. Hughes.)</dd>

<dt>Fred Fish</dt>

<dd>For his excellent C debugging and trace library. Monty has made
a number of smaller improvements to the library (speed and
additional options).</dd>

<dt>Richard A. O'Keefe</dt>

<dd>For his public domain string library.</dd>

<dt>Henry Spencer</dt>

<dd>For his regex library, used in <code>WHERE column REGEXP
regexp</code>.</dd>

<dt>Free Software Foundation</dt>

<dd>From whom we got an excellent compiler (<code>gcc</code>), the
<code>libc</code> library (from which we have borrowed
<tt>`strto.c'</tt> to get some code working in Linux), and the
<code>readline</code> library (for the <code>mysql</code>
client).</dd>

<dt>Free Software Foundation &amp; The XEmacs development team</dt>

<dd>For a really great editor/environment used by almost everybody
at MySQL AB/TcX/detron.</dd>

<dt>Patrick Lynch</dt>

<dd>For helping us acquire <a
href="http://www.mysql.com/">http://www.mysql.com/</a>.</dd>

<dt>Fred Lindberg</dt>

<dd>For setting up qmail to handle the MySQL mailing list and for
the incredible help we got in managing the MySQL mailing
lists.</dd>

<dt>Igor Romanenko <a
href="mailto:igor@frog.kiev.ua">igor@frog.kiev.ua</a></dt>

<dd><code>mysqldump</code> (previously <code>msqldump</code>, but
ported and enhanced by Monty).</dd>

<dt>Yuri Dario</dt>

<dd>For keeping up and extending the MySQL OS/2 port.</dd>

<dt>Tim Bunce, Alligator Descartes</dt>

<dd>For the <code>DBD</code> (Perl) interface.</dd>

<dt>Tim Bunce</dt>

<dd>Author of <code>mysqlhotcopy</code>.</dd>

<dt>Andreas Koenig <a
href="mailto:a.koenig@mind.de">a.koenig@mind.de</a></dt>

<dd>For the Perl interface for MySQL Server.</dd>

<dt>Eugene Chan <a
href="mailto:eugene@acenet.com.sg">eugene@acenet.com.sg</a></dt>

<dd>For porting PHP for MySQL Server.</dd>

<dt>Michael J. Miller Jr. <a
href="mailto:mke@terrapin.turbolift.com">mke@terrapin.turbolift.com</a></dt>

<dd>For the first MySQL manual. And a lot of spelling/language
fixes for the FAQ (that turned into the MySQL manual a long time
ago).</dd>

<dt>Yan Cailin</dt>

<dd>First translator of the MySQL Reference Manual into simplified
chinese in early 2000 on which the Big5 and HK coded (<a
href="http://mysql.hitstar.com/">http://mysql.hitstar.com/</a>)
versions were based. <a href="http://linuxdb.yeah.net">Personal
home page at linuxdb.yeah.net</a>.</dd>

<dt>Giovanni Maruzzelli <a
href="mailto:maruzz@matrice.it">maruzz@matrice.it</a></dt>

<dd>For porting iODBC (Unix ODBC).</dd>

<dt>Chris Provenzano</dt>

<dd>Portable user level pthreads. From the copyright: This product
includes software developed by Chris Provenzano, the University of
California, Berkeley, and contributors. We are currently using
version 1_60_beta6 patched by Monty (see
<tt>`mit-pthreads/Changes-mysql'</tt>).</dd>

<dt>Xavier Leroy <a
href="mailto:Xavier.Leroy@inria.fr">Xavier.Leroy@inria.fr</a></dt>

<dd>The author of LinuxThreads (used by the MySQL Server on
Linux).</dd>

<dt>Zarko Mocnik <a
href="mailto:zarko.mocnik@dem.si">zarko.mocnik@dem.si</a></dt>

<dd>Sorting for Slovenian language and the <tt>`cset.tar.gz'</tt>
module that makes it easier to add other character sets.</dd>

<dt>"TAMITO" <a
href="mailto:tommy@valley.ne.jp">tommy@valley.ne.jp</a></dt>

<dd>The <code>_MB</code> character set macros and the ujis and sjis
character sets.</dd>

<dt>Joshua Chamas <a
href="mailto:joshua@chamas.com">joshua@chamas.com</a></dt>

<dd>Base for concurrent insert, extended date syntax, debugging on
NT, and answering on the MySQL mailing list.</dd>

<dt>Yves Carlier <a
href="mailto:Yves.Carlier@rug.ac.be">Yves.Carlier@rug.ac.be</a></dt>

<dd><code>mysqlaccess</code>, a program to show the access rights
for a user.</dd>

<dt>Rhys Jones <a href="mailto:rhys@wales.com">rhys@wales.com</a>
(And GWE Technologies Limited)</dt>

<dd>For JDBC, a module to extract data from a MySQL Database with a
Java client.</dd>

<dt>Dr Xiaokun Kelvin ZHU <a
href="mailto:X.Zhu@brad.ac.uk">X.Zhu@brad.ac.uk</a></dt>

<dd>Further development of the JDBC driver and other MySQL-related
Java tools.</dd>

<dt>James Cooper <a
href="mailto:pixel@organic.com">pixel@organic.com</a></dt>

<dd>For setting up a searchable mailing list archive at his
site.</dd>

<dt>Rick Mehalick <a
href="mailto:Rick_Mehalick@i-o.com">Rick_Mehalick@i-o.com</a></dt>

<dd>For <code>xmysql</code>, a graphical X client for MySQL
Server.</dd>

<dt>Doug Sisk <a href="mailto:sisk@wix.com">sisk@wix.com</a></dt>

<dd>For providing RPM packages of MySQL for RedHat Linux.</dd>

<dt>Diemand Alexander V. <a
href="mailto:axeld@vial.ethz.ch">axeld@vial.ethz.ch</a></dt>

<dd>For providing RPM packages of MySQL for RedHat
Linux-Alpha.</dd>

<dt>Antoni Pamies Olive <a
href="mailto:toni@readysoft.es">toni@readysoft.es</a></dt>

<dd>For providing RPM versions of a lot of MySQL clients for Intel
and SPARC.</dd>

<dt>Jay Bloodworth <a
href="mailto:jay@pathways.sde.state.sc.us">jay@pathways.sde.state.sc.us</a></dt>

<dd>For providing RPM versions for MySQL Version 3.21.</dd>

<dt>Jochen Wiedmann <a
href="mailto:wiedmann@neckar-alb.de">wiedmann@neckar-alb.de</a></dt>

<dd>For maintaining the Perl <code>DBD::mysql</code> module.</dd>

<dt>Therrien Gilbert <a
href="mailto:gilbert@ican.net">gilbert@ican.net</a>, Jean-Marc
Pouyot <a href="mailto:jmp@scalaire.fr">jmp@scalaire.fr</a></dt>

<dd>French error messages.</dd>

<dt>Petr Snajdr, <a
href="mailto:snajdr@pvt.net">snajdr@pvt.net</a></dt>

<dd>Czech error messages.</dd>

<dt>Jaroslaw Lewandowski <a
href="mailto:jotel@itnet.com.pl">jotel@itnet.com.pl</a></dt>

<dd>Polish error messages.</dd>

<dt>Miguel Angel Fernandez Roiz</dt>

<dd>Spanish error messages.</dd>

<dt>Roy-Magne Mo <a
href="mailto:rmo@www.hivolda.no">rmo@www.hivolda.no</a></dt>

<dd>Norwegian error messages and testing of Version 3.21.#.</dd>

<dt>Timur I. Bakeyev <a
href="mailto:root@timur.tatarstan.ru">root@timur.tatarstan.ru</a></dt>

<dd>Russian error messages.</dd>

<dt><a href="mailto:brenno@dewinter.com">brenno@dewinter.com</a>
&amp; Filippo Grassilli <a
href="mailto:phil@hyppo.com">phil@hyppo.com</a></dt>

<dd>Italian error messages.</dd>

<dt>Dirk Munzinger <a
href="mailto:dirk@trinity.saar.de">dirk@trinity.saar.de</a></dt>

<dd>German error messages.</dd>

<dt>Billik Stefan <a
href="mailto:billik@sun.uniag.sk">billik@sun.uniag.sk</a></dt>

<dd>Slovak error messages.</dd>

<dt>Stefan Saroiu <a
href="mailto:tzoompy@cs.washington.edu">tzoompy@cs.washington.edu</a></dt>

<dd>Romanian error messages.</dd>

<dt>Peter Feher</dt>

<dd>Hungarian error messages.</dd>

<dt>Roberto M. Serqueira</dt>

<dd>Portugise error messages.</dd>

<dt>Carsten H. Pedersen</dt>

<dd>Danish error messages.</dd>

<dt>Arjen G. Lentz</dt>

<dd>Dutch error messages, completing earlier partial translation
(also work on consistency and spelling).</dd>

<dt>David Sacerdote <a
href="mailto:davids@secnet.com">davids@secnet.com</a></dt>

<dd>Ideas for secure checking of DNS hostnames.</dd>

<dt>Wei-Jou Chen <a
href="mailto:jou@nematic.ieo.nctu.edu.tw">jou@nematic.ieo.nctu.edu.tw</a></dt>

<dd>Some support for Chinese(BIG5) characters.</dd>

<dt>Wei He <a
href="mailto:hewei@mail.ied.ac.cn">hewei@mail.ied.ac.cn</a></dt>

<dd>A lot of functionality for the Chinese(GBK) character set.</dd>

<dt>Zeev Suraski <a
href="mailto:bourbon@netvision.net.il">bourbon@netvision.net.il</a></dt>

<dd><code>FROM_UNIXTIME()</code> time formatting,
<code>ENCRYPT()</code> functions, and <code>bison</code> advisor.
Active mailing list member.</dd>

<dt>Luuk de Boer <a href="mailto:luuk@wxs.nl">luuk@wxs.nl</a></dt>

<dd>Ported (and extended) the benchmark suite to
<code>DBI</code>/<code>DBD</code>. Have been of great help with
<code>crash-me</code> and running benchmarks. Some new date
functions. The <code>mysql_setpermissions</code> script.</dd>

<dt>Jay Flaherty <a
href="mailto:fty@mediapulse.com">fty@mediapulse.com</a></dt>

<dd>Big parts of the Perl <code>DBI</code>/<code>DBD</code> section
in the manual.</dd>

<dt>Paul Southworth <a
href="mailto:pauls@etext.org">pauls@etext.org</a>, Ray Loyzaga <a
href="mailto:yar@cs.su.oz.au">yar@cs.su.oz.au</a></dt>

<dd>Proof-reading of the Reference Manual.</dd>

<dt>Alexis Mikhailov <a
href="mailto:root@medinf.chuvashia.su">root@medinf.chuvashia.su</a></dt>

<dd>User-definable functions (UDFs); <code>CREATE FUNCTION</code>
and <code>DROP FUNCTION</code>.</dd>

<dt>Andreas F. Bobak <a
href="mailto:bobak@relog.ch">bobak@relog.ch</a></dt>

<dd>The <code>AGGREGATE</code> extension to UDF functions.</dd>

<dt>Ross Wakelin <a
href="mailto:R.Wakelin@march.co.uk">R.Wakelin@march.co.uk</a></dt>

<dd>Help to set up InstallShield for MySQL-Win32.</dd>

<dt>Jethro Wright III <a
href="mailto:jetman@li.net">jetman@li.net</a></dt>

<dd>The <tt>`libmysql.dll'</tt> library.</dd>

<dt>James Pereria <a
href="mailto:jpereira@iafrica.com">jpereira@iafrica.com</a></dt>

<dd>Mysqlmanager, a Win32 GUI tool for administrating MySQL
Server.</dd>

<dt>Curt Sampson <a
href="mailto:cjs@portal.ca">cjs@portal.ca</a></dt>

<dd>Porting of MIT-pthreads to NetBSD/Alpha and NetBSD
1.3/i386.</dd>

<dt>Antony T. Curtis <a
href="mailto:antony.curtis@olcs.net">antony.curtis@olcs.net</a></dt>

<dd>Porting of the MySQL Database software to OS/2.</dd>

<dt>Martin Ramsch <a
href="mailto:m.ramsch@computer.org">m.ramsch@computer.org</a></dt>

<dd>Examples in the MySQL Tutorial.</dd>

<dt>Steve Harvey</dt>

<dd>For making <code>mysqlaccess</code> more secure.</dd>

<dt>Konark IA-64 Centre of Persistent Systems Private Limited</dt>

<dd><a
href="http://www.pspl.co.in/konark/">http://www.pspl.co.in/konark/</a>.
Help with the Win64 port of the MySQL server.</dd>

<dt>Albert Chin-A-Young.</dt>

<dd>Configure updates for Tru64, large file support and better TCP
wrappers support.</dd>

<dt>John Birrell</dt>

<dd>Emulation of <code>pthread_mutex()</code> for OS/2.</dd>

<dt>Benjamin Pflugmann</dt>

<dd>Extended <code>MERGE</code> tables to handle
<code>INSERTS</code>. Active member on the MySQL mailing
lists.</dd>

<dt>Guilhem Bichot</dt>

<dd>Fixed handling of exponents for <code>DECIMAL</code>. Author of
<code>mysql_tableinfo</code>.</dd>

<dt>Jocelyn Fournier</dt>

<dd>For excellent spotting and reporting innumerable bugs
(especially in the 4.1 subselect code)</dd>
</dl>

<p>Other contributors, bugfinders, and testers: James H. Thompson,
Maurizio Menghini, Wojciech Tryc, Luca Berra, Zarko Mocnik, Wim
Bonis, Elmar Haneke, <a
href="mailto:jehamby@lightside">jehamby@lightside</a>, <a
href="mailto:psmith@BayNetworks.com">psmith@BayNetworks.com</a>, <a
href="mailto:duane@connect.com.au">duane@connect.com.au</a>, Ted
Deppner <a href="mailto:ted@psyber.com">ted@psyber.com</a>, Mike
Simons, Jaakko Hyvatti.</p>

<p>And lots of bug report/patches from the folks on the mailing
list.</p>

<p>A big tribute goes to those that help us answer questions on the
<code>mysql@lists.mysql.com</code> mailing list:</p>

<dl compact="compact">
<dt>Daniel Koch <a
href="mailto:dkoch@amcity.com">dkoch@amcity.com</a></dt>

<dd>Irix setup.</dd>

<dt>Luuk de Boer <a href="mailto:luuk@wxs.nl">luuk@wxs.nl</a></dt>

<dd>Benchmark questions.</dd>

<dt>Tim Sailer <a
href="mailto:tps@users.buoy.com">tps@users.buoy.com</a></dt>

<dd><code>DBD-mysql</code> questions.</dd>

<dt>Boyd Lynn Gerber <a
href="mailto:gerberb@zenez.com">gerberb@zenez.com</a></dt>

<dd>SCO-related questions.</dd>

<dt>Richard Mehalick <a
href="mailto:RM186061@shellus.com">RM186061@shellus.com</a></dt>

<dd><code>xmysql</code>-related questions and basic installation
questions.</dd>

<dt>Zeev Suraski <a
href="mailto:bourbon@netvision.net.il">bourbon@netvision.net.il</a></dt>

<dd>Apache module configuration questions (log &amp; auth),
PHP-related questions, SQL syntax-related questions and other
general questions.</dd>

<dt>Francesc Guasch <a
href="mailto:frankie@citel.upc.es">frankie@citel.upc.es</a></dt>

<dd>General questions.</dd>

<dt>Jonathan J Smith <a
href="mailto:jsmith@wtp.net">jsmith@wtp.net</a></dt>

<dd>Questions pertaining to OS-specifics with Linux, SQL syntax,
and other things that might need some work.</dd>

<dt>David Sklar <a
href="mailto:sklar@student.net">sklar@student.net</a></dt>

<dd>Using MySQL from PHP and Perl.</dd>

<dt>Alistair MacDonald <a
href="mailto:A.MacDonald@uel.ac.uk">A.MacDonald@uel.ac.uk</a></dt>

<dd>Not yet specified, but is flexible and can handle Linux and
maybe HP-UX. Will try to get user to use
<code>mysqlbug</code>.</dd>

<dt>John Lyon <a
href="mailto:jlyon@imag.net">jlyon@imag.net</a></dt>

<dd>Questions about installing MySQL on Linux systems, using either
<tt>`.rpm'</tt> files or compiling from source.</dd>

<dt>Lorvid Ltd. <a
href="mailto:lorvid@WOLFENET.com">lorvid@WOLFENET.com</a></dt>

<dd>Simple billing/license/support/copyright issues.</dd>

<dt>Patrick Sherrill <a
href="mailto:patrick@coconet.com">patrick@coconet.com</a></dt>

<dd>ODBC and VisualC++ interface questions.</dd>

<dt>Randy Harmon <a
href="mailto:rjharmon@uptimecomputers.com">rjharmon@uptimecomputers.com</a></dt>

<dd><code>DBD</code>, Linux, some SQL syntax questions.</dd>
</dl>

<h2><a id="Supporters" name="Supporters"
href="manual_toc.html#Supporters">C.3 Supporters to MySQL</a></h2>

<p><a id="IDX1831" name="IDX1831"></a></p>

<p>While <code>MySQL AB</code> owns all copyrights in the
<code>MySQL server</code> and the <code>MySQL manual</code>, we
wish to recognise the following companies, which helped us finance
the development of the <code>MySQL server</code>, such as by paying
us for developing a new feature or giving us hardware for
development of the <code>MySQL server</code>.</p>

<dl compact="compact">
<dt>VA Linux / Andover.net</dt>

<dd>Funded replication.</dd>

<dt>NuSphere</dt>

<dd>Editing of the MySQL manual.</dd>

<dt>Stork Design studio</dt>

<dd>The MySQL web site in use between 1998-2000.</dd>

<dt>Intel</dt>

<dd>Contributed to development on Windows and Linux platforms.</dd>

<dt>Compaq</dt>

<dd>Contributed to Development on Linux/Alpha.</dd>

<dt>SWSoft</dt>

<dd>Development on the embedded <code>mysqld</code> version.</dd>

<dt>FutureQuest</dt>

<dd><code>--skip-show-database</code></dd>
</dl>

<h1><a id="News" name="News" href="manual_toc.html#News">D MySQL
Change History</a></h1>

<p><a id="IDX1832" name="IDX1832"></a> <a id="IDX1833"
name="IDX1833"></a> <a id="IDX1834" name="IDX1834"></a></p>

<p>This appendix lists the changes from version to version in the
MySQL source code.</p>

<p>We are now working actively on MySQL 4.x and will only provide
critical bug fixes for MySQL 3.23. We update this section as we add
new features, so that everybody can follow the development.</p>

<p>Our TODO section contains what further plans we have for 4.x.
See section <a href="manual.html#TODO">1.8 MySQL and The Future
(The TODO)</a>.</p>

<p>Note that we tend to update the manual at the same time we make
changes to MySQL. If you find a version listed here that you can't
find on the MySQL download page (<a
href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a>),
this means that the version has not yet been released!</p>

<h2><a id="News-4.1.x" name="News-4.1.x"
href="manual_toc.html#News-4.1.x">D.1 Changes in release 4.1.x
(Alpha)</a></h2>

<p><a id="IDX1835" name="IDX1835"></a></p>

<p>Version 4.1 of the MySQL server includes many enhancements and
new features:</p>

<ul>
<li>Subqueries: <code>SELECT * from t1 where t1.a=(SELECT t2.b FROM
t2)</code>.</li>

<li>Derived tables: <code>SELECT t1.a from t1, (select * from t2)
t3 WHERE t1.a=t3.a;</code></li>

<li><code>INSERT ... ON DUPLICATE KEY UPDATE</code> syntax. This
allows you to <code>UPDATE</code> an existing row if existed from
before. (<code>REPLACE</code> allows you to overwrite an existing
row, which is a different thing).</li>

<li>Character sets to be defined per column, table and
database.</li>

<li>Unicode (UTF8) support.</li>

<li><code>BTREE</code> index on <code>HEAP</code> tables.</li>

<li>Support for GIS (Geometrical data).</li>

<li><code>SHOW WARNINGS</code>; Shows warnings for the last
command. See section <a href="manual.html#SHOW_WARNINGS">4.5.6.9
<code>SHOW WARNINGS | ERRORS</code></a>.</li>

<li>Faster binary protocol used with prepared statements.</li>

<li>Create Table: <code>CREATE [TEMPORARY] TABLE [IF NOT EXISTS]
table LIKE table</code>.</li>
</ul>

<p>For a full list of changes, please refer to the changelog
sections for each individual 4.1.x release.</p>

<h3><a id="News-4.1.0" name="News-4.1.0"
href="manual_toc.html#News-4.1.0">D.1.1 Changes in release
4.1.0</a></h3>

<ul>
<li>Allow on to change mode for <code>ANSI_QUOTES</code> on the
fly.</li>

<li>Allow one to specify empty key lists for <code>USE|IGNORE|FORCE
INDEX</code>.</li>

<li><code>DROP TEMPORARY TABLE</code> now only drops temporary
tables and doesn't end transactions.</li>

<li>Added a support for <code>UNION</code> in derived tables</li>

<li>Timestamp is now returned as string of type <code>'YYYY-MM-DD
HH:MM:DD'</code>.</li>

<li>Faster binary protocol used with prepared statements.</li>

<li>In <code>CREATE TABLE foo (a int not null primary key)</code>
the <code>PRIMARY</code> word is now optional.</li>

<li>In <code>CREATE TABLE</code> the attribute <code>SERIAL</code>
is now an alias for <code>BIGINT NOT NULL AUTO_INCREMENT
UNIQUE</code>.</li>

<li><code>SELECT ... FROM DUAL</code> is an alias for <code>SELECT
...</code>. (To be compatible with some other databases).</li>

<li>If once creates a too long
<code>CHAR</code>/<code>VARCHAR</code> it's now automatically
changed to <code>TEXT</code> or <code>BLOB</code>; One will get a
warning in this case.</li>

<li>One can specify the different
<code>BLOB</code>/<code>TEXT</code> types with the syntax
<code>BLOB(length)</code> and <code>TEXT(length)</code>. MySQL will
automatically change it to one of the internal
<code>BLOB</code>/<code>TEXT</code> types.</li>

<li><code>CHAR BYTE</code> is an alias for <code>CHAR
BINARY</code>.</li>

<li><code>VARCHARACTER</code> is an alias for
<code>VARCHAR</code>.</li>

<li>New operators <code>integer MOD integer</code> and
<code>integer DIV integer</code>.</li>

<li><code>SERIAL DEFAULT VALUE</code> is an alias for
<code>AUTO_INCREMENT</code>.</li>

<li><code>TRUE</code> and <code>FALSE</code> are added as alias for
0 and 1.</li>

<li>Aliases are now forced in derived tables, as per SQL-99</li>

<li>Fixed <code>SELECT .. LIMIT 0</code> to return proper row count
for <code>SQL_CALC_FOUND_ROWS</code>.</li>

<li>One can specify many temporary directories to be used in a
round-robin fashion with:
<code>--tmpdir=dirname1:dirname2:dirname3</code>.</li>

<li>Subqueries: <code>SELECT * from t1 where t1.a=(SELECT t2.b FROM
t2)</code>.</li>

<li>Derived tables: <code>SELECT a from t1, (select * from t2)
WHERE t1.a=t2.a</code></li>

<li>Character sets to be defined per column, table and
database.</li>

<li>Unicode (UTF8) support.</li>

<li><code>BTREE</code> index on <code>HEAP</code> tables.</li>

<li>Faster embedded server.</li>

<li>One can add a comment per column in <code>CREATE
TABLE</code>.</li>

<li><code>SHOW FULL COLUMNS FROM table_name</code> shows column
comments.</li>

<li><code>ALTER DATABASE</code>.</li>

<li>Support for GIS (Geometrical data).</li>

<li><code>SHOW [COUNT(*)] WARNINGS</code>; Shows warnings from the
last command.</li>

<li>One can specify a column type for a colum in <code>CREATE TABLE
... SELECT</code> by defining the column in the <code>CREATE</code>
part. 

<pre>
CREATE TABLE foo (a tinyint not null) SELECT b+1 AS 'a' FROM bar;
</pre>
</li>

<li><code>expr SOUNDS LIKE expr</code> same as
<code>SOUNDEX(expr)=SOUNDEX(expr)</code>.</li>

<li><code>VARIANCE(expr)</code> returns the variance of
<code>expr</code></li>

<li>One can create a table from the existing table using
<code>CREATE [TEMPORARY] TABLE [IF NOT EXISTS] table LIKE
table</code>. The table can be either normal or temporary.</li>
</ul>

<h2><a id="News-4.0.x" name="News-4.0.x"
href="manual_toc.html#News-4.0.x">D.2 Changes in release 4.0.x
(Gamma)</a></h2>

<p><a id="IDX1836" name="IDX1836"></a></p>

<p>Version 4.0 of the MySQL server includes many enhancements and
new features:</p>

<ul>
<li>The <code>InnoDB</code> table type is now included in the
standard binaries, adding transactions, row-level locking, and
foreign keys. See section <a href="manual.html#InnoDB">7.5
<code>InnoDB</code> Tables</a>.</li>

<li>A query cache, offering vastly increased performance for many
applications. By caching complete result sets, later identical
queries can return instantly. See section <a
href="manual.html#Query_Cache">6.9 MySQL Query Cache</a>.</li>

<li>Improved full-text indexing with boolean mode, truncation, and
phrase searching. See section <a
href="manual.html#Fulltext_Search">6.8 MySQL Full-text
Search</a>.</li>

<li>Enhanced <code>MERGE</code> tables, now supporting
<code>INSERT</code>s and <code>AUTO_INCREMENT</code>. See section
<a href="manual.html#MERGE">7.2 <code>MERGE</code> Tables</a>.</li>

<li><code>UNION</code> syntax in <code>SELECT</code>. See section
<a href="manual.html#UNION">6.4.1.2 <code>UNION</code>
Syntax</a>.</li>

<li>Multi-table <code>DELETE</code> statements. See section <a
href="manual.html#DELETE">6.4.6 <code>DELETE</code>
Syntax</a>.</li>

<li><code>libmysqld</code>, the embedded server library. See
section <a href="manual.html#libmysqld">8.4.9 libmysqld, the
Embedded MySQL Server Library</a>.</li>

<li>Additional <code>GRANT</code> privilege options for even
tighter control and security. See section <a
href="manual.html#GRANT">4.3.1 <code>GRANT</code> and
<code>REVOKE</code> Syntax</a>.</li>

<li>Management of user resources in the <code>GRANT</code> system,
particularly useful for ISPs and other hosting providers. See
section <a href="manual.html#User_resources">4.3.6 Limiting user
resources</a>.</li>

<li>Dynamic server variables, allowing configuration changes
without having to take down the server. See section <a
href="manual.html#SET_OPTION">5.5.6 <code>SET</code>
Syntax</a>.</li>

<li>Improved replication code and features. See section <a
href="manual.html#Replication">4.10 Replication in MySQL</a>.</li>

<li>Numerous new functions and options.</li>

<li>Changes to existing code for enhanced performance and
reliability.</li>
</ul>

<p>For a full list of changes, please refer to the changelog
sections for each individual 4.0.x release.</p>

<h3><a id="News-4.0.11" name="News-4.0.11"
href="manual_toc.html#News-4.0.11">D.2.1 Changes in release 4.0.11
(not released yet)</a></h3>

<h3><a id="News-4.0.10" name="News-4.0.10"
href="manual_toc.html#News-4.0.10">D.2.2 Changes in release 4.0.10
(to be released shortly)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li>Added option <code>--log-error[=file_name]</code> to
<code>mysqld_safe</code> and <code>mysqld</code>. This option will
force all error message to be put in a log file if the option
<code>--console</code> is not given. On Windows
<code>--log-error</code> is enabled as default.</li>

<li>Changed some things from <code>Warning:</code> to
<code>Note:</code> in the log files.</li>

<li>The mysqld server should now compile on Netware.</li>

<li>Added optimisation that if one does <code>GROUP BY ... ORDER BY
NULL</code> then result is not sorted.</li>

<li>New command-line option for <tt>`mysqld'</tt> to
replace/disable built-in stopword list, that is used in fulltext
search. See section <a href="manual.html#SHOW_VARIABLES">4.5.6.4
<code>SHOW VARIABLES</code></a>.</li>

<li>Changed default stack size from 64K to 192K; This fixes a core
dump problem on RedHat 8.0 and other systems with a glibc that
requires &gt; 128K stack for <code>gethostbyaddr()</code> to
resolve a hostname. You can fix this for earlier MySQL versions by
starting mysqld with <code>--thread-stack=192K</code>.</li>

<li>Added <code>mysql_waitpid</code> to the binary distribution and
the <code>MySQL-client</code> RPM subpackage (required for
<code>mysql-test-run</code>).</li>

<li>Renamed the main <code>MySQL</code> RPM package to
<code>MySQL-server</code>. When updating from an older version,
<code>MySQL-server.rpm</code> will simply replace
<code>MySQL.rpm</code>.</li>

<li>If a slave is configured with
<code>replicate_wild_do_table=db.%</code> or
<code>replicate_wild_ignore_table=db.%</code>, these rules will be
applied to <code>CREATE/DROP DATABASE</code> too.</li>

<li>Added timeout value for <code>MASTER_POS_WAIT()</code>.</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>Fixed initialization of the random seed for newly created
threads to give a better <code>rand()</code> distribution from the
first call.</li>

<li>Fixed a bug that caused <code>mysqld</code> to hang when a
table was opened with the <code>HANDLER</code> command and then
dropped without being closed.</li>

<li>Fixed bug in logging to binary log (which affects replication)
a query that inserts a <code>NULL</code> in an
<code>auto_increment</code> field and also uses
<code>LAST_INSERT_ID()</code>.</li>

<li>Fixed an unlikely bug that could cause a memory overrun when
using <code>ORDER BY constant_expression</code>.</li>

<li>Fixed a table corruption in <tt>`myisamchk'</tt>'s parallel
repair mode.</li>

<li>Fixed bug in query cache invalidation on simple table
renaming.</li>

<li>Fixed bug in <code>mysqladmin --relative</code>.</li>

<li>On some 64 bit systems, <code>show status</code> reported a
strange number for <code>Open_files</code> and
<code>Open_streams</code>.</li>

<li>Fixed wrong number of columns in <code>EXPLAIN</code> on empty
table.</li>

<li>Fixed bug in <code>LEFT JOIN</code> that caused zero rows to be
returned in the case the <code>WHERE</code> condition was evaluated
as <code>FALSE</code> after reading const tables. (Unlikely
condition).</li>

<li><code>FLUSH PRIVILEGES</code> didn't correctly flush
table/column privileges when <code>mysql.tables_priv</code> is
empty.</li>

<li>Fixed bug in replication when using <code>LOAD DATA
INFILE</code> one a file that updated and auto_increment field with
<code>NULL</code> or <code>0</code>. This bug only affected MySQL
4.0 masters (not slaves or MySQL 3.23 masters).
<strong>NOTE</strong>: If you have a slave that has replicated a
file with generated auto_increment fields then the slave data is
corrupted and you should reinitialise the affected tables from the
master.</li>

<li>Fixed possible memory overrun when sending a blob &gt; 16M to
the client.</li>

<li>Fixed wrong error message when setting a <code>NOT NULL</code>
field to an expression that returned <code>NULL</code>.</li>

<li>Fixed core dump bug in <code>str LIKE "%other_str%"</code>
where <code>str</code> or <code>other_str</code> contained
characters &gt;= 128.</li>

<li>Fixed bug: When executing on master <code>LOAD DATA</code> and
InnoDB failed with <code>table full</code> error the binary log was
corrupted.</li>
</ul>

<h3><a id="News-4.0.9" name="News-4.0.9"
href="manual_toc.html#News-4.0.9">D.2.3 Changes in release 4.0.9
(09 Jan 2003)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li><code>OPTIMIZE TABLE</code> will for MyISAM tables treat all
<code>NULL</code> values as different when calculating cardinality.
This helps in optimising joins between tables where one of the
tables has a lot of <code>NULL</code> values in a indexed column: 

<pre>
SELECT * from t1,t2 where t1.a=t2.key_with_a_lot_of_null;
</pre>
</li>

<li>Added join operator <code>FORCE INDEX (key_list)</code>. This
acts likes <code>USE INDEX (key_list)</code> but with the addition
that a table scan is assumed to be VERY expensive. One bad thing
with this is that it makes <code>FORCE</code> a reserved word.</li>

<li>Reset internal row buffer in MyISAM after each query. This will
reduce memory in the case you have a lot of big blobs in a
table.</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>A security patch in 4.0.8 causes the mysqld server to die if
the remote hostname can't be resolved. This is now fixed.</li>

<li>Fixed crash when replication big <code>LOAD DATA INFILE</code>
statement that caused log rotation.</li>
</ul>

<h3><a id="News-4.0.8" name="News-4.0.8"
href="manual_toc.html#News-4.0.8">D.2.4 Changes in release 4.0.8
(07 Jan 2003)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li>Default <code>max_packet_length</code> for libmysqld.c is now
1024*1024*1024.</li>

<li>One can now specify <code>max_allowed_packet</code> in a file
ready by <code>mysql_options(MYSQL_READ_DEFAULT_FILE)</code>. for
clients.</li>

<li>When sending a too big packet to the server with the not
compressed protocol, the client now gets an error message instead
of a lost connection.</li>

<li>We now send big queries/result rows in bigger hunks, which
should give a small speed improvement.</li>

<li>Fixed some bugs with the compressed protocol for rows &gt;
16M.</li>

<li>InnoDB tables now also supports <code>ON UPDATE CASCADE</code>
in <code>FOREIGN KEY</code> constraints. See the InnoDB section in
the manual for the InnoDB changelog.</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>Fixed bug in <code>ALTER TABLE</code> with BDB tables.</li>

<li>Fixed core dump bug in <code>QUOTE()</code> function.</li>

<li>Fixed a bug in handling communication packets bigger than 16M.
Unfortunately this required a protocol change; If you upgrade the
server to 4.0.8 and above and have clients that uses packets &gt;=
255*255*255 bytes (=16581375) you must also upgrade your clients to
at least 4.0.8. If you don't upgrade, the clients will hang when
sending a big packet.</li>

<li>Fixed bug when sending blobs longer than 16M to client.</li>

<li>Fixed bug in <code>GROUP BY</code> when used on BLOB column
with <code>NULL</code> values.</li>

<li>Fixed a bug in handling <code>NULL</code>s in <code>CASE</code>
... WHEN ...</li>
</ul>

<h3><a id="News-4.0.7" name="News-4.0.7"
href="manual_toc.html#News-4.0.7">D.2.5 Changes in release 4.0.7
(20 Dec 2002)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li><code>mysqlbug</code> now also reports the compiler version
used for building the binaries (if the compiler supports the option
<code>--version</code>).</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>Fixed compilation problems on OpenUnix and HPUX 10.20.</li>

<li>Fixed some optimisation problems when compiling MySQL with
<code>-DBIG_TABLES</code> on a 32 bit system.</li>

<li><code>mysql_drop_db()</code> didn't check permissions properly
so anyone could drop another users database. <code>DROP
DATABASE</code> is checked properly.</li>
</ul>

<h3><a id="News-4.0.6" name="News-4.0.6"
href="manual_toc.html#News-4.0.6">D.2.6 Changes in release 4.0.6
(14 Dec 2002: Gamma)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li>Added syntax support for <code>CHARACTER SET xxx</code> and
<code>CHARSET=xxx</code> table options (to be able to read table
dumps from 4.1).</li>

<li>Fixed replication bug that caused the slave to loose its
position in some cases when the replication log was rotated.</li>

<li>Fixed that a slave will restart from the start of a transaction
if it's killed in the middle of one.</li>

<li>Moved the manual pages from <tt>`man'</tt> to
<tt>`man/man1'</tt> in the binary distributions.</li>

<li>The default type returned by <code>IFNULL(A,B)</code> is now
set to be the more 'general' of the types of <code>A</code> and
<code>B</code>. (The order is <code>STRING</code>,
<code>REAL</code> or <code>INTEGER</code>).</li>

<li>Moved the <tt>`mysql.server'</tt> startup script in the RPM
packages from <tt>`/etc/rc.d/init.d/mysql'</tt> to
<tt>`/etc/init.d/mysql'</tt> (which almost all current Linux
distributions support for LSB compliance).</li>

<li>Added <code>Qcache_lowmem_prunes</code> status variable (number
of queries that were deleted from cache because of low
memory).</li>

<li>Fixed <code>mysqlcheck</code> so it can deal with table names
containing dashes.</li>

<li>Bulk insert optimisation (see section <a
href="manual.html#SHOW_VARIABLES">4.5.6.4 <code>SHOW
VARIABLES</code></a>) is no longer used when inserting small (less
than 100) number of rows.</li>

<li>Optimisation added for queries like <code>SELECT ... FROM
merge_table WHERE indexed_column=constant_expr</code>.</li>

<li>Added functions <code>LOCALTIME</code> and
<code>LOCALTIMESTAMP</code> as synonyms for
<code>NOW()</code>.</li>

<li><code>CEIL</code> is now an alias for
<code>CEILING</code>.</li>

<li>The <code>CURRENT_USER()</code> function can be used to get a
<code>user@host</code> value as it was matched in the
<code>GRANT</code> system. See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</li>

<li>Fixed <code>CHECK</code> constraints to be compatible with ANSI
SQL. This made <code>CHECK</code> a reserved word. (Checking of
<code>CHECK</code> constraints is still not implemented).</li>

<li>Added <code>CAST(... as CHAR)</code>.</li>

<li>Added PostgreSQL compatible <code>LIMIT</code> syntax:
<code>SELECT ... LIMIT # OFFSET #</code></li>

<li><code>mysql_change_user()</code> will now reset the connection
to the state of a fresh connect (Ie, <code>ROLLBACK</code> any
active transaction, close all temporary tables, reset all user
variables etc..)</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>Fixed number of found rows returned in <code>multi table
updates</code></li>

<li>Make <code>--lower-case-table-names</code> default on MacOSX as
the file system is case sensitive.</li>

<li>Transactions in <code>AUTOCOMMIT=0</code> mode didn't rotate
binary log.</li>

<li>A fix for the bug in a <code>SELECT</code> with joined tables
with <code>ORDER BY</code> and <code>LIMIT</code> clause when
filesort had to be used. In that case <code>LIMIT</code> was
applied to filesort of one of the tables, although it could not be.
This fix solved problems with <code>LEFT JOIN</code> too.</li>

<li><code>mysql_server_init()</code> now makes a copy of all
arguments. This fixes a problem when using the embedded server in
C# program.</li>

<li>Fixed buffer overrun in <code>libmysqlclient</code> library
that allowed a malicious <code>MySQL</code> server to crash the
client application.</li>

<li>Fixed security-related bug in <code>mysql_change_user()</code>
handling. All users are strongly recommended to upgrade to version
4.0.6.</li>

<li>Fixed bug that prevented <code>--chroot</code> command-line
option of <code>mysqld</code> from working.</li>

<li>Fixed bug in phrase operator <code>"..."</code> in boolean
full-text search.</li>

<li>Fixed bug that caused <code>OPTIMIZE TABLE</code> to corrupt
the table under some rare circumstances.</li>

<li>Part rewrite of multi-table-update to optimise it, make it
safer and more bug free.</li>

<li><code>LOCK TABLES</code> now works together with
multi-table-update and multi-table-delete.</li>

<li><code>--replicate-do=xxx</code> didn't work for
<code>UPDATE</code> commands. (Bug introduced in 4.0.0)</li>

<li>Fixed shutdown problem on Mac OS X.</li>

<li>Major InnoDB bugs in <code>REPLACE, AUTO_INCREMENT, INSERT INTO
... SELECT ...</code> were fixed. See the InnoDB changelog in the
InnoDB section of the manual.</li>
</ul>

<h3><a id="News-4.0.5" name="News-4.0.5"
href="manual_toc.html#News-4.0.5">D.2.7 Changes in release 4.0.5
(13 Nov 2002)</a></h3>

<p>Functionality added or changed:</p>

<ul>
<li>Changed handling of last argument in <code>WEEK()</code> so
that one can get week number according to the ISO 8601
specification. (Old code should still work).</li>

<li>Fixed that <code>INSERT DELAYED</code> threads doesn't hang on
<code>Waiting for INSERT</code> when one sends a
<code>SIGHUP</code> to mysqld.</li>

<li>Change that <code>AND</code> works according to SQL ANSI99 when
it comes to <code>NULL</code> handling. In practice, this only
affects queries where you do something like <code>WHERE ... NOT
(NULL AND 0)</code>.</li>

<li><code>mysqld</code> will now resolve <code>basedir</code> to
its full path (with <code>realpath()</code>). This enables one to
use relative symlinks to the MySQL installation directory. This
will however cause <code>show variables</code> to report different
directories on systems where there is a symbolic link in the
path.</li>

<li>Fixed that MySQL will not use index scan on index disabled with
<code>IGNORE INDEX</code> or <code>USE INDEX</code>. to be
ignored.</li>

<li>Added <code>--use-frm</code> option to <code>mysqlcheck</code>.
When used with <code>REPAIR</code>, it gets the table structure
from the <code>.frm</code> file, so the table can be repaired even
if the <code>.MYI</code> header is corrupted.</li>

<li>Fixed bug in <code>MAX()</code> optimisation when used with
<code>JOIN</code> and <code>ON</code> expressions.</li>

<li>Added support for reading of MySQL 4.1 table definition
files.</li>

<li><code>BETWEEN</code> behaviour changed (see section <a
href="manual.html#Comparison_Operators">6.3.1.2 Comparison
Operators</a>). Now <code>datetime_col BETWEEN timestamp AND
timestamp</code> should work as expected.</li>

<li>One can create <code>TEMPORARY</code> <code>MERGE</code> tables
now.</li>

<li><code>DELETE FROM myisam_table</code> now shrinks not only the
<tt>`.MYD'</tt> file but also the <tt>`.MYI'</tt> file.</li>

<li>When one uses the <code>--open-files-limit=#</code> option to
<code>mysqld_safe</code> it's now passed on to
<code>mysqld</code>.</li>

<li>Changed output from <code>EXPLAIN</code> from <code>'where
used'</code> to <code>'Using where'</code> to make it more in line
with other output.</li>

<li>Removed variable <code>safe_show_database</code> as it was not
used anymore.</li>

<li>Updated source tree to be built using <code>automake 1.5</code>
and <code>libtool 1.4</code>.</li>

<li>Fixed an inadvertently changed option
(<code>--ignore-space</code>) back to the original
<code>--ignore-spaces</code> in <code>mysqlclient</code>. (Both
syntaxes will work).</li>

<li>Don't require <code>UPDATE</code> privilege when using
<code>REPLACE</code>.</li>

<li>Added support for <code>DROP TEMPORARY TABLE ...</code>, to be
used to make replication safer.</li>

<li>When transactions are enabled, all commands that update
temporary tables inside a <code>BEGIN/COMMIT</code> are now stored
in the binary log on <code>COMMIT</code> and not stored if one does
<code>ROLLBACK</code>. This fixes some problems with
non-transactional temporary tables used inside transactions.</li>

<li>Allow braces in joins in all positions. Formerly, things like
<code>SELECT * FROM (t2 LEFT JOIN t3 USING (a)), t1</code> worked,
but not <code>SELECT * FROM t1, (t2 LEFT JOIN t3 USING (a))</code>.
Note that braces are simply removed, they do not change the way the
join is executed.</li>

<li>InnoDB now supports also isolation levels <code>READ
UNCOMMITTED</code> and <code>READ COMMITTED</code>. For a detailed
InnoDB changelog, see section <a
href="manual.html#InnoDB_change_history">7.5.14 InnoDB Change
History</a> in this manual.</li>
</ul>

<p>Bugs fixed:</p>

<ul>
<li>Fixed bug in <code>MAX()</code> optimisation when used with
<code>JOIN</code> and <code>ON</code> expressions.</li>

<li>Fixed that <code>INSERT DELAY</code> threads don't hang on
<code>Waiting for INSERT</code> when one sends a
<code>SIGHUP</code> to <code>mysqld</code>.</li>

<li>Fixed that MySQL will not use an index scan on an index that
has been disabled with <code>IGNORE INDEX</code> or <code>USE
INDEX</code>.</li>

<li>Corrected test for <code>root</code> user in
<code>mysqld_safe</code>.</li>

<li>Fixed error message issued when storage engine cannot do
<code>CHECK</code> or <code>REPAIR</code>.</li>

<li>Fixed rare core dump problem in complicated <code>GROUP
BY</code> queries that didn't return any result.</li>

<li>Fixed <code>mysqlshow</code> to work properly with wildcarded
database names and with database names that contain
underscores.</li>

<li>Portability fixes to get MySQL to compile cleanly with Sun
Forte 5.0.</li>

<li>Fixed <code>MyISAM</code> crash when using dynamic-row tables
with huge numbers of packed fields.</li>

<li>Fixed query cache behaviour with <code>BDB</code>
transactions.</li>

<li>Fixed possible floating point exception in <code>MATCH</code>
relevance calculations.</li>

<li>Fixed bug in full-text search <code>IN BOOLEAN MODE</code> that
made <code>MATCH</code> to return incorrect relevance value in some
complex joins.</li>

<li>Fixed a bug that limited <code>MyISAM</code> key length to a
value slightly less that 500. It is exactly 500 now.</li>

<li>Fixed that <code>GROUP BY</code> on columns that may have a
<code>NULL</code> value doesn't always use disk based temporary
tables.</li>

<li>The filename argument for the <code>--des-key-file</code>
argument to <code>mysqld</code> is interpreted relative to the data
directory if given as a relative pathname.</li>

<li>Removed a condition that temp table with index on column that
can be <code>NULL</code> has to be <code>MyISAM</code>. This was
okay for 3.23, but not needed in 4.*. This resulted in slowdown in
many queries since 4.0.2.</li>

<li>Small code improvement in multi-table updates.</li>

<li>Fixed a newly introduced bug that caused <code>ORDER BY ...
LIMIT #</code> to not return all rows.</li>

<li>Fixed a bug in multi-table deletes when outer join is used on
an empty table, which gets first to be deleted.</li>

<li>Fixed a bug in multi-table updates when a single table is
updated.</li>

<li>Fixed bug that caused <code>REPAIR TABLE</code> and
<code>myisamchk</code> to corrupt <code>FULLTEXT</code>
indexes.</li>

<li>Fixed bug with caching the <code>mysql</code> grant table
database. Now queries in this database are not cached in the query
cache.</li>

<li>Small fix in <code>mysqld_safe</code> for some shells.</li>

<li>Give error if a <code>MyISAM</code> <code>MERGE</code> table
has more than 2 ^ 32 rows and MySQL was not compiled with
<code>-DBIG_TABLES</code>.</li>

<li>Fixed some <code>ORDER BY ... DESC</code> problems with
<code>InnoDB</code> tables.</li>
</ul>

<h3><a id="News-4.0.4" name="News-4.0.4"
href="manual_toc.html#News-4.0.4">D.2.8 Changes in release 4.0.4
(29 Sep 2002)</a></h3>

<ul>
<li>Fixed bug where <code>GRANT</code>/<code>REVOKE</code> failed
if hostname was given in non-matching case.</li>

<li>Don't give warning in <code>LOAD DATA INFILE</code> when
setting a <code>timestamp</code> to a string value of
<code>'0'</code>.</li>

<li>Fixed bug in <code>myisamchk -R</code> mode.</li>

<li>Fixed bug that caused <code>mysqld</code> to crash on
<code>REVOKE</code>.</li>

<li>Fixed bug in <code>ORDER BY</code> when there is a constant in
the <code>SELECT</code> statement.</li>

<li>One didn't get an error message if <code>mysqld</code> couldn't
open the privilege tables.</li>

<li><code>SET PASSWORD FOR ...</code> closed the connection in case
of errors (bug from 4.0.3).</li>

<li>Increased max possible <code>max_allowed_packet</code> in
<code>mysqld</code> to 1GB.</li>

<li>Fixed bug when doing a multi-line <code>INSERT</code> on a
table with an <code>AUTO_INCREMENT</code> key which was not in the
first part of the key.</li>

<li>Changed <code>LOAD DATA INFILE</code> to not recreate index if
the table had rows from before.</li>

<li>Fixed overrun bug when calling <code>AES_DECRYPT()</code> with
incorrect arguments.</li>

<li><code>--skip-ssl</code> can now be used to disable SSL in the
MySQL clients, even if one is using other SSL options in an option
file or previously on the command line.</li>

<li>Fixed bug in <code>MATCH ... AGAINST( ... IN BOOLEAN
MODE)</code> used with <code>ORDER BY</code>.</li>

<li>Added <code>LOCK TABLES</code> and <code>CREATE TEMPORARY
TABLES</code> privilege on the database level. One must run the
<code>mysql_fix_privilege_tables</code> script on old installations
to activate these.</li>

<li>In <code>SHOW TABLE ... STATUS</code>, compressed tables
sometimes showed up as <code>dynamic</code>.</li>

<li><code>SELECT @@[global|session].var_name</code> didn't report
<code>global | session</code> in the result column name.</li>

<li>Fixed problem in replication that <code>FLUSH LOGS</code> in a
circular replication setup created an infinite number of binary log
files. Now a <code>rotate-binary-log</code> command in the binary
log will not cause slaves to rotate logs.</li>

<li>Removed <code>STOP EVENT</code> from binary log when doing
<code>FLUSH LOGS</code>.</li>

<li>Disable the use of <code>SHOW NEW MASTER FOR SLAVE</code> as
this needs to be completely changed in 4.1.</li>

<li>Fixed a bug with constant expression (e.g. field of a one-row
table, or field from a table, referenced by a <code>UNIQUE</code>
key) appeared in <code>ORDER BY</code> part of <code>SELECT
DISTINCT</code>.</li>

<li><code>--log-binary=a.b.c</code> now properly strips off
<code>.b.c</code>.</li>

<li><code>FLUSH LOGS</code> removed numerical extension for all
future update logs.</li>

<li><code>GRANT ... REQUIRE</code> didn't store the SSL information
in the <code>mysql.user</code> table if SSL was not enabled in the
server.</li>

<li><code>GRANT ... REQUIRE NONE</code> can now be used to remove
SSL information.</li>

<li><code>AND</code> is now optional between <code>REQUIRE</code>
options.</li>

<li><code>REQUIRE</code> option was not properly saved, which could
cause strange output in <code>SHOW GRANTS</code>.</li>

<li>Fixed that <code>mysqld --help</code> reports correct values
for <code>--datadir</code> and <code>--bind-address</code>.</li>

<li>Fixed that one can drop UDFs that didn't exist when
<code>mysqld</code> was started.</li>

<li>Fixed core dump problem with <code>SHOW VARIABLES</code> on
some 64 bit systems (like Solaris sparc).</li>

<li>Fixed a bug in my_getopt; <code>--set-variable</code> syntax
didn't work for those options that didn't have a valid variable in
my_option struct. This affected at least
<code>default-table-type</code> option.</li>

<li>Fixed a bug from 4.0.2 that caused <code>REPAIR TABLE</code>
and <code>myisamchk --recover</code> to fail on tables with
duplicates in a unique key.</li>

<li>Fixed a bug from 4.0.3 in calculating the default field type
for some functions. This affected queries of type <code>CREATE
TABLE table_name SELECT expression(),...</code></li>

<li>Fixed bug in queries of type <code>SELECT * FROM table-list
GROUP BY ...</code> and <code>SELECT DISTINCT * FROM
...</code>.</li>

<li>Fixed bug with the <code>--slow-log</code> when logging an
administrator command (like <code>FLUSH TABLES</code>).</li>

<li>Fixed a bug that <code>OPTIMIZE</code> of locked and modified
table, reported table corruption.</li>

<li>Fixed a bug in my_getopt in handling of special prefixes
(<code>--skip-</code>, <code>--enable-</code>).
<code>--skip-external-locking</code> didn't work and the bug may
have affected other similar options.</li>

<li>Fixed bug in checking for output file name of the
<code>tee</code> option.</li>

<li>Added some more optimisation to use index for <code>SELECT ...
FROM many_tables .. ORDER BY key limit #</code></li>

<li>Fixed problem in <code>SHOW OPEN TABLES</code> when a user
didn't have access permissions to one of the opened tables.</li>
</ul>

<h3><a id="News-4.0.3" name="News-4.0.3"
href="manual_toc.html#News-4.0.3">D.2.9 Changes in release 4.0.3
(26 Aug 2002: Beta)</a></h3>

<ul>
<li>Fixed problem with <code>configure ...
--localstatedir=...</code>.</li>

<li>Cleaned up <code>mysql.server</code> script.</li>

<li>Fixed a bug in <code>mysqladmin shutdown</code> when pid file
was modified while <code>mysqladmin</code> was still waiting for
the previous one to disappear. This could happen during a very
quick restart and caused <code>mysqladmin</code> to hang until
<code>shutdown_timeout</code> seconds had passed.</li>

<li>Don't increment warnings when setting
<code>AUTO_INCREMENT</code> columns to <code>NULL</code> in
<code>LOAD DATA INFILE</code>.</li>

<li>Fixed all boolean type variables/options to work with the old
syntax, e.g. all of these work: --lower-case-table-names,
--lower-case-table-names=1, -O lower-case-table-names=1,
--set-variable=lower-case-table-names=1</li>

<li>Fixed shutdown problem (SIGTERM signal handling) on Solaris.
(Bug from 4.0.2).</li>

<li><code>SHOW MASTER STATUS</code> now returns an empty set if
binary log is not enabled.</li>

<li><code>SHOW SLAVE STATUS</code> now returns an empty set if
slave is not initialised.</li>

<li>Don't update MyISAM index file on update if not strictly
necessary.</li>

<li>Fixed bug in <code>SELECT DISTINCT ... FROM many_tables ORDER
BY not-used-column</code>.</li>

<li>Fixed a bug with <code>BIGINT</code>s and quoted strings.</li>

<li>Added <code>QUOTE()</code> function that performs SQL quoting
to produce values that can be used as data values in queries.</li>

<li>Changed variable <code>DELAY_KEY_WRITE</code> to an enum to
allow one set <code>DELAY_KEY_WRITE</code> for all tables without
taking down the server.</li>

<li>Changed behaviour of <code>IF(condition,column,NULL)</code> so
that it returns the value of the column type.</li>

<li>Made <code>safe_mysqld</code> a symlink to
<code>mysqld_safe</code> in binary distribution.</li>

<li>Fixed security bug when having an empty database name in the
<code>user.db</code> table.</li>

<li>Fixed some problems with <code>CREATE TABLE ... SELECT
function()</code>.</li>

<li><code>mysqld</code> now has the option <code>--temp-pool</code>
enabled by default as this gives better performance with some
operating systems.</li>

<li>Fixed hang in <code>CHANGE MASTER TO</code> if the slave thread
died very quickly.</li>

<li>Big cleanup in replication code (less logging, better error
messages, etc..)</li>

<li>If the <code>--code-file</code> option is specified, the server
calls <code>setrlimit()</code> to set the maximum allowed core file
size to unlimited, so core files can be generated.</li>

<li>Fixed bug in query cache after temporary table creation.</li>

<li>Added <code>--count=N</code> (<code>-c</code>) option to
<code>mysqladmin</code>, to make the program do only <code>N</code>
iterations. To be used with <code>--sleep</code> (<code>-i</code>).
Useful in scripts.</li>

<li>Fixed bug in multi-table <code>UPDATE</code>: when updating a
table, <code>do_select()</code> became confused about reading
records from a cache.</li>

<li>Fixed bug in multi-table <code>UPDATE</code> when several
fields were referenced from a single table</li>

<li>Fixed bug in truncating nonexisting table.</li>

<li>Fixed bug in <code>REVOKE</code> that caused user resources to
be randomly set.</li>

<li>Fixed bug in <code>GRANT</code> for the new <code>CREATE
TEMPORARY TABLE</code> privilege.</li>

<li>Fixed bug in multi-table <code>DELETE</code> when tables are
re-ordered in the table initialisation method and ref_lengths are
of different sizes.</li>

<li>Fixed two bugs in <code>SELECT DISTINCT</code> with large
tables.</li>

<li>Fixed bug in query cache initialisation with very small query
cache size.</li>

<li>Allow <code>DEFAULT</code> with <code>INSERT</code>
statement.</li>

<li>The startup parameters <code>myisam_max_sort_file_size</code>
and <code>myisam_max_extra_sort_file_size</code> are now given in
bytes, not megabytes.</li>

<li>External system locking of
<code>MyISAM</code>/<code>ISAM</code> files is now turned off by
default. One can turn this on with <code>--external-locking</code>.
(For most users this is never needed).</li>

<li>Fixed core dump bug with <code>INSERT ... SET
db_name.table_name.colname=''</code>.</li>

<li>Fixed client hangup bug when using some SQL commands with wrong
syntax.</li>

<li>Fixed a timing bug in <code>DROP DATABASE</code></li>

<li>New <code>SET [GLOBAL | SESSION]</code> syntax to change
thread-specific and global server variables at runtime.</li>

<li>Added variable <code>slave_compressed_protocol</code>.</li>

<li>Renamed variable <code>query_cache_startup_type</code> to
<code>query_cache_type</code>,
<code>myisam_bulk_insert_tree_size</code> to
<code>bulk_insert_buffer_size</code>, <code>record_buffer</code> to
<code>read_buffer_size</code> and <code>record_rnd_buffer</code> to
<code>record_rnd_buffer_size</code>.</li>

<li>Renamed some SQL variables, but old names will still work until
5.0. See section <a href="manual.html#Upgrading-from-3.23">2.5.2
Upgrading From Version 3.23 to Version 4.0</a>.</li>

<li>Renamed <code>--skip-locking</code> to
<code>--skip-external-locking</code>.</li>

<li>Removed unused variable <code>query_buffer_size</code>.</li>

<li>Fixed a bug that made the pager option in the
<code>mysql</code> client non-functional.</li>

<li>Added full <code>AUTO_INCREMENT</code> support to
<code>MERGE</code> tables.</li>

<li>Extended <code>LOG()</code> function to accept an optional
arbitrary base parameter. See section <a
href="manual.html#Mathematical_functions">6.3.3.2 Mathematical
Functions</a>.</li>

<li>Added <code>LOG2()</code> function (useful for finding out how
many bits a number would require for storage).</li>

<li>Added <code>LN()</code> natural logarithm function for
compatibility with other databases. It is synonymous with
<code>LOG(X)</code>.</li>
</ul>

<h3><a id="News-4.0.2" name="News-4.0.2"
href="manual_toc.html#News-4.0.2">D.2.10 Changes in release 4.0.2
(01 Jul 2002)</a></h3>

<ul>
<li>Cleaned up <code>NULL</code> handling for default values in
<code>DESCRIBE table_name</code>.</li>

<li>Fixed <code>truncate()</code> to round up negative values to
the nearest integer.</li>

<li>Changed <code>--chroot=path</code> option to execute
<code>chroot()</code> immediately after all options have been
parsed.</li>

<li>Don't allow database names that contain <samp>`\'</samp>.</li>

<li><code>lower_case_table_names</code> now also affects database
names.</li>

<li>Added <code>XOR</code> operator (logical and bitwise
<code>XOR</code>) with <code>^</code> as a synonym for bitwise
<code>XOR</code>.</li>

<li>Added function <code>IS_FREE_LOCK("lock_name")</code>. Based on
code contributed by Hartmut Holzgraefe <a
href="mailto:hartmut@six.de">hartmut@six.de</a>.</li>

<li>Removed <code>mysql_ssl_clear()</code> from C API, as it was
not needed.</li>

<li><code>DECIMAL</code> and <code>NUMERIC</code> types can now
read exponential numbers.</li>

<li>Added <code>SHA1()</code> function to calculate 160 bit hash
value as described in RFC 3174 (Secure Hash Algorithm). This
function can be considered a cryptographically more secure
equivalent of <code>MD5()</code>. See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</li>

<li>Added <code>AES_ENCRYPT()</code> and <code>AES_DECRYPT()</code>
functions to perform encryption according to AES standard
(Rijndael). See section <a
href="manual.html#Miscellaneous_functions">6.3.6.2 Miscellaneous
Functions</a>.</li>

<li>Added <code>--single-transaction</code> option to
<code>mysqldump</code>, allowing a consistent dump of
<code>InnoDB</code> tables. See section <a
href="manual.html#mysqldump">4.8.5 <code>mysqldump</code>, Dumping
Table Structure and Data</a>.</li>

<li>Fixed bug in <code>innodb_log_group_home_dir</code> in
<code>SHOW VARIABLES</code>.</li>

<li>Fixed a bug in optimiser with merge tables when non-unique
values are used in summing up (causing crashes).</li>

<li>Fixed a bug in optimiser when a range specified makes index
grouping impossible (causing crashes).</li>

<li>Fixed a rare bug when <code>FULLTEXT</code> index is present
and no tables are used.</li>

<li>Added privileges <code>CREATE TEMPORARY TABLES</code>,
<code>EXECUTE</code>, <code>LOCK TABLES</code>, <code>REPLICATION
CLIENT</code>, <code>REPLICATION SLAVE</code>, <code>SHOW
DATABASES</code> and <code>SUPER</code>. To use these, you must
have run the <code>mysql_fix_privilege_tables</code> script after
upgrading.</li>

<li>Fixed query cache align data bug.</li>

<li>Fixed mutex bug in replication when reading from master
fails.</li>

<li>Added missing mutex in <code>TRUNCATE TABLE</code>; This fixes
some core dump/hangup problems when using <code>TRUNCATE
TABLE</code>.</li>

<li>Fixed bug in multi-table <code>DELETE</code> when optimiser
uses only indices.</li>

<li>Fixed that <code>ALTER TABLE table_name RENAME
new_table_name</code> is as fast as <code>RENAME TABLE</code>.</li>

<li>Fixed bug in <code>GROUP BY</code> with two or more fields,
where at least one field can contain <code>NULL</code> values.</li>

<li>Use <code>Turbo Boyer-Moore</code> algorithm to speed up
<code>LIKE "%keyword%"</code> searches.</li>

<li>Fixed bug in <code>DROP DATABASE</code> with symlink.</li>

<li>Fixed crash in <code>REPAIR ... USE_FRM</code>.</li>

<li>Fixed bug in <code>EXPLAIN</code> with <code>LIMIT offset !=
0</code>.</li>

<li>Fixed bug in phrase operator <code>"..."</code> in boolean
full-text search.</li>

<li>Fixed bug that caused duplicated rows when using truncation
operator <code>*</code> in boolean full-text search.</li>

<li>Fixed bug in truncation operator of boolean full-text search
(wrong results when there are only <code>+word*</code>s in the
query).</li>

<li>Fixed bug in boolean full-text search that caused a crash when
an identical <code>MATCH</code> expression that did not use an
index appeared twice.</li>

<li>Query cache is now automatically disabled in
<code>mysqldump</code>.</li>

<li>Fixed problem on Windows 98 that made sending of results very
slow.</li>

<li>Boolean full-text search weighting scheme changed to something
more reasonable.</li>

<li>Fixed bug in boolean full-text search that caused MySQL to
ignore queries of <code>ft_min_word_len</code> characters.</li>

<li>Boolean full-text search now supports ``phrase searches''.</li>

<li>New configure option <code>--without-query-cache</code>.</li>

<li>Memory allocation strategy for ``root memory'' changed. Block
size now grows with number of allocated blocks.</li>

<li><code>INET_NTOA()</code> now returns <code>NULL</code> if you
give it an argument that is too large (greater than the value
corresponding to <code>255.255.255.255</code>).</li>

<li>Fix <code>SQL_CALC_FOUND_ROWS</code> to work with
<code>UNION</code>s. It will work only if the first
<code>SELECT</code> has this option and if there is global
<code>LIMIT</code> for the entire statement. For the moment, this
requires using parentheses for individual <code>SELECT</code>
queries within the statement.</li>

<li>Fixed bug in <code>SQL_CALC_FOUND_ROWS</code> and
<code>LIMIT</code>.</li>

<li>Don't give an error for <code>CREATE TABLE ...(...
VARCHAR(0))</code>.</li>

<li>Fixed <code>SIGINT</code> and <code>SIGQUIT</code> problems in
<tt>`mysql.cc'</tt> on Linux with some <code>glibc</code>
versions.</li>

<li>Fixed bug in <tt>`convert.cc'</tt>, which is caused by having
an incorrect <code>net_store_length()</code> linked in the
<code>CONVERT::store()</code> method.</li>

<li><code>DOUBLE</code> and <code>FLOAT</code> columns now honor
the <code>UNSIGNED</code> flag on storage.</li>

<li><code>InnoDB</code> now retains foreign key constraints through
<code>ALTER TABLE</code> and <code>CREATE/DROP INDEX</code>.</li>

<li><code>InnoDB</code> now allows foreign key constraints to be
added through the <code>ALTER TABLE</code> syntax.</li>

<li><code>InnoDB</code> tables can now be set to automatically grow
in size (autoextend).</li>

<li>Added <code>--ignore-lines=n</code> option to
<code>mysqlimport</code>. This has the same effect as the
<code>IGNORE n LINES</code> clause for <code>LOAD DATA</code>.</li>

<li>Fixed bug in <code>UNION</code> with last offset being
transposed to total result set.</li>

<li><code>REPAIR ... USE_FRM</code> added.</li>

<li>Fixed that <code>DEFAULT_SELECT_LIMIT</code> is always imposed
on <code>UNION</code> result set.</li>

<li>Fixed that some <code>SELECT</code> options can appear only in
the first <code>SELECT</code>.</li>

<li>Fixed bug with <code>LIMIT</code> with <code>UNION</code>,
where last select is in the braces.</li>

<li>Fixed that full-text works fine with <code>UNION</code>
operations.</li>

<li>Fixed bug with indexless boolean full-text search.</li>

<li>Fixed bug that sometimes appeared when full-text search was
used with ``const'' tables.</li>

<li>Fixed incorrect error value when doing a <code>SELECT</code>
with an empty <code>HEAP</code> table.</li>

<li>Use <code>ORDER BY column DESC</code> now sorts
<code>NULL</code> values first. (In other words, <code>NULL</code>
values sort first in all cases, whether or not <code>DESC</code> is
specified.)</li>

<li>Fixed bug in <code>WHERE key_name='constant' ORDER BY key_name
DESC</code>.</li>

<li>Fixed bug in <code>SELECT DISTINCT ... ORDER BY DESC</code>
optimisation.</li>

<li>Fixed bug in <code>... HAVING 'GROUP_FUNCTION'(xxx) IS [NOT]
NULL</code>.</li>

<li>Fixed bug in truncation operator for boolean full-text
search.</li>

<li>Allow value of <code>--user=#</code> option for
<code>mysqld</code> to be specified as a numeric user ID.</li>

<li>Fixed a bug where <code>SQL_CALC_ROWS</code> returned an
incorrect value when used with one table and <code>ORDER BY</code>
and with <code>InnoDB</code> tables.</li>

<li>Fixed that <code>SELECT 0 LIMIT 0</code> doesn't hang
thread.</li>

<li>Fixed some problems with <code>USE/IGNORE INDEX</code> when
using many keys with the same start column.</li>

<li>Don't use table scan with <code>BerkeleyDB</code> and
<code>InnoDB</code> tables when we can use an index that covers the
whole row.</li>

<li>Optimised <code>InnoDB</code> sort-buffer handling to take less
memory.</li>

<li>Fixed bug in multi-table <code>DELETE</code> and
<code>InnoDB</code> tables.</li>

<li>Fixed problem with <code>TRUNCATE</code> and
<code>InnoDB</code> tables that produced the error <code>Can't
execute the given command because you have active locked tables or
an active transaction</code>.</li>

<li>Added <code>NO_UNSIGNED_SUBTRACTION</code> to the set of flags
that may be specified with the <code>--sql-mode</code> option for
<code>mysqld</code>. It disables unsigned arithmetic rules when it
comes to subtraction. (This will make MySQL 4.0 behave more closely
to 3.23 with <code>UNSIGNED</code> columns).</li>

<li>The result returned for all bit functions (<code>|</code>,
<code>&lt;&lt;</code>, ...) is now of type <code>unsigned
integer</code>.</li>

<li>Added detection of <code>nan</code> values in
<code>MyISAM</code> to make it possible to repair tables with
<code>nan</code> in float or double columns.</li>

<li>Fixed new bug in <code>myisamchk</code> where it didn't
correctly update number of ``parts'' in the <code>MyISAM</code>
index file.</li>

<li>Changed to use <code>autoconf</code> 2.52 (from
<code>autoconf</code> 2.13).</li>

<li>Fixed optimisation problem where the MySQL Server was in
``preparing'' state for a long time when selecting from an empty
table which had contained a lot of rows.</li>

<li>Fixed bug in complicated join with <code>const</code> tables.
This fix also improves performance a bit when referring to another
table from a <code>const</code> table.</li>

<li>First pre-version of multi-table <code>UPDATE</code>
statement.</li>

<li>Fixed bug in multi-table <code>DELETE</code>.</li>

<li>Fixed bug in <code>SELECT CONCAT(argument_list) ... GROUP BY
1</code>.</li>

<li><code>INSERT ... SELECT</code> did a full rollback in case of
an error. Fixed so that we only roll back the last statement in the
current transaction.</li>

<li>Fixed bug with empty expression for boolean full-text
search.</li>

<li>Fixed core dump bug in updating full-text key from/to
<code>NULL</code>.</li>

<li>ODBC compatibility: Added <code>BIT_LENGTH()</code>
function.</li>

<li>Fixed core dump bug in <code>GROUP BY BINARY
column</code>.</li>

<li>Added support for <code>NULL</code> keys in <code>HEAP</code>
tables.</li>

<li>Use index for <code>ORDER BY</code> in queries of type:
<code>SELECT * FROM t WHERE key_part1=1 ORDER BY key_part1
DESC,key_part2 DESC</code></li>

<li>Fixed bug in <code>FLUSH QUERY CACHE</code>.</li>

<li>Added <code>CAST()</code> and <code>CONVERT()</code> functions.
The <code>CAST</code> and <code>CONVERT</code> functions are nearly
identical and mainly useful when you want to create a column with a
specific type in a <code>CREATE ... SELECT</code> statement. For
more information, read section <a
href="manual.html#Cast_Functions">6.3.5 Cast Functions</a>.</li>

<li><code>CREATE ... SELECT</code> on <code>DATE</code> and
<code>TIME</code> functions now create columns of the expected
type.</li>

<li>Changed order in which keys are created in tables.</li>

<li>Added new columns <code>Null</code> and <code>Index_type</code>
to <code>SHOW INDEX</code> output.</li>

<li>Added <code>--no-beep</code> and <code>--prompt</code> options
to <code>mysql</code> command-line client.</li>

<li>New feature: management of user resources. 

<pre>
GRANT ... WITH MAX_QUERIES_PER_HOUR N1
               MAX_UPDATES_PER_HOUR N2
               MAX_CONNECTIONS_PER_HOUR N3;
</pre>

See section <a href="manual.html#User_resources">4.3.6 Limiting
user resources</a>.</li>

<li>Added <code>mysql_secure_installation</code> to the
<tt>`scripts/'</tt> directory.</li>
</ul>

<h3><a id="News-4.0.1" name="News-4.0.1"
href="manual_toc.html#News-4.0.1">D.2.11 Changes in release 4.0.1
(23 Dec 2001)</a></h3>

<ul>
<li>Fixed bug when <code>HANDLER</code> was used with some
unsupported table type.</li>

<li><code>mysqldump</code> now puts <code>ALTER TABLE tbl_name
DISABLE KEYS</code> and <code>ALTER TABLE tbl_name ENABLE
KEYS</code> in the sql dump.</li>

<li>Added <code>mysql_fix_extensions</code> script.</li>

<li>Fixed stack overrun problem with <code>LOAD DATA FROM
MASTER</code> on OSF/1.</li>

<li>Fixed shutdown problem on HP-UX.</li>

<li>Added <code>DES_ENCRYPT()</code> and <code>DES_DECRYPT()</code>
functions.</li>

<li>Added <code>FLUSH DES_KEY_FILE</code> statement.</li>

<li>Added <code>--des-key-file</code> option to
<code>mysqld</code>.</li>

<li><code>HEX(string)</code> now returns the characters in
<code>string</code> converted to hexadecimal.</li>

<li>Fixed problem with <code>GRANT</code> when using
<code>lower_case_table_names=1</code>.</li>

<li>Changed <code>SELECT ... IN SHARE MODE</code> to <code>SELECT
... LOCK IN SHARE MODE</code> (as in MySQL 3.23).</li>

<li>A new query cache to cache results from identical
<code>SELECT</code> queries.</li>

<li>Fixed core dump bug on 64-bit machines when it got an incorrect
communication packet.</li>

<li><code>MATCH ... AGAINST(... IN BOOLEAN MODE)</code> can now
work without <code>FULLTEXT</code> index.</li>

<li>Fixed slave to replicate from 3.23 master.</li>

<li>Miscellaneous replication fixes/cleanup.</li>

<li>Got shutdown to work on Mac OS X.</li>

<li>Added <tt>`myisam/ft_dump'</tt> utility for low-level
inspection of <code>FULLTEXT</code> indexes.</li>

<li>Fixed bug in <code>DELETE ... WHERE ... MATCH ...</code>.</li>

<li>Added support for <code>MATCH ... AGAINST(... IN BOOLEAN
MODE)</code>. <strong>Note: you must rebuild your tables with
<code>ALTER TABLE tablename TYPE=MyISAM</code> to be able to use
boolean full-text search</strong>.</li>

<li><code>LOCATE()</code> and <code>INSTR()</code> are now
case-sensitive if either argument is a binary string.</li>

<li>Changed <code>RAND()</code> initialisation so that
<code>RAND(N)</code> and <code>RAND(N+1)</code> are more
distinct.</li>

<li>Fixed core dump bug in <code>UPDATE ... ORDER BY</code>.</li>

<li>Changed <code>INSERT INTO ... SELECT</code> to stop on errors
by default.</li>

<li>Ignore <code>DATA DIRECTORY</code> and <code>INDEX
DIRECTORY</code> directives on Windows.</li>

<li>Added boolean full-text search code. It should be considered
early alpha.</li>

<li>Extended <code>MODIFY</code> and <code>CHANGE</code> in
<code>ALTER TABLE</code> to accept the <code>FIRST</code> and
<code>AFTER</code> keywords.</li>

<li>Indexes are now used with <code>ORDER BY</code> on a whole
<code>InnoDB</code> table.</li>
</ul>

<h3><a id="News-4.0.0" name="News-4.0.0"
href="manual_toc.html#News-4.0.0">D.2.12 Changes in release 4.0.0
(Oct 2001: Alpha)</a></h3>

<ul>
<li>Added <code>--xml</code> option to <code>mysql</code> for
producing XML output.</li>

<li>Added full-text variables <code>ft_min_word_len</code>,
<code>ft_max_word_len</code>, and
<code>ft_max_word_len_for_sort</code>.</li>

<li>Added documentation for <code>libmysqld</code>, the embedded
MySQL server library. Also added example programs (a
<code>mysql</code> client and <code>mysqltest</code> test program)
which use <code>libmysqld</code>.</li>

<li>Removed all Gemini hooks from MySQL server.</li>

<li>Removed <code>my_thread_init()</code> and
<code>my_thread_end()</code> from <tt>`mysql_com.h'</tt>, and added
<code>mysql_thread_init()</code> and
<code>mysql_thread_end()</code> to <tt>`mysql.h'</tt>.</li>

<li>Support for communication packets &gt; 16M. In 4.0.1 we will
extend <code>MyISAM</code> to be able to handle these.</li>

<li>Secure connections (with SSL).</li>

<li>Unsigned <code>BIGINT</code> constants now work.
<code>MIN()</code> and <code>MAX()</code> now handle signed and
unsigned <code>BIGINT</code> numbers correctly.</li>

<li>New character set <code>latin1_de</code> which provides correct
German sorting.</li>

<li><code>STRCMP()</code> now uses the current character set when
doing comparisons, which means that the default comparison
behaviour now is case-insensitive.</li>

<li><code>TRUNCATE TABLE</code> and <code>DELETE FROM
tbl_name</code> are now separate functions. One bonus is that
<code>DELETE FROM tbl_name</code> now returns the number of deleted
rows, rather than zero.</li>

<li><code>DROP DATABASE</code> now executes a <code>DROP
TABLE</code> on all tables in the database, which fixes a problem
with <code>InnoDB</code> tables.</li>

<li>Added support for <code>UNION</code>.</li>

<li>Added support for multi-table <code>DELETE</code>
operations.</li>

<li>A new <code>HANDLER</code> interface to <code>MyISAM</code>
tables.</li>

<li>Added support for <code>INSERT</code> on <code>MERGE</code>
tables. Patch from Benjamin Pflugmann.</li>

<li>Changed <code>WEEK(#,0)</code> to match the calendar in the
USA.</li>

<li><code>COUNT(DISTINCT)</code> is about 30% faster.</li>

<li>Speed up all internal list handling.</li>

<li>Speed up <code>IS NULL</code>, <code>ISNULL()</code> and some
other internal primitives.</li>

<li>Full-text index creation now is much faster.</li>

<li>Tree-like cache to speed up bulk inserts and
<code>myisam_bulk_insert_tree_size</code> variable.</li>

<li>Searching on packed (<code>CHAR</code>/<code>VARCHAR</code>)
keys is now much faster.</li>

<li>Optimised queries of type: <code>SELECT DISTINCT * from
tbl_name ORDER by key_part1 LIMIT #</code>.</li>

<li><code>SHOW CREATE TABLE</code> now shows all table
attributes.</li>

<li><code>ORDER BY ... DESC</code> can now use keys.</li>

<li><code>LOAD DATA FROM MASTER</code> ``auto-magically'' sets up a
slave.</li>

<li>Renamed <code>safe_mysqld</code> to <code>mysqld_safe</code> to
make this name more in line with other MySQL scripts/commands.</li>

<li>Added support for symbolic links to <code>MyISAM</code> tables.
Symlink handling is now enabled by default for Windows.</li>

<li>Added <code>SQL_CALC_FOUND_ROWS</code> and
<code>FOUND_ROWS()</code>. This makes it possible to know how many
rows a query would have returned without a <code>LIMIT</code>
clause.</li>

<li>Changed output format of <code>SHOW OPEN TABLES</code>.</li>

<li>Allow <code>SELECT expression LIMIT ...</code>.</li>

<li>Added <code>IDENTITY</code> as a synonym for
<code>AUTO_INCREMENT</code> (like Sybase).</li>

<li>Added <code>ORDER BY</code> syntax to <code>UPDATE</code> and
<code>DELETE</code>.</li>

<li><code>SHOW INDEXES</code> is now a synonym for <code>SHOW
INDEX</code>.</li>

<li>Added <code>ALTER TABLE tbl_name DISABLE KEYS</code> and
<code>ALTER TABLE tbl_name ENABLE KEYS</code> commands.</li>

<li>Allow use of <code>IN</code> as a synonym for <code>FROM</code>
in <code>SHOW</code> commands.</li>

<li>Implemented ``repair by sort'' for <code>FULLTEXT</code>
indexes. <code>REPAIR TABLE</code>, <code>ALTER TABLE</code>, and
<code>OPTIMIZE TABLE</code> for tables with <code>FULLTEXT</code>
indexes are now up to 100 times faster.</li>

<li>Allow ANSI SQL syntax <code>X'hexadecimal-number'</code>.</li>

<li>Cleaned up global lock handling for <code>FLUSH TABLES WITH
READ LOCK</code>.</li>

<li>Fixed problem with <code>DATETIME = constant</code> in
<code>WHERE</code> optimisation.</li>

<li>Added <code>--master-data</code> and
<code>--no-autocommit</code> options to <code>mysqldump</code>.
(Thanks to Brian Aker for this.)</li>

<li>Added script <code>mysql_explain_log.sh</code> to distribution.
(Thanks to mobile.de).</li>
</ul>

<h2><a id="News-3.23.x" name="News-3.23.x"
href="manual_toc.html#News-3.23.x">D.3 Changes in release 3.23.x
(Stable)</a></h2>

<p><a id="IDX1837" name="IDX1837"></a></p>

<p>The 3.23 release has several major features that are not present
in previous versions. We have added three new table types:</p>

<dl compact="compact">
<dt><code>MyISAM</code></dt>

<dd>A new ISAM library which is tuned for SQL and supports large
files.</dd>

<dt><code>InnoDB</code></dt>

<dd>A transaction-safe storage engine that supports row level
locking, and many Oracle-like features.</dd>

<dt><code>BerkeleyDB</code> or <code>BDB</code></dt>

<dd>Uses the Berkeley DB library from Sleepycat Software to
implement transaction-safe tables.</dd>
</dl>

<p>Note that only <code>MyISAM</code> is available in the standard
binary distribution.</p>

<p>The 3.23 release also includes support for database replication
between a master and many slaves, full-text indexing, and much
more.</p>

<p>All new features are being developed in the 4.x version. Only
bug fixes and minor enhancements to existing features will be added
to 3.23.</p>

<p>The replication code and BerkeleyDB code is still not as tested
and as the rest of the code, so we will probably need to do a
couple of future releases of 3.23 with small fixes for this part of
the code. As long as you don't use these features, you should be
quite safe with MySQL 3.23!</p>

<p>Note that the above doesn't mean that replication or Berkeley DB
don't work. We have done a lot of testing of all code, including
replication and <code>BDB</code> without finding any problems. It
only means that not as many users use this code as the rest of the
code and because of this we are not yet 100% confident in this
code.</p>

<h3><a id="News-3.23.56" name="News-3.23.56"
href="manual_toc.html#News-3.23.56">D.3.1 Changes in release
3.23.56 (not released yet)</a></h3>

<ul>
<li>Fixed bug in logging to binary log (which affects replication)
a query that inserts a <code>NULL</code> in an
<code>auto_increment</code> field and also uses
<code>LAST_INSERT_ID()</code>.</li>

<li>Fixed bug in <code>mysqladmin --relative</code>.</li>

<li>On some 64 bit systems, <code>show status</code> reported a
strange number for <code>Open_files</code> and
<code>Open_streams</code>.</li>
</ul>

<h3><a id="News-3.23.55" name="News-3.23.55"
href="manual_toc.html#News-3.23.55">D.3.2 Changes in release
3.23.55 (23 Jan 2003)</a></h3>

<ul>
<li>Fixed double <code>free</code>'d pointer bug in
<code>mysql_change_user()</code> handling, that enabled a specially
hacked version of MySQL client to crash <code>mysqld</code>.
<strong>Note</strong>, that one needs to login to the server by
using a valid user account to be able to exploit this bug.</li>

<li>Fixed bug with the <code>--slow-log</code> when logging an
administrator command (like <code>FLUSH TABLES</code>).</li>

<li>Fixed bug in <code>GROUP BY</code> when used on BLOB column
with <code>NULL</code> values.</li>

<li>Fixed a bug in handling <code>NULL</code>s in <code>CASE ...
WHEN ...</code>.</li>

<li>Bugfix for <code>--chroot</code> (see section <a
href="manual.html#News-3.23.54">D.3.3 Changes in release 3.23.54
(05 Dec 2002)</a>) is reverted. Unfortunately, there is no way to
make it to work, without introducing backward-incompatible changes
in <tt>`my.cnf'</tt>. Those who need <code>--chroot</code>
functionality, should upgrade to MySQL 4.0. (The fix in the 4.0
branch did not break backward-compatibility).</li>

<li>Make <code>--lower-case-table-names</code> default on MacOSX as
the file system is case insensitive.</li>

<li>Fixed a bug in <tt>`scripts/mysqld_safe.sh'</tt> in
<code>NOHUP_NICENESS</code> testing.</li>

<li>Transactions in <code>AUTOCOMMIT=0</code> mode didn't rotate
binary log.</li>

<li>Fixed a bug in <code>scripts/make_binary_distribution</code>
that resulted in a remaining <code>@HOSTNAME@</code> variable
instead of replacing it with the correct path to the
<code>hostname</code> binary.</li>

<li>Fixed a very unlikely bug that could cause <code>SHOW
PROCESSLIST</code> to core dump in pthread_mutex_unlock() if a new
thread was connecting.</li>

<li>Forbid <code>SLAVE STOP</code> if the thread executing the
query has locked tables. This removes a possible deadlock
situation.</li>
</ul>

<h3><a id="News-3.23.54" name="News-3.23.54"
href="manual_toc.html#News-3.23.54">D.3.3 Changes in release
3.23.54 (05 Dec 2002)</a></h3>

<ul>
<li>Fixed a bug, that allowed to crash <code>mysqld</code> with a
specially crafted packet.</li>

<li>Fixed a rare crash (double <code>free</code>'d pointer) when
altering a temporary table.</li>

<li>Fixed buffer overrun in <code>libmysqlclient</code> library
that allowed malicious MySQL server to crash the client
application.</li>

<li>Fixed security-related bug in <code>mysql_change_user()</code>
handling. All users are strongly recommended to upgrade to the
version 3.23.54.</li>

<li>Fixed bug that prevented <code>--chroot</code> command-line
option of <code>mysqld</code> from working.</li>

<li>Fixed bug that made <code>OPTIMIZE TABLE</code> to corrupt the
table under some rare circumstances.</li>

<li>Fixed <code>mysqlcheck</code> so it can deal with table names
containing dashes.</li>

<li>Fixed shutdown problem on Mac OS X.</li>

<li>Fixed bug with comparing an indexed <code>NULL</code> field
with <code>&lt;=&gt; NULL</code>.</li>

<li>Fixed bug that caused <code>IGNORE INDEX</code> and <code>USE
INDEX</code> sometimes to be ignored.</li>

<li>Fixed rare core dump problem in complicated <code>GROUP
BY</code> queries that didn't return any result.</li>

<li>Fixed a bug where <code>MATCH ... AGAINST () &gt;=0</code> was
treated as if it was <code>&gt;</code>.</li>

<li>One can create <code>TEMPORARY</code> <code>MERGE</code> tables
now.</li>

<li>Fixed that <code>--core-file</code> works on Linux (at least on
kernel 2.4.18).</li>

<li>Fixed a problem with <code>BDB</code> and <code>ALTER
TABLE</code>.</li>

<li>Fixed reference to freed memory when doing complicated
<code>GROUP BY ... ORDER BY</code> queries. Symptom was that
<code>mysqld</code> died in function <code>send_fields</code>.</li>

<li>Allocate heap rows in smaller blocks to get better memory
usage.</li>

<li>Fixed memory allocation bug when storing <code>BLOB</code>
values in internal temporary tables used for some (unlikely)
<code>GROUP BY</code> queries.</li>

<li>Fixed a bug in key optimizing handling where the expression
<code>WHERE column_name = key_column_name</code> was calculated as
true for <code>NULL</code> values.</li>

<li>Fixed core dump bug when doing <code>LEFT JOIN ... WHERE
key_column=NULL</code>.</li>

<li>Fixed <code>MyISAM</code> crash when using dynamic-row tables
with huge numbers of packed fields.</li>

<li>Updated source tree to be built using <code>automake 1.5</code>
and <code>libtool 1.4</code>.</li>
</ul>

<h3><a id="News-3.23.53" name="News-3.23.53"
href="manual_toc.html#News-3.23.53">D.3.4 Changes in release
3.23.53 (09 Oct 2002)</a></h3>

<ul>
<li>Fixed crash when <code>SHOW INNODB STATUS</code> was used and
<code>skip-innodb</code> was defined.</li>

<li>Fixed possible memory corruption bug in binary log file
handling when slave rotated the logs (only affected 3.23, not
4.0).</li>

<li>Fixed problem in <code>LOCK TABLES</code> on windows when one
connects to a database that contains upper case letters.</li>

<li>Fixed that <code>--skip-show-databases</code> doesn't reset the
<code>--port</code> option.</li>

<li>Small fix in <code>safe_mysqld</code> for some shells.</li>

<li>Fixed that <code>FLUSH STATUS</code> doesn't reset
<code>Delayed_insert_threads</code>.</li>

<li>Fixed core dump bug when using the <code>BINARY</code> cast on
a <code>NULL</code> value.</li>

<li>Fixed race condition when someone did a <code>GRANT</code> at
the same time a new user logged in or did a <code>USE
DATABASE</code>.</li>

<li>Fixed bug in <code>ALTER TABLE</code> and <code>RENAME
TABLE</code> when running with <code>-O
lower_case_table_names=1</code> (typically on windows) when giving
the table name in uppercase.</li>

<li>Fixed that <code>-O lower_case_table_names=1</code> also
converts database names to lower case.</li>

<li>Fixed unlikely core dump with <code>SELECT ... ORDER BY ...
LIMIT</code>.</li>

<li>Changed <code>AND/OR</code> to report that they can return
NULL. This fixes a bug in <code>GROUP BY</code> on
<code>AND/OR</code> expressions that return <code>NULL</code>.</li>

<li>Fixed a bug that <code>OPTIMIZE</code> of locked and modified
MyISAM table, reported table corruption.</li>

<li>Fixed a <code>BDB</code>-related <code>ALTER TABLE</code> bug
with dropping a column and shutting down immediately
thereafter.</li>

<li>Fixed problem with <code>configure ...
--localstatedir=...</code>.</li>

<li>Fixed problem with <code>UNSIGNED BIGINT</code> on AIX
(again).</li>

<li>Fixed bug in pthread_mutex_trylock() on HPUX 11.0.</li>

<li>Multithreaded stress tests for InnoDB.</li>
</ul>

<h3><a id="News-3.23.52" name="News-3.23.52"
href="manual_toc.html#News-3.23.52">D.3.5 Changes in release
3.23.52 (14 Aug 2002)</a></h3>

<ul>
<li>Wrap <code>BEGIN</code>/<code>COMMIT</code> around transaction
in the binary log. This makes replication honour transactions.</li>

<li>Fixed security bug when having an empty database name in the
<code>user.db</code> table.</li>

<li>Changed initialisation of <code>RND()</code> to make it less
predicatable.</li>

<li>Fixed problem with <code>GROUP BY</code> on result with
expression that created a <code>BLOB</code> field.</li>

<li>Fixed problem with <code>GROUP BY</code> on columns that have
<code>NULL</code> values. To solve this we now create an
<code>MyISAM</code> temporary table when doing a <code>GROUP
BY</code> on a possible <code>NULL</code> item. From MySQL 4.0.5 we
can use in memory <code>HEAP</code> tables for this case.</li>

<li>Fixed problem with privilege tables when downgrading from 4.0.2
to 3.23.</li>

<li>Fixed thread bug in <code>SLAVE START</code>, <code>SLAVE
STOP</code> and automatic repair of MyISAM tables that could cause
table cache to be corrupted.</li>

<li>Fixed possible thread related key-cache-corruption problem with
<code>OPTIMIZE TABLE</code> and <code>REPAIR TABLE</code>.</li>

<li>Added name of 'administrator command' logs.</li>

<li>Fixed bug with creating an auto-increment value on second part
of a <code>UNIQUE()</code> key where first part could contain NULL
values.</li>

<li>Don't write slave-timeout reconnects to the error log.</li>

<li>Fixed bug with slave net read timeouting</li>

<li>Fixed a core-dump bug with <code>MERGE</code> tables and
<code>MAX()</code> function.</li>

<li>Fixed bug in <code>ALTER TABLE</code> with <code>BDB</code>
tables.</li>

<li>Fixed bug when logging <code>LOAD DATA INFILE</code> to binary
log with no active database.</li>

<li>Fixed a bug in range optimiser (causing crashes).</li>

<li>Fixed possible problem in replication when doing <code>DROP
DATABASE</code> on a database with <code>InnoDB</code> tables.</li>

<li>Fixed that <code>mysql_info()</code> returns 0 for 'Duplicates'
when using <code>INSERT DELAYED IGNORE</code>.</li>

<li>Added <code>-DHAVE_BROKEN_REALPATH</code> to the Mac OS X
(darwin) compile options in <tt>`configure.in'</tt> to fix a
failure under high load.</li>
</ul>

<h3><a id="News-3.23.51" name="News-3.23.51"
href="manual_toc.html#News-3.23.51">D.3.6 Changes in release
3.23.51 (31 May 2002)</a></h3>

<ul>
<li>Fix bug with closing tags missing slash for
<code>mysqldump</code> XML output.</li>

<li>Remove end space from <code>ENUM</code> values. (This fixed a
problem with <code>SHOW CREATE TABLE</code>.)</li>

<li>Fixed bug in <code>CONCAT_WS()</code> that cut the result.</li>

<li>Changed name of server variables
<code>Com_show_master_stat</code> to
<code>Com_show_master_status</code> and
<code>Com_show_slave_stat</code> to
<code>Com_show_slave_status</code>.</li>

<li>Changed handling of <code>gethostbyname()</code> to make the
client library thread-safe even if <code>gethostbyname_r</code>
doesn't exist.</li>

<li>Fixed core-dump problem when giving a wrong password string to
<code>GRANT</code>.</li>

<li>Fixed bug in <code>DROP DATABASE</code> with symlinked
directory.</li>

<li>Fixed optimisation problem with <code>DATETIME</code> and value
outside <code>DATETIME</code> range.</li>

<li>Removed Sleepycat's <code>BDB</code> doc files from the source
tree, as they're not needed (MySQL covers <code>BDB</code> in its
own documentation).</li>

<li>Fixed MIT-pthreads to compile with <code>glibc</code> 2.2
(needed for <code>make dist</code>).</li>

<li>Fixed the <code>FLOAT(X+1,X)</code> is not converted to
<code>FLOAT(X+2,X)</code>. (This also affected
<code>DECIMAL</code>, <code>DOUBLE</code> and <code>REAL</code>
types)</li>

<li>Fixed the result from <code>IF()</code> is case in-sensitive if
the second and third arguments are case sensitive.</li>

<li>Fixed core dump problem on OSF/1 in
<code>gethostbyname_r</code>.</li>

<li>Fixed that underflowed decimal fields are not zero filled.</li>

<li>If we get an overflow when inserting <code>'+11111'</code> for
<code>DECIMAL(5,0) UNSIGNED</code> columns, we will just drop the
sign.</li>

<li>Fixed optimisation bug with
<code>ISNULL(expression_which_cannot_be_null)</code> and
<code>ISNULL(constant_expression)</code>.</li>

<li>Fixed host lookup bug in the <code>glibc</code> library that we
used with the 3.23.50 Linux-x86 binaries.</li>
</ul>

<h3><a id="News-3.23.50" name="News-3.23.50"
href="manual_toc.html#News-3.23.50">D.3.7 Changes in release
3.23.50 (21 Apr 2002)</a></h3>

<ul>
<li>Fixed buffer overflow problem if someone specified a too long
datadir parameter to mysqld</li>

<li>Add missing <code>&lt;row&gt;</code> tags for
<code>mysqldump</code> XML output.</li>

<li>Fixed problem with <code>crash-me</code> and <code>gcc</code>
3.0.4.</li>

<li>Fixed that <code>@@unknown_variable</code> doesn't hang
server.</li>

<li>Added <code>@@VERSION</code> as a synonym for
<code>VERSION()</code>.</li>

<li><code>SHOW VARIABLES LIKE 'xxx'</code> is now
case-insensitive.</li>

<li>Fixed timeout for <code>GET_LOCK()</code> on HP-UX with DCE
threads.</li>

<li>Fixed memory allocation bug in the glibc library used to build
Linux binaries, which caused mysqld to die in 'free()'.</li>

<li>Fixed <code>SIGINT</code> and <code>SIGQUIT</code> problems in
<code>mysql</code>.</li>

<li>Fixed bug in character table converts when used with big ( &gt;
64K) strings.</li>

<li><code>InnoDB</code> now retains foreign key constraints through
<code>ALTER TABLE</code> and <code>CREATE/DROP INDEX</code>.</li>

<li><code>InnoDB</code> now allows foreign key constraints to be
added through the <code>ALTER TABLE</code> syntax.</li>

<li><code>InnoDB</code> tables can now be set to automatically grow
in size (autoextend).</li>

<li>Our Linux RPMS and binaries are now compiled with
<code>gcc</code> 3.0.4, which should make them a bit faster.</li>

<li>Fixed some buffer overflow problems when reading startup
parameters.</li>

<li>Because of problems on shutdown we have now disabled named
pipes on windows by default. One can enable named pipes by starting
mysqld with <code>--enable-named-pipe</code>.</li>

<li>Fixed bug when using <code>WHERE key_column = 'J' or
key_column='j'</code>.</li>

<li>Fixed core-dump bug when using <code>--log-bin</code> with
<code>LOAD DATA INFILE</code> without an active database.</li>

<li>Fixed bug in <code>RENAME TABLE</code> when used with
<code>lower_case_table_names=1</code> (default on Windows).</li>

<li>Fixed unlikely core-dump bug when using <code>DROP TABLE</code>
on a table that was in use by a thread that also used queries on
only temporary tables.</li>

<li>Fixed problem with <code>SHOW CREATE TABLE</code> and
<code>PRIMARY KEY</code> when using 32 indexes.</li>

<li>Fixed that one can use <code>SET PASSWORD</code> for the
anonymous user.</li>

<li>Fixed core dump bug when reading client groups from option
files using <code>mysql_options()</code>.</li>

<li>Memory leak (16 bytes per every <strong>corrupted</strong>
table) closed.</li>

<li>Fixed binary builds to use
<code>--enable-local-infile</code>.</li>

<li>Update source to work with new version of
<code>bison</code>.</li>

<li>Updated shell scripts to now agree with new POSIX
standard.</li>

<li>Fixed bug where <code>DATE_FORMAT()</code> returned empty
string when used with <code>GROUP BY</code>.</li>
</ul>

<h3><a id="News-3.23.49" name="News-3.23.49"
href="manual_toc.html#News-3.23.49">D.3.8 Changes in release
3.23.49</a></h3>

<ul>
<li>Don't give warning for a statement that is only a comment; this
is needed for <code>mysqldump --disable-keys</code> to work.</li>

<li>Fixed unlikely caching bug when doing a join without keys. In
this case the last used field for a table always returned
<code>NULL</code>.</li>

<li>Added options to make <code>LOAD DATA LOCAL INFILE</code> more
secure.</li>

<li>MySQL binary release 3.23.48 for Linux contained a new
<code>glibc</code> library, which has serious problems under high
load and RedHat 7.2. The 3.23.49 binary release doesn't have this
problem.</li>

<li>Fixed shutdown problem on NT.</li>
</ul>

<h3><a id="News-3.23.48" name="News-3.23.48"
href="manual_toc.html#News-3.23.48">D.3.9 Changes in release
3.23.48 (07 Feb 2002)</a></h3>

<ul>
<li>Added <code>--xml</code> option to <code>mysqldump</code> for
producing XML output.</li>

<li>Changed to use <code>autoconf</code> 2.52 (from
<code>autoconf</code> 2.13)</li>

<li>Fixed bug in complicated join with <code>const</code>
tables.</li>

<li>Added internal safety checks for <code>InnoDB</code>.</li>

<li>Some <code>InnoDB</code> variables were always shown in
<code>SHOW VARIABLES</code> as <code>OFF</code> on high-byte-first
systems (like SPARC).</li>

<li>Fixed problem with one thread using an <code>InnoDB</code>
table and another thread doing an <code>ALTER TABLE</code> on the
same table. Before that, <code>mysqld</code> could crash with an
assertion failure in <tt>`row0row.c'</tt>, line 474.</li>

<li>Tuned the <code>InnoDB</code> SQL optimiser to favor index
searches more often over table scans.</li>

<li>Fixed a performance problem with <code>InnoDB</code> tables
when several large <code>SELECT</code> queries are run concurrently
on a multiprocessor Linux computer. Large CPU-bound
<code>SELECT</code> queries will now also generally run faster on
all platforms.</li>

<li>If MySQL binlogging is used, <code>InnoDB</code> now prints
after crash recovery the latest MySQL binlog name and the offset
<code>InnoDB</code> was able to recover to. This is useful, for
example, when resynchronising a master and a slave database in
replication.</li>

<li>Added better error messages to help in installation problems of
<code>InnoDB</code> tables.</li>

<li>It is now possible to recover MySQL temporary tables that have
become orphaned inside the <code>InnoDB</code> tablespace.</li>

<li><code>InnoDB</code> now prevents a <code>FOREIGN KEY</code>
declaration where the signedness is not the same in the referencing
and referenced integer columns.</li>

<li>Calling <code>SHOW CREATE TABLE</code> or <code>SHOW TABLE
STATUS</code> could cause memory corruption and make
<code>mysqld</code> crash. Especially at risk was
<code>mysqldump</code>, because it frequently calls <code>SHOW
CREATE TABLE</code>.</li>

<li>If inserts to several tables containing an
<code>AUTO_INCREMENT</code> column were wrapped inside one
<code>LOCK TABLES</code>, <code>InnoDB</code> asserted in
<tt>`lock0lock.c'</tt>.</li>

<li>In 3.23.47 we allowed several <code>NULL</code> values in a
<code>UNIQUE</code> secondary index for an <code>InnoDB</code>
table. But <code>CHECK TABLE</code> was not relaxed: it reports the
table as corrupt. <code>CHECK TABLE</code> no longer complains in
this situation.</li>

<li><code>SHOW GRANTS</code> now shows <code>REFERENCES</code>
instead of <code>REFERENCE</code>.</li>
</ul>

<h3><a id="News-3.23.47" name="News-3.23.47"
href="manual_toc.html#News-3.23.47">D.3.10 Changes in release
3.23.47 (27 Dec 2001)</a></h3>

<ul>
<li>Fixed bug when using the following construct: <code>SELECT ...
WHERE key=@var_name OR key=@var_name2</code></li>

<li>Restrict <code>InnoDB</code> keys to 500 bytes.</li>

<li><code>InnoDB</code> now supports <code>NULL</code> in
keys.</li>

<li>Fixed shutdown problem on HP-UX. (Introduced in 3.23.46)</li>

<li>Fixed core dump bug in replication when using <code>SELECT
RELEASE_LOCK()</code>.</li>

<li>Added new command: <code>DO expression,[expression]</code></li>

<li>Added <code>slave-skip-errors</code> option.</li>

<li>Added statistics variables for all MySQL commands. (<code>SHOW
STATUS</code> is now much longer.)</li>

<li>Fixed default values for <code>InnoDB</code> tables.</li>

<li>Fixed that <code>GROUP BY expr DESC</code> works.</li>

<li>Fixed bug when using <code>t1 LEFT JOIN t2 ON
t2.key=constant</code>.</li>

<li><code>mysql_config</code> now also works with binary
(relocated) distributions.</li>
</ul>

<h3><a id="News-3.23.46" name="News-3.23.46"
href="manual_toc.html#News-3.23.46">D.3.11 Changes in release
3.23.46 (29 Nov 2001)</a></h3>

<ul>
<li>Fixed problem with aliased temporary table replication.</li>

<li><code>InnoDB</code> and <code>BDB</code> tables will now use
index when doing an <code>ORDER BY</code> on the whole table.</li>

<li>Fixed bug where one got an empty set instead of a DEADLOCK
error when using <code>BDB</code> tables.</li>

<li>One can now kill <code>ANALYZE</code>, <code>REPAIR</code>, and
<code>OPTIMIZE TABLE</code> when the thread is waiting to get a
lock on the table.</li>

<li>Fixed race condition in <code>ANALYZE TABLE</code>.</li>

<li>Fixed bug when joining with caching (unlikely to happen).</li>

<li>Fixed race condition when using the binary log and <code>INSERT
DELAYED</code> which could cause the binary log to have rows that
were not yet written to <code>MyISAM</code> tables.</li>

<li>Changed caching of binary log to make replication slightly
faster.</li>

<li>Fixed bug in replication on Mac OS X.</li>
</ul>

<h3><a id="News-3.23.45" name="News-3.23.45"
href="manual_toc.html#News-3.23.45">D.3.12 Changes in release
3.23.45 (22 Nov 2001)</a></h3>

<ul>
<li><code>(UPDATE|DELETE) ...WHERE MATCH</code> bugfix.</li>

<li>shutdown should now work on Darwin (Mac OS X).</li>

<li>Fixed core dump when repairing corrupted packed
<code>MyISAM</code> files.</li>

<li><code>--core-file</code> now works on Solaris.</li>

<li>Fix a bug which could cause <code>InnoDB</code> to complain if
it cannot find free blocks from the buffer cache during
recovery.</li>

<li>Fixed bug in <code>InnoDB</code> insert buffer B-tree handling
that could cause crashes.</li>

<li>Fixed bug in <code>InnoDB</code> lock timeout handling.</li>

<li>Fixed core dump bug in <code>ALTER TABLE</code> on a
<code>TEMPORARY</code> <code>InnoDB</code> table.</li>

<li>Fixed bug in <code>OPTIMIZE TABLE</code> that reset index
cardinality if it was up to date.</li>

<li>Fixed problem with <code>t1 LEFT_JOIN t2 ... WHERE
t2.date_column IS NULL</code> when date_column was declared as
<code>NOT NULL</code>.</li>

<li>Fixed bug with <code>BDB</code> tables and keys on
<code>BLOB</code> columns.</li>

<li>Fixed bug in <code>MERGE</code> tables on OS with 32-bit file
pointers.</li>

<li>Fixed bug in <code>TIME_TO_SEC()</code> when using negative
values.</li>
</ul>

<h3><a id="News-3.23.44" name="News-3.23.44"
href="manual_toc.html#News-3.23.44">D.3.13 Changes in release
3.23.44 (31 Oct 2001)</a></h3>

<ul>
<li>Fixed <code>Rows_examined</code> count in slow query log.</li>

<li>Fixed bug when using a reference to an <code>AVG()</code>
column in <code>HAVING</code>.</li>

<li>Fixed that date functions that require correct dates, like
<code>DAYOFYEAR(column)</code>, will return <code>NULL</code> for
<code>0000-00-00</code> dates.</li>

<li>Fixed bug in const-propagation when comparing columns of
different types. (<code>SELECT * FROM date_col="2001-01-01" and
date_col=time_col</code>)</li>

<li>Fixed bug that caused error message <code>Can't write, because
of unique constraint</code> with some <code>GROUP BY</code>
queries.</li>

<li>Fixed problem with <code>sjis</code> character strings used
within quoted table names.</li>

<li>Fixed core dump when using <code>CREATE ... FULLTEXT</code>
keys with other storage engines than <code>MyISAM</code>.</li>

<li>Don't use <code>signal()</code> on Windows because this appears
to not be 100% reliable.</li>

<li>Fixed bug when doing <code>WHERE col_name=NULL</code> on an
indexed column that had <code>NULL</code> values.</li>

<li>Fixed bug when doing <code>LEFT JOIN ... ON (col_name =
constant) WHERE col_name = constant</code>.</li>

<li>When using replications, aborted queries that contained
<code>%</code> could cause a core dump.</li>

<li><code>TCP_NODELAY</code> was not used on some systems. (Speed
problem.)</li>

<li>Applied portability fixes for OS/2. (Patch by Yuri Dario.)</li>
</ul>

<p>The following changes are for <code>InnoDB</code> tables:</p>

<ul>
<li>Add missing <code>InnoDB</code> variables to <code>SHOW
VARIABLES</code>.</li>

<li>Foreign keys checking is now done for <code>InnoDB</code>
tables.</li>

<li><code>DROP DATABASE</code> now works also for
<code>InnoDB</code> tables.</li>

<li><code>InnoDB</code> now supports datafiles and raw disk
partitions bigger than 4 GB on those operating systems that have
big files.</li>

<li><code>InnoDB</code> calculates better table cardinality
estimates for the MySQL optimiser.</li>

<li>Accent characters in the default character set
<code>latin1</code> are ordered according to the MySQL ordering.
Note: if you are using <code>latin1</code> and have inserted
characters whose code is greater than 127 into an indexed
<code>CHAR</code> column, you should run <code>CHECK TABLE</code>
on your table when you upgrade to 3.23.44, and drop and reimport
the table if <code>CHECK TABLE</code> reports an error!</li>

<li>A new <tt>`my.cnf'</tt> parameter,
<code>innodb_thread_concurrency</code>, helps in performance tuning
in heavily concurrent environments.</li>

<li>A new <tt>`my.cnf'</tt> parameter,
<code>innodb_fast_shutdown</code>, speeds up server shutdown.</li>

<li>A new <tt>`my.cnf'</tt> parameter,
<code>innodb_force_recovery</code>, helps to save your data in case
the disk image of the database becomes corrupt.</li>

<li><code>innodb_monitor</code> has been improved and a new
<code>innodb_table_monitor</code> added.</li>

<li>Increased maximum key length from 500 to 7000 bytes.</li>

<li>Fixed a bug in replication of <code>AUTO_INCREMENT</code>
columns with multiple-line inserts.</li>

<li>Fixed a bug when the case of letters changes in an update of an
indexed secondary column.</li>

<li>Fixed a hang when there are &gt; 24 datafiles.</li>

<li>Fixed a crash when <code>MAX(col)</code> is selected from an
empty table, and <code>col</code> is not the first column in a
multi-column index.</li>

<li>Fixed a bug in purge which could cause crashes.</li>
</ul>

<h3><a id="News-3.23.43" name="News-3.23.43"
href="manual_toc.html#News-3.23.43">D.3.14 Changes in release
3.23.43 (04 Oct 2001)</a></h3>

<ul>
<li>Fixed a bug in <code>INSERT DELAYED</code> and <code>FLUSH
TABLES</code> introduced in 3.23.42.</li>

<li>Fixed unlikely bug, which returned non-matching rows, in
<code>SELECT</code> with many tables and multi-column indexes and
'range' type.</li>

<li>Fixed an unlikely core dump bug when doing <code>EXPLAIN
SELECT</code> when using many tables and <code>ORDER
BY</code>.</li>

<li>Fixed bug in <code>LOAD DATA FROM MASTER</code> when using
table with <code>CHECKSUM=1</code>.</li>

<li>Added unique error message when one gets a DEADLOCK during a
transaction with <code>BDB</code> tables.</li>

<li>Fixed problem with <code>BDB</code> tables and
<code>UNIQUE</code> columns defined as <code>NULL</code>.</li>

<li>Fixed problem with <code>myisampack</code> when using pre-space
filled <code>CHAR</code> columns.</li>

<li>Applied patch from Yuri Dario for OS/2.</li>

<li>Fixed bug in <code>--safe-user-create</code>.</li>
</ul>

<h3><a id="News-3.23.42" name="News-3.23.42"
href="manual_toc.html#News-3.23.42">D.3.15 Changes in release
3.23.42 (08 Sep 2001)</a></h3>

<ul>
<li>Fixed problem when using <code>LOCK TABLES</code> and
<code>BDB</code> tables.</li>

<li>Fixed problem with <code>REPAIR TABLE</code> on
<code>MyISAM</code> tables with row lengths in the range from 65517
to 65520 bytes.</li>

<li>Fixed rare hang when doing <code>mysqladmin shutdown</code>
when there was a lot of activity in other threads.</li>

<li>Fixed problem with <code>INSERT DELAYED</code> where delay
thread could be hanging on <code>upgrading locks</code> with no
apparent reason.</li>

<li>Fixed problem with <code>myisampack</code> and
<code>BLOB</code>.</li>

<li>Fixed problem when one edited <tt>`.MRG'</tt> tables by hand.
(Patch from Benjamin Pflugmann).</li>

<li>Enforce that all tables in a <code>MERGE</code> table come from
the same database.</li>

<li>Fixed bug with <code>LOAD DATA INFILE</code> and transactional
tables.</li>

<li>Fix bug when using <code>INSERT DELAYED</code> with wrong
column definition.</li>

<li>Fixed core dump during <code>REPAIR</code> of some particularly
broken tables.</li>

<li>Fixed bug in <code>InnoDB</code> and
<code>AUTO_INCREMENT</code> columns.</li>

<li>Fixed bug in <code>InnoDB</code> and <code>RENAME TABLE</code>
columns.</li>

<li>Fixed critical bug in <code>InnoDB</code> and <code>BLOB</code>
columns. If you have used <code>BLOB</code> columns larger than
8000 bytes in an <code>InnoDB</code> table, it is necessary to dump
the table with <code>mysqldump</code>, drop it and restore it from
the dump.</li>

<li>Applied large patch for OS/2 from Yuri Dario.</li>

<li>Fixed problem with <code>InnoDB</code> when one could get the
error <code>Can't execute the given command...</code> even when no
transaction was active.</li>

<li>Applied some minor fixes that concern Gemini.</li>

<li>Use real arithmetic operations even in integer context if not
all arguments are integers. (Fixes uncommon bug in some integer
contexts).</li>

<li>Don't force everything to lowercase on Windows. (To fix problem
with Windows and <code>ALTER TABLE</code>). Now
<code>--lower_case_names</code> also works on Unix.</li>

<li>Fixed that automatic rollback is done when thread end doesn't
lock other threads.</li>
</ul>

<h3><a id="News-3.23.41" name="News-3.23.41"
href="manual_toc.html#News-3.23.41">D.3.16 Changes in release
3.23.41 (11 Aug 2001)</a></h3>

<ul>
<li>Added <code>--sql-mode=option[,option[,option]]</code> option
to <code>mysqld</code>. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</li>

<li>Fixed possible problem with <code>shutdown</code> on Solaris
where the <tt>`.pid'</tt> file wasn't deleted.</li>

<li><code>InnoDB</code> now supports &lt; 4 GB rows. The former
limit was 8000 bytes.</li>

<li>The <code>doublewrite</code> file flush method is used in
<code>InnoDB</code>. It reduces the need for Unix
<code>fsync()</code> calls to a fraction and improves performance
on most Unix flavors.</li>

<li>You can now use the <code>InnoDB</code> Monitor to print a lot
of <code>InnoDB</code> state information, including locks, to the
standard output. This is useful in performance tuning.</li>

<li>Several bugs which could cause hangs in <code>InnoDB</code>
have been fixed.</li>

<li>Split <code>record_buffer</code> to <code>record_buffer</code>
and <code>record_rnd_buffer</code>. To make things compatible to
previous MySQL versions, if <code>record_rnd_buffer</code> is not
set, then it takes the value of <code>record_buffer</code>.</li>

<li>Fixed optimising bug in <code>ORDER BY</code> where some
<code>ORDER BY</code> parts where wrongly removed.</li>

<li>Fixed overflow bug with <code>ALTER TABLE</code> and
<code>MERGE</code> tables.</li>

<li>Added prototypes for <code>my_thread_init()</code> and
<code>my_thread_end()</code> to <tt>`mysql_com.h'</tt></li>

<li>Added <code>--safe-user-create</code> option to
<code>mysqld</code>.</li>

<li>Fixed bug in <code>SELECT DISTINCT ... HAVING</code> that
caused error message <code>Can't find record in #...</code></li>
</ul>

<h3><a id="News-3.23.40" name="News-3.23.40"
href="manual_toc.html#News-3.23.40">D.3.17 Changes in release
3.23.40</a></h3>

<ul>
<li>Fixed problem with <code>--low-priority-updates</code> and
<code>INSERT</code> statements.</li>

<li>Fixed bug in slave thread when under some rare circumstances it
could get 22 bytes ahead on the offset in the master.</li>

<li>Added <code>slave_net_timeout</code> for replication.</li>

<li>Fixed problem with <code>UPDATE</code> and <code>BDB</code>
tables.</li>

<li>Fixed hard bug in <code>BDB</code> tables when using key
parts.</li>

<li>Fixed problem when using <code>GRANT FILE ON database.*
...</code>; previously we added the <code>DROP</code> privilege for
the database.</li>

<li>Fixed <code>DELETE FROM tbl_name ... LIMIT 0</code> and
<code>UPDATE FROM tbl_name ... LIMIT 0</code>, which acted as
though the <code>LIMIT</code> clause was not present (they deleted
or updated all selected rows).</li>

<li><code>CHECK TABLE</code> now checks if an
<code>AUTO_INCREMENT</code> column contains the value 0.</li>

<li>Sending a <code>SIGHUP</code> to <code>mysqld</code> will now
only flush the logs, not reset the replication.</li>

<li>Fixed parser to allow floats of type <code>1.0e1</code> (no
sign after <code>e</code>).</li>

<li>Option <code>--force</code> to <code>myisamchk</code> now also
updates states.</li>

<li>Added option <code>--warnings</code> to <code>mysqld</code>.
Now <code>mysqld</code> prints the error <code>Aborted
connection</code> only if this option is used.</li>

<li>Fixed problem with <code>SHOW CREATE TABLE</code> when you
didn't have a <code>PRIMARY KEY</code>.</li>

<li>Properly fixed the rename of
<code>innodb_unix_file_flush_method</code> variable to
<code>innodb_flush_method</code>.</li>

<li>Fixed bug when converting <code>BIGINT UNSIGNED</code> to
<code>DOUBLE</code>. This caused a problem when doing comparisons
with <code>BIGINT</code> values outside of the signed range.</li>

<li>Fixed bug in <code>BDB</code> tables when querying empty
tables.</li>

<li>Fixed a bug when using <code>COUNT(DISTINCT)</code> with
<code>LEFT JOIN</code> and there weren't any matching rows.</li>

<li>Removed all documentation referring to the <code>GEMINI</code>
table type. <code>GEMINI</code> is not released under an <code>Open
Source</code> license.</li>
</ul>

<h3><a id="News-3.23.39" name="News-3.23.39"
href="manual_toc.html#News-3.23.39">D.3.18 Changes in release
3.23.39 (12 Jun 2001)</a></h3>

<ul>
<li>The <code>AUTO_INCREMENT</code> sequence wasn't reset when
dropping and adding an <code>AUTO_INCREMENT</code> column.</li>

<li><code>CREATE ... SELECT</code> now creates non-unique indexes
delayed.</li>

<li>Fixed problem where <code>LOCK TABLES tbl_name READ</code>
followed by <code>FLUSH TABLES</code> put an exclusive lock on the
table.</li>

<li><code>REAL @variable</code> values were represented with only 2
digits when converted to strings.</li>

<li>Fixed problem that client ``hung'' when <code>LOAD TABLE FROM
MASTER</code> failed.</li>

<li><code>myisamchk --fast --force</code> will no longer repair
tables that only had the open count wrong.</li>

<li>Added functions to handle symbolic links to make life easier in
4.0.</li>

<li>We are now using the <code>-lcma</code> thread library on HP-UX
10.20 so that MySQL will be more stable on HP-UX.</li>

<li>Fixed problem with <code>IF()</code> and number of decimals in
the result.</li>

<li>Fixed date-part extraction functions to work with dates where
day and/or month is 0.</li>

<li>Extended argument length in option files from 256 to 512
chars.</li>

<li>Fixed problem with shutdown when <code>INSERT DELAYED</code>
was waiting for a <code>LOCK TABLE</code>.</li>

<li>Fixed core dump bug in <code>InnoDB</code> when tablespace was
full.</li>

<li>Fixed problem with <code>MERGE</code> tables and big tables
(&gt; 4G) when using <code>ORDER BY</code>.</li>
</ul>

<h3><a id="News-3.23.38" name="News-3.23.38"
href="manual_toc.html#News-3.23.38">D.3.19 Changes in release
3.23.38 (09 May 2001)</a></h3>

<ul>
<li>Fixed a bug when <code>SELECT</code> from <code>MERGE</code>
table sometimes results in incorrectly ordered rows.</li>

<li>Fixed a bug in <code>REPLACE()</code> when using the
<code>ujis</code> character set.</li>

<li>Applied Sleepycat <code>BDB</code> patches 3.2.9.1 and
3.2.9.2.</li>

<li>Added <code>--skip-stack-trace</code> option to
<code>mysqld</code>.</li>

<li><code>CREATE TEMPORARY</code> now works with
<code>InnoDB</code> tables.</li>

<li><code>InnoDB</code> now promotes sub keys to whole keys.</li>

<li>Added option <code>CONCURRENT</code> to <code>LOAD
DATA</code>.</li>

<li>Better error message when slave <code>max_allowed_packet</code>
is too low to read a very long log event from the master.</li>

<li>Fixed bug when too many rows where removed when using
<code>SELECT DISTINCT ... HAVING</code>.</li>

<li><code>SHOW CREATE TABLE</code> now returns
<code>TEMPORARY</code> for temporary tables.</li>

<li>Added <code>Rows_examined</code> to slow query log.</li>

<li>Fixed problems with function returning empty string when used
together with a group function and a <code>WHERE</code> that didn't
match any rows.</li>

<li>New program <code>mysqlcheck</code>.</li>

<li>Added database name to output for administrative commands like
<code>CHECK</code>, <code>REPAIR</code>,
<code>OPTIMIZE</code>.</li>

<li>Lots of portability fixes for <code>InnoDB</code>.</li>

<li>Changed optimiser so that queries like <code>SELECT * FROM
tbl_name,tbl_name2 ... ORDER BY key_part1 LIMIT #</code> will use
index on <code>key_part1</code> instead of
<code>filesort</code>.</li>

<li>Fixed bug when doing <code>LOCK TABLE to_table WRITE,...;
INSERT INTO to_table... SELECT ...</code> when
<code>to_table</code> was empty.</li>

<li>Fixed bug with <code>LOCK TABLE</code> and <code>BDB</code>
tables.</li>
</ul>

<h3><a id="News-3.23.37" name="News-3.23.37"
href="manual_toc.html#News-3.23.37">D.3.20 Changes in release
3.23.37 (17 Apr 2001)</a></h3>

<ul>
<li>Fixed a bug when using <code>MATCH()</code> in
<code>HAVING</code> clause.</li>

<li>Fixed a bug when using <code>HEAP</code> tables with
<code>LIKE</code>.</li>

<li>Added <code>--mysql-version</code> option to
<code>safe_mysqld</code></li>

<li>Changed <code>INNOBASE</code> to <code>InnoDB</code> (because
the <code>INNOBASE</code> name was already used). All
<code>configure</code> options and <code>mysqld</code> start
options now use <code>innodb</code> instead of
<code>innobase</code>. This means that before upgrading to this
version, you have to change any configuration files where you have
used <code>innobase</code> options!</li>

<li>Fixed bug when using indexes on <code>CHAR(255) NULL</code>
columns.</li>

<li>Slave thread will now be started even if
<code>master-host</code> is not set, as long as
<code>server-id</code> is set and valid <tt>`master.info'</tt> is
present.</li>

<li>Partial updates (terminated with kill) are now logged with a
special error code to the binary log. Slave will refuse to execute
them if the error code indicates the update was terminated
abnormally, and will have to be recovered with <code>SET
SQL_SLAVE_SKIP_COUNTER=1; SLAVE START</code> after a manual sanity
check/correction of data integrity.</li>

<li>Fixed bug that erroneously logged a drop of internal temporary
table on thread termination to the binary log -- this bug affected
replication.</li>

<li>Fixed a bug in <code>REGEXP</code> on 64-bit machines.</li>

<li><code>UPDATE</code> and <code>DELETE</code> with <code>WHERE
unique_key_part IS NULL</code> didn't update/delete all rows.</li>

<li>Disabled <code>INSERT DELAYED</code> for tables that support
transactions.</li>

<li>Fixed bug when using date functions on
<code>TEXT</code>/<code>BLOB</code> column with wrong date
format.</li>

<li>UDFs now also work on Windows. (Patch by Ralph Mason.)</li>

<li>Fixed bug in <code>ALTER TABLE</code> and <code>LOAD DATA
INFILE</code> that disabled key-sorting. These commands should now
be faster in most cases.</li>

<li>Fixed performance bug where reopened tables (tables that had
been waiting for <code>FLUSH</code> or <code>REPAIR</code>) would
not use indexes for the next query.</li>

<li>Fixed problem with <code>ALTER TABLE</code> to
<code>InnoDB</code> tables on FreeBSD.</li>

<li>Added <code>mysqld</code> variables
<code>myisam_max_sort_file_size</code> and
<code>myisam_max_extra_sort_file_size</code>.</li>

<li>Initialise signals early to avoid problem with signals in
<code>InnoDB</code>.</li>

<li>Applied patch for the <code>tis620</code> character set to make
comparisons case-independent and to fix a bug in <code>LIKE</code>
for this character set. <strong>Note</strong>: All tables that uses
the <code>tis620</code> character set must be fixed with
<code>myisamchk -r</code> or <code>REPAIR TABLE</code> !</li>

<li>Added <code>--skip-safemalloc</code> option to
<code>mysqld</code>.</li>
</ul>

<h3><a id="News-3.23.36" name="News-3.23.36"
href="manual_toc.html#News-3.23.36">D.3.21 Changes in release
3.23.36 (27 Mar 2001)</a></h3>

<ul>
<li>Fixed a bug that allowed use of database names containing a
<samp>`.'</samp> character. This fixes a serious security issue
when <code>mysqld</code> is run as root.</li>

<li>Fixed bug when thread creation failed (could happen when doing
a <strong>lot</strong> of connections in a short time).</li>

<li>Fixed some problems with <code>FLUSH TABLES</code> and
<code>TEMPORARY</code> tables. (Problem with freeing the key cache
and error <code>Can't reopen table...</code>.)</li>

<li>Fixed a problem in <code>InnoDB</code> with other character
sets than <code>latin1</code> and another problem when using many
columns.</li>

<li>Fixed bug that caused a core dump when using a very complex
query involving <code>DISTINCT</code> and summary functions.</li>

<li>Added <code>SET TRANSACTION ISOLATION LEVEL ...</code></li>

<li>Added <code>SELECT ... FOR UPDATE</code>.</li>

<li>Fixed bug where the number of affected rows was not returned
when MySQL was compiled without transaction support.</li>

<li>Fixed a bug in <code>UPDATE</code> where keys weren't always
used to find the rows to be updated.</li>

<li>Fixed a bug in <code>CONCAT_WS()</code> where it returned
incorrect results.</li>

<li>Changed <code>CREATE ... SELECT</code> and <code>INSERT ...
SELECT</code> to not allow concurrent inserts as this could make
the binary log hard to repeat. (Concurrent inserts are enabled if
you are not using the binary or update log.)</li>

<li>Changed some macros to be able to use fast mutex with
<code>glibc</code> 2.2.</li>
</ul>

<h3><a id="News-3.23.35" name="News-3.23.35"
href="manual_toc.html#News-3.23.35">D.3.22 Changes in release
3.23.35 (15 Mar 2001)</a></h3>

<ul>
<li>Fixed newly introduced bug in <code>ORDER BY</code>.</li>

<li>Fixed wrong define <code>CLIENT_TRANSACTIONS</code>.</li>

<li>Fixed bug in <code>SHOW VARIABLES</code> when using
<code>INNOBASE</code> tables.</li>

<li>Setting and using user variables in <code>SELECT
DISTINCT</code> didn't work.</li>

<li>Tuned <code>SHOW ANALYZE</code> for small tables.</li>

<li>Fixed handling of arguments in the benchmark script
<code>run-all-tests</code>.</li>
</ul>

<h3><a id="News-3.23.34a" name="News-3.23.34a"
href="manual_toc.html#News-3.23.34a">D.3.23 Changes in release
3.23.34a</a></h3>

<ul>
<li>Added extra files to the distribution to allow
<code>INNOBASE</code> support to be compiled.</li>
</ul>

<h3><a id="News-3.23.34" name="News-3.23.34"
href="manual_toc.html#News-3.23.34">D.3.24 Changes in release
3.23.34 (10 Mar 2001)</a></h3>

<ul>
<li>Added the <code>INNOBASE</code> storage engine and the
<code>BDB</code> storage engine to the MySQL source
distribution.</li>

<li>Updated the documentation about <code>GEMINI</code>
tables.</li>

<li>Fixed a bug in <code>INSERT DELAYED</code> that caused threads
to hang when inserting <code>NULL</code> into an
<code>AUTO_INCREMENT</code> column.</li>

<li>Fixed a bug in <code>CHECK TABLE</code> / <code>REPAIR
TABLE</code> that could cause a thread to hang.</li>

<li><code>REPLACE</code> will not replace a row that conflicts with
an <code>AUTO_INCREMENT</code> generated key.</li>

<li><code>mysqld</code> now only sets
<code>CLIENT_TRANSACTIONS</code> in
<code>mysql-&gt;server_capabilities</code> if the server supports a
transaction-safe storage engine.</li>

<li>Fixed <code>LOAD DATA INFILE</code> to allow numeric values to
be read into <code>ENUM</code> and <code>SET</code> columns.</li>

<li>Improved error diagnostic for slave thread exit.</li>

<li>Fixed bug in <code>ALTER TABLE ... ORDER BY</code>.</li>

<li>Added <code>max_user_connections</code> variable to
<code>mysqld</code>.</li>

<li>Limit query length for replication by
<code>max_allowed_packet</code>, not the arbitrary limit of 4
MB.</li>

<li>Allow space around <code>=</code> in argument to
<code>--set-variable</code>.</li>

<li>Fixed problem in automatic repair that could leave some threads
in state <code>Waiting for table</code>.</li>

<li><code>SHOW CREATE TABLE</code> now displays the
<code>UNION()</code> for <code>MERGE</code> tables.</li>

<li><code>ALTER TABLE</code> now remembers the old
<code>UNION()</code> definition.</li>

<li>Fixed bug when replicating timestamps.</li>

<li>Fixed bug in bidirectional replication.</li>

<li>Fixed bug in the <code>BDB</code> storage engine that occurred
when using an index on multi-part key where a key part may be
<code>NULL</code>.</li>

<li>Fixed <code>MAX()</code> optimisation on sub-key for
<code>BDB</code> tables.</li>

<li>Fixed problem where garbage results were returned when using
<code>BDB</code> tables and <code>BLOB</code> or <code>TEXT</code>
fields when joining many tables.</li>

<li>Fixed a problem with <code>BDB</code> tables and
<code>TEXT</code> columns.</li>

<li>Fixed bug when using a <code>BLOB</code> key where a const row
wasn't found.</li>

<li>Fixed that <code>mysqlbinlog</code> writes the timestamp value
for each query. This ensures that one gets same values for date
functions like <code>NOW()</code> when using
<code>mysqlbinlog</code> to pipe the queries to another
server.</li>

<li>Allow <code>--skip-gemini</code>, <code>--skip-bdb</code>, and
<code>--skip-innodb</code> options to be specified when invoking
<code>mysqld</code>, even if these storage engines are not compiled
in to <code>mysqld</code>.</li>

<li>One can now do <code>GROUP BY ... DESC</code>.</li>

<li>Fixed a deadlock in the <code>SET</code> code, when one ran
<code>SET @foo=bar</code>, where <code>bar</code> is a column
reference, an error was not properly generated.</li>
</ul>

<h3><a id="News-3.23.33" name="News-3.23.33"
href="manual_toc.html#News-3.23.33">D.3.25 Changes in release
3.23.33 (09 Feb 2001)</a></h3>

<ul>
<li>Fixed DNS lookups not to use the same mutex as the hostname
cache. This will enable known hosts to be quickly resolved even if
a DNS lookup takes a long time.</li>

<li>Added <code>--character-sets-dir</code> option to
<code>myisampack</code>.</li>

<li>Removed warnings when running <code>REPAIR TABLE ...
EXTENDED</code>.</li>

<li>Fixed a bug that caused a core dump when using <code>GROUP
BY</code> on an alias, where the alias was the same as an existing
column name.</li>

<li>Added <code>SEQUENCE()</code> as an example UDF function.</li>

<li>Changed <code>mysql_install_db</code> to use
<code>BINARY</code> for <code>CHAR</code> columns in the privilege
tables.</li>

<li>Changed <code>TRUNCATE tbl_name</code> to <code>TRUNCATE TABLE
tbl_name</code> to use the same syntax as Oracle. Until 4.0 we will
also allow <code>TRUNCATE tbl_name</code> to not crash old
code.</li>

<li>Fixed ``no found rows'' bug in <code>MyISAM</code> tables when
a <code>BLOB</code> was first part of a multi-part key.</li>

<li>Fixed bug where <code>CASE</code> didn't work with <code>GROUP
BY</code>.</li>

<li>Added <code>--sort-recover</code> option to
<code>myisamchk</code>.</li>

<li><code>myisamchk -S</code> and <code>OPTIMIZE TABLE</code> now
work on Windows.</li>

<li>Fixed bug when using <code>DISTINCT</code> on results from
functions that referred to a group function, like: 

<pre>
SELECT a, DISTINCT SEC_TO_TIME(SUM(a))
FROM tbl_name GROUP BY a, b;
</pre>
</li>

<li>Fixed buffer overrun in <code>libmysqlclient</code> library.
Fixed bug in handling <code>STOP</code> event after
<code>ROTATE</code> event in replication.</li>

<li>Fixed another buffer overrun in <code>DROP
DATABASE</code>.</li>

<li>Added <code>Table_locks_immediate</code> and
<code>Table_locks_waited</code> status variables.</li>

<li>Fixed bug in replication that broke slave server start with
existing <tt>`master.info'</tt>. This fixes a bug introduced in
3.23.32.</li>

<li>Added <code>SET SQL_SLAVE_SKIP_COUNTER=n</code> command to
recover from replication glitches without a full database
copy.</li>

<li>Added <code>max_binlog_size</code> variable; the binary log
will be rotated automatically when the size crosses the limit.</li>

<li>Added <code>Last_error</code>, <code>Last_errno</code>, and
<code>Slave_skip_counter</code> variables to <code>SHOW SLAVE
STATUS</code>.</li>

<li>Fixed bug in <code>MASTER_POS_WAIT()</code> function.</li>

<li>Execute core dump handler on <code>SIGILL</code>, and
<code>SIGBUS</code> in addition to <code>SIGSEGV</code>.</li>

<li>On x86 Linux, print the current query and thread (connection)
id, if available, in the core dump handler.</li>

<li>Fixed several timing bugs in the test suite.</li>

<li>Extended <code>mysqltest</code> to take care of the timing
issues in the test suite.</li>

<li><code>ALTER TABLE</code> can now be used to change the
definition for a <code>MERGE</code> table.</li>

<li>Fixed creation of <code>MERGE</code> tables on Windows.</li>

<li>Portability fixes for OpenBSD and OS/2.</li>

<li>Added <code>--temp-pool</code> option to <code>mysqld</code>.
Using this option will cause most temporary files created to use a
small set of names, rather than a unique name for each new file.
This is to work around a problem in the Linux kernel dealing with
creating a bunch of new files with different names. With the old
behaviour, Linux seems to "leak" memory, as it's being allocated to
the directory entry cache instead of the disk cache.</li>
</ul>

<h3><a id="News-3.23.32" name="News-3.23.32"
href="manual_toc.html#News-3.23.32">D.3.26 Changes in release
3.23.32 (22 Jan 2001: Stable)</a></h3>

<ul>
<li>Changed code to get around compiler bug in Compaq C++ on OSF/1,
that broke <code>BACKUP</code>, <code>RESTORE</code>,
<code>CHECK</code>, <code>REPAIR</code>, and <code>ANALYZE
TABLE</code>.</li>

<li>Added option <code>FULL</code> to <code>SHOW COLUMNS</code>.
Now we show the privilege list for the columns only if this option
is given.</li>

<li>Fixed bug in <code>SHOW LOGS</code> when there weren't any
<code>BDB</code> logs.</li>

<li>Fixed a timing problem in replication that could delay sending
an update to the client until a new update was done.</li>

<li>Don't convert field names when using
<code>mysql_list_fields()</code>. This is to keep this code
compatible with <code>SHOW FIELDS</code>.</li>

<li><code>MERGE</code> tables didn't work on Windows.</li>

<li>Fixed problem with <code>SET PASSWORD=...</code> on
Windows.</li>

<li>Added missing <tt>`my_config.h'</tt> to RPM distribution.</li>

<li><code>TRIM("foo" from "foo")</code> didn't return an empty
string.</li>

<li>Added <code>--with-version-suffix</code> option to
<code>configure</code>.</li>

<li>Fixed core dump when client aborted connection without
<code>mysql_close()</code>.</li>

<li>Fixed a bug in <code>RESTORE TABLE</code> when trying to
restore from a non-existent directory.</li>

<li>Fixed a bug which caused a core dump on the slave when
replicating <code>SET PASSWORD</code>.</li>

<li>Added <code>MASTER_POS_WAIT()</code>.</li>
</ul>

<h3><a id="News-3.23.31" name="News-3.23.31"
href="manual_toc.html#News-3.23.31">D.3.27 Changes in release
3.23.31 (17 Jan 2001)</a></h3>

<ul>
<li>The test suite now tests all reachable <code>BDB</code>
interface code. During testing we found and fixed many errors in
the interface code.</li>

<li>Using <code>HAVING</code> on an empty table could produce one
result row when it shouldn't.</li>

<li>Fixed the MySQL RPM not to depend on Perl5 anymore.</li>

<li>Fixed some problems with <code>HEAP</code> tables on
Windows.</li>

<li><code>SHOW TABLE STATUS</code> didn't show correct average row
length for tables larger than 4G.</li>

<li><code>CHECK TABLE ... EXTENDED</code> didn't check row links
for fixed size tables.</li>

<li>Added option <code>MEDIUM</code> to <code>CHECK
TABLE</code>.</li>

<li>Fixed problem when using <code>DECIMAL()</code> keys on
negative numbers.</li>

<li><code>HOUR()</code> (and some other <code>TIME</code>
functions) on a <code>CHAR</code> column always returned
<code>NULL</code>.</li>

<li>Fixed security bug in something (please upgrade if you are
using an earlier MySQL 3.23 version).</li>

<li>Fixed buffer overflow bug when writing a certain error
message.</li>

<li>Added usage of <code>setrlimit()</code> on Linux to get
<code>-O --open-files-limit=#</code> to work on Linux.</li>

<li>Added <code>bdb_version</code> variable to
<code>mysqld</code>.</li>

<li>Fixed bug when using expression of type: 

<pre>
SELECT ... FROM t1 LEFT JOIN t2 ON (t1.a=t2.a) WHERE t1.a=t2.a
</pre>

In this case the test in the <code>WHERE</code> clause was wrongly
optimised away.</li>

<li>Fixed bug in <code>MyISAM</code> when deleting keys with
possible <code>NULL</code> values, but the first key-column was not
a prefix-compressed text column.</li>

<li>Fixed <code>mysql.server</code> to read the
<code>[mysql.server]</code> option file group rather than the
<code>[mysql_server]</code> group.</li>

<li>Fixed <code>safe_mysqld</code> and <code>mysql.server</code> to
also read the <code>server</code> option section.</li>

<li>Added <code>Threads_created</code> status variable to
<code>mysqld</code>.</li>
</ul>

<h3><a id="News-3.23.30" name="News-3.23.30"
href="manual_toc.html#News-3.23.30">D.3.28 Changes in release
3.23.30 (04 Jan 2001)</a></h3>

<ul>
<li>Added <code>SHOW OPEN TABLES</code> command.</li>

<li>Fixed that <code>myisamdump</code> works against old
<code>mysqld</code> servers.</li>

<li>Fixed <code>myisamchk -k#</code> so that it works again.</li>

<li>Fixed a problem with replication when the binary log file went
over 2G on 32-bit systems.</li>

<li><code>LOCK TABLES</code> will now automatically start a new
transaction.</li>

<li>Changed <code>BDB</code> tables to not use internal
subtransactions and reuse open files to get more speed.</li>

<li>Added <code>--mysqld=#</code> option to
<code>safe_mysqld</code>.</li>

<li>Allow hex constants in the <code>--fields-*-by</code> and
<code>--lines-terminated-by</code> options to
<code>mysqldump</code> and <code>mysqlimport</code>. By Paul
DuBois.</li>

<li>Added <code>--safe-show-database</code> option to
<code>mysqld</code>.</li>

<li>Added <code>have_bdb</code>, <code>have_gemini</code>,
<code>have_innobase</code>, <code>have_raid</code> and
<code>have_openssl</code> to <code>SHOW VARIABLES</code> to make it
easy to test for supported extensions.</li>

<li>Added <code>--open-files-limit</code> option to
<code>mysqld</code>.</li>

<li>Changed <code>--open-files</code> option to
<code>--open-files-limit</code> in <code>safe_mysqld</code>.</li>

<li>Fixed a bug where some rows were not found with
<code>HEAP</code> tables that had many keys.</li>

<li>Fixed that <code>--bdb-no-sync</code> works.</li>

<li>Changed <code>--bdb-recover</code> to
<code>--bdb-no-recover</code> as recover should be on by
default.</li>

<li>Changed the default number of <code>BDB</code> locks to
10000.</li>

<li>Fixed a bug from 3.23.29 when allocating the shared structure
needed for <code>BDB</code> tables.</li>

<li>Changed <code>mysqld_multi.sh</code> to use configure
variables. Patch by Christopher McCrory.</li>

<li>Added fixing of include files for Solaris 2.8.</li>

<li>Fixed bug with <code>--skip-networking</code> on Debian
Linux.</li>

<li>Fixed problem that some temporary files where reported as
having the name <code>UNOPENED</code> in error messages.</li>

<li>Fixed bug when running two simultaneous <code>SHOW LOGS</code>
queries.</li>
</ul>

<h3><a id="News-3.23.29" name="News-3.23.29"
href="manual_toc.html#News-3.23.29">D.3.29 Changes in release
3.23.29 (16 Dec 2000)</a></h3>

<ul>
<li>Configure updates for Tru64, large file support, and better TCP
wrapper support. By Albert Chin-A-Young.</li>

<li>Fixed bug in <code>&lt;=&gt;</code> operator.</li>

<li>Fixed bug in <code>REPLACE</code> with <code>BDB</code>
tables.</li>

<li><code>LPAD()</code> and <code>RPAD()</code> will shorten the
result string if it's longer than the length argument.</li>

<li>Added <code>SHOW LOGS</code> command.</li>

<li>Remove unused <code>BDB</code> logs on shutdown.</li>

<li>When creating a table, put <code>PRIMARY</code> keys first,
followed by <code>UNIQUE</code> keys.</li>

<li>Fixed a bug in <code>UPDATE</code> involving multi-part keys
where one specified all key parts both in the update and the
<code>WHERE</code> part. In this case MySQL could try to update a
record that didn't match the whole <code>WHERE</code> part.</li>

<li>Changed drop table to first drop the tables and then the
<tt>`.frm'</tt> file.</li>

<li>Fixed a bug in the hostname cache which caused
<code>mysqld</code> to report the hostname as <code>''</code> in
some error messages.</li>

<li>Fixed a bug with <code>HEAP</code> type tables; the variable
<code>max_heap_table_size</code> wasn't used. Now either
<code>MAX_ROWS</code> or <code>max_heap_table_size</code> can be
used to limit the size of a <code>HEAP</code> type table.</li>

<li>Changed the default server-id to 1 for masters and 2 for slaves
to make it easier to use the binary log.</li>

<li>Renamed <code>bdb_lock_max</code> variable to
<code>bdb_max_lock</code>.</li>

<li>Added support for <code>AUTO_INCREMENT</code> on sub-fields for
<code>BDB</code> tables.</li>

<li>Added <code>ANALYZE</code> of <code>BDB</code> tables.</li>

<li>In <code>BDB</code> tables, we now store the number of rows;
this helps to optimise queries when we need an approximation of the
number of rows.</li>

<li>If we get an error in a multi-row statement, we now only roll
back the last statement, not the entire transaction.</li>

<li>If you do a <code>ROLLBACK</code> when you have updated a
non-transactional table you will get an error as a warning.</li>

<li>Added <code>--bdb-shared-data</code> option to
<code>mysqld</code>.</li>

<li>Added <code>Slave_open_temp_tables</code> status variable to
<code>mysqld</code></li>

<li>Added <code>binlog_cache_size</code> and
<code>max_binlog_cache_size</code> variables to
<code>mysqld</code>.</li>

<li><code>DROP TABLE</code>, <code>RENAME TABLE</code>,
<code>CREATE INDEX</code> and <code>DROP INDEX</code> are now
transaction endpoints.</li>

<li>If you do a <code>DROP DATABASE</code> on a symbolically linked
database, both the link and the original database is deleted.</li>

<li>Fixed <code>DROP DATABASE</code> to work on OS/2.</li>

<li>Fixed bug when doing a <code>SELECT DISTINCT ... table1 LEFT
JOIN table2 ...</code> when <code>table2</code> was empty.</li>

<li>Added <code>--abort-slave-event-count</code> and
<code>--disconnect-slave-event-count</code> options to
<code>mysqld</code> for debugging and testing of replication.</li>

<li>Fixed replication of temporary tables. Handles everything
except slave server restart.</li>

<li><code>SHOW KEYS</code> now shows whether key is
<code>FULLTEXT</code>.</li>

<li>New script <code>mysqld_multi</code>. See section <a
href="manual.html#mysqld_multi">4.7.3 <code>mysqld_multi</code>, A
Program for Managing Multiple MySQL Servers</a>.</li>

<li>Added new script, <code>mysql-multi.server.sh</code>. Thanks to
Tim Bunce <a
href="mailto:Tim.Bunce@ig.co.uk">Tim.Bunce@ig.co.uk</a> for
modifying <code>mysql.server</code> to easily handle hosts running
many <code>mysqld</code> processes.</li>

<li><code>safe_mysqld</code>, <code>mysql.server</code>, and
<code>mysql_install_db</code> have been modified to use
<code>mysql_print_defaults</code> instead of various hacks to read
the <tt>`my.cnf'</tt> files. In addition, the handling of various
paths has been made more consistent with how <code>mysqld</code>
handles them by default.</li>

<li>Automatically remove Berkeley DB transaction logs that no
longer are in use.</li>

<li>Fixed bug with several <code>FULLTEXT</code> indexes in one
table.</li>

<li>Added a warning if number of rows changes on
<code>REPAIR</code>/<code>OPTIMIZE</code>.</li>

<li>Applied patches for OS/2 by <code>Yuri Dario</code>.</li>

<li><code>FLUSH TABLES tbl_name</code> didn't always flush the
index tree to disk properly.</li>

<li><code>--bootstrap</code> is now run in a separate thread. This
fixes a problem that caused <code>mysql_install_db</code> to core
dump on some Linux machines.</li>

<li>Changed <code>mi_create()</code> to use less stack space.</li>

<li>Fixed bug with optimiser trying to over-optimise
<code>MATCH()</code> when used with <code>UNIQUE</code> key.</li>

<li>Changed <code>crash-me</code> and the MySQL benchmarks to also
work with FrontBase.</li>

<li>Allow <code>RESTRICT</code> and <code>CASCADE</code> after
<code>DROP TABLE</code> to make porting easier.</li>

<li>Reset status variable which could cause problem if one used
<code>--slow-log</code>.</li>

<li>Added <code>connect_timeout</code> variable to
<code>mysql</code> and <code>mysqladmin</code>.</li>

<li>Added <code>connect-timeout</code> as an alias for
<code>timeout</code> for option files read by
<code>mysql_options()</code>.</li>
</ul>

<h3><a id="News-3.23.28" name="News-3.23.28"
href="manual_toc.html#News-3.23.28">D.3.30 Changes in release
3.23.28 (22 Nov 2000: Gamma)</a></h3>

<ul>
<li>Added new options <code>--pager[=...]</code>,
<code>--no-pager</code>, <code>--tee=...</code> and
<code>--no-tee</code> to the <code>mysql</code> client. The new
corresponding interactive commands are <code>pager</code>,
<code>nopager</code>, <code>tee</code> and <code>notee</code>. See
section <a href="manual.html#mysql">4.8.2 <code>mysql</code>, The
Command-line Tool</a>, <code>mysql --help</code> and the
interactive help for more information.</li>

<li>Fixed crash when automatic repair of <code>MyISAM</code> table
failed.</li>

<li>Fixed a major performance bug in the table locking code when
one constantly had a lot of <code>SELECT</code>,
<code>UPDATE</code> and <code>INSERT</code> statements running. The
symptom was that the <code>UPDATE</code> and <code>INSERT</code>
queries were locked for a long time while new <code>SELECT</code>
statements were executed before the updates.</li>

<li>When reading <code>options_files</code> with
<code>mysql_options()</code> the <code>return-found-rows</code>
option was ignored.</li>

<li>One can now specify <code>interactive-timeout</code> in the
option file that is read by <code>mysql_options()</code>. This
makes it possible to force programs that run for a long time (like
<code>mysqlhotcopy</code>) to use the
<code>interactive_timeout</code> time instead of the
<code>wait_timeout</code> time.</li>

<li>Added to the slow query log the time and the user name for each
logged query. If you are using <code>--log-long-format</code> then
also queries that do not use an index are logged, even if the query
takes less than <code>long_query_time</code> seconds.</li>

<li>Fixed a problem in <code>LEFT JOIN</code> which caused all
columns in a reference table to be <code>NULL</code>.</li>

<li>Fixed a problem when using <code>NATURAL JOIN</code> without
keys.</li>

<li>Fixed a bug when using a multi-part keys where the first part
was of type <code>TEXT</code> or <code>BLOB</code>.</li>

<li><code>DROP</code> of temporary tables wasn't stored in the
update/binary log.</li>

<li>Fixed a bug where <code>SELECT DISTINCT * ... LIMIT #</code>
only returned one row.</li>

<li>Fixed a bug in the assembler code in <code>strstr()</code> for
SPARC and cleaned up the <tt>`global.h'</tt> header file to avoid a
problem with bad aliasing with the compiler submitted with RedHat
7.0. (Reported by Trond Eivind Glomsrød)</li>

<li>The <code>--skip-networking</code> option now works properly on
NT.</li>

<li>Fixed a long outstanding bug in the <code>ISAM</code> tables
when a row with a length of more than 65K was shortened by a single
byte.</li>

<li>Fixed a bug in <code>MyISAM</code> when running multiple
updating processes on the same table.</li>

<li>Allow one to use <code>FLUSH TABLE tbl_name</code>.</li>

<li>Added <code>--replicate-ignore-table</code>,
<code>--replicate-do-table</code>,
<code>--replicate-wild-ignore-table</code>, and
<code>--replicate-wild-do-table</code> options to
<code>mysqld</code>.</li>

<li>Changed all log files to use our own <code>IO_CACHE</code>
mechanism instead of <code>FILE</code> to avoid OS problems when
there are many files open.</li>

<li>Added <code>--open-files</code> and <code>--timezone</code>
options to <code>safe_mysqld</code>.</li>

<li>Fixed a fatal bug in <code>CREATE TEMPORARY TABLE ... SELECT
...</code>.</li>

<li>Fixed a problem with <code>CREATE TABLE ... SELECT
NULL</code>.</li>

<li>Added variables
<code>large_file_support</code>,<code>net_read_timeout</code>,
<code>net_write_timeout</code> and <code>query_buffer_size</code>
to <code>SHOW VARIABLES</code>.</li>

<li>Added status variables <code>created_tmp_files</code> and
<code>sort_merge_passes</code> to <code>SHOW STATUS</code>.</li>

<li>Fixed a bug where we didn't allow an index name after the
<code>FOREIGN KEY</code> definition.</li>

<li>Added <code>TRUNCATE table_name</code> as a synonym for
<code>DELETE FROM table_name</code>.</li>

<li>Fixed a bug in a <code>BDB</code> key compare function when
comparing part keys.</li>

<li>Added <code>bdb_lock_max</code> variable to
<code>mysqld</code>.</li>

<li>Added more tests to the benchmark suite.</li>

<li>Fixed an overflow bug in the client code when using overly long
database names.</li>

<li><code>mysql_connect()</code> now aborts on Linux if the server
doesn't answer in <code>timeout</code> seconds.</li>

<li><code>SLAVE START</code> did not work if you started with
<code>--skip-slave-start</code> and had not explicitly run
<code>CHANGE MASTER TO</code>.</li>

<li>Fixed the output of <code>SHOW MASTER STATUS</code> to be
consistent with <code>SHOW SLAVE STATUS</code>. (It now has no
directory in the log name.)</li>

<li>Added <code>PURGE MASTER LOGS TO</code>.</li>

<li>Added <code>SHOW MASTER LOGS</code>.</li>

<li>Added <code>--safemalloc-mem-limit</code> option to
<code>mysqld</code> to simulate memory shortage when compiled with
the <code>--with-debug=full</code> option.</li>

<li>Fixed several core dumps in out-of-memory conditions.</li>

<li><code>SHOW SLAVE STATUS</code> was using an uninitialised mutex
if the slave had not been started yet.</li>

<li>Fixed bug in <code>ELT()</code> and <code>MAKE_SET()</code>
when the query used a temporary table.</li>

<li><code>CHANGE MASTER TO</code> without specifying
<code>MASTER_LOG_POS</code> would set it to 0 instead of 4 and hit
the magic number in the master binlog.</li>

<li><code>ALTER TABLE ... ORDER BY ...</code> syntax added. This
will create the new table with the rows in a specific order.</li>
</ul>

<h3><a id="News-3.23.27" name="News-3.23.27"
href="manual_toc.html#News-3.23.27">D.3.31 Changes in release
3.23.27 (24 Oct 2000)</a></h3>

<ul>
<li>Fixed a bug where the automatic repair of <code>MyISAM</code>
tables sometimes failed when the datafile was corrupt.</li>

<li>Fixed a bug in <code>SHOW CREATE</code> when using
<code>AUTO_INCREMENT</code> columns.</li>

<li>Changed <code>BDB</code> tables to use new compare function in
Berkeley DB 3.2.3.</li>

<li>You can now use Unix sockets with MIT-pthreads.</li>

<li>Added the <code>latin5</code> (turkish) character set.</li>

<li>Small portability fixes.</li>
</ul>

<h3><a id="News-3.23.26" name="News-3.23.26"
href="manual_toc.html#News-3.23.26">D.3.32 Changes in release
3.23.26 (18 Oct 2000)</a></h3>

<ul>
<li>Renamed <code>FLUSH MASTER</code> and <code>FLUSH SLAVE</code>
to <code>RESET MASTER</code> and <code>RESET SLAVE</code>.</li>

<li>Fixed <code>&lt;&gt;</code> to work properly with
<code>NULL</code>.</li>

<li>Fixed a problem with <code>SUBSTRING_INDEX()</code> and
<code>REPLACE()</code>. (Patch by Alexander Igonitchev)</li>

<li>Fix <code>CREATE TEMPORARY TABLE IF NOT EXISTS</code> not to
produce an error if the table exists.</li>

<li>If you don't create a <code>PRIMARY KEY</code> in a
<code>BDB</code> table, a hidden <code>PRIMARY KEY</code> will be
created.</li>

<li>Added read-only-key optimisation to <code>BDB</code>
tables.</li>

<li><code>LEFT JOIN</code> in some cases preferred a full table
scan when there was no <code>WHERE</code> clause.</li>

<li>When using <code>--log-slow-queries</code>, don't count the
time waiting for a lock.</li>

<li>Fixed bug in lock code on Windows which could cause the key
cache to report that the key file was crashed even if it was
okay.</li>

<li>Automatic repair of <code>MyISAM</code> tables if you start
<code>mysqld</code> with <code>--myisam-recover</code>.</li>

<li>Removed the <code>TYPE=</code> keyword from <code>CHECK</code>
and <code>REPAIR</code>. Allow <code>CHECK</code> options to be
combined. (You can still use <code>TYPE=</code>, but this usage is
deprecated.)</li>

<li>Fixed mutex bug in the binary replication log -- long update
queries could be read only in part by the slave if it did it at the
wrong time, which was not fatal, but resulted in a
performance-degrading reconnect and a scary message in the error
log.</li>

<li>Changed the format of the binary log -- added magic number,
server version, binlog version. Added server id and query error
code for each query event.</li>

<li>Replication thread from the slave now will kill all the stale
threads from the same server.</li>

<li>Long replication user names were not being handled
properly.</li>

<li>Added <code>--replicate-rewrite-db</code> option to
<code>mysqld</code>.</li>

<li>Added <code>--skip-slave-start</code> option to
<code>mysqld</code>.</li>

<li>Updates that generated an error code (such as <code>INSERT INTO
foo(some_key) values (1),(1)</code>) erroneously terminated the
slave thread.</li>

<li>Added optimisation of queries where <code>DISTINCT</code> is
only used on columns from some of the tables.</li>

<li>Allow floating-point numbers where there is no sign after the
exponent (like <code>1e1</code>).</li>

<li><code>SHOW GRANTS</code> didn't always show all column
grants.</li>

<li>Added <code>--default-extra-file=#</code> option to all MySQL
clients.</li>

<li>Columns referenced in <code>INSERT</code> statements now are
initialised properly.</li>

<li><code>UPDATE</code> didn't always work when used with a range
on a timestamp that was part of the key that was used to find
rows.</li>

<li>Fixed a bug in <code>FULLTEXT</code> index when inserting a
<code>NULL</code> column.</li>

<li>Changed to use <code>mkstemp()</code> instead of
<code>tempnam()</code>. Based on a patch from John Jones.</li>
</ul>

<h3><a id="News-3.23.25" name="News-3.23.25"
href="manual_toc.html#News-3.23.25">D.3.33 Changes in release
3.23.25 (29 Sep 2000)</a></h3>

<ul>
<li>Fixed that <code>databasename</code> works as second argument
to <code>mysqlhotcopy</code>.</li>

<li>The values for the <code>UMASK</code> and
<code>UMASK_DIR</code> environment variables now can be specified
in octal by beginning the value with a zero.</li>

<li>Added <code>RIGHT JOIN</code>. This makes <code>RIGHT</code> a
reserved word.</li>

<li>Added <code>@@IDENTITY</code> as a synonym for
<code>LAST_INSERT_ID()</code>. (This is for MSSQL
compatibility.)</li>

<li>Fixed a bug in <code>myisamchk</code> and <code>REPAIR</code>
when using <code>FULLTEXT</code> index.</li>

<li><code>LOAD DATA INFILE</code> now works with FIFOs. (Patch by
Toni L. Harbaugh-Blackford.)</li>

<li><code>FLUSH LOGS</code> broke replication if you specified a
log name with an explicit extension as the value of the
<code>log-bin</code> option.</li>

<li>Fixed a bug in <code>MyISAM</code> with packed multi-part
keys.</li>

<li>Fixed crash when using <code>CHECK TABLE</code> on
Windows.</li>

<li>Fixed a bug where <code>FULLTEXT</code> index always used the
<code>koi8_ukr</code> character set.</li>

<li>Fixed privilege checking for <code>CHECK TABLE</code>.</li>

<li>The <code>MyISAM</code> repair/reindex code didn't use the
<code>--tmpdir</code> option for its temporary files.</li>

<li>Added <code>BACKUP TABLE</code> and <code>RESTORE
TABLE</code>.</li>

<li>Fixed core dump on <code>CHANGE MASTER TO</code> when the slave
did not have the master to start with.</li>

<li>Fixed incorrect <code>Time</code> in the processlist for
<code>Connect</code> of the slave thread.</li>

<li>The slave now logs when it connects to the master.</li>

<li>Fixed a core dump bug when doing <code>FLUSH MASTER</code> if
you didn't specify a filename argument to
<code>--log-bin</code>.</li>

<li>Added missing <tt>`ha_berkeley.x'</tt> files to the MySQL
Windows distribution.</li>

<li>Fixed some mutex bugs in the log code that could cause thread
blocks if new log files couldn't be created.</li>

<li>Added lock time and number of selected processed rows to slow
query log.</li>

<li>Added <code>--memlock</code> option to <code>mysqld</code> to
lock <code>mysqld</code> in memory on systems with the
<code>mlockall()</code> call (like in Solaris).</li>

<li><code>HEAP</code> tables didn't use keys properly. (Bug from
3.23.23.)</li>

<li>Added better support for <code>MERGE</code> tables (keys,
mapping, creation, documentation...). See section <a
href="manual.html#MERGE">7.2 <code>MERGE</code> Tables</a>.</li>

<li>Fixed bug in <code>mysqldump</code> from 3.23 which caused some
<code>CHAR</code> columns not to be quoted.</li>

<li>Merged <code>analyze</code>, <code>check</code>,
<code>optimize</code> and repair code.</li>

<li><code>OPTIMIZE TABLE</code> is now mapped to
<code>REPAIR</code> with statistics and sorting of the index tree.
This means that for the moment it only works on <code>MyISAM</code>
tables.</li>

<li>Added a pre-alloced block to root_malloc to get fewer
mallocs.</li>

<li>Added a lot of new statistics variables.</li>

<li>Fixed <code>ORDER BY</code> bug with <code>BDB</code>
tables.</li>

<li>Removed warning that <code>mysqld</code> couldn't remove the
<tt>`.pid'</tt> file under Windows.</li>

<li>Changed <code>--log-isam</code> to log <code>MyISAM</code>
tables instead of isam tables.</li>

<li>Fixed <code>CHECK TABLE</code> to work on Windows.</li>

<li>Added file mutexes to make <code>pwrite()</code> safe on
Windows.</li>
</ul>

<h3><a id="News-3.23.24" name="News-3.23.24"
href="manual_toc.html#News-3.23.24">D.3.34 Changes in release
3.23.24 (08 Sep 2000)</a></h3>

<ul>
<li>Added <code>created_tmp_disk_tables</code> variable to
<code>mysqld</code>.</li>

<li>To make it possible to reliably dump and restore tables with
<code>TIMESTAMP(X)</code> columns, MySQL now reports columns with
<code>X</code> other than 14 or 8 to be strings.</li>

<li>Changed sort order for <code>latin1</code> as it was before
MySQL Version 3.23.23. Any table that was created or modified with
3.23.22 must be repaired if it has <code>CHAR</code> columns that
may contain characters with ASCII values greater than 128!</li>

<li>Fixed small memory leak introduced from 3.23.22 when creating a
temporary table.</li>

<li>Fixed problem with <code>BDB</code> tables and reading on a
unique (not primary) key.</li>

<li>Restored the <code>win1251</code> character set (it's now only
marked deprecated).</li>
</ul>

<h3><a id="News-3.23.23" name="News-3.23.23"
href="manual_toc.html#News-3.23.23">D.3.35 Changes in release
3.23.23 (01 Sep 2000)</a></h3>

<ul>
<li>Changed sort order for 'German'; all tables created with
'German' sortorder must be repaired with <code>REPAIR TABLE</code>
or <code>myisamchk</code> before use!</li>

<li>Added <code>--core-file</code> option to <code>mysqld</code> to
get a core file on Linux if <code>mysqld</code> dies on the
<code>SIGSEGV</code> signal.</li>

<li>MySQL client <code>mysql</code> now starts with option
<code>--no-named-commands</code> (<code>-g</code>) by default. This
option can be disabled with <code>--enable-named-commands</code>
(<code>-G</code>). This may cause incompatibility problems in some
cases, for example, in SQL scripts that use named commands without
a semicolon, etc. ! Long format commands still work from the first
line.</li>

<li>Fixed a problem when using many pending <code>DROP TABLE</code>
statements at the same time.</li>

<li>Optimiser didn't use keys properly when using <code>LEFT
JOIN</code> on an empty table.</li>

<li>Added shorter help text when invoking <code>mysqld</code> with
incorrect options.</li>

<li>Fixed non-fatal <code>free()</code> bug in
<code>mysqlimport</code>.</li>

<li>Fixed bug in <code>MyISAM</code> index handling of
<code>DECIMAL</code>/<code>NUMERIC</code> keys.</li>

<li>Fixed a bug in concurrent insert in <code>MyISAM</code> tables.
In some contexts, usage of <code>MIN(key_part)</code> or
<code>MAX(key_part)</code> returned an empty set.</li>

<li>Updated <code>mysqlhotcopy</code> to use the new <code>FLUSH
TABLES table_list</code> syntax. Only tables which are being backed
up are flushed now.</li>

<li>Changed behaviour of <code>--enable-thread-safe-client</code>
so that both non-threaded (<code>-lmysqlclient</code>) and threaded
(<code>-lmysqlclient_r</code>) libraries are built. Users who
linked against a threaded <code>-lmysqlclient</code> will need to
link against <code>-lmysqlclient_r</code> now.</li>

<li>Added atomic <code>RENAME TABLE</code> command.</li>

<li>Don't count <code>NULL</code> values in <code>COUNT(DISTINCT
...)</code>.</li>

<li>Changed <code>ALTER TABLE</code>, <code>LOAD DATA INFILE</code>
on empty tables and <code>INSERT ... SELECT ...</code> on empty
tables to create non-unique indexes in a separate batch with
sorting. This will make the above calls much faster when you have
many indexes.</li>

<li><code>ALTER TABLE</code> now logs the first used insert_id
correctly.</li>

<li>Fixed crash when adding a default value to a <code>BLOB</code>
column.</li>

<li>Fixed a bug with <code>DATE_ADD/DATE_SUB</code> where it
returned a datetime instead of a date.</li>

<li>Fixed a problem with the thread cache which made some threads
show up as <code>***DEAD***</code> in <code>SHOW
PROCESSLIST</code>.</li>

<li>Fixed a lock in our thr_rwlock code, which could make selects
that run at the same time as concurrent inserts crash. This only
affects systems that don't have the
<code>pthread_rwlock_rdlock</code> code.</li>

<li>When deleting rows with a non-unique key in a <code>HEAP</code>
table, all rows weren't always deleted.</li>

<li>Fixed bug in range optimiser for <code>HEAP</code> tables for
searches on a part index.</li>

<li>Fixed <code>SELECT</code> on part keys to work with
<code>BDB</code> tables.</li>

<li>Fixed <code>INSERT INTO bdb_table ... SELECT</code> to work
with <code>BDB</code> tables.</li>

<li><code>CHECK TABLE</code> now updates key statistics for the
table.</li>

<li><code>ANALYZE TABLE</code> will now only update tables that
have been changed since the last <code>ANALYZE</code>. Note that
this is a new feature and tables will not be marked to be analysed
until they are updated in any way with 3.23.23 or newer. For older
tables, you have to do <code>CHECK TABLE</code> to update the key
distribution.</li>

<li>Fixed some minor privilege problems with <code>CHECK</code>,
<code>ANALYZE</code>, <code>REPAIR</code> and <code>SHOW
CREATE</code> commands.</li>

<li>Added <code>CHANGE MASTER TO</code> statement.</li>

<li>Added <code>FAST</code>, <code>QUICK</code>
<code>EXTENDED</code> check types to <code>CHECK
TABLES</code>.</li>

<li>Changed <code>myisamchk</code> so that <code>--fast</code> and
<code>--check-only-changed</code> are also honored with
<code>--sort-index</code> and <code>--analyze</code>.</li>

<li>Fixed fatal bug in <code>LOAD TABLE FROM MASTER</code> that did
not lock the table during index re-build.</li>

<li><code>LOAD DATA INFILE</code> broke replication if the database
was excluded from replication.</li>

<li>More variables in <code>SHOW SLAVE STATUS</code> and <code>SHOW
MASTER STATUS</code>.</li>

<li><code>SLAVE STOP</code> now will not return until the slave
thread actually exits.</li>

<li>Full-text search via the <code>MATCH()</code> function and
<code>FULLTEXT</code> index type (for <code>MyISAM</code> files).
This makes <code>FULLTEXT</code> a reserved word.</li>
</ul>

<h3><a id="News-3.23.22" name="News-3.23.22"
href="manual_toc.html#News-3.23.22">D.3.36 Changes in release
3.23.22 (31 Jul 2000)</a></h3>

<ul>
<li>Fixed that <code>lex_hash.h</code> is created properly for each
MySQL distribution.</li>

<li>Fixed that <code>MASTER</code> and <code>COLLECTION</code> are
not reserved words.</li>

<li>The log generated by <code>--slow-query-log</code> didn't
contain the whole queries.</li>

<li>Fixed that open transactions in <code>BDB</code> tables are
rolled back if the connection is closed unexpectedly.</li>

<li>Added workaround for a bug in <code>gcc</code> 2.96 (intel) and
<code>gcc</code> 2.9 (IA64) in <code>gen_lex_hash.c</code>.</li>

<li>Fixed memory leak in the client library when using
<code>host=</code> in the <tt>`my.cnf'</tt> file.</li>

<li>Optimised functions that manipulate the
hours/minutes/seconds.</li>

<li>Fixed bug when comparing the result of
<code>DATE_ADD()</code>/<code>DATE_SUB()</code> against a
number.</li>

<li>Changed the meaning of <code>-F, --fast</code> for
<code>myisamchk</code>. Added <code>-C, --check-only-changed</code>
option to <code>myisamchk</code>.</li>

<li>Added <code>ANALYZE tbl_name</code> to update key statistics
for tables.</li>

<li>Changed binary items <code>0x...</code> to be regarded as
integers by default.</li>

<li>Fix for SCO and <code>SHOW PROCESSLIST</code>.</li>

<li>Added <code>auto-rehash</code> on reconnect for the
<code>mysql</code> client.</li>

<li>Fixed a newly introduced bug in <code>MyISAM</code>, where the
index file couldn't get bigger than 64M.</li>

<li>Added <code>SHOW MASTER STATUS</code> and <code>SHOW SLAVE
STATUS</code>.</li>
</ul>

<h3><a id="News-3.23.21" name="News-3.23.21"
href="manual_toc.html#News-3.23.21">D.3.37 Changes in release
3.23.21</a></h3>

<ul>
<li>Added <code>mysql_character_set_name()</code> function to the
MySQL C API.</li>

<li>Made the update log ASCII 0 safe.</li>

<li>Added the <code>mysql_config</code> script.</li>

<li>Fixed problem when using <code>&lt;</code> or <code>&gt;</code>
with a char column that was only partly indexed.</li>

<li>One would get a core dump if the log file was not readable by
the MySQL user.</li>

<li>Changed <code>mysqladmin</code> to use <code>CREATE
DATABASE</code> and <code>DROP DATABASE</code> statements instead
of the old deprecated API calls.</li>

<li>Fixed <code>chown</code> warning in
<code>safe_mysqld</code>.</li>

<li>Fixed a bug in <code>ORDER BY</code> that was introduced in
3.23.19.</li>

<li>Only optimise the <code>DELETE FROM tbl_name</code> to do a
drop+create of the table if we are in <code>AUTOCOMMIT</code> mode
(needed for <code>BDB</code> tables).</li>

<li>Added extra checks to avoid index corruption when the
<code>ISAM</code>/<code>MyISAM</code> index files get full during
an <code>INSERT</code>/<code>UPDATE</code>.</li>

<li><code>myisamchk</code> didn't correctly update row checksum
when used with <code>-ro</code> (this only gave a warning in
subsequent runs).</li>

<li>Fixed bug in <code>REPAIR TABLE</code> so that it works with
tables without indexes.</li>

<li>Fixed buffer overrun in <code>DROP DATABASE</code>.</li>

<li><code>LOAD TABLE FROM MASTER</code> is sufficiently bug-free to
announce it as a feature.</li>

<li><code>MATCH</code> and <code>AGAINST</code> are now reserved
words.</li>
</ul>

<h3><a id="News-3.23.20" name="News-3.23.20"
href="manual_toc.html#News-3.23.20">D.3.38 Changes in release
3.23.20</a></h3>

<ul>
<li>Fixed bug in 3.23.19; <code>DELETE FROM tbl_name</code> removed
the <tt>`.frm'</tt> file.</li>

<li>Added <code>SHOW CREATE TABLE</code>.</li>
</ul>

<h3><a id="News-3.23.19" name="News-3.23.19"
href="manual_toc.html#News-3.23.19">D.3.39 Changes in release
3.23.19</a></h3>

<ul>
<li>Changed copyright for all files to GPL for the server code and
utilities and to LGPL for the client libraries.</li>

<li>Fixed bug where all rows matching weren't updated on a
<code>MyISAM</code> table when doing update based on key on a table
with many keys and some key changed values.</li>

<li>The Linux MySQL RPM's and binaries are now statically linked
with a linuxthread version that has faster mutex handling when used
with MySQL.</li>

<li><code>ORDER BY</code> can now use <code>REF</code> keys to find
subsets of the rows that need to be sorted.</li>

<li>Changed name of <code>print_defaults</code> program to
<code>my_print_defaults</code> to avoid name confusion.</li>

<li>Fixed <code>NULLIF()</code> to work according to ANSI
SQL99.</li>

<li>Added <code>net_read_timeout</code> and
<code>net_write_timeout</code> as startup parameters to
<code>mysqld</code>.</li>

<li>Fixed bug that destroyed index when doing <code>myisamchk
--sort-records</code> on a table with prefix compressed index.</li>

<li>Added <code>pack_isam</code> and <code>myisampack</code> to the
standard MySQL distribution.</li>

<li>Added the syntax <code>BEGIN WORK</code> (the same as
<code>BEGIN</code>).</li>

<li>Fixed core dump bug when using <code>ORDER BY</code> on a
<code>CONV()</code> expression.</li>

<li>Added <code>LOAD TABLE FROM MASTER</code>.</li>

<li>Added <code>FLUSH MASTER</code> and <code>FLUSH
SLAVE</code>.</li>

<li>Fixed big/little endian problem in the replication.</li>
</ul>

<h3><a id="News-3.23.18" name="News-3.23.18"
href="manual_toc.html#News-3.23.18">D.3.40 Changes in release
3.23.18</a></h3>

<ul>
<li>Fixed a problem from 3.23.17 when choosing character set on the
client side.</li>

<li>Added <code>FLUSH TABLES WITH READ LOCK</code> to make a global
lock suitable for making a copy of MySQL datafiles.</li>

<li><code>CREATE TABLE ... SELECT ... PROCEDURE</code> now
works.</li>

<li>Internal temporary tables will now use compressed index when
using <code>GROUP BY</code> on <code>VARCHAR/CHAR</code>
columns.</li>

<li>Fixed a problem when locking the same table with both a
<code>READ</code> and a <code>WRITE</code> lock.</li>

<li>Fixed problem with <code>myisamchk</code> and <code>RAID</code>
tables.</li>
</ul>

<h3><a id="News-3.23.17" name="News-3.23.17"
href="manual_toc.html#News-3.23.17">D.3.41 Changes in release
3.23.17</a></h3>

<ul>
<li>Fixed a bug in <code>FIND_IN_SET()</code> when the first
argument was <code>NULL</code>.</li>

<li>Added table locks to Berkeley DB.</li>

<li>Fixed a bug with <code>LEFT JOIN</code> and <code>ORDER
BY</code> where the first table had only one matching row.</li>

<li>Added 4 sample <tt>`my.cnf'</tt> example files in the
<tt>`support-files'</tt> directory.</li>

<li>Fixed <code>duplicated key</code> problem when doing big
<code>GROUP BY</code> operations. (This bug was probably introduced
in 3.23.15.)</li>

<li>Changed syntax for <code>INNER JOIN</code> to match ANSI
SQL.</li>

<li>Added <code>NATURAL JOIN</code> syntax.</li>

<li>A lot of fixes in the <code>BDB</code> interface.</li>

<li>Added handling of <code>--no-defaults</code> and
<code>--defaults-file</code> to <code>safe_mysqld.sh</code> and
<code>mysql_install_db.sh</code>.</li>

<li>Fixed bug in reading compressed tables with many threads.</li>

<li>Fixed that <code>USE INDEX</code> works with
<code>PRIMARY</code> keys.</li>

<li>Added <code>BEGIN</code> statement to start a transaction in
<code>AUTOCOMMIT</code> mode.</li>

<li>Added support for symbolic links for Windows.</li>

<li>Changed protocol to let client know if the server is in
<code>AUTOCOMMIT</code> mode and if there is a pending transaction.
If there is a pending transaction, the client library will give an
error before reconnecting to the server to let the client know that
the server did a rollback. The protocol is still
backward-compatible with old clients.</li>

<li><code>KILL</code> now works on a thread that is locked on a
'write' to a dead client.</li>

<li>Fixed memory leak in the replication slave thread.</li>

<li>Added new <code>log-slave-updates</code> option to
<code>mysqld</code>, to allow daisy-chaining the slaves.</li>

<li>Fixed compile error on FreeBSD and other systems where
<code>pthread_t</code> is not the same as <code>int</code>.</li>

<li>Fixed master shutdown aborting the slave thread.</li>

<li>Fixed a race condition in <code>INSERT DELAYED</code> code when
doing <code>ALTER TABLE</code>.</li>

<li>Added deadlock detection sanity checks to <code>INSERT
DELAYED</code>.</li>
</ul>

<h3><a id="News-3.23.16" name="News-3.23.16"
href="manual_toc.html#News-3.23.16">D.3.42 Changes in release
3.23.16</a></h3>

<ul>
<li>Added <code>SLAVE START</code> and <code>SLAVE STOP</code>
statements.</li>

<li>Added <code>TYPE=QUICK</code> option to <code>CHECK</code> and
to <code>REPAIR</code>.</li>

<li>Fixed bug in <code>REPAIR TABLE</code> when the table was in
use by other threads.</li>

<li>Added a thread cache to make it possible to debug MySQL with
<code>gdb</code> when one does a lot of reconnects. This will also
improve systems where you can't use persistent connections.</li>

<li>Lots of fixes in the Berkeley DB interface.</li>

<li><code>UPDATE IGNORE</code> will not abort if an update results
in a <code>DUPLICATE_KEY</code> error.</li>

<li>Put <code>CREATE TEMPORARY TABLE</code> commands in the update
log.</li>

<li>Fixed bug in handling of masked IP numbers in the privilege
tables.</li>

<li>Fixed bug with <code>delay_key_write</code> tables and
<code>CHECK TABLE</code>.</li>

<li>Added <code>replicate-do-db</code> and
<code>replicate-ignore-db</code> options to <code>mysqld</code>, to
restrict which databases get replicated.</li>

<li>Added <code>SQL_LOG_BIN</code> option.</li>
</ul>

<h3><a id="News-3.23.15" name="News-3.23.15"
href="manual_toc.html#News-3.23.15">D.3.43 Changes in release
3.23.15 (May 2000: Beta)</a></h3>

<ul>
<li>To start <code>mysqld</code> as <code>root</code>, you must now
use the <code>--user=root</code> option.</li>

<li>Added interface to Berkeley DB. (This is not yet functional;
play with it at your own risk!)</li>

<li>Replication between master and slaves.</li>

<li>Fixed bug that other threads could steal a lock when a thread
had a lock on a table and did a <code>FLUSH TABLES</code>
command.</li>

<li>Added the <code>slow_launch_time</code> variable and the
<code>Slow_launch_threads</code> status variable to
<code>mysqld</code>. These can be examined with <code>mysqladmin
variables</code> and <code>mysqladmin extended-status</code>.</li>

<li>Added functions <code>INET_NTOA()</code> and
<code>INET_ATON()</code>.</li>

<li>The default type of <code>IF()</code> now depends on the second
and third arguments and not only on the second argument.</li>

<li>Fixed case when <code>myisamchk</code> could go into a loop
when trying to repair a crashed table.</li>

<li>Don't write <code>INSERT DELAYED</code> to update log if
<code>SQL_LOG_UPDATE=0</code>.</li>

<li>Fixed problem with <code>REPLACE</code> on <code>HEAP</code>
tables.</li>

<li>Added possible character sets and time zone to <code>SHOW
VARIABLES</code> output.</li>

<li>Fixed bug in locking code that could result in locking problems
with concurrent inserts under high load.</li>

<li>Fixed a problem with <code>DELETE</code> of many rows on a
table with compressed keys where MySQL scanned the index to find
the rows.</li>

<li>Fixed problem with <code>CHECK</code> on table with deleted
keyblocks.</li>

<li>Fixed a bug in reconnect (at the client side) where it didn't
free memory properly in some contexts.</li>

<li>Fixed problems in update log when using
<code>LAST_INSERT_ID()</code> to update a table with an
<code>AUTO_INCREMENT</code> key.</li>

<li>Added <code>NULLIF()</code> function.</li>

<li>Fixed bug when using <code>LOAD DATA INFILE</code> on a table
with <code>BLOB/TEXT</code> columns.</li>

<li>Optimised <code>MyISAM</code> to be faster when inserting keys
in sorted order.</li>

<li><code>EXPLAIN SELECT ...</code> now also prints out whether
MySQL needs to create a temporary table or use file sorting when
resolving the <code>SELECT</code>.</li>

<li>Added optimisation to skip <code>ORDER BY</code> parts where
the part is a constant expression in the <code>WHERE</code> part.
Indexes can now be used even if the <code>ORDER BY</code> doesn't
match the index exactly, as long as all the unused index parts and
all the extra <code>ORDER BY</code> columns are constants in the
<code>WHERE</code> clause. See section <a
href="manual.html#MySQL_indexes">5.4.3 How MySQL Uses
Indexes</a>.</li>

<li><code>UPDATE</code> and <code>DELETE</code> on a whole unique
key in the <code>WHERE</code> part are now faster than before.</li>

<li>Changed <code>RAID_CHUNKSIZE</code> to be in 1024-byte
increments.</li>

<li>Fixed core dump in <code>LOAD_FILE(NULL)</code>.</li>
</ul>

<h3><a id="News-3.23.14" name="News-3.23.14"
href="manual_toc.html#News-3.23.14">D.3.44 Changes in release
3.23.14</a></h3>

<ul>
<li>Added <code>mysql_real_escape_string()</code> function to the
MySQL C API.</li>

<li>Fixed a bug in <code>CONCAT()</code> where one of the arguments
was a function that returned a modified argument.</li>

<li>Fixed a critical bug in <code>myisamchk</code>, where it
updated the header in the index file when one only checked the
table. This confused the <code>mysqld</code> daemon if it updated
the same table at the same time. Now the status in the index file
is only updated if one uses <code>--update-state</code>. With older
<code>myisamchk</code> versions you should use
<code>--read-only</code> when only checking tables, if there is the
slightest chance that the <code>mysqld</code> server is working on
the table at the same time!</li>

<li>Fixed that <code>DROP TABLE</code> is logged in the update
log.</li>

<li>Fixed problem when searching on <code>DECIMAL()</code> key
field where the column data contained leading zeros.</li>

<li>Fix bug in <code>myisamchk</code> when the
<code>AUTO_INCREMENT</code> column isn't the first key.</li>

<li>Allow <code>DATETIME</code> in ISO8601 format:
2000-03-12T12:00:00</li>

<li>Dynamic character sets. A <code>mysqld</code> binary can now
handle many different character sets (you can choose which when
starting <code>mysqld</code>).</li>

<li>Added command <code>REPAIR TABLE</code>.</li>

<li>Added <code>mysql_thread_safe()</code> function to the MySQL C
API.</li>

<li>Added the <code>UMASK_DIR</code> environment variable.</li>

<li>Added <code>CONNECTION_ID()</code> function to return the
client connection thread ID.</li>

<li>When using <code>=</code> on <code>BLOB</code> or <code>VARCHAR
BINARY</code> keys, where only a part of the column was indexed,
the whole column of the result row wasn't compared.</li>

<li>Fix for <code>sjis</code> character set and <code>ORDER
BY</code>.</li>

<li>When running in ANSI mode, don't allow columns to be used that
aren't in the <code>GROUP BY</code> part.</li>
</ul>

<h3><a id="News-3.23.13" name="News-3.23.13"
href="manual_toc.html#News-3.23.13">D.3.45 Changes in release
3.23.13</a></h3>

<ul>
<li>Fixed problem when doing locks on the same table more than 2
times in the same <code>LOCK TABLE</code> command; this fixed the
problem one got when running the test-ATIS test with
<code>--fast</code> or <code>--check-only-changed</code>.</li>

<li>Added <code>SQL_BUFFER_RESULT</code> option to
<code>SELECT</code>.</li>

<li>Removed end space from double/float numbers in results from
temporary tables.</li>

<li>Added <code>CHECK TABLE</code> command.</li>

<li>Added changes for <code>MyISAM</code> in 3.23.12 that didn't
get into the source distribution because of CVS problems.</li>

<li>Fixed bug so that <code>mysqladmin shutdown</code> will wait
for the local server to close down.</li>

<li>Fixed a possible endless loop when calculating timestamp.</li>

<li>Added <code>print_defaults</code> program to the
<tt>`.rpm'</tt> files. Removed <code>mysqlbug</code> from the
client <tt>`.rpm'</tt> file.</li>
</ul>

<h3><a id="News-3.23.12" name="News-3.23.12"
href="manual_toc.html#News-3.23.12">D.3.46 Changes in release
3.23.12 (07 Mar 2000)</a></h3>

<ul>
<li>Fixed bug in <code>MyISAM</code> involving <code>REPLACE ...
SELECT ...</code> which could give a corrupted table.</li>

<li>Fixed bug in <code>myisamchk</code> where it incorrectly reset
the <code>AUTO_INCREMENT</code> value.</li>

<li>LOTS of patches for Linux Alpha. MySQL now appears to be
relatively stable on Alpha.</li>

<li>Changed <code>DISTINCT</code> on <code>HEAP</code> temporary
tables to use hashed keys to quickly find duplicated rows. This
mostly concerns queries of type <code>SELECT DISTINCT ... GROUP BY
...</code>. This fixes a problem where not all duplicates were
removed in queries of the above type. In addition, the new code is
MUCH faster.</li>

<li>Added patches to make MySQL compile on Mac OS X.</li>

<li>Added <code>IF NOT EXISTS</code> clause to <code>CREATE
DATABASE</code>.</li>

<li>Added <code>--all-databases</code> and <code>--databases</code>
options to <code>mysqldump</code> to allow dumping of many
databases at the same time.</li>

<li>Fixed bug in compressed <code>DECIMAL()</code> index in
<code>MyISAM</code> tables.</li>

<li>Fixed bug when storing 0 into a timestamp.</li>

<li>When doing <code>mysqladmin shutdown</code> on a local
connection, <code>mysqladmin</code> now waits until the PID file is
gone before terminating.</li>

<li>Fixed core dump with some <code>COUNT(DISTINCT ...)</code>
queries.</li>

<li>Fixed that <code>myisamchk</code> works properly with RAID
tables.</li>

<li>Fixed problem with <code>LEFT JOIN</code> and <code>key_field
IS NULL</code>.</li>

<li>Fixed bug in <code>net_clear()</code> which could give the
error <code>Aborted connection</code> in the MySQL clients.</li>

<li>Added options <code>USE INDEX (key_list)</code> and
<code>IGNORE INDEX (key_list)</code> as parameters in
<code>SELECT</code>.</li>

<li><code>DELETE</code> and <code>RENAME</code> should now work on
<code>RAID</code> tables.</li>
</ul>

<h3><a id="News-3.23.11" name="News-3.23.11"
href="manual_toc.html#News-3.23.11">D.3.47 Changes in release
3.23.11</a></h3>

<ul>
<li>Allow the <code>ALTER TABLE tbl_name ADD (field_list)</code>
syntax.</li>

<li>Fixed problem with optimiser that could sometimes use incorrect
keys.</li>

<li>Fixed that <code>GRANT/REVOKE ALL PRIVILEGES</code> doesn't
affect <code>GRANT OPTION</code>.</li>

<li>Removed extra <samp>`)'</samp> from the output of <code>SHOW
GRANTS</code>.</li>

<li>Fixed problem when storing numbers in timestamps.</li>

<li>Fix problem with timezones that have half hour offsets.</li>

<li>Allow the syntax <code>UNIQUE INDEX</code> in
<code>CREATE</code> statements.</li>

<li><code>mysqlhotcopy</code> - fast online hot-backup utility for
local MySQL databases. By Tim Bunce.</li>

<li>New more secure <code>mysqlaccess</code>. Thanks to Steve
Harvey for this.</li>

<li>Added <code>--i-am-a-dummy</code> and
<code>--safe-updates</code> options to <code>mysql</code>.</li>

<li>Added <code>select_limit</code> and <code>max_join_size</code>
variables to <code>mysql</code>.</li>

<li>Added <code>SQL_MAX_JOIN_SIZE</code> and
<code>SQL_SAFE_UPDATES</code> options.</li>

<li>Added <code>READ LOCAL</code> lock that doesn't lock the table
for concurrent inserts. (This is used by
<code>mysqldump</code>.)</li>

<li>Changed that <code>LOCK TABLES ... READ</code> doesn't anymore
allow concurrent inserts.</li>

<li>Added <code>--skip-delay-key-write</code> option to
<code>mysqld</code>.</li>

<li>Fixed security problem in the protocol regarding password
checking.</li>

<li><code>_rowid</code> can now be used as an alias for an integer
type unique indexed column.</li>

<li>Added back blocking of <code>SIGPIPE</code> when compiling with
<code>--thread-safe-clients</code> to make things safe for old
clients.</li>
</ul>

<h3><a id="News-3.23.10" name="News-3.23.10"
href="manual_toc.html#News-3.23.10">D.3.48 Changes in release
3.23.10</a></h3>

<ul>
<li>Fixed bug in 3.23.9 where memory wasn't properly freed when
using <code>LOCK TABLES</code>.</li>
</ul>

<h3><a id="News-3.23.9" name="News-3.23.9"
href="manual_toc.html#News-3.23.9">D.3.49 Changes in release
3.23.9</a></h3>

<ul>
<li>Fixed problem that affected queries that did arithmetic on
group functions.</li>

<li>Fixed problem with timestamps and <code>INSERT
DELAYED</code>.</li>

<li>Fixed that <code>date_col BETWEEN const_date AND
const_date</code> works.</li>

<li>Fixed problem when only changing a 0 to <code>NULL</code> in a
table with <code>BLOB/TEXT</code> columns.</li>

<li>Fixed bug in range optimiser when using many key parts and or
on the middle key parts: <code>WHERE K1=1 and K3=2 and (K2=2 and
K4=4 or K2=3 and K4=5)</code></li>

<li>Added <code>source</code> command to <code>mysql</code> to
allow reading of batch files inside the <code>mysql</code> client.
Original patch by Matthew Vanecek.</li>

<li>Fixed critical problem with the <code>WITH GRANT OPTION</code>
option.</li>

<li>Don't give an unnecessary <code>GRANT</code> error when using
tables from many databases in the same query.</li>

<li>Added VIO wrapper (needed for SSL support; by Andrei Errapart
and Tõnu Samuel).</li>

<li>Fixed optimiser problem on <code>SELECT</code> when using many
overlapping indexes. MySQL should now be able to choose keys even
better when there are many keys to choose from.</li>

<li>Changed optimiser to prefer a range key instead of a ref key
when the range key can uses more columns than the ref key (which
only can use columns with <code>=</code>). For example, the
following type of queries should now be faster: <code>SELECT * from
key_part_1=const and key_part_2 &gt; const2</code></li>

<li>Fixed bug that a change of all <code>VARCHAR</code> columns to
<code>CHAR</code> columns didn't change row type from dynamic to
fixed.</li>

<li>Disabled floating-point exceptions for FreeBSD to fix core dump
when doing <code>SELECT FLOOR(POW(2,63))</code>.</li>

<li>Renamed <code>mysqld</code> startup option from
<code>--delay-key-write</code> to
<code>--delay-key-write-for-all-tables</code>.</li>

<li>Added <code>read-next-on-key</code> to <code>HEAP</code>
tables. This should fix all problems with <code>HEAP</code> tables
when using non-<code>UNIQUE</code> keys.</li>

<li>Added option to print default arguments to all clients.</li>

<li>Added <code>--log-slow-queries</code> option to
<code>mysqld</code> to log all queries that take a long time to a
separate log file with a time indicating how long the query
took.</li>

<li>Fixed core dump when doing <code>WHERE
key_col=RAND(...)</code>.</li>

<li>Fixed optimisation bug in <code>SELECT ... LEFT JOIN ...
key_col IS NULL</code>, when <code>key_col</code> could contain
<code>NULL</code> values.</li>

<li>Fixed problem with 8-bit characters as separators in <code>LOAD
DATA INFILE</code>.</li>
</ul>

<h3><a id="News-3.23.8" name="News-3.23.8"
href="manual_toc.html#News-3.23.8">D.3.50 Changes in release 3.23.8
(02 Jan 2000)</a></h3>

<ul>
<li>Fixed problem when handling indexfiles larger than 8G.</li>

<li>Added latest patches to MIT-pthreads for NetBSD.</li>

<li>Fixed problem with timezones that are &lt; GMT - 11.</li>

<li>Fixed a bug when deleting packed keys in
<code>NISAM</code>.</li>

<li>Fixed problem with <code>ISAM</code> when doing some
<code>ORDER BY ... DESC</code> queries.</li>

<li>Fixed bug when doing a join on a text key which didn't cover
the whole key.</li>

<li>Option <code>--delay-key-write</code> didn't enable delayed key
writing.</li>

<li>Fixed update of <code>TEXT</code> column which involved only
case changes.</li>

<li>Fixed that <code>INSERT DELAYED</code> doesn't update
timestamps that are given.</li>

<li>Added function <code>YEARWEEK()</code> and options
<code>x</code>, <code>X</code>, <code>v</code> and <code>V</code>
to <code>DATE_FORMAT()</code>.</li>

<li>Fixed problem with <code>MAX(indexed_column)</code> and
<code>HEAP</code> tables.</li>

<li>Fixed problem with <code>BLOB NULL</code> keys and <code>LIKE
"prefix%"</code>.</li>

<li>Fixed problem with <code>MyISAM</code> and fixed-length rows
&lt; 5 bytes.</li>

<li>Fixed problem that could cause MySQL to touch freed memory when
doing very complicated <code>GROUP BY</code> queries.</li>

<li>Fixed core dump if you got a crashed table where an
<code>ENUM</code> field value was too big.</li>
</ul>

<h3><a id="News-3.23.7" name="News-3.23.7"
href="manual_toc.html#News-3.23.7">D.3.51 Changes in release 3.23.7
(10 Dec 1999)</a></h3>

<ul>
<li>Fixed workaround under Linux to avoid problems with
<code>pthread_mutex_timedwait</code>, which is used with
<code>INSERT DELAYED</code>. See section <a
href="manual.html#Linux">2.6.1 Linux Notes (All Linux
Versions)</a>.</li>

<li>Fixed that one will get a 'disk full' error message if one gets
disk full when doing sorting (instead of waiting until we got more
disk space).</li>

<li>Fixed a bug in <code>MyISAM</code> with keys &gt; 250
characters.</li>

<li>In <code>MyISAM</code> one can now do an <code>INSERT</code> at
the same time as other threads are reading from the table.</li>

<li>Added <code>max_write_lock_count</code> variable to
<code>mysqld</code> to force a <code>READ</code> lock after a
certain number of <code>WRITE</code> locks.</li>

<li>Inverted flag <code>delay_key_write</code> on <code>show
variables</code>.</li>

<li>Renamed <code>concurrency</code> variable to
<code>thread_concurrency</code>.</li>

<li>The following functions are now multi-byte-safe:
<code>LOCATE(substr,str)</code>, <code>POSITION(substr IN
str)</code>, <code>LOCATE(substr,str,pos)</code>,
<code>INSTR(str,substr)</code>, <code>LEFT(str,len)</code>,
<code>RIGHT(str,len)</code>, <code>SUBSTRING(str,pos,len)</code>,
<code>SUBSTRING(str FROM pos FOR len)</code>,
<code>MID(str,pos,len)</code>, <code>SUBSTRING(str,pos)</code>,
<code>SUBSTRING(str FROM pos)</code>,
<code>SUBSTRING_INDEX(str,delim,count)</code>,
<code>RTRIM(str)</code>, <code>TRIM([[BOTH | TRAILING] [remstr]
FROM] str)</code>, <code>REPLACE(str,from_str,to_str)</code>,
<code>REVERSE(str)</code>, <code>INSERT(str,pos,len,newstr)</code>,
<code>LCASE(str)</code>, <code>LOWER(str)</code>,
<code>UCASE(str)</code> and <code>UPPER(str)</code>; patch by Wei
He.</li>

<li>Fix core dump when releasing a lock from a non-existent
table.</li>

<li>Remove locks on tables before starting to remove
duplicates.</li>

<li>Added option <code>FULL</code> to <code>SHOW
PROCESSLIST</code>.</li>

<li>Added option <code>--verbose</code> to
<code>mysqladmin</code>.</li>

<li>Fixed problem when automatically converting <code>HEAP</code>
to <code>MyISAM</code>.</li>

<li>Fixed bug in <code>HEAP</code> tables when doing insert +
delete + insert + scan the table.</li>

<li>Fixed bugs on Alpha with <code>REPLACE()</code> and <code>LOAD
DATA INFILE</code>.</li>

<li>Added <code>interactive_timeout</code> variable to
<code>mysqld</code>.</li>

<li>Changed the argument to <code>mysql_data_seek()</code> from
<code>ulong</code> to <code>ulonglong</code>.</li>
</ul>

<h3><a id="News-3.23.6" name="News-3.23.6"
href="manual_toc.html#News-3.23.6">D.3.52 Changes in release
3.23.6</a></h3>

<ul>
<li>Added <code>-O lower_case_table_names={0|1}</code> option to
<code>mysqld</code> to allow users to force table names to
lowercase.</li>

<li>Added <code>SELECT ... INTO DUMPFILE</code>.</li>

<li>Added <code>--ansi</code> option to <code>mysqld</code> to make
some functions ANSI SQL compatible.</li>

<li>Temporary table names now start with <code>#sql</code>.</li>

<li>Added quoting of identifiers with <code>`</code>
(<code>"</code> in <code>--ansi</code> mode).</li>

<li>Changed to use <code>snprintf()</code> when printing floats to
avoid some buffer overflows on FreeBSD.</li>

<li>Made <code>FLOOR()</code> overflow safe on FreeBSD.</li>

<li>Added <code>--quote-names</code> option to
<code>mysqldump</code>.</li>

<li>Fixed bug that one could make a part of a <code>PRIMARY KEY NOT
NULL</code>.</li>

<li>Fixed <code>encrypt()</code> to be thread-safe and not reuse
buffer.</li>

<li>Added <code>mysql_odbc_escape_string()</code> function to
support big5 characters in MyODBC.</li>

<li>Rewrote the storage engine to use classes. This introduces a
lot of new code, but will make table handling faster and
better.</li>

<li>Added patch by Sasha for user-defined variables.</li>

<li>Changed that <code>FLOAT</code> and <code>DOUBLE</code>
(without any length modifiers) no longer are fixed decimal point
numbers.</li>

<li>Changed the meaning of <code>FLOAT(X)</code>: Now this is the
same as <code>FLOAT</code> if <code>X</code> &lt;= 24 and a
<code>DOUBLE</code> if 24 &lt; <code>X</code> &lt;= 53.</li>

<li><code>DECIMAL(X)</code> is now an alias for
<code>DECIMAL(X,0)</code> and <code>DECIMAL</code> is now an alias
for <code>DECIMAL(10,0)</code>. The same goes for
<code>NUMERIC</code>.</li>

<li>Added option <code>ROW_FORMAT={default | dynamic | fixed |
compressed}</code> to <code>CREATE_TABLE</code>.</li>

<li><code>DELETE FROM table_name</code> didn't work on temporary
tables.</li>

<li>Changed function <code>CHAR_LENGTH()</code> to be multi-byte
character safe.</li>

<li>Added function <code>ORD(string)</code>.</li>
</ul>

<h3><a id="News-3.23.5" name="News-3.23.5"
href="manual_toc.html#News-3.23.5">D.3.53 Changes in release 3.23.5
(20 Oct 1999)</a></h3>

<ul>
<li>Fixed some Y2K problems in the new date handling in 3.23.</li>

<li>Fixed problem with <code>SELECT DISTINCT ... ORDER BY
RAND()</code>.</li>

<li>Added patches by Sergei A. Golubchik for text searching on the
<code>MyISAM</code> level.</li>

<li>Fixed cache overflow problem when using full joins without
keys.</li>

<li>Fixed some configure issues.</li>

<li>Some small changes to make parsing faster.</li>

<li>Adding a column after the last field with <code>ALTER
TABLE</code> didn't work.</li>

<li>Fixed problem when using an <code>AUTO_INCREMENT</code> column
in two keys</li>

<li>With <code>MyISAM</code>, you now can have an
<code>AUTO_INCREMENT</code> column as a key sub part: <code>CREATE
TABLE foo (a INT NOT NULL AUTO_INCREMENT, b CHAR(5), PRIMARY KEY
(b,a))</code></li>

<li>Fixed bug in <code>MyISAM</code> with packed char keys that
could be <code>NULL</code>.</li>

<li><code>AS</code> on field name with <code>CREATE TABLE
table_name SELECT ...</code> didn't work.</li>

<li>Allow use of <code>NATIONAL</code> and <code>NCHAR</code> when
defining character columns. This is the same as not using
<code>BINARY</code>.</li>

<li>Don't allow <code>NULL</code> columns in a <code>PRIMARY
KEY</code> (only in <code>UNIQUE</code> keys).</li>

<li>Clear <code>LAST_INSERT_ID()</code> if one uses this in ODBC:
<code>WHERE auto_increment_column IS NULL</code>. This seems to fix
some problems with Access.</li>

<li><code>SET SQL_AUTO_IS_NULL=0|1</code> now turns on/off the
handling of searching after the last inserted row with <code>WHERE
auto_increment_column IS NULL</code>.</li>

<li>Added new variable <code>concurrency</code> to
<code>mysqld</code> for Solaris.</li>

<li>Added <code>--relative</code> option to <code>mysqladmin</code>
to make <code>extended-status</code> more useful to monitor
changes.</li>

<li>Fixed bug when using <code>COUNT(DISTINCT ...)</code> on an
empty table.</li>

<li>Added support for the Chinese character set GBK.</li>

<li>Fixed problem with <code>LOAD DATA INFILE</code> and
<code>BLOB</code> columns.</li>

<li>Added bit operator <code>~</code> (negation).</li>

<li>Fixed problem with <code>UDF</code> functions.</li>
</ul>

<h3><a id="News-3.23.4" name="News-3.23.4"
href="manual_toc.html#News-3.23.4">D.3.54 Changes in release 3.23.4
(28 Sep 1999)</a></h3>

<ul>
<li>Inserting a <code>DATETIME</code> into a <code>TIME</code>
column no longer will try to store 'days' in it.</li>

<li>Fixed problem with storage of float/double on little endian
machines. (This affected <code>SUM()</code>.)</li>

<li>Added connect timeout on TCP/IP connections.</li>

<li>Fixed problem with <code>LIKE "%"</code> on an index that may
have <code>NULL</code> values.</li>

<li><code>REVOKE ALL PRIVILEGES</code> didn't revoke all
privileges.</li>

<li>Allow creation of temporary tables with same name as the
original table.</li>

<li>When granting a user a <code>GRANT</code> option for a
database, he couldn't grant privileges to other users.</li>

<li>New command: <code>SHOW GRANTS FOR user</code> (by
Sinisa).</li>

<li>New <code>date_add</code> syntax: <code>date/datetime +
INTERVAL # interval_type</code>. By Joshua Chamas.</li>

<li>Fixed privilege check for <code>LOAD DATA REPLACE</code>.</li>

<li>Automatic fixing of broken include files on Solaris 2.7</li>

<li>Some configure issues to fix problems with big filesystem
detection.</li>

<li><code>REGEXP</code> is now case-insensitive if you use
non-binary strings.</li>
</ul>

<h3><a id="News-3.23.3" name="News-3.23.3"
href="manual_toc.html#News-3.23.3">D.3.55 Changes in release
3.23.3</a></h3>

<ul>
<li>Added patches for MIT-pthreads on NetBSD.</li>

<li>Fixed range bug in <code>MyISAM</code>.</li>

<li><code>ASC</code> is now the default again for <code>ORDER
BY</code>.</li>

<li>Added <code>LIMIT</code> to <code>UPDATE</code>.</li>

<li>Added <code>mysql_change_user()</code> function to the MySQL C
API.</li>

<li>Added character set to <code>SHOW VARIABLES</code>.</li>

<li>Added support of <code>--[whitespace]</code> comments.</li>

<li>Allow <code>INSERT into tbl_name VALUES ()</code>, that is, you
may now specify an empty value list to insert a row in which each
column is set to its default value.</li>

<li>Changed <code>SUBSTRING(text FROM pos)</code> to conform to
ANSI SQL. (Before this construct returned the rightmost
<code>pos</code> characters.)</li>

<li><code>SUM()</code> with <code>GROUP BY</code> returned 0 on
some systems.</li>

<li>Changed output for <code>SHOW TABLE STATUS</code>.</li>

<li>Added <code>DELAY_KEY_WRITE</code> option to <code>CREATE
TABLE</code>.</li>

<li>Allow <code>AUTO_INCREMENT</code> on any key part.</li>

<li>Fixed problem with <code>YEAR(NOW())</code> and
<code>YEAR(CURDATE())</code>.</li>

<li>Added <code>CASE</code> construct.</li>

<li>New function <code>COALESCE()</code>.</li>
</ul>

<h3><a id="News-3.23.2" name="News-3.23.2"
href="manual_toc.html#News-3.23.2">D.3.56 Changes in release 3.23.2
(09 Aug 1999)</a></h3>

<ul>
<li>Fixed range optimiser bug: <code>SELECT * FROM table_name WHERE
key_part1 &gt;= const AND (key_part2 = const OR key_part2 =
const)</code>. The bug was that some rows could be duplicated in
the result.</li>

<li>Running <code>myisamchk</code> without <code>-a</code> updated
the index distribution incorrectly.</li>

<li><code>SET SQL_LOW_PRIORITY_UPDATES=1</code> was causing a parse
error.</li>

<li>You can now update index columns that are used in the
<code>WHERE</code> clause. <code>UPDATE tbl_name SET KEY=KEY+1
WHERE KEY &gt; 100</code></li>

<li>Date handling should now be a bit faster.</li>

<li>Added handling of fuzzy dates (dates where day or month is 0),
such as <code>'1999-01-00'</code>.</li>

<li>Fixed optimisation of <code>SELECT ... WHERE key_part1=const1
AND key_part_2=const2 AND key_part1=const4 AND
key_part2=const4</code>; indextype should be <code>range</code>
instead of <code>ref</code>.</li>

<li>Fixed <code>egcs</code> 1.1.2 optimiser bug (when using
<code>BLOB</code>s) on Linux Alpha.</li>

<li>Fixed problem with <code>LOCK TABLES</code> combined with
<code>DELETE FROM table</code>.</li>

<li><code>MyISAM</code> tables now allow keys on <code>NULL</code>
and <code>BLOB/TEXT</code> columns.</li>

<li>The following join is now much faster: <code>SELECT ... FROM t1
LEFT JOIN t2 ON ... WHERE t2.not_null_column IS NULL</code>.</li>

<li><code>ORDER BY</code> and <code>GROUP BY</code> can be done on
functions.</li>

<li>Changed handling of 'const_item' to allow handling of
<code>ORDER BY RAND()</code>.</li>

<li>Indexes are now used for <code>WHERE key_column =
function</code>.</li>

<li>Indexes are now used for <code>WHERE key_column =
col_name</code> even if the columns are not identically
packed.</li>

<li>Indexes are now used for <code>WHERE col_name IS
NULL</code>.</li>

<li>Changed heap tables to be stored in low_byte_first order (to
make it easy to convert to <code>MyISAM</code> tables)</li>

<li>Automatic change of <code>HEAP</code> temporary tables to
<code>MyISAM</code> tables in case of 'table is full' errors.</li>

<li>Added <code>--init-file=file_name</code> option to
<code>mysqld</code>.</li>

<li>Added <code>COUNT(DISTINCT value, [value, ...])</code>.</li>

<li><code>CREATE TEMPORARY TABLE</code> now creates a temporary
table, in its own namespace, that is automatically deleted if
connection is dropped.</li>

<li>New reserved words (required for <code>CASE</code>):
<code>CASE, THEN, WHEN, ELSE and END</code>.</li>

<li>New functions <code>EXPORT_SET()</code> and
<code>MD5()</code>.</li>

<li>Support for the GB2312 Chinese character set.</li>
</ul>

<h3><a id="News-3.23.1" name="News-3.23.1"
href="manual_toc.html#News-3.23.1">D.3.57 Changes in release
3.23.1</a></h3>

<ul>
<li>Fixed some compilation problems.</li>
</ul>

<h3><a id="News-3.23.0" name="News-3.23.0"
href="manual_toc.html#News-3.23.0">D.3.58 Changes in release 3.23.0
(05 Aug 1999: Alpha)</a></h3>

<ul>
<li>A new storage engine library (<code>MyISAM</code>) with a lot
of new features. See section <a href="manual.html#MyISAM">7.1
<code>MyISAM</code> Tables</a>.</li>

<li>You can create in-memory <code>HEAP</code> tables which are
extremely fast for lookups.</li>

<li>Support for big files (63-bit) on OSes that support big
files.</li>

<li>New function <code>LOAD_FILE(filename)</code> to get the
contents of a file as a string value.</li>

<li>New operator <code>&lt;=&gt;</code> which will act as
<code>=</code> but will return TRUE if both arguments are
<code>NULL</code>. This is useful for comparing changes between
tables.</li>

<li>Added the ODBC 3.0 <code>EXTRACT(interval FROM datetime)</code>
function.</li>

<li>Columns defined as <code>FLOAT(X)</code> are not rounded on
storage and may be in scientific notation (1.0 E+10) when
retrieved.</li>

<li><code>REPLACE</code> is now faster than before.</li>

<li>Changed <code>LIKE</code> character comparison to behave as
<code>=</code>; This means that <code>'e' LIKE ''e'</code> is now
true. (If the line doesn't display correctly, the latter 'e' is a
French 'e' with a dot above.)</li>

<li><code>SHOW TABLE STATUS</code> returns a lot of information
about the tables.</li>

<li>Added <code>LIKE</code> to the <code>SHOW STATUS</code>
command.</li>

<li>Added <code>Privileges</code> column to <code>SHOW
COLUMNS</code>.</li>

<li>Added <code>Packed</code> and <code>Comment</code> columns to
<code>SHOW INDEX</code>.</li>

<li>Added comments to tables (with <code>CREATE TABLE ... COMMENT
"xxx"</code>).</li>

<li>Added <code>UNIQUE</code>, as in <code>CREATE TABLE table_name
(col int not null UNIQUE)</code></li>

<li>New create syntax: <code>CREATE TABLE table_name SELECT
...</code></li>

<li>New create syntax: <code>CREATE TABLE IF NOT EXISTS
...</code></li>

<li>Allow creation of <code>CHAR(0)</code> columns.</li>

<li><code>DATE_FORMAT()</code> now requires <samp>`%'</samp> before
any format character.</li>

<li><code>DELAYED</code> is now a reserved word (sorry about that
:( ).</li>

<li>An example procedure is added: <code>analyse</code>, file:
<tt>`sql_analyse.c'</tt>. This will describe the data in your
query. Try the following: 

<pre>
SELECT ... FROM ...
WHERE ... PROCEDURE ANALYSE([max elements,[max memory]])
</pre>

This procedure is extremely useful when you want to check the data
in your table!</li>

<li><code>BINARY</code> cast to force a string to be compared in
case-sensitive fashion.</li>

<li>Added <code>--skip-show-database</code> option to
<code>mysqld</code>.</li>

<li>Check whether a row has changed in an <code>UPDATE</code> now
also works with <code>BLOB</code>/<code>TEXT</code> columns.</li>

<li>Added the <code>INNER</code> join syntax.
<strong>NOTE</strong>: This made <code>INNER</code> a reserved
word!</li>

<li>Added support for netmasks to the hostname in the MySQL grant
tables. You can specify a netmask using the <code>IP/NETMASK</code>
syntax.</li>

<li>If you compare a <code>NOT NULL DATE/DATETIME</code> column
with <code>IS NULL</code>, this is changed to a compare against
<code>0</code> to satisfy some ODBC applications. (By <a
href="mailto:shreeve@uci.edu">shreeve@uci.edu</a>.)</li>

<li><code>NULL IN (...)</code> now returns <code>NULL</code>
instead of <code>0</code>. This will ensure that <code>null_column
NOT IN (...)</code> doesn't match <code>NULL</code> values.</li>

<li>Fix storage of floating-point values in <code>TIME</code>
columns.</li>

<li>Changed parsing of <code>TIME</code> strings to be more strict.
Now the fractional second part is detected (and currently skipped).
The following formats are supported: 

<ul>
<li>[[DAYS] [H]H:]MM:]SS[.fraction]</li>

<li>[[[[[H]H]H]H]MM]SS[.fraction]</li>
</ul>
</li>

<li>Detect (and ignore) fractional second part from
<code>DATETIME</code>.</li>

<li>Added the <code>LOW_PRIORITY</code> attribute to <code>LOAD
DATA INFILE</code>.</li>

<li>The default index name now uses the same case as the column
name on which the index name is based.</li>

<li>Changed default number of connections to 100.</li>

<li>Use bigger buffers when using <code>LOAD DATA
INFILE</code>.</li>

<li><code>DECIMAL(x,y)</code> now works according to ANSI SQL.</li>

<li>Added aggregate UDF functions. Thanks to Andreas F. Bobak (<a
href="mailto:bobak@relog.ch">bobak@relog.ch</a>) for this!</li>

<li><code>LAST_INSERT_ID()</code> is now updated for <code>INSERT
INTO ... SELECT</code>.</li>

<li>Some small changes to the join table optimiser to make some
joins faster.</li>

<li><code>SELECT DISTINCT</code> is much faster; it uses the new
<code>UNIQUE</code> functionality in <code>MyISAM</code>. One
difference compared to MySQL Version 3.22 is that the output of
<code>DISTINCT</code> is not sorted anymore.</li>

<li>All C client API macros are now functions to make shared
libraries more reliable. Because of this, you can no longer call
<code>mysql_num_fields()</code> on a <code>MYSQL</code> object, you
must use <code>mysql_field_count()</code> instead.</li>

<li>Added use of <code>LIBWRAP</code>; patch by Henning P.
Schmiedehausen.</li>

<li>Don't allow <code>AUTO_INCREMENT</code> for other than
numerical columns.</li>

<li>Using <code>AUTO_INCREMENT</code> will now automatically make
the column <code>NOT NULL</code>.</li>

<li>Show <code>NULL</code> as the default value for
<code>AUTO_INCREMENT</code> columns.</li>

<li>Added <code>SQL_BIG_RESULT</code>;
<code>SQL_SMALL_RESULT</code> is now default.</li>

<li>Added a shared library RPM. This enhancement was contributed by
David Fox (<a
href="mailto:dsfox@cogsci.ucsd.edu">dsfox@cogsci.ucsd.edu</a>).</li>

<li>Added <code>--enable-large-files</code> and
<code>--disable-large-files</code> switches to
<code>configure</code>. See <tt>`configure.in'</tt> for some
systems where this is automatically turned off because of broken
implementations.</li>

<li>Upgraded <code>readline</code> to 4.0.</li>

<li>New <code>CREATE TABLE</code> options: <code>PACK_KEYS</code>
and <code>CHECKSUM</code>.</li>

<li>Added <code>--default-table-type</code> option to
<code>mysqld</code>.</li>
</ul>

<h2><a id="News-3.22.x" name="News-3.22.x"
href="manual_toc.html#News-3.22.x">D.4 Changes in release 3.22.x
(Old; discontinued)</a></h2>

<p><a id="IDX1838" name="IDX1838"></a></p>

<p>The 3.22 version has faster and safer connect code than version
3.21, as well as a lot of new nice enhancements. As there aren't
really any major changes, upgrading from 3.21 to 3.22 should be
very easy and painless. See section <a
href="manual.html#Upgrading-from-3.21">2.5.4 Upgrading from Version
3.21 to Version 3.22</a>.</p>

<h3><a id="News-3.22.35" name="News-3.22.35"
href="manual_toc.html#News-3.22.35">D.4.1 Changes in release
3.22.35</a></h3>

<ul>
<li>Fixed problem with <code>STD()</code>.</li>

<li>Merged changes from the newest <code>ISAM</code> library from
3.23.</li>

<li>Fixed problem with <code>INSERT DELAYED</code>.</li>

<li>Fixed a bug core dump when using a <code>LEFT
JOIN</code>/<code>STRAIGHT_JOIN</code> on a table with only one
row.</li>
</ul>

<h3><a id="News-3.22.34" name="News-3.22.34"
href="manual_toc.html#News-3.22.34">D.4.2 Changes in release
3.22.34</a></h3>

<ul>
<li>Fixed problem with <code>GROUP BY</code> on
<code>TINYBLOB</code> columns; this caused bugzilla to not show
rows in some queries.</li>

<li>Had to do total recompile of the Windows binary version as VC++
didn't compile all relevant files for 3.22.33 :(</li>
</ul>

<h3><a id="News-3.22.33" name="News-3.22.33"
href="manual_toc.html#News-3.22.33">D.4.3 Changes in release
3.22.33</a></h3>

<ul>
<li>Fixed problems in Windows when locking tables with <code>LOCK
TABLE</code>.</li>

<li>Quicker kill of <code>SELECT DISTINCT</code> queries.</li>
</ul>

<h3><a id="News-3.22.32" name="News-3.22.32"
href="manual_toc.html#News-3.22.32">D.4.4 Changes in release
3.22.32 (14 Feb 2000)</a></h3>

<ul>
<li>Fixed problem when storing numbers in timestamps.</li>

<li>Fix problem with timezones that have half hour offsets.</li>

<li>Added <code>mysqlhotcopy</code>, a fast online hot-backup
utility for local MySQL databases. By Tim Bunce.</li>

<li>New more secure <code>mysqlaccess</code>. Thanks to Steve
Harvey for this.</li>

<li>Fixed security problem in the protocol regarding password
checking.</li>

<li>Fixed problem that affected queries that did arithmetic on
<code>GROUP</code> functions.</li>

<li>Fixed a bug in the <code>ISAM</code> code when deleting rows on
tables with packed indexes.</li>
</ul>

<h3><a id="News-3.22.31" name="News-3.22.31"
href="manual_toc.html#News-3.22.31">D.4.5 Changes in release
3.22.31</a></h3>

<ul>
<li>A few small fixes for the Windows version.</li>
</ul>

<h3><a id="News-3.22.30" name="News-3.22.30"
href="manual_toc.html#News-3.22.30">D.4.6 Changes in release
3.22.30</a></h3>

<ul>
<li>Fixed optimiser problem on <code>SELECT</code> when using many
overlapping indexes.</li>

<li>Disabled floating-point exceptions for FreeBSD to fix core dump
when doing <code>SELECT FLOOR(POW(2,63))</code>.</li>

<li>Added print of default arguments options to all clients.</li>

<li>Fixed critical problem with the <code>WITH GRANT OPTION</code>
option.</li>

<li>Fixed non-critical Y2K problem when writing short date to log
files.</li>
</ul>

<h3><a id="News-3.22.29" name="News-3.22.29"
href="manual_toc.html#News-3.22.29">D.4.7 Changes in release
3.22.29 (02 Jan 2000)</a></h3>

<ul>
<li>Upgraded the configure and include files to match the latest
3.23 version. This should increase portability and make it easier
to build shared libraries.</li>

<li>Added latest patches to MIT-pthreads for NetBSD.</li>

<li>Fixed problem with timezones that are &lt; GMT -11.</li>

<li>Fixed a bug when deleting packed keys in NISAM.</li>

<li>Fixed problem that could cause MySQL to touch freed memory when
doing very complicated <code>GROUP BY</code> queries.</li>

<li>Fixed core dump if you got a crashed table where an
<code>ENUM</code> field value was too big.</li>

<li>Added <code>mysqlshutdown.exe</code> and
<code>mysqlwatch.exe</code> to the Windows distribution.</li>

<li>Fixed problem when doing <code>ORDER BY</code> on a reference
key.</li>

<li>Fixed that <code>INSERT DELAYED</code> doesn't update
timestamps that are given.</li>
</ul>

<h3><a id="News-3.22.28" name="News-3.22.28"
href="manual_toc.html#News-3.22.28">D.4.8 Changes in release
3.22.28 (20 Oct 1999)</a></h3>

<ul>
<li>Fixed problem with <code>LEFT JOIN</code> and
<code>COUNT()</code> on a column which was declared
<code>NULL</code> + and it had a <code>DEFAULT</code> value.</li>

<li>Fixed core dump problem when using <code>CONCAT()</code> in a
<code>WHERE</code> clause.</li>

<li>Fixed problem with <code>AVG()</code> and <code>STD()</code>
with <code>NULL</code> values.</li>
</ul>

<h3><a id="News-3.22.27" name="News-3.22.27"
href="manual_toc.html#News-3.22.27">D.4.9 Changes in release
3.22.27</a></h3>

<ul>
<li>Fixed prototype in <tt>`my_ctype.h'</tt> when using other
character sets.</li>

<li>Some configure issues to fix problems with big filesystem
detection.</li>

<li>Fixed problem when sorting on big <code>BLOB</code>
columns.</li>

<li><code>ROUND()</code> will now work on Windows.</li>
</ul>

<h3><a id="News-3.22.26" name="News-3.22.26"
href="manual_toc.html#News-3.22.26">D.4.10 Changes in release
3.22.26 (16 Sep 1999)</a></h3>

<ul>
<li>Fixed core dump with empty <code>BLOB/TEXT</code> column
argument to <code>REVERSE()</code>.</li>

<li>Extended <code>/*! */</code> with version numbers.</li>

<li>Changed <code>SUBSTRING(text FROM pos)</code> to conform to
ANSI SQL. (Before this construct returned the rightmost 'pos'
characters.)</li>

<li>Fixed problem with <code>LOCK TABLES</code> combined with
<code>DELETE FROM table</code></li>

<li>Fixed problem that <code>INSERT ... SELECT</code> didn't use
<code>BIG_TABLES</code>.</li>

<li><code>SET SQL_LOW_PRIORITY_UPDATES=#</code> didn't work.</li>

<li>Password wasn't updated correctly if privileges didn't change
on: <code>GRANT ... IDENTIFIED BY</code></li>

<li>Fixed range optimiser bug in <code>SELECT * FROM table_name
WHERE key_part1 &gt;= const AND (key_part2 = const OR key_part2 =
const)</code>.</li>

<li>Fixed bug in compression key handling in
<code>ISAM</code>.</li>
</ul>

<h3><a id="News-3.22.25" name="News-3.22.25"
href="manual_toc.html#News-3.22.25">D.4.11 Changes in release
3.22.25</a></h3>

<ul>
<li>Fixed some small problems with the installation.</li>
</ul>

<h3><a id="News-3.22.24" name="News-3.22.24"
href="manual_toc.html#News-3.22.24">D.4.12 Changes in release
3.22.24 (05 Jul 1999)</a></h3>

<ul>
<li><code>DATA</code> is not a reserved word anymore.</li>

<li>Fixed optimiser bug with tables with only one row.</li>

<li>Fixed bug when using <code>LOCK TABLES table_name READ; FLUSH
TABLES;</code></li>

<li>Applied some patches for HP-UX.</li>

<li><code>isamchk</code> should now work on Windows.</li>

<li>Changed <tt>`configure'</tt> to not use big file handling on
Linux as this crashes some RedHat 6.0 systems</li>
</ul>

<h3><a id="News-3.22.23" name="News-3.22.23"
href="manual_toc.html#News-3.22.23">D.4.13 Changes in release
3.22.23 (08 Jun 1999)</a></h3>

<ul>
<li>Upgraded to use Autoconf 2.13, Automake 1.4 and
<code>libtool</code> 1.3.2.</li>

<li>Better support for SCO in <code>configure</code>.</li>

<li>Added option <code>--defaults-file=###</code> to option file
handling to force use of only one specific option file.</li>

<li>Extended <code>CREATE</code> syntax to ignore MySQL Version
3.23 keywords.</li>

<li>Fixed deadlock problem when using <code>INSERT DELAYED</code>
on a table locked with <code>LOCK TABLES</code>.</li>

<li>Fixed deadlock problem when using <code>DROP TABLE</code> on a
table that was locked by another thread.</li>

<li>Add logging of <code>GRANT/REVOKE</code> commands in the update
log.</li>

<li>Fixed <code>isamchk</code> to detect a new error
condition.</li>

<li>Fixed bug in <code>NATURAL LEFT JOIN</code>.</li>
</ul>

<h3><a id="News-3.22.22" name="News-3.22.22"
href="manual_toc.html#News-3.22.22">D.4.14 Changes in release
3.22.22 (30 Apr 1999)</a></h3>

<ul>
<li>Fixed problem in the C API when you called
<code>mysql_close()</code> directly after
<code>mysql_init()</code>.</li>

<li>Better client error message when you can't open socket.</li>

<li>Fixed <code>delayed_insert_thread</code> counting when you
couldn't create a new delayed_insert thread.</li>

<li>Fixed bug in <code>CONCAT()</code> with many arguments.</li>

<li>Added patches for DEC 3.2 and SCO.</li>

<li>Fixed path-bug when installing MySQL as a service on NT.</li>

<li>The MySQL-Windows version is now compiled with VC++ 6.0 instead
of with VC++ 5.0.</li>

<li>New installation setup for MySQL-Windows.</li>
</ul>

<h3><a id="News-3.22.21" name="News-3.22.21"
href="manual_toc.html#News-3.22.21">D.4.15 Changes in release
3.22.21</a></h3>

<ul>
<li>Fixed problem with <code>DELETE FROM TABLE</code> when table
was locked by another thread.</li>

<li>Fixed bug in <code>LEFT JOIN</code> involving empty
tables.</li>

<li>Changed the <code>mysql.db</code> column from
<code>CHAR(32)</code> to <code>CHAR(60)</code>.</li>

<li><code>MODIFY</code> and <code>DELAYED</code> are not reserved
words anymore.</li>

<li>Fixed a bug when storing days in a <code>TIME</code>
column.</li>

<li>Fixed a problem with <code>Host '...' is not allowed to connect
to this MySQL server</code> after one had inserted a new MySQL user
with a <code>GRANT</code> command.</li>

<li>Changed to use <code>TCP_NODELAY</code> also on Linux (should
give faster TCP/IP connections).</li>
</ul>

<h3><a id="News-3.22.20" name="News-3.22.20"
href="manual_toc.html#News-3.22.20">D.4.16 Changes in release
3.22.20 (18 Mar 1999)</a></h3>

<ul>
<li>Fixed <code>STD()</code> for big tables when result should be
0.</li>

<li>The update log didn't have newlines on some operating
systems.</li>

<li><code>INSERT DELAYED</code> had some garbage at end in the
update log.</li>
</ul>

<h3><a id="News-3.22.19" name="News-3.22.19"
href="manual_toc.html#News-3.22.19">D.4.17 Changes in release
3.22.19 (Mar 1999: Stable)</a></h3>

<ul>
<li>Fixed bug in <code>mysql_install_db</code> (from 3.22.17).</li>

<li>Changed default key cache size to 8M.</li>

<li>Fixed problem with queries that needed temporary tables with
<code>BLOB</code> columns.</li>
</ul>

<h3><a id="News-3.22.18" name="News-3.22.18"
href="manual_toc.html#News-3.22.18">D.4.18 Changes in release
3.22.18</a></h3>

<ul>
<li>Fixes a fatal problem in 3.22.17 on Linux; after
<code>shutdown</code> not all threads died properly.</li>

<li>Added option <code>-O flush_time=#</code> to
<code>mysqld</code>. This is mostly useful on Windows and tells how
often MySQL should close all unused tables and flush all updated
tables to disk.</li>

<li>Fixed problem that a <code>VARCHAR</code> column compared with
<code>CHAR</code> column didn't use keys efficiently.</li>
</ul>

<h3><a id="News-3.22.17" name="News-3.22.17"
href="manual_toc.html#News-3.22.17">D.4.19 Changes in release
3.22.17</a></h3>

<ul>
<li>Fixed a core dump problem when using <code>--log-update</code>
and connecting without a default database.</li>

<li>Fixed some <code>configure</code> and portability
problems.</li>

<li>Using <code>LEFT JOIN</code> on tables that had circular
dependencies caused <code>mysqld</code> to hang forever.</li>
</ul>

<h3><a id="News-3.22.16" name="News-3.22.16"
href="manual_toc.html#News-3.22.16">D.4.20 Changes in release
3.22.16 (Feb 1999: Gamma)</a></h3>

<ul>
<li><code>mysqladmin processlist</code> could kill the server if a
new user logged in.</li>

<li><code>DELETE FROM tbl_name WHERE key_column=col_name</code>
didn't find any matching rows. Fixed.</li>

<li><code>DATE_ADD(column, ...)</code> didn't work.</li>

<li><code>INSERT DELAYED</code> could deadlock with status
'upgrading lock'</li>

<li>Extended <code>ENCRYPT()</code> to take longer salt strings
than 2 characters.</li>

<li><code>longlong2str</code> is now much faster than before. For
<code>Intel x86</code> platforms, this function is written in
optimised assembler.</li>

<li>Added the <code>MODIFY</code> keyword to <code>ALTER
TABLE</code>.</li>
</ul>

<h3><a id="News-3.22.15" name="News-3.22.15"
href="manual_toc.html#News-3.22.15">D.4.21 Changes in release
3.22.15</a></h3>

<ul>
<li><code>GRANT</code> used with <code>IDENTIFIED BY</code> didn't
take effect until privileges were flushed.</li>

<li>Name change of some variables in <code>SHOW STATUS</code>.</li>

<li>Fixed problem with <code>ORDER BY</code> with 'only index'
optimisation when there were multiple key definitions for a used
column.</li>

<li><code>DATE</code> and <code>DATETIME</code> columns are now up
to 5 times faster than before.</li>

<li><code>INSERT DELAYED</code> can be used to let the client do
other things while the server inserts rows into a table.</li>

<li><code>LEFT JOIN USING (col1,col2)</code> didn't work if one
used it with tables from 2 different databases.</li>

<li><code>LOAD DATA LOCAL INFILE</code> didn't work in the Unix
version because of a missing file.</li>

<li>Fixed problems with <code>VARCHAR</code>/<code>BLOB</code> on
very short rows (&lt; 4 bytes); error 127 could occur when deleting
rows.</li>

<li>Updating <code>BLOB/TEXT</code> through formulas didn't work
for short (&lt; 256 char) strings.</li>

<li>When you did a <code>GRANT</code> on a new host,
<code>mysqld</code> could die on the first connect from this
host.</li>

<li>Fixed bug when one used <code>ORDER BY</code> on column name
that was the same name as an alias.</li>

<li>Added <code>BENCHMARK(loop_count,expression)</code> function to
time expressions.</li>
</ul>

<h3><a id="News-3.22.14" name="News-3.22.14"
href="manual_toc.html#News-3.22.14">D.4.22 Changes in release
3.22.14</a></h3>

<ul>
<li>Allow empty arguments to <code>mysqld</code> to make it easier
to start from shell scripts.</li>

<li>Setting a <code>TIMESTAMP</code> column to <code>NULL</code>
didn't record the timestamp value in the update log.</li>

<li>Fixed lock handler bug when one did <code>INSERT INTO TABLE ...
SELECT ... GROUP BY</code>.</li>

<li>Added a patch for <code>localtime_r()</code> on Windows so that
it will not crash anymore if your date is &gt; 2039, but instead
will return a time of all zero.</li>

<li>Names for user-defined functions are no longer
case-sensitive.</li>

<li>Added escape of <code>^Z</code> (ASCII 26) to <code>\Z</code>
as <code>^Z</code> doesn't work with pipes on Windows.</li>

<li><code>mysql_fix_privileges</code> adds a new column to the
<code>mysql.func</code> to support aggregate UDF functions in
future MySQL releases.</li>
</ul>

<h3><a id="News-3.22.13" name="News-3.22.13"
href="manual_toc.html#News-3.22.13">D.4.23 Changes in release
3.22.13</a></h3>

<ul>
<li>Saving <code>NOW()</code>, <code>CURDATE()</code> or
<code>CURTIME()</code> directly in a column didn't work.</li>

<li><code>SELECT COUNT(*) ... LEFT JOIN ...</code> didn't work with
no <code>WHERE</code> part.</li>

<li>Updated <tt>`config.guess'</tt> to allow MySQL to configure on
UnixWare 7.0.x.</li>

<li>Changed the implementation of <code>pthread_cond()</code> on
the Windows version. <code>get_lock()</code> now correctly times
out on Windows!</li>
</ul>

<h3><a id="News-3.22.12" name="News-3.22.12"
href="manual_toc.html#News-3.22.12">D.4.24 Changes in release
3.22.12</a></h3>

<ul>
<li>Fixed problem when using <code>DATE_ADD()</code> and
<code>DATE_SUB()</code> in a <code>WHERE</code> clause.</li>

<li>You can now set the password for a user with the <code>GRANT
... TO user IDENTIFIED BY 'password'</code> syntax.</li>

<li>Fixed bug in <code>GRANT</code> checking with
<code>SELECT</code> on many tables.</li>

<li>Added missing file <code>mysql_fix_privilege_tables</code> to
the RPM distribution. This is not run by default because it relies
on the client package.</li>

<li>Added option <code>SQL_SMALL_RESULT</code> to
<code>SELECT</code> to force use of fast temporary tables when you
know that the result set will be small.</li>

<li>Allow use of negative real numbers without a decimal
point.</li>

<li>Day number is now adjusted to maximum days in month if the
resulting month after <code>DATE_ADD</code>/<code>DATE_SUB()</code>
doesn't have enough days.</li>

<li>Fix that <code>GRANT</code> compares columns in
case-insensitive fashion.</li>

<li>Fixed a bug in <tt>`sql_list.h'</tt> that made <code>ALTER
TABLE</code> dump core in some contexts.</li>

<li>The hostname in <code>user@hostname</code> can now include
<samp>`.'</samp> and <samp>`-'</samp> without quotes in the context
of the <code>GRANT</code>, <code>REVOKE</code> and <code>SET
PASSWORD FOR ...</code> statements.</li>

<li>Fix for <code>isamchk</code> for tables which need big
temporary files.</li>
</ul>

<h3><a id="News-3.22.11" name="News-3.22.11"
href="manual_toc.html#News-3.22.11">D.4.25 Changes in release
3.22.11</a></h3>

<ul>
<li><strong>Important</strong>: You must run the
<code>mysql_fix_privilege_tables</code> script when you upgrade to
this version! This is needed because of the new <code>GRANT</code>
system. If you don't do this, you will get <code>Access
denied</code> when you try to use <code>ALTER TABLE</code>,
<code>CREATE INDEX</code>, or <code>DROP INDEX</code>.</li>

<li><code>GRANT</code> to allow/deny users table and column
access.</li>

<li>Changed <code>USER()</code> to return a value in
<code>user@host</code> format. Formerly it returned only
<code>user</code>.</li>

<li>Changed the syntax for how to set <code>PASSWORD</code> for
another user.</li>

<li>New command <code>FLUSH STATUS</code> that resets most status
variables to zero.</li>

<li>New status variables: <code>aborted_threads</code>,
<code>aborted_connects</code>.</li>

<li>New option variable: <code>connection_timeout</code>.</li>

<li>Added support for Thai sorting (by Pruet Boonma <a
href="mailto:pruet@ds90.intanon.nectec.or.th">pruet@ds90.intanon.nectec.or.th</a>).</li>

<li>Slovak and japanese error messages.</li>

<li>Configuration and portability fixes.</li>

<li>Added option <code>SET SQL_WARNINGS=1</code> to get a warning
count also for simple inserts.</li>

<li>MySQL now uses <code>SIGTERM</code> instead of
<code>SIGQUIT</code> with shutdown to work better on FreeBSD.</li>

<li>Added option <code>\G</code> (print vertically) to
<code>mysql</code>.</li>

<li><code>SELECT HIGH_PRIORITY ...</code> killed
<code>mysqld</code>.</li>

<li><code>IS NULL</code> on a <code>AUTO_INCREMENT</code> column in
a <code>LEFT JOIN</code> didn't work as expected.</li>

<li>New function <code>MAKE_SET()</code>.</li>
</ul>

<h3><a id="News-3.22.10" name="News-3.22.10"
href="manual_toc.html#News-3.22.10">D.4.26 Changes in release
3.22.10</a></h3>

<ul>
<li><code>mysql_install_db</code> no longer starts the MySQL
server! You should start <code>mysqld</code> with
<code>safe_mysqld</code> after installing it! The MySQL RPM will,
however, start the server as before.</li>

<li>Added <code>--bootstrap</code> option to <code>mysqld</code>
and recoded <code>mysql_install_db</code> to use it. This will make
it easier to install MySQL with RPMs.</li>

<li>Changed <code>+</code>, <code>-</code> (sign and minus),
<code>*</code>, <code>/</code>, <code>%</code>, <code>ABS()</code>
and <code>MOD()</code> to be <code>BIGINT</code> aware (64-bit
safe).</li>

<li>Fixed a bug in <code>ALTER TABLE</code> that caused
<code>mysqld</code> to crash.</li>

<li>MySQL now always reports the conflicting key values when a
duplicate key entry occurs. (Before this was only reported for
<code>INSERT</code>.)</li>

<li>New syntax: <code>INSERT INTO tbl_name SET col_name=value,
col_name=value, ...</code></li>

<li>Most errors in the <tt>`.err'</tt> log are now prefixed with a
time stamp.</li>

<li>Added option <code>MYSQL_INIT_COMMAND</code> to
<code>mysql_options()</code> to make a query on connect or
reconnect.</li>

<li>Added option <code>MYSQL_READ_DEFAULT_FILE</code> and
<code>MYSQL_READ_DEFAULT_GROUP</code> to
<code>mysql_options()</code> to read the following parameters from
the MySQL option files: <code>port</code>, <code>socket</code>,
<code>compress</code>, <code>password</code>, <code>pipe</code>,
<code>timeout</code>, <code>user</code>, <code>init-command</code>,
<code>host</code> and <code>database</code>.</li>

<li>Added <code>maybe_null</code> to the UDF structure.</li>

<li>Added option <code>IGNORE</code> to <code>INSERT</code>
statements with many rows.</li>

<li>Fixed some problems with sorting of the <code>koi8</code>
character sets; users of <code>koi8</code> <strong>must</strong>
run <code>isamchk -rq</code> on each table that has an index on a
<code>CHAR</code> or <code>VARCHAR</code> column.</li>

<li>New script <code>mysql_setpermission</code>, by Luuk de Boer.
It allows easy creation of new users with permissions for specific
databases.</li>

<li>Allow use of hexadecimal strings (0x...) when specifying a
constant string (like in the column separators with <code>LOAD DATA
INFILE</code>).</li>

<li>Ported to OS/2 (thanks to Antony T. Curtis <a
href="mailto:antony.curtis@olcs.net">antony.curtis@olcs.net</a>).</li>

<li>Added more variables to <code>SHOW STATUS</code> and changed
format of output to be like <code>SHOW VARIABLES</code>.</li>

<li>Added <code>extended-status</code> command to
<code>mysqladmin</code> which will show the new status
variables.</li>
</ul>

<h3><a id="News-3.22.9" name="News-3.22.9"
href="manual_toc.html#News-3.22.9">D.4.27 Changes in release
3.22.9</a></h3>

<ul>
<li><code>SET SQL_LOG_UPDATE=0</code> caused a lockup of the
server.</li>

<li>New SQL command: <code>FLUSH [ TABLES | HOSTS | LOGS |
PRIVILEGES ] [, ...]</code></li>

<li>New SQL command: <code>KILL</code> <code>thread_id</code>.</li>

<li>Added casts and changed include files to make MySQL easier to
compile on AIX and DEC OSF/1 4.x</li>

<li>Fixed conversion problem when using <code>ALTER TABLE</code>
from a <code>INT</code> to a short <code>CHAR()</code> column.</li>

<li>Added <code>SELECT HIGH_PRIORITY</code>; this will get a lock
for the <code>SELECT</code> even if there is a thread waiting for
another <code>SELECT</code> to get a <code>WRITE LOCK</code>.</li>

<li>Moved <code>wild_compare()</code> to string class to be able to
use <code>LIKE</code> on <code>BLOB</code>/<code>TEXT</code>
columns with <code>\0</code>.</li>

<li>Added <code>ESCAPE</code> option to <code>LIKE</code>.</li>

<li>Added a lot more output to <code>mysqladmin debug</code>.</li>

<li>You can now start <code>mysqld</code> on Windows with the
<code>--flush</code> option. This will flush all tables to disk
after each update. This makes things much safer on the Windows
platforms but also <strong>much</strong> slower.</li>
</ul>

<h3><a id="News-3.22.8" name="News-3.22.8"
href="manual_toc.html#News-3.22.8">D.4.28 Changes in release
3.22.8</a></h3>

<ul>
<li>Czech character sets should now work much better. You must also
install <a
href="http://www.mysql.com/Downloads/Patches/czech-3.22.8-patch">http://www.mysql.com/Downloads/Patches/czech-3.22.8-patch</a>.
This patch should also be installed if you are using a character
set which uses <code>my_strcoll()</code>! The patch should always
be safe to install (for any system), but as this patch changes
<code>ISAM</code> internals it's not yet in the default
distribution.</li>

<li><code>DATE_ADD()</code> and <code>DATE_SUB()</code> didn't work
with group functions.</li>

<li><code>mysql</code> will now also try to reconnect on <code>USE
DATABASE</code> commands.</li>

<li>Fix problem with <code>ORDER BY</code> and <code>LEFT
JOIN</code> and <code>const</code> tables.</li>

<li>Fixed problem with <code>ORDER BY</code> if the first
<code>ORDER BY</code> column was a key and the rest of the
<code>ORDER BY</code> columns wasn't part of the key.</li>

<li>Fixed a big problem with <code>OPTIMIZE TABLE</code>.</li>

<li>MySQL clients on NT will now by default first try to connect
with named pipes and after this with TCP/IP.</li>

<li>Fixed a problem with <code>DROP TABLE</code> and
<code>mysqladmin shutdown</code> on Windows (a fatal bug from
3.22.6).</li>

<li>Fixed problems with <code>TIME columns</code> and negative
strings.</li>

<li>Added an extra thread signal loop on shutdown to avoid some
error messages from the client.</li>

<li>MySQL now uses the next available number as extension for the
update log file.</li>

<li>Added patches for UNIXWARE 7.</li>
</ul>

<h3><a id="News-3.22.7" name="News-3.22.7"
href="manual_toc.html#News-3.22.7">D.4.29 Changes in release 3.22.7
(Sep 1998: Beta)</a></h3>

<ul>
<li>Added <code>LIMIT</code> clause for the <code>DELETE</code>
statement.</li>

<li>You can now use the <code>/*! ... */</code> syntax to hide
MySQL-specific keywords when you write portable code. MySQL will
parse the code inside the comments as if the surrounding
<code>/*!</code> and <code>*/</code> comment characters didn't
exist.</li>

<li><code>OPTIMIZE TABLE tbl_name</code> can now be used to reclaim
disk space after many deletes. Currently, this uses <code>ALTER
TABLE</code> to regenerate the table, but in the future it will use
an integrated <code>isamchk</code> for more speed.</li>

<li>Upgraded <code>libtool</code> to get the configure more
portable.</li>

<li>Fixed slow <code>UPDATE</code> and <code>DELETE</code>
operations when using <code>DATETIME</code> or <code>DATE</code>
keys.</li>

<li>Changed optimiser to make it better at deciding when to do a
full join and when using keys.</li>

<li>You can now use <code>mysqladmin proc</code> to display
information about your own threads. Only users with the
<code>PROCESS</code> privilege can get information about all
threads. (In 4.0.2 one needs the <code>SUPER</code> privilege for
this.)</li>

<li>Added handling of formats <code>YYMMDD</code>,
<code>YYYYMMDD</code>, <code>YYMMDDHHMMSS</code> for numbers when
using <code>DATETIME</code> and <code>TIMESTAMP</code> types.
(Formerly these formats only worked with strings.)</li>

<li>Added connect option <code>CLIENT_IGNORE_SPACE</code> to allow
use of spaces after function names and before <samp>`('</samp>
(Powerbuilder requires this). This will make all function names
reserved words.</li>

<li>Added the <code>--log-long-format</code> option to
<code>mysqld</code> to enable timestamps and INSERT_ID's in the
update log.</li>

<li>Added <code>--where</code> option to <code>mysqldump</code>
(patch by Jim Faucette).</li>

<li>The lexical analyser now uses ``perfect hashing'' for faster
parsing of SQL statements.</li>
</ul>

<h3><a id="News-3.22.6" name="News-3.22.6"
href="manual_toc.html#News-3.22.6">D.4.30 Changes in release
3.22.6</a></h3>

<ul>
<li>Faster <code>mysqldump</code>.</li>

<li>For the <code>LOAD DATA INFILE</code> statement, you can now
use the new <code>LOCAL</code> keyword to read the file from the
client. <code>mysqlimport</code> will automatically use
<code>LOCAL</code> when importing with the TCP/IP protocol.</li>

<li>Fixed small optimise problem when updating keys.</li>

<li>Changed makefiles to support shared libraries.</li>

<li>MySQL-NT can now use named pipes, which means that you can now
use MySQL-NT without having to install TCP/IP.</li>
</ul>

<h3><a id="News-3.22.5" name="News-3.22.5"
href="manual_toc.html#News-3.22.5">D.4.31 Changes in release
3.22.5</a></h3>

<ul>
<li>All table lock handing is changed to avoid some very subtle
deadlocks when using <code>DROP TABLE</code>, <code>ALTER
TABLE</code>, <code>DELETE FROM TABLE</code> and <code>mysqladmin
flush-tables</code> under heavy usage. Changed locking code to get
better handling of locks of different types.</li>

<li>Updated <code>DBI</code> to 1.00 and <code>DBD</code> to
1.2.0.</li>

<li>Added a check that the error message file contains error
messages suitable for the current version of <code>mysqld</code>.
(To avoid errors if you accidentally try to use an old error
message file.)</li>

<li>All count structures in the client
(<code>affected_rows()</code>, <code>insert_id()</code>, ...) are
now of type <code>BIGINT</code> to allow 64-bit values to be used.
This required a minor change in the MySQL protocol which should
affect only old clients when using tables with
<code>AUTO_INCREMENT</code> values &gt; 16M.</li>

<li>The return type of <code>mysql_fetch_lengths()</code> has
changed from <code>uint *</code> to <code>ulong *</code>. This may
give a warning for old clients but should work on most
machines.</li>

<li>Change <code>mysys</code> and <code>dbug</code> libraries to
allocate all thread variables in one struct. This makes it easier
to make a threaded <tt>`libmysql.dll'</tt> library.</li>

<li>Use the result from <code>gethostname()</code> (instead of
<code>uname()</code>) when constructing <tt>`.pid'</tt> file
names.</li>

<li>New better compressed server/client protocol.</li>

<li><code>COUNT()</code>, <code>STD()</code> and <code>AVG()</code>
are extended to handle more than 4G rows.</li>

<li>You can now store values in the range <code>-838:59:59</code>
&lt;= x &lt;= <code>838:59:59</code> in a <code>TIME</code>
column.</li>

<li><strong>Warning: incompatible change!!</strong> If you set a
<code>TIME</code> column to too short a value, MySQL now assumes
the value is given as: <code>[[[D ]HH:]MM:]SS</code> instead of
<code>HH[:MM[:SS]]</code>.</li>

<li><code>TIME_TO_SEC()</code> and <code>SEC_TO_TIME()</code> can
now handle negative times and hours up to 32767.</li>

<li>Added new option <code>SET SQL_LOG_UPDATE={0|1}</code> to allow
users with the <code>PROCESS</code> privilege to bypass the update
log. (Modified patch from Sergey A Mukhin <a
href="mailto:violet@rosnet.net">violet@rosnet.net</a>.)</li>

<li>Fixed fatal bug in <code>LPAD()</code>.</li>

<li>Initialise line buffer in <tt>`mysql.cc'</tt> to make
<code>BLOB</code> reading from pipes safer.</li>

<li>Added <code>-O max_connect_errors=#</code> option to
<code>mysqld</code>. Connect errors are now reset for each correct
connection.</li>

<li>Increased the default value of <code>max_allowed_packet</code>
to <code>1M</code> in <code>mysqld</code>.</li>

<li>Added <code>--low-priority-updates</code> option to
<code>mysqld</code>, to give table-modifying operations
(<code>INSERT</code>, <code>REPLACE</code>, <code>UPDATE</code>,
<code>DELETE</code>) lower priority than retrievals. You can now
use <code>{INSERT | REPLACE | UPDATE | DELETE} LOW_PRIORITY
...</code> You can also use <code>SET
SQL_LOW_PRIORITY_UPDATES={0|1}</code> to change the priority for
one thread. One side effect is that <code>LOW_PRIORITY</code> is
now a reserved word. :(</li>

<li>Add support for <code>INSERT INTO table ...
VALUES(...),(...),(...)</code>, to allow inserting multiple rows
with a single statement.</li>

<li><code>INSERT INTO tbl_name</code> is now also cached when used
with <code>LOCK TABLES</code>. (Previously only <code>INSERT ...
SELECT</code> and <code>LOAD DATA INFILE</code> were cached.)</li>

<li>Allow <code>GROUP BY</code> functions with <code>HAVING</code>:


<pre>
mysql&gt; SELECT col FROM table GROUP BY col HAVING COUNT(*)&gt;0;
</pre>
</li>

<li><code>mysqld</code> will now ignore trailing <samp>`;'</samp>
characters in queries. This is to make it easier to migrate from
some other SQL servers that require the trailing
<samp>`;'</samp>.</li>

<li>Fix for corrupted fixed-format output generated by <code>SELECT
INTO OUTFILE</code>.</li>

<li><strong>Warning: incompatible change!</strong> Added Oracle
<code>GREATEST()</code> and <code>LEAST()</code> functions. You
must now use these instead of the <code>MAX()</code> and
<code>MIN()</code> functions to get the largest/smallest value from
a list of values. These can now handle <code>REAL</code>,
<code>BIGINT</code> and string (<code>CHAR</code> or
<code>VARCHAR</code>) values.</li>

<li><strong>Warning: incompatible change!</strong>
<code>DAYOFWEEK()</code> had offset 0 for Sunday. Changed the
offset to 1.</li>

<li>Give an error for queries that mix <code>GROUP BY</code>
columns and fields when there is no <code>GROUP BY</code>
specification.</li>

<li>Added <code>--vertical</code> option to <code>mysql</code>, for
printing results in vertical mode.</li>

<li>Index-only optimisation; some queries are now resolved using
only indexes. Until MySQL 4.0, this works only for numeric columns.
See section <a href="manual.html#MySQL_indexes">5.4.3 How MySQL
Uses Indexes</a>.</li>

<li>Lots of new benchmarks.</li>

<li>A new C API chapter and lots of other improvements in the
manual.</li>
</ul>

<h3><a id="News-3.22.4" name="News-3.22.4"
href="manual_toc.html#News-3.22.4">D.4.32 Changes in release
3.22.4</a></h3>

<ul>
<li>Added <code>--tmpdir</code> option to <code>mysqld</code>, for
specifying the location of the temporary file directory.</li>

<li>MySQL now automatically changes a query from an ODBC client: 

<pre>
SELECT ... FROM table WHERE auto_increment_column IS NULL
</pre>

to: 

<pre>
SELECT ... FROM table WHERE auto_increment_column == LAST_INSERT_ID()
</pre>

This allows some ODBC programs (Delphi, Access) to retrieve the
newly inserted row to fetch the <code>AUTO_INCREMENT</code>
id.</li>

<li><code>DROP TABLE</code> now waits for all users to free a table
before deleting it.</li>

<li>Fixed small memory leak in the new connect protocol.</li>

<li>New functions <code>BIN()</code>, <code>OCT()</code>,
<code>HEX()</code> and <code>CONV()</code> for converting between
different number bases.</li>

<li>Added function <code>SUBSTRING()</code> with 2 arguments.</li>

<li>If you created a table with a record length smaller than 5, you
couldn't delete rows from the table.</li>

<li>Added optimisation to remove const reference tables from
<code>ORDER BY</code> and <code>GROUP BY</code>.</li>

<li><code>mysqld</code> now automatically disables system locking
on Linux and Windows, and for systems that use MIT-pthreads. You
can force the use of locking with the
<code>--enable-external-locking</code> option.</li>

<li>Added <code>--console</code> option to <code>mysqld</code>, to
force a console window (for error messages) when using
Windows.</li>

<li>Fixed table locks for Windows.</li>

<li>Allow <samp>`$'</samp> in identifiers.</li>

<li>Changed name of user-specific configuration file from
<tt>`my.cnf'</tt> to <tt>`.my.cnf'</tt> (Unix only).</li>

<li>Added <code>DATE_ADD()</code> and <code>DATE_SUB()</code>
functions.</li>
</ul>

<h3><a id="News-3.22.3" name="News-3.22.3"
href="manual_toc.html#News-3.22.3">D.4.33 Changes in release
3.22.3</a></h3>

<ul>
<li>Fixed a lock problem (bug in MySQL Version 3.22.1) when closing
temporary tables.</li>

<li>Added missing <code>mysql_ping()</code> to the client
library.</li>

<li>Added <code>--compress</code> option to all MySQL clients.</li>

<li>Changed <code>byte</code> to <code>char</code> in
<tt>`mysql.h'</tt> and <tt>`mysql_com.h'</tt>.</li>
</ul>

<h3><a id="News-3.22.2" name="News-3.22.2"
href="manual_toc.html#News-3.22.2">D.4.34 Changes in release
3.22.2</a></h3>

<ul>
<li>Searching on multiple constant keys that matched more than 30%
of the rows didn't always use the best possible key.</li>

<li>New functions <code>&lt;&lt;</code>, <code>&gt;&gt;</code>,
<code>RPAD()</code> and <code>LPAD()</code>.</li>

<li>You can now save default options (like passwords) in a
configuration file (<tt>`my.cnf'</tt>).</li>

<li>Lots of small changes to get <code>ORDER BY</code> to work when
no records are found when using fields that are not in <code>GROUP
BY</code> (MySQL extension).</li>

<li>Added <code>--chroot</code> option to <code>mysqld</code>, to
start <code>mysqld</code> in a chroot environment (by Nikki
Chumakov <a
href="mailto:nikkic@cityline.ru">nikkic@cityline.ru</a>).</li>

<li>Trailing spaces are now ignored when comparing case-sensitive
strings; this should fix some problems with ODBC and flag 512!</li>

<li>Fixed a core dump bug in the range optimiser.</li>

<li>Added <code>--one-thread</code> option to <code>mysqld</code>,
for debugging with LinuxThreads (or <code>glibc</code>). (This
replaces the <code>-T32</code> flag)</li>

<li>Added <code>DROP TABLE IF EXISTS</code> to prevent an error
from occurring if the table doesn't exist.</li>

<li><code>IF</code> and <code>EXISTS</code> are now reserved words
(they would have to be sooner or later).</li>

<li>Added lots of new options to <code>mysqldump</code>.</li>

<li>Server error messages are now in
<tt>`mysqld_error.h'</tt>.</li>

<li>The server/client protocol now supports compression.</li>

<li>All bug fixes from MySQL Version 3.21.32.</li>
</ul>

<h3><a id="News-3.22.1" name="News-3.22.1"
href="manual_toc.html#News-3.22.1">D.4.35 Changes in release 3.22.1
(Jun 1998: Alpha)</a></h3>

<ul>
<li>Added new C API function <code>mysql_ping()</code>.</li>

<li>Added new API functions <code>mysql_init()</code> and
<code>mysql_options()</code>. You now MUST call
<code>mysql_init()</code> before you call
<code>mysql_real_connect()</code>. You don't have to call
<code>mysql_init()</code> if you only use
<code>mysql_connect()</code>.</li>

<li>Added
<code>mysql_options(...,MYSQL_OPT_CONNECT_TIMEOUT,...)</code> so
you can set a timeout for connecting to a server.</li>

<li>Added <code>--timeout</code> option to <code>mysqladmin</code>,
as a test of <code>mysql_options()</code>.</li>

<li>Added <code>AFTER column</code> and <code>FIRST</code> options
to <code>ALTER TABLE ... ADD columns</code>. This makes it possible
to add a new column at some specific location within a row in an
existing table.</li>

<li><code>WEEK()</code> now takes an optional argument to allow
handling of weeks when the week starts on Monday (some European
countries). By default, <code>WEEK()</code> assumes the week starts
on Sunday.</li>

<li><code>TIME</code> columns weren't stored properly (bug in MySQL
Version 3.22.0).</li>

<li><code>UPDATE</code> now returns information about how many rows
were matched and updated, and how many ``warnings'' occurred when
doing the update.</li>

<li>Fixed incorrect result from <code>FORMAT(-100,2)</code>.</li>

<li><code>ENUM</code> and <code>SET</code> columns were compared in
binary (case-sensitive) fashion; changed to be
case-insensitive.</li>
</ul>

<h3><a id="News-3.22.0" name="News-3.22.0"
href="manual_toc.html#News-3.22.0">D.4.36 Changes in release
3.22.0</a></h3>

<ul>
<li>New (backward-compatible) connect protocol that allows you to
specify the database to use when connecting, to get much faster
connections to a specific database. The
<code>mysql_real_connect()</code> call is changed to: 

<pre>
mysql_real_connect(MYSQL *mysql, const char *host, const char *user,
                   const char *passwd, const char *db, uint port,
                   const char *unix_socket, uint client_flag)
</pre>
</li>

<li>Each connection is handled by its own thread, rather than by
the master <code>accept()</code> thread. This fixes permanently the
telnet bug that was a topic on the mail list some time ago.</li>

<li>All TCP/IP connections are now checked with backward-resolution
of the hostname to get better security. <code>mysqld</code> now has
a local hostname resolver cache so connections should actually be
faster than before, even with this feature.</li>

<li>A site automatically will be blocked from future connections if
someone repeatedly connects with an ``improper header'' (like when
one uses telnet).</li>

<li>You can now refer to tables in different databases with
references of the form <code>tbl_name@db_name</code> or
<code>db_name.tbl_name</code>. This makes it possible to give a
user read access to some tables and write access to others simply
by keeping them in different databases!</li>

<li>Added <code>--user</code> option to <code>mysqld</code>, to
allow it to run as another Unix user (if it is started as the Unix
<code>root</code> user).</li>

<li>Added caching of users and access rights (for faster access
rights checking)</li>

<li>Normal users (not anonymous ones) can change their password
with <code>mysqladmin password 'new_password'</code>. This uses
encrypted passwords that are not logged in the normal MySQL
log!</li>

<li>All important string functions are now coded in assembler for
x86 Linux machines. This gives a speedup of 10% in many cases.</li>

<li>For tables that have many columns, the column names are now
hashed for much faster column name lookup (this will speed up some
benchmark tests a lot!)</li>

<li>Some benchmarks are changed to get better individual timing.
(Some loops were so short that a specific test took &lt; 2 seconds.
The loops have been changed to take about 20 seconds to make it
easier to compare different databases. A test that took 1-2 seconds
before now takes 11-24 seconds, which is much better)</li>

<li>Re-arranged <code>SELECT</code> code to handle some very
specific queries involving group functions (like
<code>COUNT(*)</code>) without a <code>GROUP BY</code> but with
<code>HAVING</code>. The following now works: 

<pre>
mysql&gt; SELECT COUNT(*) as C FROM table HAVING C &gt; 1;
</pre>
</li>

<li>Changed the protocol for field functions to be faster and avoid
some calls to <code>malloc()</code>.</li>

<li>Added <code>-T32</code> option to <code>mysqld</code>, for
running all queries under the main thread. This makes it possible
to debug <code>mysqld</code> under Linux with
<code>gdb</code>!</li>

<li>Added optimisation of <code>not_null_column IS NULL</code>
(needed for some Access queries).</li>

<li>Allow <code>STRAIGHT_JOIN</code> to be used between two tables
to force the optimiser to join them in a specific order.</li>

<li>String functions now return <code>VARCHAR</code> rather than
<code>CHAR</code> and the column type is now <code>VARCHAR</code>
for fields saved as <code>VARCHAR</code>. This should make the
<code>MyODBC</code> driver better, but may break some old MySQL
clients that don't handle <code>FIELD_TYPE_VARCHAR</code> the same
way as <code>FIELD_TYPE_CHAR</code>.</li>

<li><code>CREATE INDEX</code> and <code>DROP INDEX</code> are now
implemented through <code>ALTER TABLE</code>. <code>CREATE
TABLE</code> is still the recommended (fast) way to create
indexes.</li>

<li>Added <code>--set-variable</code> option
<code>wait_timeout</code> to <code>mysqld</code>.</li>

<li>Added time column to <code>mysqladmin processlist</code> to
show how long a query has taken or how long a thread has
slept.</li>

<li>Added lots of new variables to <code>show variables</code> and
some new to <code>show status</code>.</li>

<li>Added new type <code>YEAR</code>. <code>YEAR</code> is stored
in 1 byte with allowable values of 0, and 1901 to 2155.</li>

<li>Added new <code>DATE</code> type that is stored in 3 bytes
rather than 4 bytes. All new tables are created with the new date
type if you don't use the <code>--old-protocol</code> option to
<code>mysqld</code>.</li>

<li>Fixed bug in record caches; for some queries, you could get
<code>Error from table handler: #</code> on some operating
systems.</li>

<li>Added <code>--enable-assembler</code> option to
<code>configure</code>, for x86 machines (tested on Linux +
<code>gcc</code>). This will enable assembler functions for the
most important string functions for more speed!</li>
</ul>

<h2><a id="News-3.21.x" name="News-3.21.x"
href="manual_toc.html#News-3.21.x">D.5 Changes in release
3.21.x</a></h2>

<p><a id="IDX1839" name="IDX1839"></a></p>

<p>Version 3.21 is quite old now, and should be avoided if
possible. This information is kept here for historical purposes
only.</p>

<h3><a id="News-3.21.33" name="News-3.21.33"
href="manual_toc.html#News-3.21.33">D.5.1 Changes in release
3.21.33</a></h3>

<ul>
<li>Fixed problem when sending <code>SIGHUP</code> to
<code>mysqld</code>; <code>mysqld</code> core dumped when starting
from boot on some systems.</li>

<li>Fixed problem with losing a little memory for some
connections.</li>

<li><code>DELETE FROM tbl_name</code> without a <code>WHERE</code>
condition is now done the long way when you use <code>LOCK
TABLES</code> or if the table is in use, to avoid race
conditions.</li>

<li><code>INSERT INTO TABLE (timestamp_column) VALUES
(NULL);</code> didn't set timestamp.</li>
</ul>

<h3><a id="News-3.21.32" name="News-3.21.32"
href="manual_toc.html#News-3.21.32">D.5.2 Changes in release
3.21.32</a></h3>

<ul>
<li>Fixed some possible race conditions when doing many
reopen/close on the same tables under heavy load! This can happen
if you execute <code>mysqladmin refresh</code> often. This could in
some very rare cases corrupt the header of the index file and cause
error 126 or 138.</li>

<li>Fixed fatal bug in <code>refresh()</code> when running with the
<code>--skip-external-locking</code> option. There was a ``very
small'' time gap after a <code>mysqladmin refresh</code> when a
table could be corrupted if one thread updated a table while
another thread did <code>mysqladmin refresh</code> and another
thread started a new update ont the same table before the first
thread had finished. A refresh (or <code>--flush-tables</code>)
will now not return until all used tables are closed!</li>

<li><code>SELECT DISTINCT</code> with a <code>WHERE</code> clause
that didn't match any rows returned a row in some contexts (bug
only in 3.21.31).</li>

<li><code>GROUP BY</code> + <code>ORDER BY</code> returned one
empty row when no rows where found.</li>

<li>Fixed a bug in the range optimiser that wrote <code>Use_count:
Wrong count for ...</code> in the error log file.</li>
</ul>

<h3><a id="News-3.21.31" name="News-3.21.31"
href="manual_toc.html#News-3.21.31">D.5.3 Changes in release
3.21.31</a></h3>

<ul>
<li>Fixed a sign extension problem for the <code>TINYINT</code>
type on Irix.</li>

<li>Fixed problem with
<code>LEFT("constant_string",function)</code>.</li>

<li>Fixed problem with <code>FIND_IN_SET()</code>.</li>

<li><code>LEFT JOIN</code> core dumped if the second table is used
with a constant <code>WHERE/ON</code> expression that uniquely
identifies one record.</li>

<li>Fixed problems with <code>DATE_FORMAT()</code> and incorrect
dates. <code>DATE_FORMAT()</code> now ignores <code>'%'</code> to
make it possible to extend it more easily in the future.</li>
</ul>

<h3><a id="News-3.21.30" name="News-3.21.30"
href="manual_toc.html#News-3.21.30">D.5.4 Changes in release
3.21.30</a></h3>

<ul>
<li><code>mysql</code> now returns an exit code &gt; 0 if the query
returned an error.</li>

<li>Saving of command-line history to file in <code>mysql</code>
client. By Tommy Larsen <a
href="mailto:tommy@mix.hive.no">tommy@mix.hive.no</a>.</li>

<li>Fixed problem with empty lines that were ignored in
<tt>`mysql.cc'</tt>.</li>

<li>Save the pid of the signal handler thread in the pid file
instead of the pid of the main thread.</li>

<li>Added patch by <a
href="mailto:tommy@valley.ne.jp">tommy@valley.ne.jp</a> to support
Japanese characters SJIS and UJIS.</li>

<li>Changed <code>safe_mysqld</code> to redirect startup messages
to <code>'hostname'.err</code> instead of
<code>'hostname'.log</code> to reclaim file space on
<code>mysqladmin refresh</code>.</li>

<li><code>ENUM</code> always had the first entry as default
value.</li>

<li><code>ALTER TABLE</code> wrote two entries to the update
log.</li>

<li><code>sql_acc()</code> now closes the <code>mysql</code> grant
tables after a reload to save table space and memory.</li>

<li>Changed <code>LOAD DATA</code> to use less memory with tables
and <code>BLOB</code> columns.</li>

<li>Sorting on a function which made a division / 0 produced a
wrong set in some cases.</li>

<li>Fixed <code>SELECT</code> problem with <code>LEFT()</code> when
using the <code>czech</code> character set.</li>

<li>Fixed problem in <code>isamchk</code>; it couldn't repair a
packed table in a very unusual case.</li>

<li><code>SELECT</code> statements with <code>&amp;</code> or
<code>|</code> (bit functions) failed on columns with
<code>NULL</code> values.</li>

<li>When comparing a field = field, where one of the fields was a
part key, only the length of the part key was compared.</li>
</ul>

<h3><a id="News-3.21.29" name="News-3.21.29"
href="manual_toc.html#News-3.21.29">D.5.5 Changes in release
3.21.29</a></h3>

<ul>
<li><code>LOCK TABLES</code> + <code>DELETE from tbl_name</code>
never removed locks properly.</li>

<li>Fixed problem when grouping on an <code>OR</code>
function.</li>

<li>Fixed permission problem with <code>umask()</code> and creating
new databases.</li>

<li>Fixed permission problem on result file with <code>SELECT ...
INTO OUTFILE ...</code></li>

<li>Fixed problem in range optimiser (core dump) for a very complex
query.</li>

<li>Fixed problem when using <code>MIN(integer)</code> or
<code>MAX(integer)</code> in <code>GROUP BY</code>.</li>

<li>Fixed bug on Alpha when using integer keys. (Other keys worked
on Alpha.)</li>

<li>Fixed bug in <code>WEEK("XXXX-xx-01")</code>.</li>
</ul>

<h3><a id="News-3.21.28" name="News-3.21.28"
href="manual_toc.html#News-3.21.28">D.5.6 Changes in release
3.21.28</a></h3>

<ul>
<li>Fixed socket permission (clients couldn't connect to Unix
socket on Linux).</li>

<li>Fixed bug in record caches; for some queries, you could get
<code>Error from table handler: #</code> on some operating
systems.</li>
</ul>

<h3><a id="News-3.21.27" name="News-3.21.27"
href="manual_toc.html#News-3.21.27">D.5.7 Changes in release
3.21.27</a></h3>

<ul>
<li>Added user level lock functions
<code>GET_LOCK(string,timeout)</code>,
<code>RELEASE_LOCK(string)</code>.</li>

<li>Added <code>Opened_tables</code> to <code>show
status</code>.</li>

<li>Changed connect timeout to 3 seconds to make it somewhat harder
for crackers to kill <code>mysqld</code> through telnet +
TCP/IP.</li>

<li>Fixed bug in range optimiser when using <code>WHERE key_part_1
&gt;= something AND key_part_2 &lt;= something_else</code>.</li>

<li>Changed <code>configure</code> for detection of FreeBSD 3.0
9803xx and above</li>

<li><code>WHERE</code> with <code>string_col_key =
constant_string</code> didn't always find all rows if the column
had many values differing only with characters of the same sort
value (like e and 'e).</li>

<li>Strings keys looked up with 'ref' were not compared in
case-sensitive fashion.</li>

<li>Added <code>umask()</code> to make log files non-readable for
normal users.</li>

<li>Ignore users with old (8-byte) password on startup if not using
<code>--old-protocol</code> option to <code>mysqld</code>.</li>

<li><code>SELECT</code> which matched all key fields returned the
values in the case of the matched values, not of the found values.
(Minor problem.)</li>
</ul>

<h3><a id="News-3.21.26" name="News-3.21.26"
href="manual_toc.html#News-3.21.26">D.5.8 Changes in release
3.21.26</a></h3>

<ul>
<li><code>FROM_DAYS(0)</code> now returns "0000-00-00".</li>

<li>In <code>DATE_FORMAT()</code>, PM and AM were swapped for hours
00 and 12.</li>

<li>Extended the default maximum key size to 256.</li>

<li>Fixed bug when using <code>BLOB</code>/<code>TEXT</code> in
<code>GROUP BY</code> with many tables.</li>

<li>An <code>ENUM</code> field that is not declared <code>NOT
NULL</code> has <code>NULL</code> as the default value.
(Previously, the default value was the first enumeration
value.)</li>

<li>Fixed bug in the join optimiser code when using many part keys
on the same key: <code>INDEX
(Organisation,Surname(35),Initials(35))</code>.</li>

<li>Added some tests to the table order optimiser to get some cases
with <code>SELECT ... FROM many_tables</code> much faster.</li>

<li>Added a retry loop around <code>accept()</code> to possibly fix
some problems on some Linux machines.</li>
</ul>

<h3><a id="News-3.21.25" name="News-3.21.25"
href="manual_toc.html#News-3.21.25">D.5.9 Changes in release
3.21.25</a></h3>

<ul>
<li>Changed <code>typedef 'string'</code> to <code>typedef
'my_string'</code> for better portability.</li>

<li>You can now kill threads that are waiting on a disk-full
condition.</li>

<li>Fixed some problems with UDF functions.</li>

<li>Added long options to <code>isamchk</code>. Try <code>isamchk
--help</code>.</li>

<li>Fixed a bug when using 8 bytes long (alpha);
<code>filesort()</code> didn't work. Affects <code>DISTINCT</code>,
<code>ORDER BY</code> and <code>GROUP BY</code> on 64-bit
processors.</li>
</ul>

<h3><a id="News-3.21.24" name="News-3.21.24"
href="manual_toc.html#News-3.21.24">D.5.10 Changes in release
3.21.24</a></h3>

<ul>
<li>Dynamic loadable functions. Based on source from Alexis
Mikhailov.</li>

<li>You couldn't delete from a table if no one had done a
<code>SELECT</code> on the table.</li>

<li>Fixed problem with range optimiser with many <code>OR</code>
operators on key parts inside each other.</li>

<li>Recoded <code>MIN()</code> and <code>MAX()</code> to work
properly with strings and <code>HAVING</code>.</li>

<li>Changed default umask value for new files from
<code>0664</code> to <code>0660</code>.</li>

<li>Fixed problem with <code>LEFT JOIN</code> and constant
expressions in the <code>ON</code> part.</li>

<li>Added Italian error messages from <a
href="mailto:brenno@dewinter.com">brenno@dewinter.com</a>.</li>

<li><code>configure</code> now works better on OSF/1 (tested on
4.0D).</li>

<li>Added hooks to allow <code>LIKE</code> optimisation with
international character support.</li>

<li>Upgraded <code>DBI</code> to 0.93.</li>
</ul>

<h3><a id="News-3.21.23" name="News-3.21.23"
href="manual_toc.html#News-3.21.23">D.5.11 Changes in release
3.21.23</a></h3>

<ul>
<li>The following symbols are now reserved words:
<code>TIME</code>, <code>DATE</code>, <code>TIMESTAMP</code>,
<code>TEXT</code>, <code>BIT</code>, <code>ENUM</code>,
<code>NO</code>, <code>ACTION</code>, <code>CHECK</code>,
<code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>,
<code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>,
<code>STATUS</code>, <code>VARIABLES</code>.</li>

<li>Setting a <code>TIMESTAMP</code> to <code>NULL</code> in
<code>LOAD DATA INFILE ...</code> didn't set the current time for
the <code>TIMESTAMP</code>.</li>

<li>Fix <code>BETWEEN</code> to recognise binary strings. Now
<code>BETWEEN</code> is case-sensitive.</li>

<li>Added <code>--skip-thread-priority</code> option to
<code>mysqld</code>, for systems where <code>mysqld</code>'s thread
scheduling doesn't work properly (BSDI 3.1).</li>

<li>Added ODBC functions <code>DAYNAME()</code> and
<code>MONTHNAME()</code>.</li>

<li>Added function <code>TIME_FORMAT()</code>. This works like
<code>DATE_FORMAT()</code>, but takes a time string
(<code>'HH:MM:DD'</code>) as argument.</li>

<li>Fixed unlikely(?) key optimiser bug when using <code>OR</code>s
of key parts inside <code>AND</code>s.</li>

<li>Added <code>variables</code> command to
<code>mysqladmin</code>.</li>

<li>A lot of small changes to the binary releases.</li>

<li>Fixed a bug in the new protocol from MySQL Version
3.21.20.</li>

<li>Changed <code>ALTER TABLE</code> to work with Windows (Windows
can't rename open files). Also fixed a couple of small bugs in the
Windows version.</li>

<li>All standard MySQL clients are now ported to
MySQL-Windows.</li>

<li>MySQL can now be started as a service on NT.</li>
</ul>

<h3><a id="News-3.21.22" name="News-3.21.22"
href="manual_toc.html#News-3.21.22">D.5.12 Changes in release
3.21.22</a></h3>

<ul>
<li>Starting with this version, all MySQL distributions will be
configured, compiled and tested with <code>crash-me</code> and the
benchmarks on the following platforms: SunOS 5.6 sun4u, SunOS 5.5.1
sun4u, SunOS 4.14 sun4c, SunOS 5.6 i86pc, Irix 6.3 mips5k, HP-UX
10.20 hppa, AIX 4.2.1 ppc, OSF/1 V4.0 alpha, FreeBSD 2.2.2 i86pc
and BSDI 3.1 i386.</li>

<li>Fix <code>COUNT(*)</code> problems when the <code>WHERE</code>
clause didn't match any records. (Bug from 3.21.17.)</li>

<li>Removed that <code>NULL = NULL</code> is true. Now you must use
<code>IS NULL</code> or <code>IS NOT NULL</code> to test whether a
value is <code>NULL</code>. (This is according to ANSI SQL but may
break old applications that are ported from <code>mSQL</code>.) You
can get the old behaviour by compiling with
<code>-DmSQL_COMPLIANT</code>.</li>

<li>Fixed bug that core dumped when using many <code>LEFT OUTER
JOIN</code> clauses.</li>

<li>Fixed bug in <code>ORDER BY</code> on string formula with
possible <code>NULL</code> values.</li>

<li>Fixed problem in range optimiser when using <code>&lt;=</code>
on sub index.</li>

<li>Added functions <code>DAYOFYEAR()</code>,
<code>DAYOFMONTH()</code>, <code>MONTH()</code>,
<code>YEAR()</code>, <code>WEEK()</code>, <code>QUARTER()</code>,
<code>HOUR()</code>, <code>MINUTE()</code>, <code>SECOND()</code>
and <code>FIND_IN_SET()</code>.</li>

<li>Added <code>SHOW VARIABLES</code> command.</li>

<li>Added support of ``long constant strings'' from ANSI SQL: 

<pre>
mysql&gt; SELECT 'first ' 'second';       -&gt; 'first second'
</pre>
</li>

<li>Upgraded Msql-Mysql-modules to 1.1825.</li>

<li>Upgraded <code>mysqlaccess</code> to 2.02.</li>

<li>Fixed problem with Russian character set and
<code>LIKE</code>.</li>

<li>Ported to OpenBSD 2.1.</li>

<li>New Dutch error messages.</li>
</ul>

<h3><a id="News-3.21.21a" name="News-3.21.21a"
href="manual_toc.html#News-3.21.21a">D.5.13 Changes in release
3.21.21a</a></h3>

<ul>
<li>Configure changes for some operating systems.</li>
</ul>

<h3><a id="News-3.21.21" name="News-3.21.21"
href="manual_toc.html#News-3.21.21">D.5.14 Changes in release
3.21.21</a></h3>

<ul>
<li>Fixed optimiser bug when using <code>WHERE data_field =
date_field2 AND date_field2 = constant</code>.</li>

<li>Added <code>SHOW STATUS</code> command.</li>

<li>Removed <tt>`manual.ps'</tt> from the source distribution to
make it smaller.</li>
</ul>

<h3><a id="News-3.21.20" name="News-3.21.20"
href="manual_toc.html#News-3.21.20">D.5.15 Changes in release
3.21.20</a></h3>

<ul>
<li>Changed the maximum table name and column name lengths from 32
to 64.</li>

<li>Aliases can now be of ``any'' length.</li>

<li>Fixed <code>mysqladmin stat</code> to return the right number
of queries.</li>

<li>Changed protocol (downward compatible) to mark if a column has
the <code>AUTO_INCREMENT</code> attribute or is a
<code>TIMESTAMP</code>. This is needed for the new Java
driver.</li>

<li>Added Hebrew sorting order by Zeev Suraski.</li>

<li>Solaris 2.6: Fixed <code>configure</code> bugs and increased
maximum table size from 2G to 4G.</li>
</ul>

<h3><a id="News-3.21.19" name="News-3.21.19"
href="manual_toc.html#News-3.21.19">D.5.16 Changes in release
3.21.19</a></h3>

<ul>
<li>Upgraded <code>DBD</code> to 1.1823. This version implements
<code>mysql_use_result</code> in <code>DBD-Mysql</code>.</li>

<li>Benchmarks updated for empress (by Luuk).</li>

<li>Fixed a case of slow range searching.</li>

<li>Configure fixes (<tt>`Docs'</tt> directory).</li>

<li>Added function <code>REVERSE()</code> (by Zeev Suraski).</li>
</ul>

<h3><a id="News-3.21.18" name="News-3.21.18"
href="manual_toc.html#News-3.21.18">D.5.17 Changes in release
3.21.18</a></h3>

<ul>
<li>Issue error message if client C functions are called in wrong
order.</li>

<li>Added automatic reconnect to the <tt>`libmysql.c'</tt> library.
If a write command fails, an automatic reconnect is done.</li>

<li>Small sort sets no longer use temporary files.</li>

<li>Upgraded <code>DBI</code> to 0.91.</li>

<li>Fixed a couple of problems with <code>LEFT OUTER
JOIN</code>.</li>

<li>Added <code>CROSS JOIN</code> syntax. <code>CROSS</code> is now
a reserved word.</li>

<li>Recoded <code>yacc</code>/<code>bison</code> stack allocation
to be even safer and to allow MySQL to handle even bigger
expressions.</li>

<li>Fixed a couple of problems with the update log.</li>

<li><code>ORDER BY</code> was slow when used with key ranges.</li>
</ul>

<h3><a id="News-3.21.17" name="News-3.21.17"
href="manual_toc.html#News-3.21.17">D.5.18 Changes in release
3.21.17</a></h3>

<ul>
<li>Changed documentation string of
<code>--with-unix-socket-path</code> to avoid confusion.</li>

<li>Added ODBC and ANSI SQL style <code>LEFT OUTER
JOIN</code>.</li>

<li>The following are new reserved words: <code>LEFT</code>,
<code>NATURAL</code>, <code>USING</code>.</li>

<li>The client library now uses the value of the environment
variable <code>MYSQL_HOST</code> as the default host if it's
defined.</li>

<li><code>SELECT col_name, SUM(expr)</code> now returns
<code>NULL</code> for <code>col_name</code> when there are matching
rows.</li>

<li>Fixed problem with comparing binary strings and
<code>BLOB</code>s with ASCII characters over 127.</li>

<li>Fixed lock problem: when freeing a read lock on a table with
multiple read locks, a thread waiting for a write lock would have
been given the lock. This shouldn't affect data integrity, but
could possibly make <code>mysqld</code> restart if one thread was
reading data that another thread modified.</li>

<li><code>LIMIT offset,count</code> didn't work in <code>INSERT ...
SELECT</code>.</li>

<li>Optimised key block caching. This will be quicker than the old
algorithm when using bigger key caches.</li>
</ul>

<h3><a id="News-3.21.16" name="News-3.21.16"
href="manual_toc.html#News-3.21.16">D.5.19 Changes in release
3.21.16</a></h3>

<ul>
<li>Added ODBC 2.0 &amp; 3.0 functions <code>POWER()</code>,
<code>SPACE()</code>, <code>COT()</code>, <code>DEGREES()</code>,
<code>RADIANS()</code>, <code>ROUND(2 arg)</code> and
<code>TRUNCATE()</code>.</li>

<li><strong>Warning: Incompatible change!</strong>
<code>LOCATE()</code> parameters were swapped according to ODBC
standard. Fixed.</li>

<li>Added function <code>TIME_TO_SEC()</code>.</li>

<li>In some cases, default values were not used for <code>NOT
NULL</code> fields.</li>

<li>Timestamp wasn't always updated properly in <code>UPDATE SET
...</code> statements.</li>

<li>Allow empty strings as default values for <code>BLOB</code> and
<code>TEXT</code>, to be compatible with
<code>mysqldump</code>.</li>
</ul>

<h3><a id="News-3.21.15" name="News-3.21.15"
href="manual_toc.html#News-3.21.15">D.5.20 Changes in release
3.21.15</a></h3>

<ul>
<li><strong>Warning: Incompatible change!</strong>
<code>mysqlperl</code> is now from Msql-Mysql-modules. This means
that <code>connect()</code> now takes <code>host</code>,
<code>database</code>, <code>user</code>, <code>password</code>
arguments! The old version took <code>host</code>,
<code>database</code>, <code>password</code>,
<code>user</code>.</li>

<li>Allow <code>DATE '1997-01-01'</code>, <code>TIME
'12:10:10'</code> and <code>TIMESTAMP '1997-01-01 12:10:10'</code>
formats required by ANSI SQL. <strong>Warning: Incompatible
change!</strong> This has the unfortunate side-effect that you no
longer can have columns named <code>DATE</code>, <code>TIME</code>
or <code>TIMESTAMP</code>. :( Old columns can still be accessed
through <code>tablename.columnname</code>!)</li>

<li>Changed Makefiles to hopefully work better with BSD systems.
Also, <tt>`manual.dvi'</tt> is now included in the distribution to
avoid having stupid <code>make</code> programs trying to rebuild
it.</li>

<li><code>readline</code> library upgraded to version 2.1.</li>

<li>A new sortorder german-1. That is a normal ISO-Latin1 with a
german sort order.</li>

<li>Perl <code>DBI</code>/<code>DBD</code> is now included in the
distribution. <code>DBI</code> is now the recommended way to
connect to MySQL from Perl.</li>

<li>New portable benchmark suite with <code>DBD</code>, with test
results from <code>mSQL</code> 2.0.3, MySQL, PostgreSQL 6.2.1 and
Solid server 2.2.</li>

<li><code>crash-me</code> is now included with the benchmarks; this
is a Perl program designed to find as many limits as possible in a
SQL server. Tested with <code>mSQL</code>, PostgreSQL, Solid and
MySQL.</li>

<li>Fixed bug in range-optimiser that crashed MySQL on some
queries.</li>

<li>Table and column name completion for <code>mysql</code>
command-line tool, by Zeev Suraski and Andi Gutmans.</li>

<li>Added new command <code>REPLACE</code> that works like
<code>INSERT</code> but replaces conflicting records with the new
record. <code>REPLACE INTO TABLE ... SELECT ...</code> works
also.</li>

<li>Added new commands <code>CREATE DATABASE db_name</code> and
<code>DROP DATABASE db_name</code>.</li>

<li>Added <code>RENAME</code> option to <code>ALTER TABLE</code>:
<code>ALTER TABLE name RENAME TO new_name</code>.</li>

<li><code>make_binary_distribution</code> now includes
<tt>`libgcc.a'</tt> in <tt>`libmysqlclient.a'</tt>. This should
make linking work for people who don't have <code>gcc</code>.</li>

<li>Changed <code>net_write()</code> to <code>my_net_write()</code>
because of a name conflict with Sybase.</li>

<li><a id="IDX1840" name="IDX1840"></a> <a id="IDX1841"
name="IDX1841"></a> New function <code>DAYOFWEEK()</code>
compatible with ODBC.</li>

<li>Stack checking and <code>bison</code> memory overrun checking
to make MySQL safer with weird queries.</li>
</ul>

<h3><a id="News-3.21.14b" name="News-3.21.14b"
href="manual_toc.html#News-3.21.14b">D.5.21 Changes in release
3.21.14b</a></h3>

<ul>
<li>Fixed a couple of small <code>configure</code> problems on some
platforms.</li>
</ul>

<h3><a id="News-3.21.14a" name="News-3.21.14a"
href="manual_toc.html#News-3.21.14a">D.5.22 Changes in release
3.21.14a</a></h3>

<ul>
<li>Ported to SCO Openserver 5.0.4 with FSU Pthreads.</li>

<li>HP-UX 10.20 should work.</li>

<li>Added new function <code>DATE_FORMAT()</code>.</li>

<li>Added <code>NOT IN</code>.</li>

<li>Added automatic removal of 'ODBC function conversions':
<code>{fn now() }</code></li>

<li>Handle ODBC 2.50.3 option flags.</li>

<li>Fixed comparison of <code>DATE</code> and <code>TIME</code>
values with <code>NULL</code>.</li>

<li>Changed language name from germany to german to be consistent
with the other language names.</li>

<li>Fixed sorting problem on functions returning a
<code>FLOAT</code>. Previously, the values were converted to
<code>INT</code>s before sorting.</li>

<li>Fixed slow sorting when sorting on key field when using
<code>key_column=constant</code>.</li>

<li>Sorting on calculated <code>DOUBLE</code> values sorted on
integer results instead.</li>

<li><code>mysql</code> no longer requires a database argument.</li>

<li>Changed the place where <code>HAVING</code> should be.
According to ANSI, it should be after <code>GROUP BY</code> but
before <code>ORDER BY</code>. MySQL Version 3.20 incorrectly had it
last.</li>

<li>Added Sybase command <code>USE DATABASE</code> to start using
another database.</li>

<li>Added automatic adjusting of number of connections and table
cache size if the maximum number of files that can be opened is
less than needed. This should fix that <code>mysqld</code> doesn't
crash even if you haven't done a <code>ulimit -n 256</code> before
starting <code>mysqld</code>.</li>

<li>Added lots of limit checks to make it safer when running with
too little memory or when doing weird queries.</li>
</ul>

<h3><a id="News-3.21.13" name="News-3.21.13"
href="manual_toc.html#News-3.21.13">D.5.23 Changes in release
3.21.13</a></h3>

<ul>
<li>Added retry of interrupted reads and clearing of
<code>errno</code>. This makes Linux systems much safer!</li>

<li>Fixed locking bug when using many aliases on the same table in
the same <code>SELECT</code>.</li>

<li>Fixed bug with <code>LIKE</code> on number key.</li>

<li>New error message so you can check whether the connection was
lost while the command was running or whether the connection was
down from the start.</li>

<li>Added <code>--table</code> option to <code>mysql</code> to
print in table format. Moved time and row information after query
result. Added automatic reconnect of lost connections.</li>

<li>Added <code>!=</code> as a synonym for
<code>&lt;&gt;</code>.</li>

<li>Added function <code>VERSION()</code> to make easier logs.</li>

<li>New multi-user test <tt>`tests/fork_test.pl'</tt> to put some
strain on the thread library.</li>
</ul>

<h3><a id="News-3.21.12" name="News-3.21.12"
href="manual_toc.html#News-3.21.12">D.5.24 Changes in release
3.21.12</a></h3>

<ul>
<li>Fixed <code>ftruncate()</code> call in MIT-pthreads. This made
<code>isamchk</code> destroy the <tt>`.ISM'</tt> files on (Free)BSD
2.x systems.</li>

<li>Fixed broken <code>__P_</code> patch in MIT-pthreads.</li>

<li>Many memory overrun checks. All string functions now return
<code>NULL</code> if the returned string should be longer than
<code>max_allowed_packet</code> bytes.</li>

<li>Changed the name of the <code>INTERVAL</code> type to
<code>ENUM</code>, because <code>INTERVAL</code> is used in ANSI
SQL.</li>

<li>In some cases, doing a <code>JOIN</code> + <code>GROUP</code> +
<code>INTO OUTFILE</code>, the result wasn't grouped.</li>

<li><code>LIKE</code> with <code>'_'</code> as last character
didn't work. Fixed.</li>

<li>Added extended ANSI SQL <code>TRIM()</code> function.</li>

<li>Added <code>CURTIME()</code>.</li>

<li>Added <code>ENCRYPT()</code> function by Zeev Suraski.</li>

<li>Fixed better <code>FOREIGN KEY</code> syntax skipping. New
reserved words: <code>MATCH</code>, <code>FULL</code>,
<code>PARTIAL</code>.</li>

<li><code>mysqld</code> now allows IP number and hostname for the
<code>--bind-address</code> option.</li>

<li>Added <code>SET CHARACTER SET cp1251_koi8</code> to enable
conversions of data to and from the <code>cp1251_koi8</code>
character set.</li>

<li>Lots of changes for Windows 95 port. In theory, this version
should now be easily portable to Windows 95.</li>

<li>Changed the <code>CREATE COLUMN</code> syntax of <code>NOT
NULL</code> columns to be after the <code>DEFAULT</code> value, as
specified in the ANSI SQL standard. This will make
<code>mysqldump</code> with <code>NOT NULL</code> and default
values incompatible with MySQL Version 3.20.</li>

<li>Added many function name aliases so the functions can be used
with ODBC or ANSI SQL92 syntax.</li>

<li>Fixed syntax of <code>ALTER TABLE tbl_name ALTER COLUMN
col_name SET DEFAULT NULL</code>.</li>

<li>Added <code>CHAR</code> and <code>BIT</code> as synonyms for
<code>CHAR(1)</code>.</li>

<li>Fixed core dump when updating as a user who has only
<code>SELECT</code> privilege.</li>

<li><code>INSERT ... SELECT ... GROUP BY</code> didn't work in some
cases. An <code>Invalid use of group function</code> error
occurred.</li>

<li>When using <code>LIMIT</code>, <code>SELECT</code> now always
uses keys instead of record scan. This will give better performance
on <code>SELECT</code> and a <code>WHERE</code> that matches many
rows.</li>

<li>Added Russian error messages.</li>
</ul>

<h3><a id="News-3.21.11" name="News-3.21.11"
href="manual_toc.html#News-3.21.11">D.5.25 Changes in release
3.21.11</a></h3>

<ul>
<li>Configure changes.</li>

<li>MySQL now works with the new thread library on BSD/OS 3.0.</li>

<li>Added new group functions <code>BIT_OR()</code> and
<code>BIT_AND()</code>.</li>

<li>Added compatibility functions <code>CHECK</code> and
<code>REFERENCES</code>. <code>CHECK</code> is now a reserved
word.</li>

<li>Added <code>ALL</code> option to <code>GRANT</code> for better
compatibility. (<code>GRANT</code> is still a dummy function.)</li>

<li>Added partly-translated Dutch error messages.</li>

<li>Fixed bug in <code>ORDER BY</code> and <code>GROUP BY</code>
with <code>NULL</code> columns.</li>

<li>Added function <code>LAST_INSERT_ID()</code> SQL function to
retrieve last <code>AUTO_INCREMENT</code> value. This is intended
for clients to ODBC that can't use the
<code>mysql_insert_id()</code> API function, but can be used by any
client.</li>

<li>Added <code>--flush-logs</code> option to
<code>mysqladmin</code>.</li>

<li>Added command <code>STATUS</code> to <code>mysql</code>.</li>

<li>Fixed problem with <code>ORDER BY</code>/<code>GROUP BY</code>
because of bug in <code>gcc</code>.</li>

<li>Fixed problem with <code>INSERT ... SELECT ... GROUP
BY</code>.</li>
</ul>

<h3><a id="News-3.21.10" name="News-3.21.10"
href="manual_toc.html#News-3.21.10">D.5.26 Changes in release
3.21.10</a></h3>

<ul>
<li>New <code>mysqlaccess</code>.</li>

<li><code>CREATE</code> now supports all ODBC types and the
<code>mSQL</code> <code>TEXT</code> type. All ODBC 2.5 functions
are also supported (added <code>REPEAT</code>). This provides
better portability.</li>

<li>Added text types <code>TINYTEXT</code>, <code>TEXT</code>,
<code>MEDIUMTEXT</code> and <code>LONGTEXT</code>. These are
actually <code>BLOB</code>types, but all searching is done in
case-insensitive fashion.</li>

<li>All old <code>BLOB</code> fields are now <code>TEXT</code>
fields. This only changes that all searching on strings is done in
case-sensitive fashion. You must do an <code>ALTER TABLE</code> and
change the field type to <code>BLOB</code> if you want to have
tests done in case-sensitive fashion.</li>

<li>Fixed some <code>configure</code> issues.</li>

<li>Made the locking code a bit safer. Fixed very unlikely deadlock
situation.</li>

<li>Fixed a couple of bugs in the range optimiser. Now the new
range benchmark <code>test-select</code> works.</li>
</ul>

<h3><a id="News-3.21.9" name="News-3.21.9"
href="manual_toc.html#News-3.21.9">D.5.27 Changes in release
3.21.9</a></h3>

<ul>
<li>Added <code>--enable-unix-socket=pathname</code> option to
<code>configure</code>.</li>

<li>Fixed a couple of portability problems with include files.</li>

<li>Fixed bug in range calculation that could return empty set when
searching on multiple key with only one entry (very rare).</li>

<li>Most things ported to FSU Pthreads, which should allow MySQL to
run on Caldera (SCO). See section <a
href="manual.html#Caldera">2.6.6.9 Caldera (SCO) Notes</a>.</li>
</ul>

<h3><a id="News-3.21.8" name="News-3.21.8"
href="manual_toc.html#News-3.21.8">D.5.28 Changes in release
3.21.8</a></h3>

<ul>
<li>Works now in Solaris 2.6.</li>

<li>Added handling of calculation of <code>SUM()</code> functions.
For example, you can now use
<code>SUM(column)/COUNT(column)</code>.</li>

<li>Added handling of trigometric functions: <code>PI()</code>,
<code>ACOS()</code>, <code>ASIN()</code>, <code>ATAN()</code>,
<code>COS()</code>, <code>SIN()</code> and <code>TAN()</code>.</li>

<li>New languages: norwegian, norwegian-ny and portuguese.</li>

<li>Fixed parameter bug in <code>net_print()</code> in
<tt>`procedure.cc'</tt>.</li>

<li>Fixed a couple of memory leaks.</li>

<li>Now allow also the old <code>SELECT ... INTO OUTFILE</code>
syntax.</li>

<li>Fixed bug with <code>GROUP BY</code> and <code>SELECT</code> on
key with many values.</li>

<li><code>mysql_fetch_lengths()</code> sometimes returned incorrect
lengths when you used <code>mysql_use_result()</code>. This
affected at least some cases of <code>mysqldump
--quick</code>.</li>

<li>Fixed bug in optimisation of <code>WHERE const op
field</code>.</li>

<li>Fixed problem when sorting on <code>NULL</code> fields.</li>

<li>Fixed a couple of 64-bit (Alpha) problems.</li>

<li>Added <code>--pid-file=#</code> option to
<code>mysqld</code>.</li>

<li>Added date formatting to <code>FROM_UNIXTIME()</code>,
originally by Zeev Suraski.</li>

<li>Fixed bug in <code>BETWEEN</code> in range optimiser (did only
test = of the first argument).</li>

<li>Added machine-dependent files for MIT-pthreads i386-SCO. There
is probably more to do to get this to work on SCO 3.5.</li>
</ul>

<h3><a id="News-3.21.7" name="News-3.21.7"
href="manual_toc.html#News-3.21.7">D.5.29 Changes in release
3.21.7</a></h3>

<ul>
<li>Changed <tt>`Makefile.am'</tt> to take advantage of Automake
1.2.</li>

<li>Added the beginnings of a benchmark suite.</li>

<li>Added more secure password handling.</li>

<li>Added new client function <code>mysql_errno()</code>, to get
the error number of the error message. This makes error checking in
the client much easier. This makes the new server incompatible with
the 3.20.x server when running without <code>--old-protocol</code>.
The client code is backward-compatible. More information can be
found in the <tt>`README'</tt> file!</li>

<li>Fixed some problems when using very long, illegal names.</li>
</ul>

<h3><a id="News-3.21.6" name="News-3.21.6"
href="manual_toc.html#News-3.21.6">D.5.30 Changes in release
3.21.6</a></h3>

<ul>
<li>Fixed more portability issues (incorrect <code>sigwait</code>
and <code>sigset</code> defines).</li>

<li><code>configure</code> should now be able to detect the last
argument to <code>accept()</code>.</li>
</ul>

<h3><a id="News-3.21.5" name="News-3.21.5"
href="manual_toc.html#News-3.21.5">D.5.31 Changes in release
3.21.5</a></h3>

<ul>
<li>Should now work with FreeBSD 3.0 if used with
<tt>`FreeBSD-3.0-libc_r-1.0.diff'</tt>, which can be found at <a
href="http://www.mysql.com/downloads/patches.html">http://www.mysql.com/downloads/patches.html</a>.</li>

<li>Added new <code>-O tmp_table_size=#</code> option to
<code>mysqld</code>.</li>

<li>New function <code>FROM_UNIXTIME(timestamp)</code> which
returns a date string in <code>'YYYY-MM-DD HH:MM:DD'</code>
format.</li>

<li>New function <code>SEC_TO_TIME(seconds)</code> which returns a
string in <code>'HH:MM:SS'</code> format.</li>

<li>New function <code>SUBSTRING_INDEX()</code>, originally by Zeev
Suraski.</li>
</ul>

<h3><a id="News-3.21.4" name="News-3.21.4"
href="manual_toc.html#News-3.21.4">D.5.32 Changes in release
3.21.4</a></h3>

<ul>
<li>Should now configure and compile on OSF/1 4.0 with the DEC
compiler.</li>

<li>Configuration and compilation on BSD/OS 3.0 works, but due to
some bugs in BSD/OS 3.0, <code>mysqld</code> doesn't work on it
yet.</li>

<li>Configuration and compilation on FreeBSD 3.0 works, but I
couldn't get <code>pthread_create</code> to work.</li>
</ul>

<h3><a id="News-3.21.3" name="News-3.21.3"
href="manual_toc.html#News-3.21.3">D.5.33 Changes in release
3.21.3</a></h3>

<ul>
<li>Added reverse check lookup of hostnames to get better
security.</li>

<li>Fixed some possible buffer overflows if filenames that are too
long are used.</li>

<li><code>mysqld</code> doesn't accept hostnames that start with
digits followed by a <code>'.'</code>, because the hostname may
look like an IP number.</li>

<li>Added <code>--skip-networking</code> option to
<code>mysqld</code>, to allow only socket connections. (This will
not work with MIT-pthreads!)</li>

<li>Added check of too long table names for alias.</li>

<li>Added check if database name is okay.</li>

<li>Added check if too long table names.</li>

<li>Removed incorrect <code>free()</code> that killed the server on
<code>CREATE DATABASE</code> or <code>DROP DATABASE</code>.</li>

<li>Changed some <code>mysqld</code> <code>-O</code> options to
better names.</li>

<li>Added <code>-O join_cache_size=#</code> option to
<code>mysqld</code>.</li>

<li>Added <code>-O max_join_size=#</code> option to
<code>mysqld</code>, to be able to set a limit how big queries (in
this case big = slow) one should be able to handle without
specifying <code>SET SQL_BIG_SELECTS=1</code>. A # = is about 10
examined records. The default is ``unlimited''.</li>

<li>When comparing a <code>TIME</code>, <code>DATE</code>,
<code>DATETIME</code> or <code>TIMESTAMP</code> column to a
constant, the constant is converted to a time value before
performing the comparison. This will make it easier to get ODBC
(particularly Access97) to work with the above types. It should
also make dates easier to use and the comparisons should be quicker
than before.</li>

<li>Applied patch from Jochen Wiedmann that allows
<code>query()</code> in <code>mysqlperl</code> to take a query with
<code>\0</code> in it.</li>

<li>Storing a timestamp with a 2-digit year (<code>YYMMDD</code>)
didn't work.</li>

<li>Fix that timestamp wasn't automatically updated if set in an
<code>UPDATE</code> clause.</li>

<li>Now the automatic timestamp field is the FIRST timestamp
field.</li>

<li><code>SELECT * INTO OUTFILE</code>, which didn't correctly if
the outfile already existed.</li>

<li><code>mysql</code> now shows the thread ID when starting or
doing a reconnect.</li>

<li>Changed the default sort buffer size from 2M to 1M.</li>
</ul>

<h3><a id="News-3.21.2" name="News-3.21.2"
href="manual_toc.html#News-3.21.2">D.5.34 Changes in release
3.21.2</a></h3>

<ul>
<li>The range optimiser is coded, but only 85% tested. It can be
enabled with <code>--new</code>, but it crashes core a lot
yet...</li>

<li>More portable. Should compile on AIX and alpha-digital. At
least the <code>isam</code> library should be relatively 64-bit
clean.</li>

<li>New <code>isamchk</code> which can detect and fix more
problems.</li>

<li>New options for <code>isamlog</code>.</li>

<li>Using new version of Automake.</li>

<li>Many small portability changes (from the AIX and alpha-digital
port) Better checking of pthread(s) library.</li>

<li>czech error messages by <a
href="mailto:snajdr@pvt.net">snajdr@pvt.net</a>.</li>

<li>Decreased size of some buffers to get fewer problems on systems
with little memory. Also added more checks to handle ``out of
memory'' problems.</li>

<li><code>mysqladmin</code>: you can now do <code>mysqladmin kill
5,6,7,8</code> to kill multiple threads.</li>

<li>When the maximum connection limit is reached, one extra
connection by a user with the <strong>process_acl</strong>
privilege is granted.</li>

<li>Added <code>-O backlog=#</code> option to
<code>mysqld</code>.</li>

<li>Increased maximum packet size from 512K to 1024K for
client.</li>

<li>Almost all of the function code is now tested in the internal
test suite.</li>

<li><code>ALTER TABLE</code> now returns warnings from field
conversions.</li>

<li>Port changed to 3306 (got it reserved from ISI).</li>

<li>Added a fix for Visual FoxBase so that any schema name from a
table specification is automatically removed.</li>

<li>New function <code>ASCII()</code>.</li>

<li>Removed function <code>BETWEEN(a,b,c)</code>. Use the standard
ANSI syntax instead: <code>expr BETWEEN expr AND expr</code>.</li>

<li>MySQL no longer has to use an extra temporary table when
sorting on functions or <code>SUM()</code> functions.</li>

<li>Fixed bug that you couldn't use
<code>tbl_name.field_name</code> in <code>UPDATE</code>.</li>

<li>Fixed <code>SELECT DISTINCT</code> when using 'hidden group'.
For example: 

<pre>
mysql&gt; SELECT DISTINCT MOD(some_field,10) FROM test
    -&gt;        GROUP BY some_field;
</pre>

Note: <code>some_field</code> is normally in the
<code>SELECT</code> part. ANSI SQL should require it.</li>
</ul>

<h3><a id="News-3.21.0" name="News-3.21.0"
href="manual_toc.html#News-3.21.0">D.5.35 Changes in release
3.21.0</a></h3>

<ul>
<li>New reserved words used: <code>INTERVAL</code>,
<code>EXPLAIN</code>, <code>READ</code>, <code>WRITE</code>,
<code>BINARY</code>.</li>

<li>Added ODBC function <code>CHAR(num,...)</code>.</li>

<li>New operator <code>IN</code>. This uses a binary search to find
a match.</li>

<li>New command <code>LOCK TABLES tbl_name [AS alias] {READ|WRITE}
...</code></li>

<li>Added <code>--log-update</code> option to <code>mysqld</code>,
to get a log suitable for incremental updates.</li>

<li>New command <code>EXPLAIN SELECT ...</code> to get information
about how the optimiser will do the join.</li>

<li>For easier client code, the client should no longer use
<code>FIELD_TYPE_TINY_BLOB</code>,
<code>FIELD_TYPE_MEDIUM_BLOB</code>,
<code>FIELD_TYPE_LONG_BLOB</code> or
<code>FIELD_TYPE_VAR_STRING</code> (as previously returned by
<code>mysql_list_fields</code>). You should instead only use
<code>FIELD_TYPE_BLOB</code> or <code>FIELD_TYPE_STRING</code>. If
you want exact types, you should use the command <code>SHOW
FIELDS</code>.</li>

<li>Added varbinary syntax: <code>0x######</code> which can be used
as a string (default) or a number.</li>

<li><code>FIELD_TYPE_CHAR</code> is renamed to
<code>FIELD_TYPE_TINY</code>.</li>

<li>Changed all fields to C++ classes.</li>

<li>Removed FORM struct.</li>

<li>Fields with <code>DEFAULT</code> values no longer need to be
<code>NOT NULL</code>.</li>

<li>New field types: 

<dl compact="compact">
<dt><code>ENUM</code></dt>

<dd>A string which can take only a couple of defined values. The
value is stored as a 1-3 byte number that is mapped automatically
to a string. This is sorted according to string positions!</dd>

<dt><code>SET</code></dt>

<dd>A string which may have one or many string values separated
with ','. The string is stored as a 1-, 2-, 3-, 4- or 8-byte number
where each bit stands for a specific set member. This is sorted
according to the unsigned value of the stored packed number.</dd>
</dl>
</li>

<li>Now all function calculation is done with <code>double</code>
or <code>long long</code>. This will provide the full 64-bit range
with bit functions and fix some conversions that previously could
result in precision losses. One should avoid using <code>unsigned
long long</code> columns with full 64-bit range (numbers bigger
than 9223372036854775807) because calculations are done with
<code>signed long long</code>.</li>

<li><code>ORDER BY</code> will now put <code>NULL</code> field
values first. <code>GROUP BY</code> will also work with
<code>NULL</code> values.</li>

<li>Full <code>WHERE</code> with expressions.</li>

<li>New range optimiser that can resolve ranges when some keypart
prefix is constant. Example: 

<pre>
mysql&gt; SELECT * FROM tbl_name
    -&gt;          WHERE key_part_1="customer"
    -&gt;          AND key_part_2&gt;=10 AND key_part_2&lt;=10;
</pre>
</li>
</ul>

<h2><a id="News-3.20.x" name="News-3.20.x"
href="manual_toc.html#News-3.20.x">D.6 Changes in release
3.20.x</a></h2>

<p><a id="IDX1842" name="IDX1842"></a></p>

<p>Version 3.20 is quite old now, and should be avoided if
possible. This information is kept here for historical purposes
only.</p>

<p>Changes from 3.20.18 to 3.20.32b are not documented here because
the 3.21 release branched here. And the relevant changes are also
documented as changes to the 3.21 version.</p>

<h3><a id="News-3.20.18" name="News-3.20.18"
href="manual_toc.html#News-3.20.18">D.6.1 Changes in release
3.20.18</a></h3>

<ul>
<li>Added <code>-p#</code> (remove <code>#</code> directories from
path) to <code>isamlog</code>. All files are written with a
relative path from the database directory Now <code>mysqld</code>
shouldn't crash on shutdown when using the <code>--log-isam</code>
option.</li>

<li>New <code>mysqlperl</code> version. It is now compatible with
<code>msqlperl-0.63</code>.</li>

<li>New <code>DBD</code> module available.</li>

<li>Added group function <code>STD()</code> (standard
deviation).</li>

<li>The <code>mysqld</code> server is now compiled by default
without debugging information. This will make the daemon smaller
and faster.</li>

<li>Now one usually only has to specify the <code>--basedir</code>
option to <code>mysqld</code>. All other paths are relative in a
normal installation.</li>

<li><code>BLOB</code> columns sometimes contained garbage when used
with a <code>SELECT</code> on more than one table and <code>ORDER
BY</code>.</li>

<li>Fixed that calculations that are not in <code>GROUP BY</code>
work as expected (ANSI SQL extension). Example: 

<pre>
mysql&gt; SELECT id,id+1 FROM table GROUP BY id;
</pre>
</li>

<li>The test of using <code>MYSQL_PWD</code> was reversed. Now
<code>MYSQL_PWD</code> is enabled as default in the default
release.</li>

<li>Fixed conversion bug which caused <code>mysqld</code> to core
dump with Arithmetic error on SPARC-386.</li>

<li>Added <code>--unbuffered</code> option to <code>mysql</code>,
for new <code>mysqlaccess</code>.</li>

<li>When using overlapping (unnecessary) keys and join over many
tables, the optimiser could get confused and return 0 records.</li>
</ul>

<h3><a id="News-3.20.17" name="News-3.20.17"
href="manual_toc.html#News-3.20.17">D.6.2 Changes in release
3.20.17</a></h3>

<ul>
<li>You can now use <code>BLOB</code> columns and the functions
<code>IS NULL</code> and <code>IS NOT NULL</code> in the
<code>WHERE</code> clause.</li>

<li>All communication packets and row buffers are now allocated
dynamically on demand. The default value of
<code>max_allowed_packet</code> is now 64K for the server and 512K
for the client. This is mainly used to catch incorrect packets that
could trash all memory. The server limit may be changed when it is
started.</li>

<li>Changed stack usage to use less memory.</li>

<li>Changed <code>safe_mysqld</code> to check for running
daemon.</li>

<li>The <code>ELT()</code> function is renamed to
<code>FIELD()</code>. The new <code>ELT()</code> function returns a
value based on an index: <code>FIELD()</code> is the inverse of
<code>ELT()</code> Example: <code>ELT(2,"A","B","C")</code> returns
<code>"B"</code>. <code>FIELD("B","A","B","C")</code> returns
<code>2</code>.</li>

<li><code>COUNT(field)</code>, where <code>field</code> could have
a <code>NULL</code> value, now works.</li>

<li>A couple of bugs fixed in <code>SELECT ... GROUP
BY</code>.</li>

<li>Fixed memory overrun bug in <code>WHERE</code> with many
unoptimisable brace levels.</li>

<li>Fixed some small bugs in the grant code.</li>

<li>If hostname isn't found by <code>get_hostname</code>, only the
IP is checked. Previously, you got <code>Access denied</code>.</li>

<li>Inserts of timestamps with values didn't always work.</li>

<li><code>INSERT INTO ... SELECT ... WHERE</code> could give the
error <code>Duplicated field</code>.</li>

<li>Added some tests to <code>safe_mysqld</code> to make it
``safer''.</li>

<li><code>LIKE</code> was case-sensitive in some places and
case-insensitive in others. Now <code>LIKE</code> is always
case-insensitive.</li>

<li><tt>`mysql.cc'</tt>: Allow <code>'#'</code> anywhere on the
line.</li>

<li>New command <code>SET SQL_SELECT_LIMIT=#</code>. See the FAQ
for more details.</li>

<li>New version of the <code>mysqlaccess</code> script.</li>

<li>Change <code>FROM_DAYS()</code> and <code>WEEKDAY()</code> to
also take a full <code>TIMESTAMP</code> or <code>DATETIME</code> as
argument. Before they only took a number of type
<code>YYYYMMDD</code> or <code>YYMMDD</code>.</li>

<li>Added new function
<code>UNIX_TIMESTAMP(timestamp_column)</code>.</li>
</ul>

<h3><a id="News-3.20.16" name="News-3.20.16"
href="manual_toc.html#News-3.20.16">D.6.3 Changes in release
3.20.16</a></h3>

<ul>
<li>More changes in MIT-pthreads to get them safer. Fixed also some
link bugs at least in SunOS.</li>

<li>Changed <code>mysqld</code> to work around a bug in
MIT-pthreads. This makes multiple small <code>SELECT</code>
operations 20 times faster. Now <code>lock_test.pl</code> should
work.</li>

<li>Added <code>mysql_FetchHash(handle)</code> to
<code>mysqlperl</code>.</li>

<li>The <code>mysqlbug</code> script is now distributed built to
allow for reporting bugs that appear during the build with it.</li>

<li>Changed <tt>`libmysql.c'</tt> to prefer <code>getpwuid()</code>
instead of <code>cuserid()</code>.</li>

<li>Fixed bug in <code>SELECT</code> optimiser when using many
tables with the same column used as key to different tables.</li>

<li>Added new <code>latin2</code> and Russian <code>KOI8</code>
character tables.</li>

<li>Added support for a dummy <code>GRANT</code> command to satisfy
Powerbuilder.</li>
</ul>

<h3><a id="News-3.20.15" name="News-3.20.15"
href="manual_toc.html#News-3.20.15">D.6.4 Changes in release
3.20.15</a></h3>

<ul>
<li>Fixed fatal bug <code>packets out of order</code> when using
MIT-pthreads.</li>

<li>Removed possible loop when a thread waits for command from
client and <code>fcntl()</code> fails. Thanks to Mike Bretz for
finding this bug.</li>

<li>Changed alarm loop in <tt>`mysqld.cc'</tt> because shutdown
didn't always succeed in Linux.</li>

<li>Removed use of <code>termbits</code> from <tt>`mysql.cc'</tt>.
This conflicted with <code>glibc</code> 2.0.</li>

<li>Fixed some syntax errors for at least BSD and Linux.</li>

<li>Fixed bug when doing a <code>SELECT</code> as superuser without
a database.</li>

<li>Fixed bug when doing <code>SELECT</code> with group calculation
to outfile.</li>
</ul>

<h3><a id="News-3.20.14" name="News-3.20.14"
href="manual_toc.html#News-3.20.14">D.6.5 Changes in release
3.20.14</a></h3>

<ul>
<li>If one gives <code>-p</code> or <code>--password</code> option
to <code>mysql</code> without an argument, the user is solicited
for the password from the tty.</li>

<li>Added default password from <code>MYSQL_PWD</code> (by Elmar
Haneke).</li>

<li>Added command <code>kill</code> to <code>mysqladmin</code> to
kill a specific MySQL thread.</li>

<li>Sometimes when doing a reconnect on a down connection this
succeeded first on second try.</li>

<li>Fixed adding an <code>AUTO_INCREMENT</code> key with
<code>ALTER_TABLE</code>.</li>

<li><code>AVG()</code> gave too small value on some
<code>SELECT</code>s with <code>GROUP BY</code> and <code>ORDER
BY</code>.</li>

<li>Added new <code>DATETIME</code> type (by Giovanni Maruzzelli <a
href="mailto:maruzz@matrice.it">maruzz@matrice.it</a>).</li>

<li>Fixed that defining <code>DONT_USE_DEFAULT_FIELDS</code>
works.</li>

<li>Changed to use a thread to handle alarms instead of signals on
Solaris to avoid race conditions.</li>

<li>Fixed default length of signed numbers. (George Harvey <a
href="mailto:georgeh@pinacl.co.uk">georgeh@pinacl.co.uk</a>.)</li>

<li>Allow anything for <code>CREATE INDEX</code>.</li>

<li>Add prezeros when packing numbers to <code>DATE</code>,
<code>TIME</code> and <code>TIMESTAMP</code>.</li>

<li>Fixed a bug in <code>OR</code> of multiple tables (gave empty
set).</li>

<li>Added many patches to MIT-pthreads. This fixes at least one
lookup bug.</li>
</ul>

<h3><a id="News-3.20.13" name="News-3.20.13"
href="manual_toc.html#News-3.20.13">D.6.6 Changes in release
3.20.13</a></h3>

<ul>
<li>Added ANSI SQL94 <code>DATE</code> and <code>TIME</code>
types.</li>

<li>Fixed bug in <code>SELECT</code> with
<code>AND</code>-<code>OR</code> levels.</li>

<li>Added support for Slovenian characters. The <tt>`Contrib'</tt>
directory contains source and instructions for adding other
character sets.</li>

<li>Fixed bug with <code>LIMIT</code> and <code>ORDER
BY</code>.</li>

<li>Allow <code>ORDER BY</code> and <code>GROUP BY</code> on items
that aren't in the <code>SELECT</code> list. (Thanks to Wim Bonis
<a href="mailto:bonis@kiss.de">bonis@kiss.de</a>, for pointing this
out.)</li>

<li>Allow setting of timestamp values in <code>INSERT</code>.</li>

<li>Fixed bug with <code>SELECT ... WHERE ... = NULL</code>.</li>

<li>Added changes for <code>glibc</code> 2.0. To get
<code>glibc</code> to work, you should add the
<tt>`gibc-2.0-sigwait-patch'</tt> before compiling
<code>glibc</code>.</li>

<li>Fixed bug in <code>ALTER TABLE</code> when changing a <code>NOT
NULL</code> field to allow <code>NULL</code> values.</li>

<li>Added some ANSI92 synonyms as field types to <code>CREATE
TABLE</code>. <code>CREATE TABLE</code> now allows
<code>FLOAT(4)</code> and <code>FLOAT(8)</code> to mean
<code>FLOAT</code> and <code>DOUBLE</code>.</li>

<li>New utility program <code>mysqlaccess</code> by <a
href="mailto:Yves.Carlier@rug.ac.be">Yves.Carlier@rug.ac.be</a>.
This program shows the access rights for a specific user and the
grant rows that determine this grant.</li>

<li>Added <code>WHERE const op field</code> (by <a
href="mailto:bonis@kiss.de">bonis@kiss.de</a>).</li>
</ul>

<h3><a id="News-3.20.11" name="News-3.20.11"
href="manual_toc.html#News-3.20.11">D.6.7 Changes in release
3.20.11</a></h3>

<ul>
<li>When using <code>SELECT ... INTO OUTFILE</code>, all temporary
tables are ISAM instead of HEAP to allow big dumps.</li>

<li>Changed date functions to be string functions. This fixed some
``funny'' side effects when sorting on dates.</li>

<li>Extended <code>ALTER TABLE</code> according to SQL92.</li>

<li>Some minor compatibility changes.</li>

<li>Added <code>--port</code> and <code>--socket</code> options to
all utility programs and <code>mysqld</code>.</li>

<li>Fixed MIT-pthreads <code>readdir_r()</code>. Now
<code>mysqladmin create database</code> and <code>mysqladmin drop
database</code> should work.</li>

<li>Changed MIT-pthreads to use our <code>tempnam()</code>. This
should fix the ``sort aborted'' bug.</li>

<li>Added sync of records count in <code>sql_update</code>. This
fixed slow updates on first connection. (Thanks to Vaclav Bittner
for the test.)</li>
</ul>

<h3><a id="News-3.20.10" name="News-3.20.10"
href="manual_toc.html#News-3.20.10">D.6.8 Changes in release
3.20.10</a></h3>

<ul>
<li>New insert type: <code>INSERT INTO ... SELECT ...</code></li>

<li><code>MEDIUMBLOB</code> fixed.</li>

<li>Fixed bug in <code>ALTER TABLE</code> and
<code>BLOB</code>s.</li>

<li><code>SELECT ... INTO OUTFILE</code> now creates the file in
the current database directory.</li>

<li><code>DROP TABLE</code> now can take a list of tables.</li>

<li>Oracle synonym <code>DESCRIBE</code> (<code>DESC</code>).</li>

<li>Changes to <code>make_binary_distribution</code>.</li>

<li>Added some comments to installation instructions about
<code>configure</code>'s C++ link test.</li>

<li>Added <code>--without-perl</code> option to
<code>configure</code>.</li>

<li>Lots of small portability changes.</li>
</ul>

<h3><a id="News-3.20.9" name="News-3.20.9"
href="manual_toc.html#News-3.20.9">D.6.9 Changes in release
3.20.9</a></h3>

<ul>
<li><code>ALTER TABLE</code> didn't copy null bit. As a result,
fields that were allowed to have <code>NULL</code> values were
always <code>NULL</code>.</li>

<li><code>CREATE</code> didn't take numbers as
<code>DEFAULT</code>.</li>

<li>Some compatibility changes for SunOS.</li>

<li>Removed <tt>`config.cache'</tt> from old distribution.</li>
</ul>

<h3><a id="News-3.20.8" name="News-3.20.8"
href="manual_toc.html#News-3.20.8">D.6.10 Changes in release
3.20.8</a></h3>

<ul>
<li>Fixed bug with <code>ALTER TABLE</code> and multi-part
keys.</li>
</ul>

<h3><a id="News-3.20.7" name="News-3.20.7"
href="manual_toc.html#News-3.20.7">D.6.11 Changes in release
3.20.7</a></h3>

<ul>
<li>New commands: <code>ALTER TABLE</code>, <code>SELECT ... INTO
OUTFILE</code> and <code>LOAD DATA INFILE</code>.</li>

<li>New function: <code>NOW()</code>.</li>

<li>Added new field <code>File_priv</code> to
<code>mysql/user</code> table.</li>

<li>New script <code>add_file_priv</code> which adds the new field
<code>File_priv</code> to the <code>user</code> table. This script
must be executed if you want to use the new <code>SELECT ...
INTO</code> and <code>LOAD DATA INFILE ...</code> commands with a
version of MySQL earlier than 3.20.7.</li>

<li>Fixed bug in locking code, which made <code>lock_test.pl</code>
test fail.</li>

<li>New files <tt>`NEW'</tt> and <tt>`BUGS'</tt>.</li>

<li>Changed <tt>`select_test.c'</tt> and <tt>`insert_test.c'</tt>
to include <tt>`config.h'</tt>.</li>

<li>Added <code>status</code> command to <code>mysqladmin</code>
for short logging.</li>

<li>Increased maximum number of keys to 16 and maximum number of
key parts to 15.</li>

<li>Use of sub keys. A key may now be a prefix of a string
field.</li>

<li>Added <code>-k</code> option to <code>mysqlshow</code>, to get
key information for a table.</li>

<li>Added long options to <code>mysqldump</code>.</li>
</ul>

<h3><a id="News-3.20.6" name="News-3.20.6"
href="manual_toc.html#News-3.20.6">D.6.12 Changes in release
3.20.6</a></h3>

<ul>
<li>Portable to more systems because of MIT-pthreads, which will be
used automatically if <code>configure</code> cannot find a
<code>-lpthreads</code> library.</li>

<li>Added GNU-style long options to almost all programs. Test with
<code><kbd>program</kbd> --help</code>.</li>

<li>Some shared library support for Linux.</li>

<li>The FAQ is now in <tt>`.texi'</tt> format and is available in
<tt>`.html'</tt>, <tt>`.txt'</tt> and <tt>`.ps'</tt> formats.</li>

<li>Added new SQL function <code>RAND([init])</code>.</li>

<li>Changed <code>sql_lex</code> to handle <code>\0</code>
unquoted, but the client can't send the query through the C API,
because it takes a str pointer. You must use
<code>mysql_real_query()</code> to send the query.</li>

<li>Added API function <code>mysql_get_client_info()</code>.</li>

<li><code>mysqld</code> now uses the <code>N_MAX_KEY_LENGTH</code>
from <tt>`nisam.h'</tt> as the maximum allowable key length.</li>

<li>The following now works: 

<pre>
mysql&gt; SELECT filter_nr,filter_nr FROM filter ORDER BY filter_nr;
</pre>

Previously, this resulted in the error: <code>Column: 'filter_nr'
in order clause is ambiguous</code>.</li>

<li><code>mysql</code> now outputs <code>'\0'</code>,
<code>'\t'</code>, <code>'\n'</code> and <code>'\\'</code> when
encountering ASCII 0, tab, newline or <code>'\'</code> while
writing tab-separated output. This is to allow printing of binary
data in a portable format. To get the old behaviour, use
<code>-r</code> (or <code>--raw</code>).</li>

<li>Added german error messages (60 of 80 error messages
translated).</li>

<li>Added new API function <code>mysql_fetch_lengths(MYSQL_RES
*)</code>, which returns an array of column lengths (of type
<code>uint</code>).</li>

<li>Fixed bug with <code>IS NULL</code> in <code>WHERE</code>
clause.</li>

<li>Changed the optimiser a little to get better results when
searching on a key part.</li>

<li>Added <code>SELECT</code> option <code>STRAIGHT_JOIN</code> to
tell the optimiser that it should join tables in the given
order.</li>

<li>Added support for comments starting with <code>'--'</code> in
<tt>`mysql.cc'</tt> (Postgres syntax).</li>

<li>You can have <code>SELECT</code> expressions and table columns
in a <code>SELECT</code> which are not used in the group part. This
makes it efficient to implement lookups. The column that is used
should be a constant for each group because the value is calculated
only once for the first row that is found for a group. 

<pre>
mysql&gt; SELECT id,lookup.text,SUM(*) FROM test,lookup
    -&gt;        WHERE test.id=lookup.id GROUP BY id;
</pre>
</li>

<li>Fixed bug in <code>SUM(function)</code> (could cause a core
dump).</li>

<li>Changed <code>AUTO_INCREMENT</code> placement in the SQL query:


<pre>
INSERT INTO table (auto_field) VALUES (0);
</pre>

inserted 0, but it should insert an <code>AUTO_INCREMENT</code>
value.</li>

<li><tt>`mysqlshow.c'</tt>: Added number of records in table. Had
to change the client code a little to fix this.</li>

<li><code>mysql</code> now allows doubled <code>''</code> or
<code>""</code> within strings for embedded <code>'</code> or
<code>"</code>.</li>

<li>New math functions: <code>EXP()</code>, <code>LOG()</code>,
<code>SQRT()</code>, <code>ROUND()</code>,
<code>CEILING()</code>.</li>
</ul>

<h3><a id="News-3.20.3" name="News-3.20.3"
href="manual_toc.html#News-3.20.3">D.6.13 Changes in release
3.20.3</a></h3>

<ul>
<li>The <code>configure</code> source now compiles a thread-free
client library <code>-lmysqlclient</code>. This is the only library
that needs to be linked with client applications. When using the
binary releases, you must link with <code>-lmysql -lmysys -ldbug
-lmystrings</code> as before.</li>

<li>New <code>readline</code> library from
<code>bash-2.0</code>.</li>

<li>LOTS of small changes to <code>configure</code> and makefiles
(and related source).</li>

<li>It should now be possible to compile in another directory using
<code>VPATH</code>. Tested with GNU Make 3.75.</li>

<li><code>safe_mysqld</code> and <code>mysql.server</code> changed
to be more compatible between the source and the binary
releases.</li>

<li><code>LIMIT</code> now takes one or two numeric arguments. If
one argument is given, it indicates the maximum number of rows in a
result. If two arguments are given, the first argument indicates
the offset of the first row to return, the second is the maximum
number of rows. With this it's easy to do a poor man's next
page/previous page WWW application.</li>

<li>Changed name of SQL function <code>FIELDS()</code> to
<code>ELT()</code>. Changed SQL function <code>INTERVALL()</code>
to <code>INTERVAL()</code>.</li>

<li>Made <code>SHOW COLUMNS</code> a synonym for <code>SHOW
FIELDS</code>. Added compatibility syntax <code>FRIEND KEY</code>
to <code>CREATE TABLE</code>. In MySQL, this creates a non-unique
key on the given columns.</li>

<li>Added <code>CREATE INDEX</code> and <code>DROP INDEX</code> as
compatibility functions. In MySQL, <code>CREATE INDEX</code> only
checks if the index exists and issues an error if it doesn't exist.
<code>DROP INDEX</code> always succeeds.</li>

<li><tt>`mysqladmin.c'</tt>: added client version to version
information.</li>

<li>Fixed core dump bug in <code>sql_acl</code> (core on new
connection).</li>

<li>Removed <code>host</code>, <code>user</code> and
<code>db</code> tables from database <code>test</code> in the
distribution.</li>

<li><code>FIELD_TYPE_CHAR</code> can now be signed (-128 to 127) or
unsigned (0 to 255) Previously, it was always unsigned.</li>

<li>Bug fixes in <code>CONCAT()</code> and
<code>WEEKDAY()</code>.</li>

<li>Changed a lot of source to get <code>mysqld</code> to be
compiled with SunPro compiler.</li>

<li>SQL functions must now have a <code>'('</code> immediately
after the function name (no intervening space). For example,
<code>'USER('</code> is regarded as beginning a function call, and
<code>'USER ('</code> is regarded as an identifier
<code>USER</code> followed by a <code>'('</code>, not as a function
call.</li>
</ul>

<h3><a id="News-3.20.0" name="News-3.20.0"
href="manual_toc.html#News-3.20.0">D.6.14 Changes in release
3.20.0</a></h3>

<ul>
<li>The source distribution is done with <code>configure</code> and
Automake. It will make porting much easier. The
<code>readline</code> library is included in the distribution.</li>

<li>Separate client compilation: the client code should be very
easy to compile on systems which don't have threads.</li>

<li>The old Perl interface code is automatically compiled and
installed. Automatic compiling of <code>DBD</code> will follow when
the new <code>DBD</code> code is ported.</li>

<li>Dynamic language support: <code>mysqld</code> can now be
started with Swedish or English (default) error messages.</li>

<li>New functions: <code>INSERT()</code>, <code>RTRIM()</code>,
<code>LTRIM()</code> and <code>FORMAT()</code>.</li>

<li><code>mysqldump</code> now works correctly for all field types
(even <code>AUTO_INCREMENT</code>). The format for <code>SHOW
FIELDS FROM tbl_name</code> is changed so the <code>Type</code>
column contains information suitable for <code>CREATE TABLE</code>.
In previous releases, some <code>CREATE TABLE</code> information
had to be patched when re-creating tables.</li>

<li>Some parser bugs from 3.19.5 (<code>BLOB</code> and
<code>TIMESTAMP</code>) are corrected. <code>TIMESTAMP</code> now
returns different date information depending on its create
length.</li>

<li>Changed parser to allow a database, table or field name to
start with a number or <code>'_'</code>.</li>

<li>All old C code from Unireg changed to C++ and cleaned up. This
makes the daemon a little smaller and easier to understand.</li>

<li>A lot of small bug fixes done.</li>

<li>New <tt>`INSTALL'</tt> files (not final version) and some
information regarding porting.</li>
</ul>

<h2><a id="News-3.19.x" name="News-3.19.x"
href="manual_toc.html#News-3.19.x">D.7 Changes in release
3.19.x</a></h2>

<p><a id="IDX1843" name="IDX1843"></a></p>

<p>Version 3.19 is quite old now, and should be avoided if
possible. This information is kept here for historical purposes
only.</p>

<h3><a id="News-3.19.5" name="News-3.19.5"
href="manual_toc.html#News-3.19.5">D.7.1 Changes in release
3.19.5</a></h3>

<ul>
<li>Some new functions, some more optimisation on joins.</li>

<li>Should now compile clean on Linux (2.0.x).</li>

<li>Added functions <code>DATABASE()</code>, <code>USER()</code>,
<code>POW()</code>, <code>LOG10()</code> (needed for ODBC).</li>

<li>In a <code>WHERE</code> with an <code>ORDER BY</code> on fields
from only one table, the table is now preferred as first table in a
multi-join.</li>

<li><code>HAVING</code> and <code>IS NULL</code> or <code>IS NOT
NULL</code> now works.</li>

<li>A group on one column and a sort on a group function
(<code>SUM()</code>, <code>AVG()</code>...) didn't work together.
Fixed.</li>

<li><code>mysqldump</code>: Didn't send password to server.</li>
</ul>

<h3><a id="News-3.19.4" name="News-3.19.4"
href="manual_toc.html#News-3.19.4">D.7.2 Changes in release
3.19.4</a></h3>

<ul>
<li>Fixed horrible locking bug when inserting in one thread and
reading in another thread.</li>

<li>Fixed one-off decimal bug. 1.00 was output as 1.0.</li>

<li>Added attribute <code>'Locked'</code> to process list as info
if a query is locked by another query.</li>

<li>Fixed full magic timestamp. Timestamp length may now be 14, 12,
10, 8, 6, 4 or 2 bytes.</li>

<li>Sort on some numeric functions could sort incorrectly on last
number.</li>

<li><code>IF(arg,syntax_error,syntax_error)</code> crashed.</li>

<li>Added functions <code>CEILING()</code>, <code>ROUND()</code>,
<code>EXP()</code>, <code>LOG()</code> and
<code>SQRT()</code>.</li>

<li>Enhanced <code>BETWEEN</code> to handle strings.</li>
</ul>

<h3><a id="News-3.19.3" name="News-3.19.3"
href="manual_toc.html#News-3.19.3">D.7.3 Changes in release
3.19.3</a></h3>

<ul>
<li>Fixed <code>SELECT</code> with grouping on <code>BLOB</code>
columns not to return incorrect <code>BLOB</code> info. Grouping,
sorting and distinct on <code>BLOB</code> columns will not yet work
as expected (probably it will group/sort by the first 7 characters
in the <code>BLOB</code>). Grouping on formulas with a fixed string
size (use <code>MID()</code> on a <code>BLOB</code>) should
work.</li>

<li>When doing a full join (no direct keys) on multiple tables with
<code>BLOB</code> fields, the <code>BLOB</code> was garbage on
output.</li>

<li>Fixed <code>DISTINCT</code> with calculated columns.</li>
</ul>

<h1><a id="Porting" name="Porting" href="manual_toc.html#Porting">E
Porting to Other Systems</a></h1>

<p><a id="IDX1844" name="IDX1844"></a></p>

<p>This appendix will help you port MySQL to other operationg
systems. Do check the list of currently supported operating systems
first. See section <a href="manual.html#Which_OS">2.2.2 Operating
Systems Supported by MySQL</a>. If you have created a new port of
MySQL, please let us know so that we can list it here and on our
web site (<a
href="http://www.mysql.com/">http://www.mysql.com/</a>),
recommending it to other users.</p>

<p>Note: If you create a new port of MySQL, you are free to copy
and distribute it under the GPL license, but it does not make you a
copyright holder of MySQL.</p>

<p>A working Posix thread library is needed for the server. On
Solaris 2.5 we use Sun PThreads (the native thread support in 2.4
and earlier versions are not good enough) and on Linux we use
LinuxThreads by Xavier Leroy, <a
href="mailto:Xavier.Leroy@inria.fr">Xavier.Leroy@inria.fr</a>.</p>

<p>The hard part of porting to a new Unix variant without good
native thread support is probably to port MIT-pthreads. See
<tt>`mit-pthreads/README'</tt> and Programming POSIX Threads (<a
href="http://www.humanfactor.com/pthreads/">http://www.humanfactor.com/pthreads/</a>).</p>

<p>The MySQL distribution includes a patched version of
Provenzano's Pthreads from MIT (see the MIT Pthreads web page at <a
href="http://www.mit.edu:8001/people/proven/pthreads.html">http://www.mit.edu:8001/people/proven/pthreads.html</a>).
This can be used for some operating systems that do not have POSIX
threads.</p>

<p>It is also possible to use another user level thread package
named FSU Pthreads (see <a
href="http://www.informatik.hu-berlin.de/~mueller/pthreads.html">FSU
Pthreads home page</a>). This implementation is being used for the
SCO port.</p>

<p>See the <tt>`thr_lock.c'</tt> and <tt>`thr_alarm.c'</tt>
programs in the <tt>`mysys'</tt> directory for some tests/examples
of these problems.</p>

<p>Both the server and the client need a working C++ compiler (we
use <code>gcc</code> and have tried SPARCworks). Another compiler
that is known to work is the Irix <code>cc</code>.</p>

<p>To compile only the client use <code>./configure
--without-server</code>.</p>

<p>There is currently no support for only compiling the server, nor
is it likly to be added unless someone has a good reason for
it.</p>

<p>If you want/need to change any <tt>`Makefile'</tt> or the
configure script you must get Automake and Autoconf. We have used
the <code>automake-1.2</code> and <code>autoconf-2.12</code>
distributions.</p>

<p>All steps needed to remake everything from the most basic
files.</p>

<pre>
/bin/rm */.deps/*.P
/bin/rm -f config.cache
aclocal
autoheader
aclocal
automake
autoconf
./configure --with-debug=full --prefix='your installation directory'

# The makefiles generated above need GNU make 3.75 or newer.
# (called gmake below)
gmake clean all install init-db
</pre>

<p>If you run into problems with a new port, you may have to do
some debugging of MySQL! See section <a
href="manual.html#Debugging_server">E.1 Debugging a MySQL
server</a>.</p>

<p><strong>Note</strong>: before you start debugging
<code>mysqld</code>, first get the test programs
<code>mysys/thr_alarm</code> and <code>mysys/thr_lock</code> to
work. This will ensure that your thread installation has even a
remote chance to work!</p>

<h2><a id="Debugging_server" name="Debugging_server"
href="manual_toc.html#Debugging_server">E.1 Debugging a MySQL
server</a></h2>

<p><a id="IDX1845" name="IDX1845"></a> <a id="IDX1846"
name="IDX1846"></a> <a id="IDX1847" name="IDX1847"></a></p>

<p>If you are using some functionality that is very new in MySQL,
you can try to run <code>mysqld</code> with the
<code>--skip-new</code> (which will disable all new, potentially
unsafe functionality) or with <code>--safe-mode</code> which
disables a lot of optimisation that may cause problems. See section
<a href="manual.html#Crashing">A.4.1 What To Do If MySQL Keeps
Crashing</a>.</p>

<p>If <code>mysqld</code> doesn't want to start, you should check
that you don't have any <tt>`my.cnf'</tt> files that interfere with
your setup! You can check your <tt>`my.cnf'</tt> arguments with
<code>mysqld --print-defaults</code> and avoid using them by
starting with <code>mysqld --no-defaults ...</code>.</p>

<p>If <code>mysqld</code> starts to eat up CPU or memory or if it
``hangs'', you can use <code>mysqladmin processlist status</code>
to find out if someone is executing a query that takes a long time.
It may be a good idea to run <code>mysqladmin -i10 processlist
status</code> in some window if you are experiencing performance
problems or problems when new clients can't connect.</p>

<p>The command <code>mysqladmin debug</code> will dump some
information about locks in use, used memory and query usage to the
mysql log file. This may help solve some problems. This command
also provides some useful information even if you haven't compiled
MySQL for debugging!</p>

<p>If the problem is that some tables are getting slower and slower
you should try to optimise the table with <code>OPTIMIZE
TABLE</code> or <code>myisamchk</code>. See section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>. You should also check the slow queries with
<code>EXPLAIN</code>.</p>

<p>You should also read the OS-specific section in this manual for
problems that may be unique to your environment. See section <a
href="manual.html#Operating_System_Specific_Notes">2.6 Operating
System Specific Notes</a>.</p>

<h3><a id="Compiling_for_debugging" name="Compiling_for_debugging"
href="manual_toc.html#Compiling_for_debugging">E.1.1 Compiling
MYSQL for Debugging</a></h3>

<p>If you have some very specific problem, you can always try to
debug MySQL. To do this you must configure MySQL with the
<code>--with-debug</code> or the <code>--with-debug=full</code>
option. You can check whether MySQL was compiled with debugging by
doing: <code>mysqld --help</code>. If the <code>--debug</code> flag
is listed with the options then you have debugging enabled.
<code>mysqladmin ver</code> also lists the <code>mysqld</code>
version as <code>mysql ... --debug</code> in this case.</p>

<p>If you are using gcc or egcs, the recommended configure line
is:</p>

<pre>
CC=gcc CFLAGS="-O2" CXX=gcc CXXFLAGS="-O2 -felide-constructors \
   -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
   --with-debug --with-extra-charsets=complex
</pre>

<p>This will avoid problems with the <code>libstdc++</code> library
and with C++ exceptions (many compilers have problems with C++
exceptions in threaded code) and compile a MySQL version with
support for all character sets.</p>

<p>If you suspect a memory overrun error, you can configure MySQL
with <code>--with-debug=full</code>, which will install a memory
allocation (<code>SAFEMALLOC</code>) checker. Running with
<code>SAFEMALLOC</code> is however quite slow, so if you get
performance problems you should start <code>mysqld</code> with the
<code>--skip-safemalloc</code> option. This will disable the memory
overrun checks for each call to <code>malloc</code> and
<code>free</code>.</p>

<p>If <code>mysqld</code> stops crashing when you compile it with
<code>--with-debug</code>, you have probably found a compiler bug
or a timing bug within MySQL. In this case you can try to add
<code>-g</code> to the <code>CFLAGS</code> and
<code>CXXFLAGS</code> variables above and not use
<code>--with-debug</code>. If <code>mysqld</code> now dies, you can
at least attach to it with <code>gdb</code> or use <code>gdb</code>
on the core file to find out what happened.</p>

<p>When you configure MySQL for debugging you automatically enable
a lot of extra safety check functions that monitor the health of
<code>mysqld</code>. If they find something ``unexpected,'' an
entry will be written to <code>stderr</code>, which
<code>safe_mysqld</code> directs to the error log! This also means
that if you are having some unexpected problems with MySQL and are
using a source distribution, the first thing you should do is to
configure MySQL for debugging! (The second thing, of course, is to
send mail to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a> and
ask for help. Please use the <code>mysqlbug</code> script for all
bug reports or questions regarding the MySQL version you are
using!</p>

<p>In the Windows MySQL distribution, <code>mysqld.exe</code> is by
default compiled with support for trace files.</p>

<h3><a id="Making_trace_files" name="Making_trace_files"
href="manual_toc.html#Making_trace_files">E.1.2 Creating Trace
Files</a></h3>

<p>If the <code>mysqld</code> server doesn't start or if you can
cause the <code>mysqld</code> server to crash quickly, you can try
to create a trace file to find the problem.</p>

<p>To do this you have to have a <code>mysqld</code> that is
compiled for debugging. You can check this by executing
<code>mysqld -V</code>. If the version number ends with
<code>-debug</code>, it's compiled with support for trace
files.</p>

<p>Start the <code>mysqld</code> server with a trace log in
<tt>`/tmp/mysqld.trace'</tt> (or <tt>`C:\mysqld.trace'</tt> on
Windows):</p>

<p><code>mysqld --debug</code></p>

<p>On Windows you should also use the <code>--standalone</code>
flag to not start <code>mysqld</code> as a service:</p>

<p>In a DOS window do:</p>

<pre>
mysqld --debug --standalone
</pre>

<p>After this you can use the <code>mysql.exe</code> command-line
tool in a second DOS window to reproduce the problem. You can take
down the above <code>mysqld</code> server with <code>mysqladmin
shutdown</code>.</p>

<p>Note that the trace file will get <strong>very big</strong>! If
you want to have a smaller trace file, you can use something
like:</p>

<p><code>mysqld
--debug=d,info,error,query,general,where:O,/tmp/mysqld.trace</code></p>

<p>which only prints information with the most interesting tags in
<tt>`/tmp/mysqld.trace'</tt>.</p>

<p>If you make a bug report about this, please only send the lines
from the trace file to the appropriate mailing list where something
seems to go wrong! If you can't locate the wrong place, you can ftp
the trace file, together with a full bug report, to <a
href="ftp://support.mysql.com/pub/mysql/secret/">ftp://support.mysql.com/pub/mysql/secret/</a>
so that a MySQL developer can take a look a this.</p>

<p>The trace file is made with the <strong>DBUG</strong> package by
Fred Fish. See section <a href="manual.html#The_DBUG_package">E.3
The DBUG Package</a>.</p>

<h3><a id="Using_gdb_on_mysqld" name="Using_gdb_on_mysqld"
href="manual_toc.html#Using_gdb_on_mysqld">E.1.3 Debugging mysqld
under gdb</a></h3>

<p><a id="IDX1848" name="IDX1848"></a></p>

<p>On most systems you can also start <code>mysqld</code> from
<code>gdb</code> to get more information if <code>mysqld</code>
crashes.</p>

<p>With some older <code>gdb</code> versions on Linux you must use
<code>run --one-thread</code> if you want to be able to debug
<code>mysqld</code> threads. In this case you can only have one
thread active at a time. We recommend you to upgrade to gdb 5.1
ASAP as thread debugging works much better with this version!</p>

<p>When running <code>mysqld</code> under gdb, you should disable
the stack trace with <code>--skip-stack-trace</code> to be able to
catch segfaults within gdb.</p>

<p>It's very hard to debug MySQL under <code>gdb</code> if you do a
lot of new connections the whole time as <code>gdb</code> doesn't
free the memory for old threads. You can avoid this problem by
starting <code>mysqld</code> with <code>-O thread_cache_size=
'max_connections +1'</code>. In most cases just using <code>-O
thread_cache_size=5'</code> will help a lot!</p>

<p>If you want to get a core dump on Linux if <code>mysqld</code>
dies with a SIGSEGV signal, you can start <code>mysqld</code> with
the <code>--core-file</code> option. This core file can be used to
make a backtrace that may help you find out why <code>mysqld</code>
died:</p>

<pre>
shell&gt; gdb mysqld core
gdb&gt;   backtrace full
gdb&gt;   exit
</pre>

<p>See section <a href="manual.html#Crashing">A.4.1 What To Do If
MySQL Keeps Crashing</a>.</p>

<p>If you are using gdb 4.17.x or above on Linux, you should
install a <tt>`.gdb'</tt> file, with the following information, in
your current directory:</p>

<pre>
set print sevenbit off
handle SIGUSR1 nostop noprint
handle SIGUSR2 nostop noprint
handle SIGWAITING nostop noprint
handle SIGLWP nostop noprint
handle SIGPIPE nostop
handle SIGALRM nostop
handle SIGHUP nostop
handle SIGTERM nostop noprint
</pre>

<p>If you have problems debugging threads with gdb, you should
download gdb 5.x and try this instead. The new gdb version has very
improved thread handling!</p>

<p>Here is an example how to debug mysqld:</p>

<pre>
shell&gt; gdb /usr/local/libexec/mysqld
gdb&gt; run
...
backtrace full # Do this when mysqld crashes
</pre>

<p>Include the above output in a mail generated with
<code>mysqlbug</code> and mail this to
<code>mysql@lists.mysql.com</code>.</p>

<p>If <code>mysqld</code> hangs you can try to use some system
tools like <code>strace</code> or <code>/usr/proc/bin/pstack</code>
to examine where <code>mysqld</code> has hung.</p>

<pre>
strace /tmp/log libexec/mysqld
</pre>

<p><a id="IDX1849" name="IDX1849"></a> <a id="IDX1850"
name="IDX1850"></a> <a id="IDX1851" name="IDX1851"></a> <a
id="IDX1852" name="IDX1852"></a> If you are using the Perl
<code>DBI</code> interface, you can turn on debugging information
by using the <code>trace</code> method or by setting the
<code>DBI_TRACE</code> environment variable. See section <a
href="manual.html#Perl_DBI_Class">8.2.2 The <code>DBI</code>
Interface</a>.</p>

<h3><a id="Using_stack_trace" name="Using_stack_trace"
href="manual_toc.html#Using_stack_trace">E.1.4 Using a Stack
Trace</a></h3>

<p>On some operating systems, the error log will contain a stack
trace if <code>mysqld</code> dies unexpectedly. You can use this to
find out where (and maybe why) <code>mysqld</code> died. See
section <a href="manual.html#Error_log">4.9.1 The Error Log</a>. To
get a stack trace, you must not compile <code>mysqld</code> with
the <code>-fomit-frame-pointer</code> option to gcc. See section <a
href="manual.html#Compiling_for_debugging">E.1.1 Compiling MYSQL
for Debugging</a>.</p>

<p>If the error file contains something like the following:</p>

<pre>
mysqld got signal 11;
The manual section 'Debugging a MySQL server' tells you how to use a
stack trace and/or the core file to produce a readable backtrace that may
help in finding out why mysqld died
Attemping backtrace. You can use the following information to find out
where mysqld died.  If you see no messages after this, something went
terribly wrong
stack range sanity check, ok, backtrace follows
0x40077552
0x81281a0
0x8128f47
0x8127be0
0x8127995
0x8104947
0x80ff28f
0x810131b
0x80ee4bc
0x80c3c91
0x80c6b43
0x80c1fd9
0x80c1686
</pre>

<p>you can find where <code>mysqld</code> died by doing the
following:</p>

<ol>
<li>Copy the above numbers to a file, for example
<tt>`mysqld.stack'</tt>.</li>

<li>Make a symbol file for the <code>mysqld</code> server: 

<pre>
nm -n libexec/mysqld &gt; /tmp/mysqld.sym
</pre>

Note that many MySQL binary distributions comes with the above
file, named <code>mysqld.sym.gz</code>. In this case you must
unpack this by doing: 

<pre>
gunzip &lt; bin/mysqld.sym.gz &gt; /tmp/mysqld.sym
</pre>
</li>

<li>Execute <code>resolve_stack_dump -s /tmp/mysqld.sym -n
mysqld.stack</code>. This will print out where <code>mysqld</code>
died. If this doesn't help you find out why <code>mysqld</code>
died, you should make a bug report and include the output from the
above commend with the bug report. Note however that in most cases
it will not help us to just have a stack trace to find the reason
for the problem. To be able to locate the bug or provide a
workaround, we would in most cases need to know the query that
killed <code>mysqld</code> and preferable a test case so that we
can repeat the problem! See section <a
href="manual.html#Bug_reports">1.6.1.3 How to Report Bugs or
Problems</a>.</li>
</ol>

<h3><a id="Using_log_files" name="Using_log_files"
href="manual_toc.html#Using_log_files">E.1.5 Using Log Files to
Find Cause of Errors in mysqld</a></h3>

<p>Note that before starting <code>mysqld</code> with
<code>--log</code> you should check all your tables with
<code>myisamchk</code>. See section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>.</p>

<p>If <code>mysqld</code> dies or hangs, you should start
<code>mysqld</code> with <code>--log</code>. When
<code>mysqld</code> dies again, you can examine the end of the log
file for the query that killed <code>mysqld</code>.</p>

<p>If you are using <code>--log</code> without a file name, the log
is stored in the database directory as 'hostname'.log In most cases
it's the last query in the log file that killed
<code>mysqld</code>, but if possible you should verify this by
restarting <code>mysqld</code> and executing the found query from
the <code>mysql</code> command-line tools. If this works, you
should also test all complicated queries that didn't complete.</p>

<p>You can also try the command <code>EXPLAIN</code> on all
<code>SELECT</code> statements that takes a long time to ensure
that <code>mysqld</code> is using indexes properly. See section <a
href="manual.html#EXPLAIN">5.2.1 <code>EXPLAIN</code> Syntax (Get
Information About a <code>SELECT</code>)</a>.</p>

<p>You can find the queries that take a long time to execute by
starting <code>mysqld</code> with <code>--log-slow-queries</code>.
See section <a href="manual.html#Slow_query_log">4.9.5 The Slow
Query Log</a>.</p>

<p>If you find the text <code>mysqld restarted</code> in the error
log file (normally named <tt>`hostname.err'</tt>) you have probably
found a query that causes <code>mysqld</code> to fail. If this
happens you should check all your tables with
<code>myisamchk</code> (see section <a
href="manual.html#MySQL_Database_Administration">4 Database
Administration</a>), and test the queries in the MySQL log files to
see if one doesn't work. If you find such a query, try first
upgrading to the newest MySQL version. If this doesn't help and you
can't find anything in the <code>mysql</code> mail archive, you
should report the bug to <a
href="mailto:mysql@lists.mysql.com">mysql@lists.mysql.com</a>.
Links to mail archives are available online at <a
href="http://lists.mysql.com/">http://lists.mysql.com/</a>.</p>

<p>If you have started <code>mysqld</code> with
<code>myisam-recover</code>, MySQL will automatically check and try
to repair <code>MyISAM</code> tables if they are marked as 'not
closed properly' or 'crashed'. If this happens, MySQL will write an
entry in the <code>hostname.err</code> file <code>'Warning:
Checking table ...'</code> which is followed by <code>Warning:
Repairing table</code> if the table needs to be repaired. If you
get a lot of these errors, without <code>mysqld</code> having died
unexpectedly just before, then something is wrong and needs to be
investigated further. See section <a
href="manual.html#Command-line_options">4.1.1 <code>mysqld</code>
Command-line Options</a>.</p>

<p>It's of course not a good sign if <code>mysqld</code> did died
unexpectedly, but in this case one shouldn't investigate the
<code>Checking table...</code> messages but instead try to find out
why <code>mysqld</code> died.</p>

<h3><a id="Reproduceable_test_case" name="Reproduceable_test_case"
href="manual_toc.html#Reproduceable_test_case">E.1.6 Making a Test
Case When You Experience Table Corruption</a></h3>

<p>If you get corrupted tables or if <code>mysqld</code> always
fails after some update commands, you can test if this bug is
reproducible by doing the following:</p>

<ul>
<li>Take down the MySQL daemon (with <code>mysqladmin
shutdown</code>).</li>

<li>Make a backup of the tables (to guard against the very unlikely
case that the repair will do something bad).</li>

<li>Check all tables with <code>myisamchk -s database/*.MYI</code>.
Repair any wrong tables with <code>myisamchk -r
database/table.MYI</code>.</li>

<li>Make a second backup of the tables.</li>

<li>Remove (or move away) any old log files from the MySQL data
directory if you need more space.</li>

<li>Start <code>mysqld</code> with <code>--log-bin</code>. See
section <a href="manual.html#Binary_log">4.9.4 The Binary Update
Log</a>. If you want to find a query that crashes
<code>mysqld</code>, you should use <code>--log
--log-bin</code>.</li>

<li>When you have gotten a crashed table, stop the <code>mysqld
server</code>.</li>

<li>Restore the backup.</li>

<li>Restart the <code>mysqld</code> server <strong>without</strong>
<code>--log-bin</code></li>

<li>Re-execute the commands with <code>mysqlbinlog update-log-file
| mysql</code>. The update log is saved in the MySQL database
directory with the name <code>hostname-bin.#</code>.</li>

<li>If the tables are corrupted again or you can get
<code>mysqld</code> to die with the above command, you have found
reproducible bug that should be easy to fix! FTP the tables and the
binary log to <a
href="ftp://support.mysql.com/pub/mysql/secret/">ftp://support.mysql.com/pub/mysql/secret/</a>
and send a mail to <a
href="mailto:bugs@lists.mysql.com">bugs@lists.mysql.com</a> or (if
you are a support customer) to <a
href="mailto:support@mysql.com">support@mysql.com</a> about the
problem and the MySQL team will fix it as soon as possible.</li>
</ul>

<p>You can also use the script <code>mysql_find_rows</code> to just
execute some of the update statements if you want to narrow down
the problem.</p>

<h2><a id="Debugging_client" name="Debugging_client"
href="manual_toc.html#Debugging_client">E.2 Debugging a MySQL
client</a></h2>

<p><a id="IDX1853" name="IDX1853"></a> <a id="IDX1854"
name="IDX1854"></a></p>

<p>To be able to debug a MySQL client with the integrated debug
package, you should configure MySQL with <code>--with-debug</code>
or <code>--with-debug=full</code>. See section <a
href="manual.html#configure_options">2.3.3 Typical
<code>configure</code> Options</a>.</p>

<p><a id="IDX1855" name="IDX1855"></a> <a id="IDX1856"
name="IDX1856"></a> Before running a client, you should set the
<code>MYSQL_DEBUG</code> environment variable:</p>

<pre>
shell&gt; MYSQL_DEBUG=d:t:O,/tmp/client.trace
shell&gt; export MYSQL_DEBUG
</pre>

<p>This causes clients to generate a trace file in
<tt>`/tmp/client.trace'</tt>.</p>

<p>If you have problems with your own client code, you should
attempt to connect to the server and run your query using a client
that is known to work. Do this by running <code>mysql</code> in
debugging mode (assuming you have compiled MySQL with debugging
on):</p>

<pre>
shell&gt; mysql --debug=d:t:O,/tmp/client.trace
</pre>

<p>This will provide useful information in case you mail a bug
report. See section <a href="manual.html#Bug_reports">1.6.1.3 How
to Report Bugs or Problems</a>.</p>

<p>If your client crashes at some 'legal' looking code, you should
check that your <tt>`mysql.h'</tt> include file matches your mysql
library file. A very common mistake is to use an old
<tt>`mysql.h'</tt> file from an old MySQL installation with new
MySQL library.</p>

<h2><a id="The_DBUG_package" name="The_DBUG_package"
href="manual_toc.html#The_DBUG_package">E.3 The DBUG
Package</a></h2>

<p><a id="IDX1857" name="IDX1857"></a></p>

<p>The MySQL server and most MySQL clients are compiled with the
DBUG package originally made by Fred Fish. When one has configured
MySQL for debugging, this package makes it possible to get a trace
file of what the program is debugging. See section <a
href="manual.html#Making_trace_files">E.1.2 Creating Trace
Files</a>.</p>

<p>One uses the debug package by invoking the program with the
<code>--debug="..."</code> or the <code>-#...</code> option.</p>

<p>Most MySQL programs has a default debug string that will be used
if you don't specify an option to <code>--debug</code>. The default
trace file is usually <code>/tmp/programname.trace</code> on Unix
and <code>\programname.trace</code> on Windows.</p>

<p>The debug control string is a sequence of colon separated fields
as follows:</p>

<pre>
&lt;field_1&gt;:&lt;field_2&gt;:...:&lt;field_N&gt;
</pre>

<p>Each field consists of a mandatory flag character followed by an
optional "," and comma-separated list of modifiers:</p>

<pre>
flag[,modifier,modifier,...,modifier]
</pre>

<p>The currently recognised flag characters are:</p>

<table border="1" width="100%">
<tr>
<td><strong>Flag</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td>d</td>
<td>Enable output from DBUG_&lt;N&gt; macros for the current state.
May be followed by a list of keywords which selects output only for
the DBUG macros with that keyword. An empty list of keywords
implies output for all macros.</td>
</tr>

<tr>
<td>D</td>
<td>Delay after each debugger output line. The argument is the
number of tenths of seconds to delay, subject to machine
capabilities. That is, <code>-#D,20</code> is delay two
seconds.</td>
</tr>

<tr>
<td>f</td>
<td>Limit debugging and/or tracing, and profiling to the list of
named functions. Note that a null list will disable all functions.
The appropriate "d" or "t" flags must still be given, this flag
only limits their actions if they are enabled.</td>
</tr>

<tr>
<td>F</td>
<td>Identify the source file name for each line of debug or trace
output.</td>
</tr>

<tr>
<td>i</td>
<td>Identify the process with the pid or thread id for each line of
debug or trace output.</td>
</tr>

<tr>
<td>g</td>
<td>Enable profiling. Create a file called 'dbugmon.out' containing
information that can be used to profile the program. May be
followed by a list of keywords that select profiling only for the
functions in that list. A null list implies that all functions are
considered.</td>
</tr>

<tr>
<td>L</td>
<td>Identify the source file line number for each line of debug or
trace output.</td>
</tr>

<tr>
<td>n</td>
<td>Print the current function nesting depth for each line of debug
or trace output.</td>
</tr>

<tr>
<td>N</td>
<td>Number each line of dbug output.</td>
</tr>

<tr>
<td>o</td>
<td>Redirect the debugger output stream to the specified file. The
default output is stderr.</td>
</tr>

<tr>
<td>O</td>
<td>As <code>O</code> but the file is really flushed between each
write. When needed the file is closed and reopened between each
write.</td>
</tr>

<tr>
<td>p</td>
<td>Limit debugger actions to specified processes. A process must
be identified with the DBUG_PROCESS macro and match one in the list
for debugger actions to occur.</td>
</tr>

<tr>
<td>P</td>
<td>Print the current process name for each line of debug or trace
output.</td>
</tr>

<tr>
<td>r</td>
<td>When pushing a new state, do not inherit the previous state's
function nesting level. Useful when the output is to start at the
left margin.</td>
</tr>

<tr>
<td>S</td>
<td>Do function _sanity(_file_,_line_) at each debugged function
until _sanity() returns something that differs from 0. (Mostly used
with safemalloc to find memory leaks)</td>
</tr>

<tr>
<td>t</td>
<td>Enable function call/exit trace lines. May be followed by a
list (containing only one modifier) giving a numeric maximum trace
level, beyond which no output will occur for either debugging or
tracing macros. The default is a compile time option.</td>
</tr>
</table>

<p>Some examples of debug control strings which might appear on a
shell command-line (the "-#" is typically used to introduce a
control string to an application program) are:</p>

<pre>
-#d:t
-#d:f,main,subr1:F:L:t,20
-#d,input,output,files:n
-#d:t:i:O,\\mysqld.trace
</pre>

<p>In MySQL, common tags to print (with the <code>d</code> option)
are:
<code>enter</code>,<code>exit</code>,<code>error</code>,<code>warning</code>,<code>
info</code> and <code>loop</code>.</p>

<h2><a id="Locking_methods" name="Locking_methods"
href="manual_toc.html#Locking_methods">E.4 Locking methods</a></h2>

<p><a id="IDX1858" name="IDX1858"></a> <a id="IDX1859"
name="IDX1859"></a></p>

<p>Currently MySQL only supports table locking for
<code>ISAM</code>/<code>MyISAM</code> and <code>HEAP</code> tables,
page-level locking for <code>BDB</code> tables and row-level
locking for <code>InnoDB</code> tables. See section <a
href="manual.html#Internal_locking">5.3.1 How MySQL Locks
Tables</a>. With <code>MyISAM</code> tables one can freely mix
<code>INSERT</code> and <code>SELECT</code> without locks
(<code>Versioning</code>).</p>

<p>Starting in version 3.23.33, you can analyse the table lock
contention on your system by checking
<code>Table_locks_waited</code> and
<code>Table_locks_immediate</code> environment variables.</p>

<p>To decide if you want to use a table type with row-level
locking, you will want to look at what the application does and
what the select/update pattern of the data is.</p>

<p>Pros for row locking:</p>

<ul>
<li>Fewer lock conflicts when accessing different rows in many
threads.</li>

<li>Fewer changes for rollbacks.</li>

<li>Makes it possible to lock a single row a long time.</li>
</ul>

<p>Cons:</p>

<ul>
<li>Takes more memory than page level or table locks.</li>

<li>Is slower than page level or table locks when used on a big
part of the table, because one has to do many more locks.</li>

<li>Is definitely much worse than other locks if you do often do
<code>GROUP BY</code> on a large part of the data or if one has to
often scan the whole table.</li>

<li>With higher level locks one can also more easily support locks
of different types to tune the application as the lock overhead is
less notable as for row level locks.</li>
</ul>

<p>Table locks are superior to page level / row level locks in the
following cases:</p>

<ul>
<li>Mostly reads</li>

<li>Read and updates on strict keys; this is where one updates or
deletes a row that can be fetched with one key read: 

<pre>
UPDATE table_name SET column=value WHERE unique_key#
DELETE FROM table_name WHERE unique_key=#
</pre>
</li>

<li><code>SELECT</code> combined with <code>INSERT</code> (and very
few <code>UPDATE</code>s and <code>DELETE</code>s).</li>

<li>Many scans / <code>GROUP BY</code> on the whole table without
any writers.</li>
</ul>

<p>Other options than row / page level locking:</p>

<p>Versioning (like we use in MySQL for concurrent inserts) where
you can have one writer at the same time as many readers. This
means that the database/table supports different views for the data
depending on when one started to access it. Other names for this
are time travel, copy on write or copy on demand.</p>

<p>Copy on demand is in many case much better than page or row
level locking; the worst case does, however, use much more memory
than when using normal locks.</p>

<p>Instead of using row level locks one can use application level
locks (like get_lock/release_lock in MySQL). This works of course
only in well-behaved applications.</p>

<p>In many cases one can do an educated guess which locking type is
best for the application, but generally it's very hard to say that
a given lock type is better than another; everything depends on the
application and different part of the application may require
different lock types.</p>

<p>Here are some tips about locking in MySQL:</p>

<p>Most web applications do lots of selects, very few deletes,
updates mainly on keys, and inserts in some specific tables. The
base MySQL setup is very well tuned for this.</p>

<p>Concurrent users are not a problem if one doesn't mix updates
with selects that need to examine many rows in the same table.</p>

<p>If one mixes inserts and deletes on the same table then
<code>INSERT DELAYED</code> may be of great help.</p>

<p>One can also use <code>LOCK TABLES</code> to speed up things
(many updates within a single lock is much faster than updates
without locks). Splitting thing to different tables will also
help.</p>

<p>If you get speed problems with the table locks in MySQL, you may
be able to solve these by converting some of your tables to
<code>InnoDB</code> or <code>BDB</code> tables. See section <a
href="manual.html#InnoDB">7.5 <code>InnoDB</code> Tables</a>. See
section <a href="manual.html#BDB">7.6 <code>BDB</code> or
<code>BerkeleyDB</code> Tables</a>.</p>

<p>The optimisation section in the manual covers a lot of different
aspects of how to tune applications. See section <a
href="manual.html#Tips">5.2.12 Other Optimisation Tips</a>.</p>

<h2><a id="RTS-threads" name="RTS-threads"
href="manual_toc.html#RTS-threads">E.5 Comments about RTS
threads</a></h2>

<p><a id="IDX1860" name="IDX1860"></a> <a id="IDX1861"
name="IDX1861"></a></p>

<p>I have tried to use the RTS thread packages with MySQL but
stumbled on the following problems:</p>

<p>They use an old version of a lot of POSIX calls and it is very
tedious to make wrappers for all functions. I am inclined to think
that it would be easier to change the thread libraries to the
newest POSIX specification.</p>

<p>Some wrappers are already written. See
<tt>`mysys/my_pthread.c'</tt> for more info.</p>

<p>At least the following should be changed:</p>

<p><code>pthread_get_specific</code> should use one argument.
<code>sigwait</code> should take two arguments. A lot of functions
(at least <code>pthread_cond_wait</code>,
<code>pthread_cond_timedwait</code>) should return the error code
on error. Now they return -1 and set <code>errno</code>.</p>

<p>Another problem is that user-level threads use the
<code>ALRM</code> signal and this aborts a lot of functions
(<code>read</code>, <code>write</code>, <code>open</code>...).
MySQL should do a retry on interrupt on all of these but it is not
that easy to verify it.</p>

<p>The biggest unsolved problem is the following:</p>

<p>To get thread-level alarms I changed
<tt>`mysys/thr_alarm.c'</tt> to wait between alarms with
<code>pthread_cond_timedwait()</code>, but this aborts with error
<code>EINTR</code>. I tried to debug the thread library as to why
this happens, but couldn't find any easy solution.</p>

<p>If someone wants to try MySQL with RTS threads I suggest the
following:</p>

<ul>
<li>Change functions MySQL uses from the thread library to POSIX.
This shouldn't take that long.</li>

<li>Compile all libraries with the
<code>-DHAVE_rts_threads</code>.</li>

<li>Compile <code>thr_alarm</code>.</li>

<li>If there are some small differences in the implementation, they
may be fixed by changing <tt>`my_pthread.h'</tt> and
<tt>`my_pthread.c'</tt>.</li>

<li>Run <code>thr_alarm</code>. If it runs without any ``warning'',
``error'' or aborted messages, you are on the right track. Here is
a successful run on Solaris: 

<pre>
Main thread: 1
Thread 0 (5) started
Thread: 5  Waiting
process_alarm
Thread 1 (6) started
Thread: 6  Waiting
process_alarm
process_alarm
thread_alarm
Thread: 6  Slept for 1 (1) sec
Thread: 6  Waiting
process_alarm
process_alarm
thread_alarm
Thread: 6  Slept for 2 (2) sec
Thread: 6  Simulation of no alarm needed
Thread: 6  Slept for 0 (3) sec
Thread: 6  Waiting
process_alarm
process_alarm
thread_alarm
Thread: 6  Slept for 4 (4) sec
Thread: 6  Waiting
process_alarm
thread_alarm
Thread: 5  Slept for 10 (10) sec
Thread: 5  Waiting
process_alarm
process_alarm
thread_alarm
Thread: 6  Slept for 5 (5) sec
Thread: 6  Waiting
process_alarm
process_alarm

...
thread_alarm
Thread: 5  Slept for 0 (1) sec
end
</pre>
</li>
</ul>

<h2><a id="Thread_packages" name="Thread_packages"
href="manual_toc.html#Thread_packages">E.6 Differences between
different thread packages</a></h2>

<p><a id="IDX1862" name="IDX1862"></a></p>

<p>MySQL is very dependent on the thread package used. So when
choosing a good platform for MySQL, the thread package is very
important.</p>

<p>There are at least three types of thread packages:</p>

<ul>
<li>User threads in a single process. Thread switching is managed
with alarms and the threads library manages all non-thread-safe
functions with locks. Read, write and select operations are usually
managed with a thread-specific select that switches to another
thread if the running threads have to wait for data. If the user
thread packages are integrated in the standard libs (FreeBSD and
BSDI threads) the thread package requires less overhead than thread
packages that have to map all unsafe calls (MIT-pthreads, FSU
Pthreads and RTS threads). In some environments (for example, SCO),
all system calls are thread-safe so the mapping can be done very
easily (FSU Pthreads on SCO). Downside: All mapped calls take a
little time and it's quite tricky to be able to handle all
situations. There are usually also some system calls that are not
handled by the thread package (like MIT-pthreads and sockets).
Thread scheduling isn't always optimal.</li>

<li>User threads in separate processes. Thread switching is done by
the kernel and all data are shared between threads. The thread
package manages the standard thread calls to allow sharing data
between threads. LinuxThreads is using this method. Downside: Lots
of processes. Thread creating is slow. If one thread dies the rest
are usually left hanging and you must kill them all before
restarting. Thread switching is somewhat expensive.</li>

<li>Kernel threads. Thread switching is handled by the thread
library or the kernel and is very fast. Everything is done in one
process, but on some systems, <code>ps</code> may show the
different threads. If one thread aborts, the whole process aborts.
Most system calls are thread-safe and should require very little
overhead. Solaris, HP-UX, AIX and OSF/1 have kernel threads.</li>
</ul>

<p>In some systems kernel threads are managed by integrating user
level threads in the system libraries. In such cases, the thread
switching can only be done by the thread library and the kernel
isn't really ``thread aware''.</p>

<h1><a id="Environment_variables" name="Environment_variables"
href="manual_toc.html#Environment_variables">F Environment
Variables</a></h1>

<p><a id="IDX1863" name="IDX1863"></a></p>

<p>Here is a list of all the environment variables that are used
directly or indirectly by MySQL. Most of these can also be found in
other places in this manual.</p>

<p>Note that any options on the command-line will take precedence
over values specified in configuration files and environment
variables, and values in configuration files take precedence over
values in environment variables.</p>

<p>In many cases it's preferable to use a configure file instead of
environment variables to modify the behaviour of MySQL. See section
<a href="manual.html#Option_files">4.1.2 <tt>`my.cnf'</tt> Option
Files</a>.</p>

<p><a id="IDX1864" name="IDX1864"></a> <a id="IDX1865"
name="IDX1865"></a> <a id="IDX1866" name="IDX1866"></a> <a
id="IDX1867" name="IDX1867"></a> <a id="IDX1868"
name="IDX1868"></a> <a id="IDX1869" name="IDX1869"></a> <a
id="IDX1870" name="IDX1870"></a> <a id="IDX1871"
name="IDX1871"></a> <a id="IDX1872" name="IDX1872"></a> <a
id="IDX1873" name="IDX1873"></a> <a id="IDX1874"
name="IDX1874"></a> <a id="IDX1875" name="IDX1875"></a> <a
id="IDX1876" name="IDX1876"></a> <a id="IDX1877"
name="IDX1877"></a> <a id="IDX1878" name="IDX1878"></a> <a
id="IDX1879" name="IDX1879"></a> <a id="IDX1880"
name="IDX1880"></a> <a id="IDX1881" name="IDX1881"></a> <a
id="IDX1882" name="IDX1882"></a> <a id="IDX1883"
name="IDX1883"></a> <a id="IDX1884" name="IDX1884"></a> <a
id="IDX1885" name="IDX1885"></a> <a id="IDX1886"
name="IDX1886"></a> <a id="IDX1887" name="IDX1887"></a> <a
id="IDX1888" name="IDX1888"></a> <a id="IDX1889"
name="IDX1889"></a> <a id="IDX1890" name="IDX1890"></a> <a
id="IDX1891" name="IDX1891"></a> <a id="IDX1892"
name="IDX1892"></a> <a id="IDX1893" name="IDX1893"></a> <a
id="IDX1894" name="IDX1894"></a> <a id="IDX1895"
name="IDX1895"></a> <a id="IDX1896" name="IDX1896"></a> <a
id="IDX1897" name="IDX1897"></a> <a id="IDX1898"
name="IDX1898"></a> <a id="IDX1899" name="IDX1899"></a> <a
id="IDX1900" name="IDX1900"></a> <a id="IDX1901"
name="IDX1901"></a> <a id="IDX1902" name="IDX1902"></a> <a
id="IDX1903" name="IDX1903"></a> <a id="IDX1904"
name="IDX1904"></a> <a id="IDX1905" name="IDX1905"></a></p>

<table border="1" width="100%">
<tr>
<td><strong>Variable</strong></td>
<td><strong>Description</strong></td>
</tr>

<tr>
<td><code>CCX</code></td>
<td>Set this to your C++ compiler when running configure.</td>
</tr>

<tr>
<td><code>CC</code></td>
<td>Set this to your C compiler when running configure.</td>
</tr>

<tr>
<td><code>CFLAGS</code></td>
<td>Flags for your C compiler when running configure.</td>
</tr>

<tr>
<td><code>CXXFLAGS</code></td>
<td>Flags for your C++ compiler when running configure.</td>
</tr>

<tr>
<td><code>DBI_USER</code></td>
<td>The default user name for Perl DBI.</td>
</tr>

<tr>
<td><code>DBI_TRACE</code></td>
<td>Used when tracing Perl DBI.</td>
</tr>

<tr>
<td><code>HOME</code></td>
<td>The default path for the <code>mysql</code> history file is
<tt>`$HOME/.mysql_history'</tt>.</td>
</tr>

<tr>
<td><code>LD_RUN_PATH</code></td>
<td>Used to specify where your <tt>`libmysqlclient.so'</tt>
is.</td>
</tr>

<tr>
<td><code>MYSQL_DEBUG</code></td>
<td>Debug-trace options when debugging.</td>
</tr>

<tr>
<td><code>MYSQL_HISTFILE</code></td>
<td>The path to the <code>mysql</code> history file.</td>
</tr>

<tr>
<td><code>MYSQL_HOST</code></td>
<td>Default host name used by the <code>mysql</code> command-line
client.</td>
</tr>

<tr>
<td><code>MYSQL_PS1</code></td>
<td>Command prompt to use in the <code>mysql</code> command-line
client. See section <a href="manual.html#mysql">4.8.2
<code>mysql</code>, The Command-line Tool</a>.</td>
</tr>

<tr>
<td><code>MYSQL_PWD</code></td>
<td>The default password when connecting to <code>mysqld</code>.
Note that use of this is insecure!</td>
</tr>

<tr>
<td><code>MYSQL_TCP_PORT</code></td>
<td>The default TCP/IP port.</td>
</tr>

<tr>
<td><code>MYSQL_UNIX_PORT</code></td>
<td>The default socket; used for connections to
<code>localhost</code>.</td>
</tr>

<tr>
<td><code>PATH</code></td>
<td>Used by the shell to finds the MySQL programs.</td>
</tr>

<tr>
<td><code>TMPDIR</code></td>
<td>The directory where temporary tables/files are created.</td>
</tr>

<tr>
<td><code>TZ</code></td>
<td>This should be set to your local time zone. See section <a
href="manual.html#Timezone_problems">A.4.6 Time Zone
Problems</a>.</td>
</tr>

<tr>
<td><code>UMASK_DIR</code></td>
<td>The user-directory creation mask when creating directories.
Note that this is ANDed with <code>UMASK</code>!</td>
</tr>

<tr>
<td><code>UMASK</code></td>
<td>The user-file creation mask when creating files.</td>
</tr>

<tr>
<td><code>USER</code></td>
<td>The default user on Windows to use when connecting to
<code>mysqld</code>.</td>
</tr>
</table>

<h1><a id="Regexp" name="Regexp" href="manual_toc.html#Regexp">G
MySQL Regular Expressions</a></h1>

<p><a id="IDX1906" name="IDX1906"></a> <a id="IDX1907"
name="IDX1907"></a> <a id="IDX1908" name="IDX1908"></a></p>

<p>A regular expression (regex) is a powerful way of specifying a
complex search.</p>

<p>MySQL uses Henry Spencer's implementation of regular
expressions, which is aimed at conformance with POSIX 1003.2. MySQL
uses the extended version.</p>

<p>This is a simplistic reference that skips the details. To get
more exact information, see Henry Spencer's <code>regex(7)</code>
manual page that is included in the source distribution. See
section <a href="manual.html#Credits">C Credits</a>.</p>

<p>A regular expression describes a set of strings. The simplest
regexp is one that has no special characters in it. For example,
the regexp <code>hello</code> matches <code>hello</code> and
nothing else.</p>

<p>Non-trivial regular expressions use certain special constructs
so that they can match more than one string. For example, the
regexp <code>hello|word</code> matches either the string
<code>hello</code> or the string <code>word</code>.</p>

<p>As a more complex example, the regexp <code>B[an]*s</code>
matches any of the strings <code>Bananas</code>,
<code>Baaaaas</code>, <code>Bs</code>, and any other string
starting with a <code>B</code>, ending with an <code>s</code>, and
containing any number of <code>a</code> or <code>n</code>
characters in between.</p>

<p>A regular expression may use any of the following special
characters/constructs:</p>

<dl compact="compact">
<dt><code>^</code></dt>

<dd>Match the beginning of a string. 

<pre>
mysql&gt; SELECT "fo\nfo" REGEXP "^fo$";           -&gt; 0
mysql&gt; SELECT "fofo" REGEXP "^fo";              -&gt; 1
</pre>
</dd>

<dt><code>$</code></dt>

<dd>Match the end of a string. 

<pre>
mysql&gt; SELECT "fo\no" REGEXP "^fo\no$";         -&gt; 1
mysql&gt; SELECT "fo\no" REGEXP "^fo$";            -&gt; 0
</pre>
</dd>

<dt><code>.</code></dt>

<dd>Match any character (including newline). 

<pre>
mysql&gt; SELECT "fofo" REGEXP "^f.*";             -&gt; 1
mysql&gt; SELECT "fo\nfo" REGEXP "^f.*";           -&gt; 1
</pre>
</dd>

<dt><code>a*</code></dt>

<dd>Match any sequence of zero or more <code>a</code> characters. 

<pre>
mysql&gt; SELECT "Ban" REGEXP "^Ba*n";             -&gt; 1
mysql&gt; SELECT "Baaan" REGEXP "^Ba*n";           -&gt; 1
mysql&gt; SELECT "Bn" REGEXP "^Ba*n";              -&gt; 1
</pre>
</dd>

<dt><code>a+</code></dt>

<dd>Match any sequence of one or more <code>a</code> characters. 

<pre>
mysql&gt; SELECT "Ban" REGEXP "^Ba+n";             -&gt; 1
mysql&gt; SELECT "Bn" REGEXP "^Ba+n";              -&gt; 0
</pre>
</dd>

<dt><code>a?</code></dt>

<dd>Match either zero or one <code>a</code> character. 

<pre>
mysql&gt; SELECT "Bn" REGEXP "^Ba?n";              -&gt; 1
mysql&gt; SELECT "Ban" REGEXP "^Ba?n";             -&gt; 1
mysql&gt; SELECT "Baan" REGEXP "^Ba?n";            -&gt; 0
</pre>
</dd>

<dt><code>de|abc</code></dt>

<dd>Match either of the sequences <code>de</code> or
<code>abc</code>. 

<pre>
mysql&gt; SELECT "pi" REGEXP "pi|apa";             -&gt; 1
mysql&gt; SELECT "axe" REGEXP "pi|apa";            -&gt; 0
mysql&gt; SELECT "apa" REGEXP "pi|apa";            -&gt; 1
mysql&gt; SELECT "apa" REGEXP "^(pi|apa)$";        -&gt; 1
mysql&gt; SELECT "pi" REGEXP "^(pi|apa)$";         -&gt; 1
mysql&gt; SELECT "pix" REGEXP "^(pi|apa)$";        -&gt; 0
</pre>
</dd>

<dt><code>(abc)*</code></dt>

<dd>Match zero or more instances of the sequence <code>abc</code>. 

<pre>
mysql&gt; SELECT "pi" REGEXP "^(pi)*$";            -&gt; 1
mysql&gt; SELECT "pip" REGEXP "^(pi)*$";           -&gt; 0
mysql&gt; SELECT "pipi" REGEXP "^(pi)*$";          -&gt; 1
</pre>
</dd>

<dt><code>{1}</code></dt>

<dt><code>{2,3}</code></dt>

<dd>The is a more general way of writing regexps that match many
occurrences of the previous atom. 

<dl compact="compact">
<dt><code>a*</code></dt>

<dd>Can be written as <code>a{0,}</code>.</dd>

<dt><code>a+</code></dt>

<dd>Can be written as <code>a{1,}</code>.</dd>

<dt><code>a?</code></dt>

<dd>Can be written as <code>a{0,1}</code>.</dd>
</dl>

To be more precise, an atom followed by a bound containing one
integer <code>i</code> and no comma matches a sequence of exactly
<code>i</code> matches of the atom. An atom followed by a bound
containing one integer <code>i</code> and a comma matches a
sequence of <code>i</code> or more matches of the atom. An atom
followed by a bound containing two integers <code>i</code> and
<code>j</code> matches a sequence of <code>i</code> through
<code>j</code> (inclusive) matches of the atom. Both arguments must
be in the range from <code>0</code> to <code>RE_DUP_MAX</code>
(default 255), inclusive. If there are two arguments, the second
must be greater than or equal to the first.</dd>

<dt><code>[a-dX]</code></dt>

<dt><code>[^a-dX]</code></dt>

<dd>Matches any character which is (or is not, if ^ is used) either
<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> or
<code>X</code>. To include a literal <code>]</code> character, it
must immediately follow the opening bracket <code>[</code>. To
include a literal <code>-</code> character, it must be written
first or last. So <code>[0-9]</code> matches any decimal digit. Any
character that does not have a defined meaning inside a
<code>[]</code> pair has no special meaning and matches only
itself. 

<pre>
mysql&gt; SELECT "aXbc" REGEXP "[a-dXYZ]";         -&gt; 1
mysql&gt; SELECT "aXbc" REGEXP "^[a-dXYZ]$";       -&gt; 0
mysql&gt; SELECT "aXbc" REGEXP "^[a-dXYZ]+$";      -&gt; 1
mysql&gt; SELECT "aXbc" REGEXP "^[^a-dXYZ]+$";     -&gt; 0
mysql&gt; SELECT "gheis" REGEXP "^[^a-dXYZ]+$";    -&gt; 1
mysql&gt; SELECT "gheisa" REGEXP "^[^a-dXYZ]+$";   -&gt; 0
</pre>
</dd>

<dt><code>[[.characters.]]</code></dt>

<dd>The sequence of characters of that collating element. The
sequence is a single element of the bracket expression's list. A
bracket expression containing a multi-character collating element
can thus match more than one character, for example, if the
collating sequence includes a <code>ch</code> collating element,
then the regular expression <code>[[.ch.]]*c</code> matches the
first five characters of <code>chchcc</code>.</dd>

<dt><code>[=character_class=]</code></dt>

<dd>An equivalence class, standing for the sequences of characters
of all collating elements equivalent to that one, including itself.
For example, if <code>o</code> and <code>(+)</code> are the members
of an equivalence class, then <code>[[=o=]]</code>,
<code>[[=(+)=]]</code>, and <code>[o(+)]</code> are all synonymous.
An equivalence class may not be an endpoint of a range.</dd>

<dt><code>[:character_class:]</code></dt>

<dd>Within a bracket expression, the name of a character class
enclosed in <code>[:</code> and <code>:]</code> stands for the list
of all characters belonging to that class. Standard character class
names are: 

<table border="1" width="100%">
<tr>
<td><strong>Name</strong></td>
<td><strong>Name</strong></td>
<td><strong>Name</strong></td>
</tr>

<tr>
<td>alnum</td>
<td>digit</td>
<td>punct</td>
</tr>

<tr>
<td>alpha</td>
<td>graph</td>
<td>space</td>
</tr>

<tr>
<td>blank</td>
<td>lower</td>
<td>upper</td>
</tr>

<tr>
<td>cntrl</td>
<td>print</td>
<td>xdigit</td>
</tr>
</table>

These stand for the character classes defined in the
<code>ctype(3)</code> manual page. A locale may provide others. A
character class may not be used as an endpoint of a range. 

<pre>
mysql&gt; SELECT "justalnums" REGEXP "[[:alnum:]]+";       -&gt; 1
mysql&gt; SELECT "!!" REGEXP "[[:alnum:]]+";               -&gt; 0
</pre>
</dd>

<dt><code>[[:&lt;:]]</code></dt>

<dt><code>[[:&gt;:]]</code></dt>

<dd>These match the null string at the beginning and end of a word
respectively. A word is defined as a sequence of word characters
which is neither preceded nor followed by word characters. A word
character is an alnum character (as defined by
<code>ctype(3)</code>) or an underscore (<code>_</code>). 

<pre>
mysql&gt; SELECT "a word a" REGEXP "[[:&lt;:]]word[[:&gt;:]]";      -&gt; 1
mysql&gt; SELECT "a xword a" REGEXP "[[:&lt;:]]word[[:&gt;:]]";     -&gt; 0
</pre>
</dd>
</dl>

<pre>
mysql&gt; SELECT "weeknights" REGEXP "^(wee|week)(knights|nights)$"; -&gt; 1
</pre>

<h1><a id="GPL_license" name="GPL_license"
href="manual_toc.html#GPL_license">H GNU General Public
License</a></h1>

<p><a id="IDX1909" name="IDX1909"></a> <a id="IDX1910"
name="IDX1910"></a></p>

<p>Version 2, June 1991</p>

<pre>
Copyright © 1989, 1991 Free Software Foundation, Inc.
59 Temple Place - Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre>

<h2><a id="SEC867" name="SEC867" href="manual_toc.html#SEC867">H.1
Preamble</a></h2>

<p>The licenses for most software are designed to take away your
freedom to share and change it. By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.
This General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit
to using it. (Some other Free Software Foundation software is
covered by the GNU Library General Public License instead.) You can
apply it to your programs, too.</p>

<p>When we speak of free software, we are referring to freedom, not
price. Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and
charge for this service if you wish), that you receive source code
or can get it if you want it, that you can change the software or
use pieces of it in new free programs; and that you know you can do
these things.</p>

<p>To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the
rights. These restrictions translate to certain responsibilities
for you if you distribute copies of the software, or if you modify
it.</p>

<p>For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights
that you have. You must make sure that they, too, receive or can
get the source code. And you must show them these terms so they
know their rights.</p>

<p>We protect your rights with two steps: (1) copyright the
software, and (2) offer you this license which gives you legal
permission to copy, distribute and/or modify the software.</p>

<p>Also, for each author's protection and ours, we want to make
certain that everyone understands that there is no warranty for
this free software. If the software is modified by someone else and
passed on, we want its recipients to know that what they have is
not the original, so that any problems introduced by others will
not reflect on the original authors' reputations.</p>

<p>Finally, any free program is threatened constantly by software
patents. We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making
the program proprietary. To prevent this, we have made it clear
that any patent must be licensed for everyone's free use or not
licensed at all.</p>

<p>The precise terms and conditions for copying, distribution and
modification follow.</p>

<h2><a id="SEC868" name="SEC868" href="manual_toc.html#SEC868">H.2
TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
MODIFICATION</a></h2>

<ol>
<li>This License applies to any program or other work which
contains a notice placed by the copyright holder saying it may be
distributed under the terms of this General Public License. The
``Program'', below, refers to any such program or work, and a
``work based on the Program'' means either the Program or any
derivative work under copyright law: that is to say, a work
containing the Program or a portion of it, either verbatim or with
modifications and/or translated into another language.
(Hereinafter, translation is included without limitation in the
term ``modification''.) Each licensee is addressed as ``you''.
Activities other than copying, distribution and modification are
not covered by this License; they are outside its scope. The act of
running the Program is not restricted, and the output from the
Program is covered only if its contents constitute a work based on
the Program (independent of having been made by running the
Program). Whether that is true depends on what the Program
does.</li>

<li>You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any
warranty; and give any other recipients of the Program a copy of
this License along with the Program. You may charge a fee for the
physical act of transferring a copy, and you may at your option
offer warranty protection in exchange for a fee.</li>

<li>You may modify your copy or copies of the Program or any
portion of it, thus forming a work based on the Program, and copy
and distribute such modifications or work under the terms of
Section 1 above, provided that you also meet all of these
conditions: 

<ol>
<li>You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.</li>

<li>You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.</li>

<li>If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a notice
that there is no warranty (or else, saying that you provide a
warranty) and that users may redistribute the program under these
conditions, and telling the user how to view a copy of this
License. (Exception: if the Program itself is interactive but does
not normally print such an announcement, your work based on the
Program is not required to print an announcement.)</li>
</ol>

These requirements apply to the modified work as a whole. If
identifiable sections of that work are not derived from the
Program, and can be reasonably considered independent and separate
works in themselves, then this License, and its terms, do not apply
to those sections when you distribute them as separate works. But
when you distribute the same sections as part of a whole which is a
work based on the Program, the distribution of the whole must be on
the terms of this License, whose permissions for other licensees
extend to the entire whole, and thus to each and every part
regardless of who wrote it. Thus, it is not the intent of this
section to claim rights or contest your rights to work written
entirely by you; rather, the intent is to exercise the right to
control the distribution of derivative or collective works based on
the Program. In addition, mere aggregation of another work not
based on the Program with the Program (or with a work based on the
Program) on a volume of a storage or distribution medium does not
bring the other work under the scope of this License.</li>

<li>You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms
of Sections 1 and 2 above provided that you also do one of the
following: 

<ol>
<li>Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software
interchange; or,</li>

<li>Accompany it with a written offer, valid for at least three
years, to give any third-party, for a charge no more than your cost
of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,</li>

<li>Accompany it with the information you received as to the offer
to distribute corresponding source code. (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such an
offer, in accord with Subsection b above.)</li>
</ol>

The source code for a work means the preferred form of the work for
making modifications to it. For an executable work, complete source
code means all the source code for all modules it contains, plus
any associated interface definition files, plus the scripts used to
control compilation and installation of the executable. However, as
a special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of
the operating system on which the executable runs, unless that
component itself accompanies the executable. If distribution of
executable or object code is made by offering access to copy from a
designated place, then offering equivalent access to copy the
source code from the same place counts as distribution of the
source code, even though third parties are not compelled to copy
the source along with the object code.</li>

<li>You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License. Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this
License. However, parties who have received copies, or rights, from
you under this License will not have their licenses terminated so
long as such parties remain in full compliance.</li>

<li>You are not required to accept this License, since you have not
signed it. However, nothing else grants you permission to modify or
distribute the Program or its derivative works. These actions are
prohibited by law if you do not accept this License. Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so,
and all its terms and conditions for copying, distributing or
modifying the Program or works based on it.</li>

<li>Each time you redistribute the Program (or any work based on
the Program), the recipient automatically receives a license from
the original licensor to copy, distribute or modify the Program
subject to these terms and conditions. You may not impose any
further restrictions on the recipients' exercise of the rights
granted herein. You are not responsible for enforcing compliance by
third parties to this License.</li>

<li>If, as a consequence of a court judgment or allegation of
patent infringement or for any other reason (not limited to patent
issues), conditions are imposed on you (whether by court order,
agreement or otherwise) that contradict the conditions of this
License, they do not excuse you from the conditions of this
License. If you cannot distribute so as to satisfy simultaneously
your obligations under this License and any other pertinent
obligations, then as a consequence you may not distribute the
Program at all. For example, if a patent license would not permit
royalty-free redistribution of the Program by all those who receive
copies directly or indirectly through you, then the only way you
could satisfy both it and this License would be to refrain entirely
from distribution of the Program. If any portion of this section is
held invalid or unenforceable under any particular circumstance,
the balance of the section is intended to apply and the section as
a whole is intended to apply in other circumstances. It is not the
purpose of this section to induce you to infringe any patents or
other property right claims or to contest validity of any such
claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices. Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is
willing to distribute software through any other system and a
licensee cannot impose that choice. This section is intended to
make thoroughly clear what is believed to be a consequence of the
rest of this License.</li>

<li>If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces,
the original copyright holder who places the Program under this
License may add an explicit geographical distribution limitation
excluding those countries, so that distribution is permitted only
in or among countries not thus excluded. In such case, this License
incorporates the limitation as if written in the body of this
License.</li>

<li>The Free Software Foundation may publish revised and/or new
versions of the General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns. Each version
is given a distinguishing version number. If the Program specifies
a version number of this License which applies to it and ``any
later version'', you have the option of following the terms and
conditions either of that version or of any later version published
by the Free Software Foundation. If the Program does not specify a
version number of this License, you may choose any version ever
published by the Free Software Foundation.</li>

<li>If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the
author to ask for permission. For software which is copyrighted by
the Free Software Foundation, write to the Free Software
Foundation; we sometimes make exceptions for this. Our decision
will be guided by the two goals of preserving the free status of
all derivatives of our free software and of promoting the sharing
and reuse of software generally. 

<p><strong>9.4 NO WARRANTY</strong></p>
</li>

<li>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
OR CORRECTION.</li>

<li>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</li>
</ol>

<h2>9.5 END OF TERMS AND CONDITIONS</h2>

<h2><a id="SEC869" name="SEC869" href="manual_toc.html#SEC869">H.3
How to Apply These Terms to Your New Programs</a></h2>

<p>If you develop a new program, and you want it to be of the
greatest possible use to the public, the best way to achieve this
is to make it free software which everyone can redistribute and
change under these terms.</p>

<p>To do so, attach the following notices to the program. It is
safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should
have at least the ``copyright'' line and a pointer to where the
full notice is found.</p>

<pre>
<var>one line to give the program's name and a brief idea of what it does.</var>
Copyright (C) <var>yyyy</var>  <var>name of author</var>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
</pre>

<p>Also add information on how to contact you by electronic and
paper mail.</p>

<p>If the program is interactive, make it output a short notice
like this when it starts in an interactive mode:</p>

<pre>
Gnomovision version 69, Copyright (C) 19<var>yy</var> <var>name of author</var>
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show c' for details.
</pre>

<p>The hypothetical commands <samp>`show w'</samp> and <samp>`show
c'</samp> should show the appropriate parts of the General Public
License. Of course, the commands you use may be called something
other than <samp>`show w'</samp> and <samp>`show c'</samp>; they
could even be mouse-clicks or menu items--whatever suits your
program.</p>

<p>You should also get your employer (if you work as a programmer)
or your school, if any, to sign a ``copyright disclaimer'' for the
program, if necessary. Here is a sample; alter the names:</p>

<pre>
Yoyodyne, Inc., hereby disclaims all copyright interest in the program
`Gnomovision' (which makes passes at compilers) written by James Hacker.

<var>signature of Ty Coon</var>, 1 April 1989
Ty Coon, President of Vice
</pre>

<p>This General Public License does not permit incorporating your
program into proprietary programs. If your program is a subroutine
library, you may consider it more useful to permit linking
proprietary applications with the library. If this is what you want
to do, use the GNU Library General Public License instead of this
License.</p>

<h1><a id="LGPL_license" name="LGPL_license"
href="manual_toc.html#LGPL_license">I GNU Lesser General Public
License</a></h1>

<p><a id="IDX1911" name="IDX1911"></a> <a id="IDX1912"
name="IDX1912"></a> <a id="IDX1913" name="IDX1913"></a> <a
id="IDX1914" name="IDX1914"></a></p>

<p>Version 2.1, February 1999</p>

<pre>
Copyright © 1991, 1999 Free Software Foundation, Inc.
59 Temple Place -- Suite 330, Boston, MA 02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
as the successor of the GNU Library Public License, version 2, hence the
version number 2.1.]
</pre>

<h2><a id="SEC871" name="SEC871" href="manual_toc.html#SEC871">I.1
Preamble</a></h2>

<p>The licenses for most software are designed to take away your
freedom to share and change it. By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its
users.</p>

<p>This license, the Lesser General Public License, applies to some
specially designated software--typically libraries--of the Free
Software Foundation and other authors who decide to use it. You can
use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations
below.</p>

<p>When we speak of free software, we are referring to freedom of
use, not price. Our General Public Licenses are designed to make
sure that you have the freedom to distribute copies of free
software (and charge for this service if you wish); that you
receive source code or can get it if you want it; that you can
change the software and use pieces of it in new free programs; and
that you are informed that you can do these things.</p>

<p>To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender
these rights. These restrictions translate to certain
responsibilities for you if you distribute copies of the library or
if you modify it.</p>

<p>For example, if you distribute copies of the library, whether
gratis or for a fee, you must give the recipients all the rights
that we gave you. You must make sure that they, too, receive or can
get the source code. If you link other code with the library, you
must provide complete object files to the recipients, so that they
can relink them with the library after making changes to the
library and recompiling it. And you must show them these terms so
they know their rights.</p>

<p>We protect your rights with a two-step method: (1) we copyright
the library, and (2) we offer you this license, which gives you
legal permission to copy, distribute and/or modify the library.</p>

<p>To protect each distributor, we want to make it very clear that
there is no warranty for the free library. Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the
original author's reputation will not be affected by problems that
might be introduced by others.</p>

<p>Finally, software patents pose a constant threat to the
existence of any free program. We wish to make sure that a company
cannot effectively restrict the users of a free program by
obtaining a restrictive license from a patent holder. Therefore, we
insist that any patent license obtained for a version of the
library must be consistent with the full freedom of use specified
in this license.</p>

<p>Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License. This license, the GNU Lesser
General Public License, applies to certain designated libraries,
and is quite different from the ordinary General Public License. We
use this license for certain libraries in order to permit linking
those libraries into non-free programs.</p>

<p>When a program is linked with a library, whether statically or
using a shared library, the combination of the two is legally
speaking a combined work, a derivative of the original library. The
ordinary General Public License therefore permits such linking only
if the entire combination fits its criteria of freedom. The Lesser
General Public License permits more lax criteria for linking other
code with the library.</p>

<p>We call this license the <strong>Lesser</strong> General Public
License because it does <em>Less</em> to protect the user's freedom
than the ordinary General Public License. It also provides other
free software developers Less of an advantage over competing
non-free programs. These disadvantages are the reason we use the
ordinary General Public License for many libraries. However, the
Lesser license provides advantages in certain special
circumstances.</p>

<p>For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it
becomes a de-facto standard. To achieve this, non-free programs
must be allowed to use the library. A more frequent case is that a
free library does the same job as widely used non-free libraries.
In this case, there is little to gain by limiting the free library
to free software only, so we use the Lesser General Public
License.</p>

<p>In other cases, permission to use a particular library in
non-free programs enables a greater number of people to use a large
body of free software. For example, permission to use the GNU C
Library in non-free programs enables many more people to use the
whole GNU operating system, as well as its variant, the GNU/Linux
operating system.</p>

<p>Although the Lesser General Public License is Less protective of
the users' freedom, it does ensure that the user of a program that
is linked with the Library has the freedom and the wherewithal to
run that program using a modified version of the Library.</p>

<p>The precise terms and conditions for copying, distribution and
modification follow. Pay close attention to the difference between
a ``work based on the library'' and a ``work that uses the
library''. The former contains code derived from the library,
whereas the latter must be combined with the library in order to
run.</p>

<h2><a id="SEC872" name="SEC872" href="manual_toc.html#SEC872">I.2
TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
MODIFICATION</a></h2>

<ol>
<li>This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms
of this Lesser General Public License (also called ``this
License''). Each licensee is addressed as ``you''. A ``library''
means a collection of software functions and/or data prepared so as
to be conveniently linked with application programs (which use some
of those functions and data) to form executables. The ``Library'',
below, refers to any such software library or work which has been
distributed under these terms. A ``work based on the Library''
means either the Library or any derivative work under copyright
law: that is to say, a work containing the Library or a portion of
it, either verbatim or with modifications and/or translated
straightforwardly into another language. (Hereinafter, translation
is included without limitation in the term ``modification''.)
``Source code'' for a work means the preferred form of the work for
making modifications to it. For a library, complete source code
means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the library. Activities
other than copying, distribution and modification are not covered
by this License; they are outside its scope. The act of running a
program using the Library is not restricted, and output from such a
program is covered only if its contents constitute a work based on
the Library (independent of the use of the Library in a tool for
writing it). Whether that is true depends on what the Library does
and what the program that uses the Library does.</li>

<li>You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided
that you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep
intact all the notices that refer to this License and to the
absence of any warranty; and distribute a copy of this License
along with the Library. You may charge a fee for the physical act
of transferring a copy, and you may at your option offer warranty
protection in exchange for a fee.</li>

<li>You may modify your copy or copies of the Library or any
portion of it, thus forming a work based on the Library, and copy
and distribute such modifications or work under the terms of
Section 1 above, provided that you also meet all of these
conditions: 

<ol>
<li>The modified work must itself be a software library.</li>

<li>You must cause the files modified to carry prominent notices
stating that you changed the files and the date of any change.</li>

<li>You must cause the whole of the work to be licensed at no
charge to all third parties under the terms of this License.</li>

<li>If a facility in the modified Library refers to a function or a
table of data to be supplied by an application program that uses
the facility, other than as an argument passed when the facility is
invoked, then you must make a good faith effort to ensure that, in
the event an application does not supply such function or table,
the facility still operates, and performs whatever part of its
purpose remains meaningful. (For example, a function in a library
to compute square roots has a purpose that is entirely well-defined
independent of the application. Therefore, Subsection 2d requires
that any application-supplied function or table used by this
function must be optional: if the application does not supply it,
the square root function must still compute square roots.)</li>
</ol>

These requirements apply to the modified work as a whole. If
identifiable sections of that work are not derived from the
Library, and can be reasonably considered independent and separate
works in themselves, then this License, and its terms, do not apply
to those sections when you distribute them as separate works. But
when you distribute the same sections as part of a whole which is a
work based on the Library, the distribution of the whole must be on
the terms of this License, whose permissions for other licensees
extend to the entire whole, and thus to each and every part
regardless of who wrote it. Thus, it is not the intent of this
section to claim rights or contest your rights to work written
entirely by you; rather, the intent is to exercise the right to
control the distribution of derivative or collective works based on
the Library. In addition, mere aggregation of another work not
based on the Library with the Library (or with a work based on the
Library) on a volume of a storage or distribution medium does not
bring the other work under the scope of this License.</li>

<li>You may opt to apply the terms of the ordinary GNU General
Public License instead of this License to a given copy of the
Library. To do this, you must alter all the notices that refer to
this License, so that they refer to the ordinary GNU General Public
License, version 2, instead of to this License. (If a newer version
than version 2 of the ordinary GNU General Public License has
appeared, then you can specify that version instead if you wish.)
Do not make any other change in these notices. Once this change is
made in a given copy, it is irreversible for that copy, so the
ordinary GNU General Public License applies to all subsequent
copies and derivative works made from that copy. This option is
useful when you wish to copy part of the code of the Library into a
program that is not a library.</li>

<li>You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable
form under the terms of Sections 1 and 2 above provided that you
accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software
interchange. If distribution of object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place satisfies the
requirement to distribute the source code, even though third
parties are not compelled to copy the source along with the object
code.</li>

<li>A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled
or linked with it, is called a ``work that uses the Library''. Such
a work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License. However, linking
a ``work that uses the Library'' with the Library creates an
executable that is a derivative of the Library (because it contains
portions of the Library), rather than a ``work that uses the
library''. The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables. When a
``work that uses the Library'' uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library. The
threshold for this to be true is not precisely defined by law. If
such an object file uses only numerical parameters, data structure
layouts and accessors, and small macros and small inline functions
(ten lines or less in length), then the use of the object file is
unrestricted, regardless of whether it is legally a derivative
work. (Executables containing this object code plus portions of the
Library will still fall under Section 6.) Otherwise, if the work is
a derivative of the Library, you may distribute the object code for
the work under the terms of Section 6. Any executables containing
that work also fall under Section 6, whether they are linked
directly with the Library itself.</li>

<li>As an exception to the Sections above, you may also combine or
link a ``work that uses the Library'' with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications. You must give
prominent notice with each copy of the work that the Library is
used in it and that the Library and its use are covered by this
License. You must supply a copy of this License. If the work during
execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License. Also, you must do
one of these things: 

<ol>
<li>Accompany the work with the complete corresponding
machine-readable source code for the Library including whatever
changes were used in the work (which must be distributed under
Sections 1 and 2 above); and, if the work is an executable linked
with the Library, with the complete machine-readable ``work that
uses the Library'', as object code and/or source code, so that the
user can modify the Library and then relink to produce a modified
executable containing the modified Library. (It is understood that
the user who changes the contents of definitions files in the
Library will not necessarily be able to recompile the application
to use the modified definitions.)</li>

<li>Use a suitable shared library mechanism for linking with the
Library. A suitable mechanism is one that (1) uses at runtime a
copy of the library already present on the user's computer system,
rather than copying library functions into the executable, and (2)
will operate properly with a modified version of the library, if
the user installs one, as long as the modified version is
interface-compatible with the version that the work was made
with.</li>

<li>Accompany the work with a written offer, valid for at least
three years, to give the same user the materials specified in
Subsection 6a, above, for a charge no more than the cost of
performing this distribution.</li>

<li>If distribution of the work is made by offering access to copy
from a designated place, offer equivalent access to copy the above
specified materials from the same place.</li>

<li>Verify that the user has already received a copy of these
materials or that you have already sent this user a copy.</li>
</ol>

For an executable, the required form of the ``work that uses the
Library'' must include any data and utility programs needed for
reproducing the executable from it. However, as a special
exception, the materials to be distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of
the operating system on which the executable runs, unless that
component itself accompanies the executable. It may happen that
this requirement contradicts the license restrictions of other
proprietary libraries that do not normally accompany the operating
system. Such a contradiction means you cannot use both them and the
Library together in an executable that you distribute.</li>

<li>You may place library facilities that are a work based on the
Library side-by-side in a single library together with other
library facilities not covered by this License, and distribute such
a combined library, provided that the separate distribution of the
work based on the Library and of the other library facilities is
otherwise permitted, and provided that you do these two things: 

<ol>
<li>Accompany the combined library with a copy of the same work
based on the Library, uncombined with any other library facilities.
This must be distributed under the terms of the Sections
above.</li>

<li>Give prominent notice with the combined library of the fact
that part of it is a work based on the Library, and explaining
where to find the accompanying uncombined form of the same
work.</li>
</ol>
</li>

<li>You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License. Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate
your rights under this License. However, parties who have received
copies, or rights, from you under this License will not have their
licenses terminated so long as such parties remain in full
compliance.</li>

<li>You are not required to accept this License, since you have not
signed it. However, nothing else grants you permission to modify or
distribute the Library or its derivative works. These actions are
prohibited by law if you do not accept this License. Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so,
and all its terms and conditions for copying, distributing or
modifying the Library or works based on it.</li>

<li>Each time you redistribute the Library (or any work based on
the Library), the recipient automatically receives a license from
the original licensor to copy, distribute, link with or modify the
Library subject to these terms and conditions. You may not impose
any further restrictions on the recipients' exercise of the rights
granted herein. You are not responsible for enforcing compliance by
third parties with this License.</li>

<li>If, as a consequence of a court judgment or allegation of
patent infringement or for any other reason (not limited to patent
issues), conditions are imposed on you (whether by court order,
agreement or otherwise) that contradict the conditions of this
License, they do not excuse you from the conditions of this
License. If you cannot distribute so as to satisfy simultaneously
your obligations under this License and any other pertinent
obligations, then as a consequence you may not distribute the
Library at all. For example, if a patent license would not permit
royalty-free redistribution of the Library by all those who receive
copies directly or indirectly through you, then the only way you
could satisfy both it and this License would be to refrain entirely
from distribution of the Library. If any portion of this section is
held invalid or unenforceable under any particular circumstance,
the balance of the section is intended to apply, and the section as
a whole is intended to apply in other circumstances. It is not the
purpose of this section to induce you to infringe any patents or
other property right claims or to contest validity of any such
claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices. Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is
willing to distribute software through any other system and a
licensee cannot impose that choice. This section is intended to
make thoroughly clear what is believed to be a consequence of the
rest of this License.</li>

<li>If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces,
the original copyright holder who places the Library under this
License may add an explicit geographical distribution limitation
excluding those countries, so that distribution is permitted only
in or among countries not thus excluded. In such case, this License
incorporates the limitation as if written in the body of this
License.</li>

<li>The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns. Each
version is given a distinguishing version number. If the Library
specifies a version number of this License which applies to it and
``any later version'', you have the option of following the terms
and conditions either of that version or of any later version
published by the Free Software Foundation. If the Library does not
specify a license version number, you may choose any version ever
published by the Free Software Foundation.</li>

<li>If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission. For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this. Our
decision will be guided by the two goals of preserving the free
status of all derivatives of our free software and of promoting the
sharing and reuse of software generally. 

<p><strong>9.6 NO WARRANTY</strong></p>
</li>

<li>BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
AND/OR OTHER PARTIES PROVIDE THE LIBRARY ``AS IS'' WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
OR CORRECTION.</li>

<li>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</li>
</ol>

<h2>9.7 END OF TERMS AND CONDITIONS</h2>

<h2><a id="SEC873" name="SEC873" href="manual_toc.html#SEC873">I.3
How to Apply These Terms to Your New Libraries</a></h2>

<p>If you develop a new library, and you want it to be of the
greatest possible use to the public, we recommend making it free
software that everyone can redistribute and change. You can do so
by permitting redistribution under these terms (or, alternatively,
under the terms of the ordinary General Public License).</p>

<p>To apply these terms, attach the following notices to the
library. It is safest to attach them to the start of each source
file to most effectively convey the exclusion of warranty; and each
file should have at least the ``copyright'' line and a pointer to
where the full notice is found.</p>

<pre>
<var>one line to give the library's name and an idea of what it does.</var>
Copyright (C) <var>year</var>  <var>name of author</var>

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or (at
your option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.
</pre>

<p>Also add information on how to contact you by electronic and
paper mail.</p>

<p>You should also get your employer (if you work as a programmer)
or your school, if any, to sign a ``copyright disclaimer'' for the
library, if necessary. Here is a sample; alter the names:</p>

<pre>
Yoyodyne, Inc., hereby disclaims all copyright interest in the library
`Frob' (a library for tweaking knobs) written by James Random Hacker.

<var>signature of Ty Coon</var>, 1 April 1990
Ty Coon, President of Vice
</pre>

<p>That's all there is to it!</p>

<h1><a id="Function_Index" name="Function_Index"
href="manual_toc.html#Function_Index">SQL command, type and
function index</a></h1>

<ul>
<li><a href="manual.html#IDX1128">! (logical NOT)</a></li>

<li><a href="manual.html#IDX1100">!= (not equal)</a></li>

<li><a href="manual.html#IDX972">"</a></li>

<li><a href="manual.html#IDX1227">% (modulo)</a></li>

<li><a href="manual.html#IDX945">% (wildcard character)</a></li>

<li><a href="manual.html#IDX1304">&amp; (bitwise AND)</a></li>

<li><a href="manual.html#IDX1130">&amp;&amp; (logical AND)</a></li>

<li><a href="manual.html#IDX1087">() (parentheses)</a></li>

<li><a href="manual.html#IDX942">(Control-Z) \z</a></li>

<li><a href="manual.html#IDX1215">* (multiplication)</a></li>

<li><a href="manual.html#IDX1211">+ (addition)</a></li>

<li><a href="manual.html#IDX1213">- (subtraction)</a></li>

<li><a href="manual.html#IDX1221">- (unary minus)</a></li>

<li><a href="manual.html#IDX538">-p option</a></li>

<li><a href="manual.html#IDX539">-password option</a></li>

<li><a href="manual.html#IDX334">.my.cnf file</a>, <a
href="manual.html#IDX433">.my.cnf file</a>, <a
href="manual.html#IDX435">.my.cnf file</a>, <a
href="manual.html#IDX450">.my.cnf file</a>, <a
href="manual.html#IDX469">.my.cnf file</a>, <a
href="manual.html#IDX505">.my.cnf file</a>, <a
href="manual.html#IDX540">.my.cnf file</a></li>

<li><a href="manual.html#IDX683">.mysql_history file</a></li>

<li><a href="manual.html#IDX575">.pid (process ID) file</a></li>

<li><a href="manual.html#IDX1217">/ (division)</a></li>

<li><a href="manual.html#IDX1382">/etc/passwd</a></li>

<li><a href="manual.html#IDX458"><tt>`/etc/passwd'</tt></a></li>

<li><a href="manual.html#IDX1104">&lt; (less than)</a></li>

<li><a href="manual.html#IDX415">&lt;&lt;</a></li>

<li><a href="manual.html#IDX1308">&lt;&lt; (left shift)</a></li>

<li><a href="manual.html#IDX1102">&lt;= (less than or
equal)</a></li>

<li><a href="manual.html#IDX1111">&lt;=&gt; (Equal to)</a></li>

<li><a href="manual.html#IDX1098">&lt;&gt; (not equal)</a></li>

<li><a href="manual.html#IDX1096">= (equal)</a></li>

<li><a href="manual.html#IDX1108">&gt; (greater than)</a></li>

<li><a href="manual.html#IDX1106">&gt;= (greater than or
equal)</a></li>

<li><a href="manual.html#IDX1309">&gt;&gt; (right shift)</a></li>

<li><a href="manual.html#IDX930">\" (double quote)</a></li>

<li><a href="manual.html#IDX928">\' (single quote)</a></li>

<li><a href="manual.html#IDX926">\0 (ASCII 0)</a></li>

<li><a href="manual.html#IDX943">\\ (escape)</a></li>

<li><a href="manual.html#IDX932">\b (backspace)</a></li>

<li><a href="manual.html#IDX934">\n (newline)</a></li>

<li><a href="manual.html#IDX936">\r (carriage return)</a></li>

<li><a href="manual.html#IDX939">\t (tab)</a></li>

<li><a href="manual.html#IDX941">\z (Control-Z) ASCII(26)</a></li>

<li><a href="manual.html#IDX1306">^ (bitwise XOR)</a></li>

<li><a href="manual.html#IDX947">_ (wildcard character)</a></li>

<li><a href="manual.html#IDX971">`</a></li>
</ul>

<h2>A</h2>

<ul>
<li><a href="manual.html#IDX1224">ABS()</a></li>

<li><a href="manual.html#IDX1245">ACOS()</a></li>

<li><a href="manual.html#IDX1276">ADDDATE()</a></li>

<li><a href="manual.html#IDX1212">addition (+)</a></li>

<li><a href="manual.html#IDX1328">AES_DECRYPT()</a></li>

<li><a href="manual.html#IDX1327">AES_ENCRYPT()</a></li>

<li><a href="manual.html#IDX1807">alias</a></li>

<li><a href="manual.html#IDX1450">ALTER COLUMN</a></li>

<li><a href="manual.html#IDX1447">ALTER TABLE</a>, <a
href="manual.html#IDX1464">ALTER TABLE</a>, <a
href="manual.html#IDX1813">ALTER TABLE</a></li>

<li><a href="manual.html#IDX583">ANALYZE TABLE</a></li>

<li><a href="manual.html#IDX1305">AND, bitwise</a></li>

<li><a href="manual.html#IDX1129">AND, logical</a></li>

<li><a href="manual.html#IDX1298">arithmetic functions</a></li>

<li><a href="manual.html#IDX1372">AS</a>, <a
href="manual.html#IDX1396">AS</a></li>

<li><a href="manual.html#IDX1143">ASCII()</a></li>

<li><a href="manual.html#IDX1246">ASIN()</a></li>

<li><a href="manual.html#IDX1247">ATAN()</a></li>

<li><a href="manual.html#IDX1248">ATAN2()</a></li>

<li><a href="manual.html#IDX1579">AUTO_INCREMENT, using with
DBI</a></li>

<li><a href="manual.html#IDX1351">AVG()</a></li>
</ul>

<h2>B</h2>

<ul>
<li><a href="manual.html#IDX933">backspace (\b)</a></li>

<li><a href="manual.html#IDX552">BACKUP TABLE</a></li>

<li><a href="manual.html#IDX1488">BEGIN</a></li>

<li><a href="manual.html#IDX1340">BENCHMARK()</a></li>

<li><a href="manual.html#IDX1117">BETWEEN ... AND</a></li>

<li><a href="manual.html#IDX1006">BIGINT</a></li>

<li><a href="manual.html#IDX1146">BIN()</a></li>

<li><a href="manual.html#IDX1207">BINARY</a></li>

<li><a href="manual.html#IDX1001">BIT</a></li>

<li><a href="manual.html#IDX1299">bit functions</a></li>

<li><a href="manual.html#IDX1361">BIT_AND()</a></li>

<li><a href="manual.html#IDX414">BIT_COUNT</a></li>

<li><a href="manual.html#IDX1311">BIT_COUNT()</a></li>

<li><a href="manual.html#IDX1156">BIT_LENGTH()</a></li>

<li><a href="manual.html#IDX413">BIT_OR</a></li>

<li><a href="manual.html#IDX1360">BIT_OR()</a></li>

<li><a href="manual.html#IDX1036">BLOB</a>, <a
href="manual.html#IDX1061">BLOB</a></li>

<li><a href="manual.html#IDX1000">BOOL</a></li>
</ul>

<h2>C</h2>

<ul>
<li><a href="manual.html#IDX938">carriage return (\r)</a></li>

<li><a href="manual.html#IDX1140">CASE</a></li>

<li><a href="manual.html#IDX1296">CAST</a></li>

<li><a href="manual.html#IDX1204">casts</a></li>

<li><a href="manual.html#IDX267">CC environment variable</a>, <a
href="manual.html#IDX1866">CC environment variable</a></li>

<li><a href="manual.html#IDX223"><code>CC</code> environment
variable</a></li>

<li><a href="manual.html#IDX1864">CCX environment variable</a></li>

<li><a href="manual.html#IDX1230">CEILING()</a></li>

<li><a href="manual.html#IDX271">CFLAGS environment variable</a>,
<a href="manual.html#IDX1868">CFLAGS environment variable</a></li>

<li><a href="manual.html#IDX1029">CHAR</a>, <a
href="manual.html#IDX1059">CHAR</a></li>

<li><a href="manual.html#IDX1032">CHAR VARYING</a></li>

<li><a href="manual.html#IDX1149">CHAR()</a></li>

<li><a href="manual.html#IDX1154">CHAR_LENGTH()</a></li>

<li><a href="manual.html#IDX1030">CHARACTER</a></li>

<li><a href="manual.html#IDX1031">CHARACTER VARYING</a></li>

<li><a href="manual.html#IDX1155">CHARACTER_LENGTH()</a></li>

<li><a href="manual.html#IDX555">CHECK TABLE</a></li>

<li><a href="manual.html#IDX1572">ChopBlanks DBI method</a></li>

<li><a href="manual.html#IDX1123">COALESCE()</a></li>

<li><a href="manual.html#IDX426">command-line options</a></li>

<li><a href="manual.html#IDX986">Comment syntax</a></li>

<li><a href="manual.html#IDX129">COMMIT</a>, <a
href="manual.html#IDX1489">COMMIT</a></li>

<li><a href="manual.html#IDX1091">comparison operators</a></li>

<li><a href="manual.html#IDX1150">CONCAT()</a></li>

<li><a href="manual.html#IDX1151">CONCAT_WS()</a></li>

<li><a href="manual.html#IDX237">configure option,
--with-charset</a></li>

<li><a href="manual.html#IDX238">configure option,
--with-extra-charsets</a></li>

<li><a href="manual.html#IDX1540">connect() DBI method</a></li>

<li><a href="manual.html#IDX1335">CONNECTION_ID()</a></li>

<li><a href="manual.html#IDX1134">control flow functions</a></li>

<li><a href="manual.html#IDX1145">CONV()</a></li>

<li><a href="manual.html#IDX1297">CONVERT</a></li>

<li><a href="manual.html#IDX1242">COS()</a></li>

<li><a href="manual.html#IDX1249">COT()</a></li>

<li><a href="manual.html#IDX1348">COUNT()</a></li>

<li><a href="manual.html#IDX1349">COUNT(DISTINCT)</a></li>

<li><a href="manual.html#IDX1428">CREATE DATABASE</a></li>

<li><a href="manual.html#IDX1725">CREATE FUNCTION</a></li>

<li><a href="manual.html#IDX1474">CREATE INDEX</a></li>

<li><a href="manual.html#IDX1434">CREATE TABLE</a></li>

<li><a href="manual.html#IDX1386">CROSS JOIN</a></li>

<li><a href="manual.html#IDX1284">CURDATE()</a></li>

<li><a href="manual.html#IDX1285">CURRENT_DATE</a></li>

<li><a href="manual.html#IDX1287">CURRENT_TIME</a></li>

<li><a href="manual.html#IDX1290">CURRENT_TIMESTAMP</a></li>

<li><a href="manual.html#IDX1318">CURRENT_USER()</a></li>

<li><a href="manual.html#IDX1286">CURTIME()</a></li>

<li><a href="manual.html#IDX225"><code>CXX</code> environment
variable</a></li>

<li><a href="manual.html#IDX259">CXX environment variable</a>, <a
href="manual.html#IDX261">CXX environment variable</a>, <a
href="manual.html#IDX269">CXX environment variable</a></li>

<li><a href="manual.html#IDX230">CXXFLAGS environment variable</a>,
<a href="manual.html#IDX234">CXXFLAGS environment variable</a>, <a
href="manual.html#IDX273">CXXFLAGS environment variable</a>, <a
href="manual.html#IDX1870">CXXFLAGS environment variable</a></li>
</ul>

<h2>D</h2>

<ul>
<li><a href="manual.html#IDX1570">data_sources() DBI
method</a></li>

<li><a href="manual.html#IDX1314">DATABASE()</a></li>

<li><a href="manual.html#IDX1022">DATE</a>, <a
href="manual.html#IDX1049">DATE</a>, <a
href="manual.html#IDX1797">DATE</a></li>

<li><a href="manual.html#IDX1257">date and time functions</a></li>

<li><a href="manual.html#IDX1274">DATE_ADD()</a></li>

<li><a href="manual.html#IDX1282">DATE_FORMAT()</a></li>

<li><a href="manual.html#IDX1275">DATE_SUB()</a></li>

<li><a href="manual.html#IDX1023">DATETIME</a>, <a
href="manual.html#IDX1048">DATETIME</a></li>

<li><a href="manual.html#IDX1264">DAYNAME()</a></li>

<li><a href="manual.html#IDX1261">DAYOFMONTH()</a></li>

<li><a href="manual.html#IDX1259">DAYOFWEEK()</a></li>

<li><a href="manual.html#IDX1262">DAYOFYEAR()</a></li>

<li><a href="manual.html#IDX1539">DBI-&gt;connect()</a></li>

<li><a href="manual.html#IDX1569">DBI-&gt;data_sources()</a></li>

<li><a href="manual.html#IDX1541">DBI-&gt;disconnect</a></li>

<li><a href="manual.html#IDX1547">DBI-&gt;do()</a></li>

<li><a href="manual.html#IDX1545">DBI-&gt;execute</a></li>

<li><a
href="manual.html#IDX1559">DBI-&gt;fetchall_arrayref</a></li>

<li><a href="manual.html#IDX1553">DBI-&gt;fetchrow_array</a></li>

<li><a
href="manual.html#IDX1555">DBI-&gt;fetchrow_arrayref</a></li>

<li><a href="manual.html#IDX1557">DBI-&gt;fetchrow_hashref</a></li>

<li><a href="manual.html#IDX1561">DBI-&gt;finish</a></li>

<li><a href="manual.html#IDX1543">DBI-&gt;prepare()</a></li>

<li><a href="manual.html#IDX954">DBI-&gt;quote</a></li>

<li><a href="manual.html#IDX1549">DBI-&gt;quote()</a></li>

<li><a href="manual.html#IDX1563">DBI-&gt;rows</a></li>

<li><a href="manual.html#IDX1573">DBI-&gt;trace</a>, <a
href="manual.html#IDX1849">DBI-&gt;trace</a></li>

<li><a href="manual.html#IDX1571">DBI-&gt;{ChopBlanks}</a></li>

<li><a href="manual.html#IDX1577">DBI-&gt;{insertid}</a></li>

<li><a href="manual.html#IDX1580">DBI-&gt;{is_blob}</a></li>

<li><a href="manual.html#IDX1582">DBI-&gt;{is_key}</a></li>

<li><a href="manual.html#IDX1588">DBI-&gt;{is_not_null}</a></li>

<li><a href="manual.html#IDX1584">DBI-&gt;{is_num}</a></li>

<li><a href="manual.html#IDX1586">DBI-&gt;{is_pri_key}</a></li>

<li><a href="manual.html#IDX1590">DBI-&gt;{length}</a></li>

<li><a href="manual.html#IDX1592">DBI-&gt;{max_length}</a></li>

<li><a href="manual.html#IDX1594">DBI-&gt;{NAME}</a></li>

<li><a href="manual.html#IDX1565">DBI-&gt;{NULLABLE}</a></li>

<li><a href="manual.html#IDX1567">DBI-&gt;{NUM_OF_FIELDS}</a></li>

<li><a href="manual.html#IDX1596">DBI-&gt;{table}</a></li>

<li><a href="manual.html#IDX1598">DBI-&gt;{type}</a></li>

<li><a href="manual.html#IDX1851">DBI_TRACE environment
variable</a>, <a href="manual.html#IDX1874">DBI_TRACE environment
variable</a></li>

<li><a href="manual.html#IDX1575"><code>DBI_TRACE</code>
environment variable</a></li>

<li><a href="manual.html#IDX1872">DBI_USER environment
variable</a></li>

<li><a href="manual.html#IDX1020">DEC</a></li>

<li><a href="manual.html#IDX1019">DECIMAL</a></li>

<li><a href="manual.html#IDX1323">DECODE()</a></li>

<li><a href="manual.html#IDX1253">DEGREES()</a></li>

<li><a href="manual.html#IDX1415">DELAYED</a></li>

<li><a href="manual.html#IDX1421">DELETE</a></li>

<li><a href="manual.html#IDX1330">DES_DECRYPT()</a></li>

<li><a href="manual.html#IDX1329">DES_ENCRYPT()</a></li>

<li><a href="manual.html#IDX1484">DESC</a></li>

<li><a href="manual.html#IDX405">DESCRIBE</a>, <a
href="manual.html#IDX1485">DESCRIBE</a></li>

<li><a href="manual.html#IDX1542">disconnect DBI method</a></li>

<li><a href="manual.html#IDX385">DISTINCT</a>, <a
href="manual.html#IDX846">DISTINCT</a>, <a
href="manual.html#IDX1350">DISTINCT</a></li>

<li><a href="manual.html#IDX1218">division (/)</a></li>

<li><a href="manual.html#IDX1427">DO</a></li>

<li><a href="manual.html#IDX1548">do() DBI method</a></li>

<li><a href="manual.html#IDX1015">DOUBLE</a></li>

<li><a href="manual.html#IDX1017">DOUBLE PRECISION</a></li>

<li><a href="manual.html#IDX931">double quote (\")</a></li>

<li><a href="manual.html#IDX1430">DROP DATABASE</a></li>

<li><a href="manual.html#IDX1726">DROP FUNCTION</a></li>

<li><a href="manual.html#IDX1455">DROP INDEX</a>, <a
href="manual.html#IDX1478">DROP INDEX</a></li>

<li><a href="manual.html#IDX1458">DROP PRIMARY KEY</a></li>

<li><a href="manual.html#IDX1471">DROP TABLE</a></li>

<li><a href="manual.html#IDX1383">DUMPFILE</a></li>
</ul>

<h2>E</h2>

<ul>
<li><a href="manual.html#IDX1178">ELT()</a></li>

<li><a href="manual.html#IDX1322">ENCODE()</a></li>

<li><a href="manual.html#IDX1321">ENCRYPT()</a></li>

<li><a href="manual.html#IDX1042">ENUM</a>, <a
href="manual.html#IDX1066">ENUM</a></li>

<li><a href="manual.html#IDX1867">Environment variable, CC</a></li>

<li><a href="manual.html#IDX268">environment variable, CC</a></li>

<li><a href="manual.html#IDX224">environment variable,
<code>CC</code></a></li>

<li><a href="manual.html#IDX1865">Environment variable,
CCX</a></li>

<li><a href="manual.html#IDX272">environment variable,
CFLAGS</a></li>

<li><a href="manual.html#IDX1869">Environment variable,
CFLAGS</a></li>

<li><a href="manual.html#IDX226">environment variable,
<code>CXX</code></a></li>

<li><a href="manual.html#IDX270">environment variable, CXX</a></li>

<li><a href="manual.html#IDX260">Environment variable, CXX</a></li>

<li><a href="manual.html#IDX1871">Environment variable,
CXXFLAGS</a></li>

<li><a href="manual.html#IDX231">environment variable,
CXXFLAGS</a>, <a href="manual.html#IDX235">environment variable,
CXXFLAGS</a>, <a href="manual.html#IDX274">environment variable,
CXXFLAGS</a></li>

<li><a href="manual.html#IDX1576">environment variable,
<code>DBI_TRACE</code></a></li>

<li><a href="manual.html#IDX1852">Environment variable,
DBI_TRACE</a>, <a href="manual.html#IDX1875">Environment variable,
DBI_TRACE</a></li>

<li><a href="manual.html#IDX1873">Environment variable,
DBI_USER</a></li>

<li><a href="manual.html#IDX1877">Environment variable,
HOME</a></li>

<li><a href="manual.html#IDX680">environment variable,
<code>HOME</code></a></li>

<li><a href="manual.html#IDX320">environment variable,
LD_RUN_PATH</a></li>

<li><a href="manual.html#IDX342">Environment variable,
LD_RUN_PATH</a>, <a href="manual.html#IDX354">Environment variable,
LD_RUN_PATH</a>, <a href="manual.html#IDX1879">Environment
variable, LD_RUN_PATH</a></li>

<li><a href="manual.html#IDX1856">Environment variable,
MYSQL_DEBUG</a>, <a href="manual.html#IDX1881">Environment
variable, MYSQL_DEBUG</a></li>

<li><a href="manual.html#IDX676">environment variable,
<code>MYSQL_DEBUG</code></a></li>

<li><a href="manual.html#IDX1883">Environment variable,
MYSQL_HISTFILE</a></li>

<li><a href="manual.html#IDX678">environment variable,
<code>MYSQL_HISTFILE</code></a></li>

<li><a href="manual.html#IDX1885">Environment variable,
MYSQL_HOST</a></li>

<li><a href="manual.html#IDX471">environment variable,
<code>MYSQL_HOST</code></a></li>

<li><a href="manual.html#IDX1887">Environment variable,
MYSQL_PS1</a></li>

<li><a href="manual.html#IDX473">environment variable,
<code>MYSQL_PWD</code></a>, <a
href="manual.html#IDX674">environment variable,
<code>MYSQL_PWD</code></a></li>

<li><a href="manual.html#IDX1889">Environment variable,
MYSQL_PWD</a></li>

<li><a href="manual.html#IDX442">environment variable,
<code>MYSQL_TCP_PORT</code></a>, <a
href="manual.html#IDX672">environment variable,
<code>MYSQL_TCP_PORT</code></a></li>

<li><a href="manual.html#IDX449">environment variable,
MYSQL_TCP_PORT</a></li>

<li><a href="manual.html#IDX1891">Environment variable,
MYSQL_TCP_PORT</a></li>

<li><a href="manual.html#IDX297">Environment variable,
MYSQL_UNIX_PORT</a>, <a href="manual.html#IDX1893">Environment
variable, MYSQL_UNIX_PORT</a></li>

<li><a href="manual.html#IDX448">environment variable,
MYSQL_UNIX_PORT</a></li>

<li><a href="manual.html#IDX441">environment variable,
<code>MYSQL_UNIX_PORT</code></a>, <a
href="manual.html#IDX670">environment variable,
<code>MYSQL_UNIX_PORT</code></a></li>

<li><a href="manual.html#IDX1895">Environment variable,
PATH</a></li>

<li><a href="manual.html#IDX206">environment variable,
PATH</a></li>

<li><a href="manual.html#IDX296">Environment variable, TMPDIR</a>,
<a href="manual.html#IDX1897">Environment variable, TMPDIR</a></li>

<li><a href="manual.html#IDX1792">Environment variable, TZ</a>, <a
href="manual.html#IDX1899">Environment variable, TZ</a></li>

<li><a href="manual.html#IDX1777">Environment variable, UMASK</a>,
<a href="manual.html#IDX1903">Environment variable, UMASK</a></li>

<li><a href="manual.html#IDX1779">Environment variable,
UMASK_DIR</a>, <a href="manual.html#IDX1901">Environment variable,
UMASK_DIR</a></li>

<li><a href="manual.html#IDX1905">Environment variable,
USER</a></li>

<li><a href="manual.html#IDX475">environment variable,
<code>USER</code></a></li>

<li><a href="manual.html#IDX262">Environment variables,
CXX</a></li>

<li><a href="manual.html#IDX1097">equal (=)</a></li>

<li><a href="manual.html#IDX944">escape (\\)</a></li>

<li><a href="manual.html#IDX1546">execute DBI method</a></li>

<li><a href="manual.html#IDX1233">EXP()</a></li>

<li><a href="manual.html#IDX831">EXPLAIN</a></li>

<li><a href="manual.html#IDX1182">EXPORT_SET()</a></li>

<li><a href="manual.html#IDX1278">EXTRACT()</a>, <a
href="manual.html#IDX1279">EXTRACT()</a></li>
</ul>

<h2>F</h2>

<ul>
<li><a href="manual.html#IDX1560">fetchall_arrayref DBI
method</a></li>

<li><a href="manual.html#IDX1554">fetchrow_array DBI
method</a></li>

<li><a href="manual.html#IDX1556">fetchrow_arrayref DBI
method</a></li>

<li><a href="manual.html#IDX1558">fetchrow_hashref DBI
method</a></li>

<li><a href="manual.html#IDX1179">FIELD()</a></li>

<li><a href="manual.html#IDX1187">FILE</a></li>

<li><a href="manual.html#IDX1180">FIND_IN_SET()</a></li>

<li><a href="manual.html#IDX1562">finish DBI method</a></li>

<li><a href="manual.html#IDX1009">FLOAT</a>, <a
href="manual.html#IDX1013">FLOAT</a></li>

<li><a href="manual.html#IDX1014">FLOAT(M,D)</a></li>

<li><a href="manual.html#IDX1010">FLOAT(precision)</a>, <a
href="manual.html#IDX1016">FLOAT(precision)</a></li>

<li><a href="manual.html#IDX1229">FLOOR()</a></li>

<li><a href="manual.html#IDX584">FLUSH</a></li>

<li><a href="manual.html#IDX1377">FORCE INDEX</a>, <a
href="manual.html#IDX1404">FORCE INDEX</a></li>

<li><a href="manual.html#IDX1333">FORMAT()</a></li>

<li><a href="manual.html#IDX1344">FOUND_ROWS()</a></li>

<li><a href="manual.html#IDX1281">FROM_DAYS()</a></li>

<li><a href="manual.html#IDX1292">FROM_UNIXTIME()</a>, <a
href="manual.html#IDX1293">FROM_UNIXTIME()</a></li>

<li><a href="manual.html#IDX1300">functions, arithmetic</a></li>

<li><a href="manual.html#IDX1301">functions, bit</a></li>

<li><a href="manual.html#IDX1135">functions, control flow</a></li>

<li><a href="manual.html#IDX1258">functions, date and time</a></li>

<li><a href="manual.html#IDX1347">functions, GROUP BY</a></li>

<li><a href="manual.html#IDX1220">functions, mathematical</a></li>

<li><a href="manual.html#IDX1313">functions, miscellaneous</a></li>

<li><a href="manual.html#IDX1142">functions, string</a></li>

<li><a href="manual.html#IDX1191">functions, string
comparison</a></li>

<li><a href="manual.html#IDX1731">Functions, user-defined</a></li>
</ul>

<h2>G</h2>

<ul>
<li><a href="manual.html#IDX1337">GET_LOCK()</a></li>

<li><a href="manual.html#IDX506">GRANT</a></li>

<li><a href="manual.html#IDX527">GRANT statement</a>, <a
href="manual.html#IDX547">GRANT statement</a></li>

<li><a href="manual.html#IDX1109">greater than (&gt;)</a></li>

<li><a href="manual.html#IDX1107">greater than or equal
(&gt;=)</a></li>

<li><a href="manual.html#IDX1252">GREATEST()</a></li>

<li><a href="manual.html#IDX1346">GROUP BY functions</a></li>
</ul>

<h2>H</h2>

<ul>
<li><a href="manual.html#IDX1408">HANDLER</a></li>

<li><a href="manual.html#IDX1148">HEX()</a></li>

<li><a href="manual.html#IDX960">hexadecimal values</a></li>

<li><a href="manual.html#IDX1876">HOME environment
variable</a></li>

<li><a href="manual.html#IDX679"><code>HOME</code> environment
variable</a></li>

<li><a href="manual.html#IDX284">host.frm, problems
finding</a></li>

<li><a href="manual.html#IDX1269">HOUR()</a></li>
</ul>

<h2>I</h2>

<ul>
<li><a href="manual.html#IDX969">identifiers, quoting</a></li>

<li><a href="manual.html#IDX1139">IF()</a></li>

<li><a href="manual.html#IDX1137">IFNULL()</a></li>

<li><a href="manual.html#IDX1374">IGNORE INDEX</a>, <a
href="manual.html#IDX1403">IGNORE INDEX</a></li>

<li><a href="manual.html#IDX1376">IGNORE KEY</a>, <a
href="manual.html#IDX1406">IGNORE KEY</a></li>

<li><a href="manual.html#IDX1119">IN</a></li>

<li><a href="manual.html#IDX1342">INET_ATON()</a></li>

<li><a href="manual.html#IDX1341">INET_NTOA()</a></li>

<li><a href="manual.html#IDX1385">INNER JOIN</a></li>

<li><a href="manual.html#IDX852">INSERT</a>, <a
href="manual.html#IDX1409">INSERT</a></li>

<li><a href="manual.html#IDX1413">INSERT ... SELECT</a></li>

<li><a href="manual.html#IDX1414">INSERT DELAYED</a></li>

<li><a href="manual.html#IDX532">INSERT statement, grant
privileges</a></li>

<li><a href="manual.html#IDX1177">INSERT()</a></li>

<li><a href="manual.html#IDX1578">insertid DBI method</a></li>

<li><a href="manual.html#IDX1160">INSTR()</a></li>

<li><a href="manual.html#IDX1004">INT</a></li>

<li><a href="manual.html#IDX1005">INTEGER</a></li>

<li><a href="manual.html#IDX1124">INTERVAL()</a></li>

<li><a href="manual.html#IDX1114">IS NOT NULL</a></li>

<li><a href="manual.html#IDX1113">IS NULL</a></li>

<li><a href="manual.html#IDX876">IS NULL, and indexes</a></li>

<li><a href="manual.html#IDX1581">is_blob DBI method</a></li>

<li><a href="manual.html#IDX1339">IS_FREE_LOCK()</a></li>

<li><a href="manual.html#IDX1583">is_key DBI method</a></li>

<li><a href="manual.html#IDX1589">is_not_null DBI method</a></li>

<li><a href="manual.html#IDX1585">is_num DBI method</a></li>

<li><a href="manual.html#IDX1587">is_pri_key DBI method</a></li>

<li><a href="manual.html#IDX1121">ISNULL()</a></li>

<li><a href="manual.html#IDX1494">ISOLATION LEVEL</a></li>
</ul>

<h2>J</h2>

<ul>
<li><a href="manual.html#IDX1384">JOIN</a></li>
</ul>

<h2>K</h2>

<ul>
<li><a href="manual.html#IDX588">KILL</a></li>
</ul>

<h2>L</h2>

<ul>
<li><a href="manual.html#IDX139">LAST_INSERT_ID()</a></li>

<li><a href="manual.html#IDX1331">LAST_INSERT_ID([expr])</a></li>

<li><a href="manual.html#IDX1183">LCASE()</a></li>

<li><a href="manual.html#IDX319">LD_RUN_PATH environment
variable</a>, <a href="manual.html#IDX341">LD_RUN_PATH environment
variable</a>, <a href="manual.html#IDX353">LD_RUN_PATH environment
variable</a>, <a href="manual.html#IDX1878">LD_RUN_PATH environment
variable</a></li>

<li><a href="manual.html#IDX1251">LEAST()</a></li>

<li><a href="manual.html#IDX848">LEFT JOIN</a>, <a
href="manual.html#IDX1387">LEFT JOIN</a></li>

<li><a href="manual.html#IDX1388">LEFT OUTER JOIN</a></li>

<li><a href="manual.html#IDX1163">LEFT()</a></li>

<li><a href="manual.html#IDX1591">length DBI method</a></li>

<li><a href="manual.html#IDX1152">LENGTH()</a></li>

<li><a href="manual.html#IDX1105">less than (&lt;)</a></li>

<li><a href="manual.html#IDX1103">less than or equal
(&lt;=)</a></li>

<li><a href="manual.html#IDX1194">LIKE</a></li>

<li><a href="manual.html#IDX872">LIKE, and indexes</a></li>

<li><a href="manual.html#IDX873">LIKE, and wildcards</a></li>

<li><a href="manual.html#IDX850">LIMIT</a>, <a
href="manual.html#IDX1345">LIMIT</a></li>

<li><a href="manual.html#IDX1234">LN()</a></li>

<li><a href="manual.html#IDX1424">LOAD DATA INFILE</a>, <a
href="manual.html#IDX1802">LOAD DATA INFILE</a></li>

<li><a href="manual.html#IDX1188">LOAD_FILE()</a></li>

<li><a href="manual.html#IDX1157">LOCATE()</a>, <a
href="manual.html#IDX1159">LOCATE()</a></li>

<li><a href="manual.html#IDX1491">LOCK TABLES</a></li>

<li><a href="manual.html#IDX1235">LOG()</a></li>

<li><a href="manual.html#IDX1237">LOG10()</a></li>

<li><a href="manual.html#IDX1236">LOG2()</a></li>

<li><a href="manual.html#IDX1125">Logical operators</a></li>

<li><a href="manual.html#IDX1040">LONGBLOB</a></li>

<li><a href="manual.html#IDX1041">LONGTEXT</a></li>

<li><a href="manual.html#IDX1184">LOWER()</a></li>

<li><a href="manual.html#IDX1161">LPAD()</a></li>

<li><a href="manual.html#IDX1169">LTRIM()</a></li>
</ul>

<h2>M</h2>

<ul>
<li><a href="manual.html#IDX1181">MAKE_SET()</a></li>

<li><a href="manual.html#IDX1343">MASTER_POS_WAIT()</a></li>

<li><a href="manual.html#IDX1203">MATCH ... AGAINST()</a></li>

<li><a href="manual.html#IDX1219">mathematical functions</a></li>

<li><a href="manual.html#IDX1353">MAX()</a></li>

<li><a href="manual.html#IDX1593">max_length DBI method</a></li>

<li><a href="manual.html#IDX1324">MD5()</a></li>

<li><a href="manual.html#IDX1038">MEDIUMBLOB</a></li>

<li><a href="manual.html#IDX1003">MEDIUMINT</a></li>

<li><a href="manual.html#IDX1039">MEDIUMTEXT</a></li>

<li><a href="manual.html#IDX1166">MID()</a></li>

<li><a href="manual.html#IDX1352">MIN()</a></li>

<li><a href="manual.html#IDX1222">minus, unary (-)</a></li>

<li><a href="manual.html#IDX1270">MINUTE()</a></li>

<li><a href="manual.html#IDX1312">miscellaneous functions</a></li>

<li><a href="manual.html#IDX1226">MOD()</a></li>

<li><a href="manual.html#IDX1228">modulo (%)</a></li>

<li><a href="manual.html#IDX1263">MONTH()</a></li>

<li><a href="manual.html#IDX1265">MONTHNAME()</a></li>

<li><a href="manual.html#IDX1216">multiplication (*)</a></li>

<li><a href="manual.html#IDX1684"><code>my_init()</code></a></li>

<li><a href="manual.html#IDX1627">my_ulonglong C type</a></li>

<li><a href="manual.html#IDX1628">my_ulonglong values,
printing</a></li>

<li><a href="manual.html#IDX1622">MYSQL C type</a></li>

<li><a
href="manual.html#IDX1631"><code>mysql_affected_rows()</code></a></li>

<li><a
href="manual.html#IDX1632"><code>mysql_change_user()</code></a></li>

<li><a
href="manual.html#IDX1633"><code>mysql_character_set_name()</code></a></li>

<li><a
href="manual.html#IDX1634"><code>mysql_close()</code></a></li>

<li><a
href="manual.html#IDX1635"><code>mysql_connect()</code></a></li>

<li><a
href="manual.html#IDX1636"><code>mysql_create_db()</code></a></li>

<li><a
href="manual.html#IDX1637"><code>mysql_data_seek()</code></a></li>

<li><a href="manual.html#IDX675"><code>MYSQL_DEBUG</code>
environment variable</a></li>

<li><a href="manual.html#IDX1855">MYSQL_DEBUG environment
variable</a>, <a href="manual.html#IDX1880">MYSQL_DEBUG environment
variable</a></li>

<li><a
href="manual.html#IDX1638"><code>mysql_debug()</code></a></li>

<li><a
href="manual.html#IDX1639"><code>mysql_drop_db()</code></a></li>

<li><a
href="manual.html#IDX1640"><code>mysql_dump_debug_info()</code></a></li>

<li><a href="manual.html#IDX1641"><code>mysql_eof()</code></a></li>

<li><a
href="manual.html#IDX1642"><code>mysql_errno()</code></a></li>

<li><a
href="manual.html#IDX1643"><code>mysql_error()</code></a></li>

<li><a
href="manual.html#IDX1644"><code>mysql_escape_string()</code></a></li>

<li><a
href="manual.html#IDX1645"><code>mysql_fetch_field()</code></a></li>

<li><a
href="manual.html#IDX1647"><code>mysql_fetch_field_direct()</code></a></li>

<li><a
href="manual.html#IDX1646"><code>mysql_fetch_fields()</code></a></li>

<li><a
href="manual.html#IDX1648"><code>mysql_fetch_lengths()</code></a></li>

<li><a
href="manual.html#IDX1649"><code>mysql_fetch_row()</code></a></li>

<li><a href="manual.html#IDX1625">MYSQL_FIELD C type</a></li>

<li><a
href="manual.html#IDX1650"><code>mysql_field_count()</code></a>, <a
href="manual.html#IDX1667"><code>mysql_field_count()</code></a></li>

<li><a href="manual.html#IDX1626">MYSQL_FIELD_OFFSET C
type</a></li>

<li><a
href="manual.html#IDX1651"><code>mysql_field_seek()</code></a></li>

<li><a
href="manual.html#IDX1652"><code>mysql_field_tell()</code></a></li>

<li><a
href="manual.html#IDX1653"><code>mysql_free_result()</code></a></li>

<li><a
href="manual.html#IDX1654"><code>mysql_get_client_info()</code></a></li>

<li><a
href="manual.html#IDX1655"><code>mysql_get_host_info()</code></a></li>

<li><a
href="manual.html#IDX1656"><code>mysql_get_proto_info()</code></a></li>

<li><a
href="manual.html#IDX1657"><code>mysql_get_server_info()</code></a></li>

<li><a href="manual.html#IDX677"><code>MYSQL_HISTFILE</code>
environment variable</a></li>

<li><a href="manual.html#IDX1882">MYSQL_HISTFILE environment
variable</a></li>

<li><a href="manual.html#IDX1884">MYSQL_HOST environment
variable</a></li>

<li><a href="manual.html#IDX470"><code>MYSQL_HOST</code>
environment variable</a></li>

<li><a href="manual.html#IDX1411">mysql_info()</a>, <a
href="manual.html#IDX1420">mysql_info()</a>, <a
href="manual.html#IDX1426">mysql_info()</a>, <a
href="manual.html#IDX1467">mysql_info()</a></li>

<li><a
href="manual.html#IDX1658"><code>mysql_info()</code></a></li>

<li><a
href="manual.html#IDX1659"><code>mysql_init()</code></a></li>

<li><a href="manual.html#IDX138">mysql_insert_id()</a></li>

<li><a
href="manual.html#IDX1660"><code>mysql_insert_id()</code></a></li>

<li><a
href="manual.html#IDX1661"><code>mysql_kill()</code></a></li>

<li><a
href="manual.html#IDX1662"><code>mysql_list_dbs()</code></a></li>

<li><a
href="manual.html#IDX1663"><code>mysql_list_fields()</code></a></li>

<li><a
href="manual.html#IDX1664"><code>mysql_list_processes()</code></a></li>

<li><a
href="manual.html#IDX1665"><code>mysql_list_tables()</code></a></li>

<li><a
href="manual.html#IDX1666"><code>mysql_num_fields()</code></a></li>

<li><a
href="manual.html#IDX1668"><code>mysql_num_rows()</code></a></li>

<li><a
href="manual.html#IDX1669"><code>mysql_options()</code></a></li>

<li><a
href="manual.html#IDX1670"><code>mysql_ping()</code></a></li>

<li><a href="manual.html#IDX1886">MYSQL_PS1 environment
variable</a></li>

<li><a href="manual.html#IDX1888">MYSQL_PWD environment
variable</a></li>

<li><a href="manual.html#IDX472"><code>MYSQL_PWD</code> environment
variable</a>, <a href="manual.html#IDX673"><code>MYSQL_PWD</code>
environment variable</a></li>

<li><a href="manual.html#IDX1671"><code>mysql_query()</code></a>,
<a href="manual.html#IDX1690"><code>mysql_query()</code></a></li>

<li><a
href="manual.html#IDX1672"><code>mysql_real_connect()</code></a></li>

<li><a
href="manual.html#IDX1673"><code>mysql_real_escape_string()</code></a></li>

<li><a
href="manual.html#IDX953">mysql_real_escape_string()</a></li>

<li><a
href="manual.html#IDX1674"><code>mysql_real_query()</code></a></li>

<li><a
href="manual.html#IDX1675"><code>mysql_reload()</code></a></li>

<li><a href="manual.html#IDX1623">MYSQL_RES C type</a></li>

<li><a href="manual.html#IDX1624">MYSQL_ROW C type</a></li>

<li><a
href="manual.html#IDX1676"><code>mysql_row_seek()</code></a></li>

<li><a
href="manual.html#IDX1677"><code>mysql_row_tell()</code></a></li>

<li><a
href="manual.html#IDX1678"><code>mysql_select_db()</code></a></li>

<li><a
href="manual.html#IDX1689"><code>mysql_server_end()</code></a></li>

<li><a
href="manual.html#IDX1688"><code>mysql_server_init()</code></a></li>

<li><a
href="manual.html#IDX1679"><code>mysql_shutdown()</code></a></li>

<li><a
href="manual.html#IDX1680"><code>mysql_stat()</code></a></li>

<li><a
href="manual.html#IDX1681"><code>mysql_store_result()</code></a>,
<a
href="manual.html#IDX1691"><code>mysql_store_result()</code></a></li>

<li><a href="manual.html#IDX440"><code>MYSQL_TCP_PORT</code>
environment variable</a>, <a
href="manual.html#IDX671"><code>MYSQL_TCP_PORT</code> environment
variable</a></li>

<li><a href="manual.html#IDX447">MYSQL_TCP_PORT environment
variable</a>, <a href="manual.html#IDX1890">MYSQL_TCP_PORT
environment variable</a></li>

<li><a
href="manual.html#IDX1686"><code>mysql_thread_end()</code></a></li>

<li><a
href="manual.html#IDX1682"><code>mysql_thread_id()</code></a></li>

<li><a
href="manual.html#IDX1685"><code>mysql_thread_init()</code></a></li>

<li><a
href="manual.html#IDX1687"><code>mysql_thread_safe()</code></a></li>

<li><a href="manual.html#IDX295">MYSQL_UNIX_PORT environment
variable</a>, <a href="manual.html#IDX446">MYSQL_UNIX_PORT
environment variable</a>, <a
href="manual.html#IDX1892">MYSQL_UNIX_PORT environment
variable</a></li>

<li><a href="manual.html#IDX439"><code>MYSQL_UNIX_PORT</code>
environment variable</a>, <a
href="manual.html#IDX669"><code>MYSQL_UNIX_PORT</code> environment
variable</a></li>

<li><a
href="manual.html#IDX1683"><code>mysql_use_result()</code></a></li>
</ul>

<h2>N</h2>

<ul>
<li><a href="manual.html#IDX1595">NAME DBI method</a></li>

<li><a href="manual.html#IDX1027">NATIONAL CHAR</a></li>

<li><a href="manual.html#IDX1389">NATURAL LEFT JOIN</a></li>

<li><a href="manual.html#IDX1390">NATURAL LEFT OUTER JOIN</a></li>

<li><a href="manual.html#IDX1393">NATURAL RIGHT JOIN</a></li>

<li><a href="manual.html#IDX1394">NATURAL RIGHT OUTER JOIN</a></li>

<li><a href="manual.html#IDX1028">NCHAR</a></li>

<li><a href="manual.html#IDX935">newline (\n)</a></li>

<li><a href="manual.html#IDX1118">NOT BETWEEN</a></li>

<li><a href="manual.html#IDX1101">not equal (!=)</a></li>

<li><a href="manual.html#IDX1099">not equal (&lt;&gt;)</a></li>

<li><a href="manual.html#IDX1120">NOT IN</a></li>

<li><a href="manual.html#IDX1195">NOT LIKE</a></li>

<li><a href="manual.html#IDX1201">NOT REGEXP</a></li>

<li><a href="manual.html#IDX1127">NOT, logical</a></li>

<li><a href="manual.html#IDX1288">NOW()</a></li>

<li><a href="manual.html#IDX927">NUL</a></li>

<li><a href="manual.html#IDX394">NULL</a>, <a
href="manual.html#IDX1801">NULL</a></li>

<li><a href="manual.html#IDX961">NULL value</a></li>

<li><a href="manual.html#IDX1566">NULLABLE DBI method</a></li>

<li><a href="manual.html#IDX1138">NULLIF()</a></li>

<li><a href="manual.html#IDX1568">NUM_OF_FIELDS DBI method</a></li>

<li><a href="manual.html#IDX1021">NUMERIC</a></li>
</ul>

<h2>O</h2>

<ul>
<li><a href="manual.html#IDX1147">OCT()</a></li>

<li><a href="manual.html#IDX1153">OCTET_LENGTH()</a></li>

<li><a href="manual.html#IDX1126">Operators, logical</a></li>

<li><a href="manual.html#IDX580">OPTIMIZE TABLE</a></li>

<li><a href="manual.html#IDX1303">OR, bitwise</a></li>

<li><a href="manual.html#IDX1131">OR, logical</a></li>

<li><a href="manual.html#IDX1144">ORD()</a></li>

<li><a href="manual.html#IDX1463">ORDER BY</a></li>
</ul>

<h2>P</h2>

<ul>
<li><a href="manual.html#IDX1088">parentheses ( and )</a></li>

<li><a href="manual.html#IDX483">PASSWORD()</a>, <a
href="manual.html#IDX534">PASSWORD()</a>, <a
href="manual.html#IDX1319">PASSWORD()</a>, <a
href="manual.html#IDX1765">PASSWORD()</a></li>

<li><a href="manual.html#IDX205">PATH environment variable</a>, <a
href="manual.html#IDX1894">PATH environment variable</a></li>

<li><a href="manual.html#IDX1272">PERIOD_ADD()</a></li>

<li><a href="manual.html#IDX1273">PERIOD_DIFF()</a></li>

<li><a href="manual.html#IDX1241">PI()</a></li>

<li><a href="manual.html#IDX1158">POSITION()</a></li>

<li><a href="manual.html#IDX1238">POW()</a></li>

<li><a href="manual.html#IDX1239">POWER()</a></li>

<li><a href="manual.html#IDX1544">prepare() DBI method</a></li>

<li><a href="manual.html#IDX1438">PRIMARY KEY</a>, <a
href="manual.html#IDX1462">PRIMARY KEY</a></li>

<li><a href="manual.html#IDX617">PROCESSLIST</a></li>
</ul>

<h2>Q</h2>

<ul>
<li><a href="manual.html#IDX1266">QUARTER()</a></li>

<li><a href="manual.html#IDX1189">QUOTE()</a></li>

<li><a href="manual.html#IDX1550">quote() DBI method</a></li>

<li><a href="manual.html#IDX970">quoting of identifiers</a></li>
</ul>

<h2>R</h2>

<ul>
<li><a href="manual.html#IDX1254">RADIANS()</a></li>

<li><a href="manual.html#IDX1250">RAND()</a></li>

<li><a href="manual.html#IDX1018">REAL</a></li>

<li><a href="manual.html#IDX1199">REGEXP</a></li>

<li><a href="manual.html#IDX1338">RELEASE_LOCK()</a></li>

<li><a href="manual.html#IDX1470">RENAME TABLE</a></li>

<li><a href="manual.html#IDX556">REPAIR TABLE</a></li>

<li><a href="manual.html#IDX1175">REPEAT()</a></li>

<li><a href="manual.html#IDX1423">REPLACE</a></li>

<li><a href="manual.html#IDX1412">REPLACE ... SELECT</a></li>

<li><a href="manual.html#IDX1174">REPLACE()</a></li>

<li><a href="manual.html#IDX546">REQUIRE GRANT option</a></li>

<li><a href="manual.html#IDX554">RESTORE TABLE</a></li>

<li><a href="manual.html#IDX937">return (\r)</a></li>

<li><a href="manual.html#IDX1176">REVERSE()</a></li>

<li><a href="manual.html#IDX507">REVOKE</a></li>

<li><a href="manual.html#IDX1391">RIGHT JOIN</a></li>

<li><a href="manual.html#IDX1392">RIGHT OUTER JOIN</a></li>

<li><a href="manual.html#IDX1164">RIGHT()</a></li>

<li><a href="manual.html#IDX1200">RLIKE</a></li>

<li><a href="manual.html#IDX130">ROLLBACK</a>, <a
href="manual.html#IDX1490">ROLLBACK</a></li>

<li><a href="manual.html#IDX1231">ROUND()</a>, <a
href="manual.html#IDX1232">ROUND()</a></li>

<li><a href="manual.html#IDX1564">rows DBI method</a></li>

<li><a href="manual.html#IDX1162">RPAD()</a></li>

<li><a href="manual.html#IDX1170">RTRIM()</a></li>
</ul>

<h2>S</h2>

<ul>
<li><a href="manual.html#IDX1294">SEC_TO_TIME()</a></li>

<li><a href="manual.html#IDX1271">SECOND()</a></li>

<li><a href="manual.html#IDX1369">SELECT</a></li>

<li><a href="manual.html#IDX128">SELECT INTO TABLE</a></li>

<li><a href="manual.html#IDX840">SELECT speed</a></li>

<li><a href="manual.html#IDX832">SELECT, optimising</a></li>

<li><a href="manual.html#IDX1317">SESSION_USER()</a></li>

<li><a href="manual.html#IDX1043">SET</a>, <a
href="manual.html#IDX1067">SET</a></li>

<li><a href="manual.html#IDX910">SET OPTION</a></li>

<li><a href="manual.html#IDX535">SET PASSWORD statement</a></li>

<li><a href="manual.html#IDX1493">SET TRANSACTION</a></li>

<li><a href="manual.html#IDX1326">SHA()</a></li>

<li><a href="manual.html#IDX1325">SHA1()</a></li>

<li><a href="manual.html#IDX593">SHOW COLUMNS</a></li>

<li><a href="manual.html#IDX602">SHOW CREATE TABLE</a></li>

<li><a href="manual.html#IDX590">SHOW DATABASE INFO</a></li>

<li><a href="manual.html#IDX591">SHOW DATABASES</a></li>

<li><a href="manual.html#IDX594">SHOW FIELDS</a></li>

<li><a href="manual.html#IDX601">SHOW GRANTS</a></li>

<li><a href="manual.html#IDX595">SHOW INDEX</a></li>

<li><a href="manual.html#IDX596">SHOW KEYS</a></li>

<li><a href="manual.html#IDX604">SHOW MASTER LOGS</a></li>

<li><a href="manual.html#IDX603">SHOW MASTER STATUS</a></li>

<li><a href="manual.html#IDX599">SHOW PROCESSLIST</a></li>

<li><a href="manual.html#IDX605">SHOW SLAVE STATUS</a></li>

<li><a href="manual.html#IDX597">SHOW STATUS</a></li>

<li><a href="manual.html#IDX600">SHOW TABLE STATUS</a></li>

<li><a href="manual.html#IDX592">SHOW TABLES</a></li>

<li><a href="manual.html#IDX598">SHOW VARIABLES</a></li>

<li><a href="manual.html#IDX606">SHOW WARNINGS</a></li>

<li><a href="manual.html#IDX1225">SIGN()</a></li>

<li><a href="manual.html#IDX1243">SIN()</a></li>

<li><a href="manual.html#IDX929">single quote (\')</a></li>

<li><a href="manual.html#IDX1002">SMALLINT</a></li>

<li><a href="manual.html#IDX1172">SOUNDEX()</a></li>

<li><a href="manual.html#IDX1196">SOUNDS LIKE</a></li>

<li><a href="manual.html#IDX1173">SPACE()</a></li>

<li><a href="manual.html#IDX1500">SQL_CACHE</a></li>

<li><a href="manual.html#IDX1501">SQL_NO_CACHE</a></li>

<li><a href="manual.html#IDX1240">SQRT()</a></li>

<li><a href="manual.html#IDX528">statements, GRANT</a></li>

<li><a href="manual.html#IDX533">statements, INSERT</a></li>

<li><a href="manual.html#IDX1356">STD()</a></li>

<li><a href="manual.html#IDX1357">STDDEV()</a></li>

<li><a href="manual.html#IDX1395">STRAIGHT_JOIN</a></li>

<li><a href="manual.html#IDX1202">STRCMP()</a></li>

<li><a href="manual.html#IDX1190">string comparison
functions</a></li>

<li><a href="manual.html#IDX1141">string functions</a></li>

<li><a href="manual.html#IDX1277">SUBDATE()</a></li>

<li><a href="manual.html#IDX1165">SUBSTRING()</a>, <a
href="manual.html#IDX1167">SUBSTRING()</a></li>

<li><a href="manual.html#IDX1168">SUBSTRING_INDEX()</a></li>

<li><a href="manual.html#IDX1214">subtraction (-)</a></li>

<li><a href="manual.html#IDX1354">SUM()</a></li>

<li><a href="manual.html#IDX1289">SYSDATE()</a></li>

<li><a href="manual.html#IDX1316">SYSTEM_USER()</a></li>
</ul>

<h2>T</h2>

<ul>
<li><a href="manual.html#IDX940">tab (\t)</a></li>

<li><a href="manual.html#IDX1597">table DBI method</a></li>

<li><a href="manual.html#IDX886">table_cache</a></li>

<li><a href="manual.html#IDX1244">TAN()</a></li>

<li><a href="manual.html#IDX1037">TEXT</a>, <a
href="manual.html#IDX1062">TEXT</a></li>

<li><a href="manual.html#IDX616">threads</a></li>

<li><a href="manual.html#IDX1025">TIME</a>, <a
href="manual.html#IDX1055">TIME</a></li>

<li><a href="manual.html#IDX1283">TIME_FORMAT()</a></li>

<li><a href="manual.html#IDX1295">TIME_TO_SEC()</a></li>

<li><a href="manual.html#IDX1024">TIMESTAMP</a>, <a
href="manual.html#IDX1050">TIMESTAMP</a></li>

<li><a href="manual.html#IDX1034">TINYBLOB</a></li>

<li><a href="manual.html#IDX999">TINYINT</a></li>

<li><a href="manual.html#IDX1035">TINYTEXT</a></li>

<li><a href="manual.html#IDX294">TMPDIR environment variable</a>,
<a href="manual.html#IDX1896">TMPDIR environment variable</a></li>

<li><a href="manual.html#IDX1280">TO_DAYS()</a></li>

<li><a href="manual.html#IDX1574">trace DBI method</a>, <a
href="manual.html#IDX1850">trace DBI method</a></li>

<li><a href="manual.html#IDX1171">TRIM()</a></li>

<li><a href="manual.html#IDX1422">TRUNCATE</a></li>

<li><a href="manual.html#IDX1255">TRUNCATE()</a></li>

<li><a href="manual.html#IDX1599">type DBI method</a></li>

<li><a href="manual.html#IDX998">Types</a></li>

<li><a href="manual.html#IDX1791">TZ environment variable</a>, <a
href="manual.html#IDX1898">TZ environment variable</a></li>
</ul>

<h2>U</h2>

<ul>
<li><a href="manual.html#IDX1185">UCASE()</a></li>

<li><a href="manual.html#IDX1729">UDF functions</a></li>

<li><a href="manual.html#IDX1767">ulimit</a></li>

<li><a href="manual.html#IDX1776">UMASK environment variable</a>,
<a href="manual.html#IDX1902">UMASK environment variable</a></li>

<li><a href="manual.html#IDX1778">UMASK_DIR environment
variable</a>, <a href="manual.html#IDX1900">UMASK_DIR environment
variable</a></li>

<li><a href="manual.html#IDX1223">unary minus (-)</a></li>

<li><a href="manual.html#IDX410">UNION</a>, <a
href="manual.html#IDX1407">UNION</a></li>

<li><a href="manual.html#IDX1461">UNIQUE</a></li>

<li><a href="manual.html#IDX1291">UNIX_TIMESTAMP()</a></li>

<li><a href="manual.html#IDX1492">UNLOCK TABLES</a></li>

<li><a href="manual.html#IDX1419">UPDATE</a></li>

<li><a href="manual.html#IDX1186">UPPER()</a></li>

<li><a href="manual.html#IDX1481">USE</a></li>

<li><a href="manual.html#IDX1373">USE INDEX</a>, <a
href="manual.html#IDX1402">USE INDEX</a></li>

<li><a href="manual.html#IDX1375">USE KEY</a>, <a
href="manual.html#IDX1405">USE KEY</a></li>

<li><a href="manual.html#IDX1904">USER environment
variable</a></li>

<li><a href="manual.html#IDX474"><code>USER</code> environment
variable</a></li>

<li><a href="manual.html#IDX1315">USER()</a></li>

<li><a href="manual.html#IDX1730">User-defined functions</a></li>
</ul>

<h2>V</h2>

<ul>
<li><a href="manual.html#IDX1033">VARCHAR</a>, <a
href="manual.html#IDX1060">VARCHAR</a></li>

<li><a href="manual.html#IDX1355">VARIANCE()</a></li>

<li><a href="manual.html#IDX1334">VERSION()</a></li>
</ul>

<h2>W</h2>

<ul>
<li><a href="manual.html#IDX1267">WEEK()</a></li>

<li><a href="manual.html#IDX1260">WEEKDAY()</a></li>

<li><a href="manual.html#IDX842">WHERE</a></li>

<li><a href="manual.html#IDX946">Wildcard character (%)</a></li>

<li><a href="manual.html#IDX948">Wildcard character (_)</a></li>

<li><a href="manual.html#IDX212">without-server option</a></li>
</ul>

<h2>X</h2>

<ul>
<li><a href="manual.html#IDX1307">XOR, bitwise</a></li>

<li><a href="manual.html#IDX1133">XOR, logical</a></li>
</ul>

<h2>Y</h2>

<ul>
<li><a href="manual.html#IDX1026">YEAR</a>, <a
href="manual.html#IDX1056">YEAR</a></li>

<li><a href="manual.html#IDX1268">YEAR()</a></li>
</ul>

<ul>
<li><a href="manual.html#IDX1302">| (bitwise OR)</a></li>

<li><a href="manual.html#IDX1132">|| (logical OR)</a></li>

<li><a href="manual.html#IDX1310">~</a></li>
</ul>

<br />
<br />
 

<h1><a id="Concept_Index" name="Concept_Index"
href="manual_toc.html#Concept_Index">Concept Index</a></h1>

<h2>A</h2>

<ul>
<li><a href="manual.html#IDX1759">aborted clients</a></li>

<li><a href="manual.html#IDX1760">aborted connection</a></li>

<li><a href="manual.html#IDX476">access control</a></li>

<li><a href="manual.html#IDX1757">access denied errors</a></li>

<li><a href="manual.html#IDX452">access privileges</a></li>

<li><a href="manual.html#IDX1605">Access program</a></li>

<li><a href="manual.html#IDX137"><code>ACID</code></a></li>

<li><a href="manual.html#IDX1526">ACID</a></li>

<li><a href="manual.html#IDX455">ACLs</a></li>

<li><a href="manual.html#IDX350">ActiveState Perl</a></li>

<li><a href="manual.html#IDX629">adding, character sets</a></li>

<li><a href="manual.html#IDX1746">adding, native functions</a></li>

<li><a href="manual.html#IDX1721">adding, new functions</a></li>

<li><a href="manual.html#IDX530">adding, new user
privileges</a></li>

<li><a href="manual.html#IDX202">adding, new users</a></li>

<li><a href="manual.html#IDX1750">adding, procedures</a></li>

<li><a href="manual.html#IDX1732">adding, user-definable
functions</a></li>

<li><a href="manual.html#IDX750">administration, server</a></li>

<li><a href="manual.html#IDX1606">ADO program</a></li>

<li><a href="manual.html#IDX393">age, calculating</a></li>

<li><a href="manual.html#IDX980">alias names,
case-sensitivity</a></li>

<li><a href="manual.html#IDX1368">aliases, for expressions</a></li>

<li><a href="manual.html#IDX1378">aliases, for tables</a></li>

<li><a href="manual.html#IDX1366">aliases, in <code>GROUP BY</code>
clauses</a></li>

<li><a href="manual.html#IDX1364">aliases, in <code>ORDER BY</code>
clauses</a></li>

<li><a href="manual.html#IDX968">aliases, names</a></li>

<li><a href="manual.html#IDX1370">aliases, on expressions</a></li>

<li><a href="manual.html#IDX482">anonymous user</a>, <a
href="manual.html#IDX487">anonymous user</a>, <a
href="manual.html#IDX522">anonymous user</a>, <a
href="manual.html#IDX524">anonymous user</a></li>

<li><a href="manual.html#IDX117">ANSI mode, running</a></li>

<li><a href="manual.html#IDX514">ANSI SQL, differences
from</a></li>

<li><a href="manual.html#IDX115">ANSI SQL92, extensions to</a></li>

<li><a href="manual.html#IDX108">answering questions,
etiquette</a></li>

<li><a href="manual.html#IDX425">Apache</a></li>

<li><a href="manual.html#IDX1530">APIs</a></li>

<li><a href="manual.html#IDX1535">APIs, Perl</a></li>

<li><a href="manual.html#IDX211">applying, patches</a></li>

<li><a href="manual.html#IDX1737">argument processing</a></li>

<li><a href="manual.html#IDX1210">arithmetic expressions</a></li>

<li><a href="manual.html#IDX1616">AUTO-INCREMENT, ODBC</a></li>

<li><a href="manual.html#IDX417">AUTO_INCREMENT</a></li>

<li><a href="manual.html#IDX1804"><code>AUTO_INCREMENT</code>, and
<code>NULL</code> values</a></li>
</ul>

<h2>B</h2>

<ul>
<li><a href="manual.html#IDX767">backing up, databases</a>, <a
href="manual.html#IDX772">backing up, databases</a></li>

<li><a href="manual.html#IDX925">backslash, escape
character</a></li>

<li><a href="manual.html#IDX549">backups</a></li>

<li><a href="manual.html#IDX553">backups, database</a></li>

<li><a href="manual.html#IDX419">batch mode</a></li>

<li><a href="manual.html#IDX703"><code>batch</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1503"><code>BDB</code> table
type</a></li>

<li><a href="manual.html#IDX136"><code>BDB</code> tables</a></li>

<li><a href="manual.html#IDX823">benchmark suite</a></li>

<li><a href="manual.html#IDX826">benchmarks</a></li>

<li><a href="manual.html#IDX1504"><code>BerkeleyDB</code> table
type</a></li>

<li><a href="manual.html#IDX1796">Big5 Chinese character
encoding</a></li>

<li><a href="manual.html#IDX196">binary distributions</a></li>

<li><a href="manual.html#IDX198">binary distributions,
installing</a></li>

<li><a href="manual.html#IDX344">binary distributions, on
HP-UX</a></li>

<li><a href="manual.html#IDX321">binary distributions, on
Linux</a></li>

<li><a href="manual.html#IDX792">binary log</a></li>

<li><a href="manual.html#IDX811"><code>Binlog_Dump</code></a></li>

<li><a href="manual.html#IDX416">bit_functions, example</a></li>

<li><a href="manual.html#IDX241">BitKeeper tree</a></li>

<li><a href="manual.html#IDX1064"><code>BLOB</code> columns,
default values</a></li>

<li><a href="manual.html#IDX1441"><code>BLOB</code> columns,
indexing</a></li>

<li><a href="manual.html#IDX952"><code>BLOB</code>, inserting
binary data</a></li>

<li><a href="manual.html#IDX1081"><code>BLOB</code>, size</a></li>

<li><a href="manual.html#IDX1607">Borland Builder 4
program</a></li>

<li><a href="manual.html#IDX1709">Borland C++ compiler</a></li>

<li><a href="manual.html#IDX996">brackets, square</a></li>

<li><a href="manual.html#IDX1532">buffer sizes, client</a></li>

<li><a href="manual.html#IDX899">buffer sizes, <code>mysqld</code>
server</a></li>

<li><a href="manual.html#IDX101">bug reports, criteria for</a></li>

<li><a href="manual.html#IDX100">bug reports, e-mail
address</a></li>

<li><a href="manual.html#IDX150">bugs, known</a></li>

<li><a href="manual.html#IDX93">bugs, reporting</a></li>

<li><a href="manual.html#IDX1700">building, client
programs</a></li>
</ul>

<h2>C</h2>

<ul>
<li><a href="manual.html#IDX1620">C API, datatypes</a></li>

<li><a href="manual.html#IDX1629">C API, functions</a></li>

<li><a href="manual.html#IDX1697">C API, linking problems</a></li>

<li><a href="manual.html#IDX1825">C++</a></li>

<li><a href="manual.html#IDX1708">C++ APIs</a></li>

<li><a href="manual.html#IDX1614">C++ Builder</a></li>

<li><a href="manual.html#IDX258">C++ compiler cannot create
executables</a></li>

<li><a href="manual.html#IDX228">C++ compiler,
<code>gcc</code></a></li>

<li><a href="manual.html#IDX587">caches, clearing</a></li>

<li><a href="manual.html#IDX391">calculating, dates</a></li>

<li><a href="manual.html#IDX1736">calling sequences for aggregate
functions, UDF</a></li>

<li><a href="manual.html#IDX1735">calling sequences for simple
functions, UDF</a></li>

<li><a href="manual.html#IDX1763">can't create/write to
file</a></li>

<li><a href="manual.html#IDX463">case-sensitivity, in access
checking</a></li>

<li><a href="manual.html#IDX976">case-sensitivity, in
names</a></li>

<li><a href="manual.html#IDX1793">case-sensitivity, in
searches</a></li>

<li><a href="manual.html#IDX1192">case-sensitivity, in string
comparisons</a></li>

<li><a href="manual.html#IDX121">case-sensitivity, of database
names</a></li>

<li><a href="manual.html#IDX122">case-sensitivity, of table
names</a></li>

<li><a href="manual.html#IDX1205">cast operators</a></li>

<li><a href="manual.html#IDX1092">casts</a></li>

<li><a href="manual.html#IDX252"><code>cc1plus</code>
problems</a></li>

<li><a href="manual.html#IDX46">certification</a></li>

<li><a href="manual.html#IDX1832">ChangeLog</a></li>

<li><a href="manual.html#IDX499">changes to privileges</a></li>

<li><a href="manual.html#IDX1833">changes, log</a></li>

<li><a href="manual.html#IDX1843">changes, version 3.19</a></li>

<li><a href="manual.html#IDX1842">changes, version 3.20</a></li>

<li><a href="manual.html#IDX1839">changes, version 3.21</a></li>

<li><a href="manual.html#IDX1838">changes, version 3.22</a></li>

<li><a href="manual.html#IDX1837">changes, version 3.23</a></li>

<li><a href="manual.html#IDX1836">changes, version 4.0</a></li>

<li><a href="manual.html#IDX1835">changes, version 4.1</a></li>

<li><a href="manual.html#IDX218">changing socket location</a>, <a
href="manual.html#IDX303">changing socket location</a>, <a
href="manual.html#IDX1788">changing socket location</a></li>

<li><a href="manual.html#IDX1451">changing, column</a></li>

<li><a href="manual.html#IDX1818">changing, column order</a></li>

<li><a href="manual.html#IDX1453">changing, field</a></li>

<li><a href="manual.html#IDX1448">changing, table</a>, <a
href="manual.html#IDX1465">changing, table</a>, <a
href="manual.html#IDX1814">changing, table</a></li>

<li><a href="manual.html#IDX236">character sets</a>, <a
href="manual.html#IDX621">character sets</a></li>

<li><a href="manual.html#IDX628">character sets, adding</a></li>

<li><a href="manual.html#IDX704"><code>character-sets-dir</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX632">characters, multi-byte</a></li>

<li><a href="manual.html#IDX559">check options, myisamchk</a></li>

<li><a href="manual.html#IDX566">checking, tables for
errors</a></li>

<li><a href="manual.html#IDX340">checksum errors</a></li>

<li><a href="manual.html#IDX1795">Chinese</a></li>

<li><a href="manual.html#IDX1069">choosing types</a></li>

<li><a href="manual.html#IDX185">choosing, a MySQL version</a></li>

<li><a href="manual.html#IDX586">clearing, caches</a></li>

<li><a href="manual.html#IDX1698">client programs,
building</a></li>

<li><a href="manual.html#IDX1529">client tools</a></li>

<li><a href="manual.html#IDX1854">clients, debugging</a></li>

<li><a href="manual.html#IDX1702">clients, threaded</a></li>

<li><a href="manual.html#IDX890">closing, tables</a></li>

<li><a href="manual.html#IDX1608">ColdFusion program</a></li>

<li><a href="manual.html#IDX630">collating, strings</a></li>

<li><a href="manual.html#IDX979">column names,
case-sensitivity</a></li>

<li><a href="manual.html#IDX1452">column, changing</a></li>

<li><a href="manual.html#IDX1817">columns, changing</a></li>

<li><a href="manual.html#IDX781">columns, displaying</a></li>

<li><a href="manual.html#IDX879">columns, indexes</a></li>

<li><a href="manual.html#IDX967">columns, names</a></li>

<li><a href="manual.html#IDX1072">columns, other types</a></li>

<li><a href="manual.html#IDX383">columns, selecting</a></li>

<li><a href="manual.html#IDX1074">columns, storage
requirements</a></li>

<li><a href="manual.html#IDX990">columns, types</a></li>

<li><a href="manual.html#IDX15">command syntax</a></li>

<li><a href="manual.html#IDX682">command-line history</a></li>

<li><a href="manual.html#IDX696">command-line options,
<code>mysql</code></a></li>

<li><a href="manual.html#IDX691">command-line tool</a></li>

<li><a href="manual.html#IDX1764">commands out of sync</a></li>

<li><a href="manual.html#IDX201">commands, for binary
distribution</a></li>

<li><a href="manual.html#IDX746">commands, list of</a></li>

<li><a href="manual.html#IDX809">commands, replication</a></li>

<li><a href="manual.html#IDX987">comments, adding</a></li>

<li><a href="manual.html#IDX148">comments, starting</a></li>

<li><a href="manual.html#IDX60">commercial support, types</a></li>

<li><a href="manual.html#IDX161">communications protocols</a></li>

<li><a href="manual.html#IDX156">comparisons, MySQL vs.
others</a></li>

<li><a href="manual.html#IDX306">compatibility, between MySQL
versions</a>, <a href="manual.html#IDX308">compatibility, between
MySQL versions</a>, <a href="manual.html#IDX310">compatibility,
between MySQL versions</a>, <a
href="manual.html#IDX312">compatibility, between MySQL
versions</a></li>

<li><a href="manual.html#IDX112">compatibility, with ANSI
SQL</a></li>

<li><a href="manual.html#IDX1198">compatibility, with mSQL</a></li>

<li><a href="manual.html#IDX974">compatibility, with ODBC</a>, <a
href="manual.html#IDX1012">compatibility, with ODBC</a>, <a
href="manual.html#IDX1095">compatibility, with ODBC</a>, <a
href="manual.html#IDX1116">compatibility, with ODBC</a>, <a
href="manual.html#IDX1398">compatibility, with ODBC</a>, <a
href="manual.html#IDX1436">compatibility, with ODBC</a>, <a
href="manual.html#IDX1841">compatibility, with ODBC</a></li>

<li><a href="manual.html#IDX124">compatibility, with Oracle</a>, <a
href="manual.html#IDX1359">compatibility, with Oracle</a>, <a
href="manual.html#IDX1487">compatibility, with Oracle</a></li>

<li><a href="manual.html#IDX126">compatibility, with
PostgreSQL</a></li>

<li><a href="manual.html#IDX1483">compatibility, with
Sybase</a></li>

<li><a href="manual.html#IDX229">compiler, C++
<code>gcc</code></a></li>

<li><a href="manual.html#IDX330">compiling, on Windows</a></li>

<li><a href="manual.html#IDX893">compiling, optimising</a></li>

<li><a href="manual.html#IDX243">compiling, problems</a></li>

<li><a href="manual.html#IDX904">compiling, speed</a></li>

<li><a href="manual.html#IDX221">compiling, statically</a></li>

<li><a href="manual.html#IDX1743">compiling, user-defined
functions</a></li>

<li><a href="manual.html#IDX41">compliance, Y2K</a></li>

<li><a href="manual.html#IDX705"><code>compress</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX660">compressed tables</a>, <a
href="manual.html#IDX1517">compressed tables</a></li>

<li><a href="manual.html#IDX649">config-file option</a></li>

<li><a href="manual.html#IDX251">config.cache</a></li>

<li><a href="manual.html#IDX246"><code>config.cache</code>
file</a></li>

<li><a href="manual.html#IDX503">configuration files</a></li>

<li><a href="manual.html#IDX215">configuration options</a></li>

<li><a href="manual.html#IDX257">configure option,
--with-low-memory</a></li>

<li><a href="manual.html#IDX213"><code>configure</code>
script</a></li>

<li><a href="manual.html#IDX249"><code>configure</code>, running
after prior invocation</a></li>

<li><a href="manual.html#IDX741"><code>connect_timeout</code>
variable</a></li>

<li><a href="manual.html#IDX326">connecting, remotely with
SSH</a></li>

<li><a href="manual.html#IDX359">connecting, to the server</a>, <a
href="manual.html#IDX465">connecting, to the server</a></li>

<li><a href="manual.html#IDX478">connecting, verification</a></li>

<li><a href="manual.html#IDX1761">connection, aborted</a></li>

<li><a href="manual.html#IDX835">constant table</a>, <a
href="manual.html#IDX844">constant table</a></li>

<li><a href="manual.html#IDX48">consulting</a></li>

<li><a href="manual.html#IDX51">contact information</a></li>

<li><a href="manual.html#IDX1821">contributed programs</a></li>

<li><a href="manual.html#IDX1831">contributing companies, list
of</a></li>

<li><a href="manual.html#IDX1830">contributors, list of</a></li>

<li><a href="manual.html#IDX477">control access</a></li>

<li><a href="manual.html#IDX13">conventions, typographical</a></li>

<li><a href="manual.html#IDX1827">converters</a></li>

<li><a href="manual.html#IDX159">converting, tools</a></li>

<li><a href="manual.html#IDX65">copyrights</a></li>

<li><a href="manual.html#IDX61">costs, support</a></li>

<li><a href="manual.html#IDX401">counting, table rows</a></li>

<li><a href="manual.html#IDX456">crackers, security
against</a></li>

<li><a href="manual.html#IDX1847">crash</a></li>

<li><a href="manual.html#IDX564">crash, recovery</a></li>

<li><a href="manual.html#IDX1780">crash, repeated</a></li>

<li><a href="manual.html#IDX825">crash-me</a></li>

<li><a href="manual.html#IDX819">crash-me program</a>, <a
href="manual.html#IDX824">crash-me program</a></li>

<li><a href="manual.html#IDX98">creating, bug reports</a></li>

<li><a href="manual.html#IDX369">creating, databases</a></li>

<li><a href="manual.html#IDX431">creating, default startup
options</a></li>

<li><a href="manual.html#IDX373">creating, tables</a></li>

<li><a href="manual.html#IDX104">customer support, mailing
address</a></li>

<li><a href="manual.html#IDX822">customers, of MySQL</a></li>

<li><a href="manual.html#IDX242">CVS tree</a></li>
</ul>

<h2>D</h2>

<ul>
<li><a href="manual.html#IDX622">data, character sets</a></li>

<li><a href="manual.html#IDX774">data, importing</a></li>

<li><a href="manual.html#IDX376">data, loading into tables</a></li>

<li><a href="manual.html#IDX377">data, retrieving</a></li>

<li><a href="manual.html#IDX864">data, size</a></li>

<li><a href="manual.html#IDX862">database design</a></li>

<li><a href="manual.html#IDX119">database names,
case-sensitivity</a>, <a href="manual.html#IDX977">database names,
case-sensitivity</a></li>

<li><a href="manual.html#IDX1432">database, deleting</a></li>

<li><a href="manual.html#IDX707"><code>database</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX548">databases, backups</a></li>

<li><a href="manual.html#IDX367">databases, creating</a></li>

<li><a href="manual.html#IDX18">databases, defined</a></li>

<li><a href="manual.html#IDX778">databases, displaying</a></li>

<li><a href="manual.html#IDX765">databases, dumping</a>, <a
href="manual.html#IDX770">databases, dumping</a></li>

<li><a href="manual.html#IDX403">databases, information
about</a></li>

<li><a href="manual.html#IDX155">databases, MySQL vs.
others</a></li>

<li><a href="manual.html#IDX964">databases, names</a></li>

<li><a href="manual.html#IDX803">databases, replicating</a></li>

<li><a href="manual.html#IDX371">databases, selecting</a></li>

<li><a href="manual.html#IDX918">databases, symbolic links</a></li>

<li><a href="manual.html#IDX368">databases, using</a></li>

<li><a href="manual.html#IDX1609">DataJunction</a></li>

<li><a href="manual.html#IDX1621">datatypes, C API</a></li>

<li><a href="manual.html#IDX1045">Date and Time types</a></li>

<li><a href="manual.html#IDX390">date calculations</a></li>

<li><a href="manual.html#IDX1798">DATE columns, problems</a></li>

<li><a href="manual.html#IDX42">date functions, Y2K
compliance</a></li>

<li><a href="manual.html#IDX1077">date types</a></li>

<li><a href="manual.html#IDX1047">date types, Y2K issues</a></li>

<li><a href="manual.html#IDX1054">date values, problems</a></li>

<li><a href="manual.html#IDX492"><code>db</code> table,
sorting</a></li>

<li><a href="manual.html#IDX1537"><code>DBI</code>
interface</a></li>

<li><a href="manual.html#IDX1538"><code>DBI</code> Perl
module</a></li>

<li><a href="manual.html#IDX1600"><code>DBI/DBD</code></a></li>

<li><a href="manual.html#IDX1857">DBUG package</a></li>

<li><a href="manual.html#IDX733"><code>debug-info</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX706"><code>debug</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1853">debugging, client</a></li>

<li><a href="manual.html#IDX1846">debugging, server</a></li>

<li><a href="manual.html#IDX995">decimal point</a></li>

<li><a href="manual.html#IDX466">default hostname</a></li>

<li><a href="manual.html#IDX193">default installation
location</a></li>

<li><a href="manual.html#IDX429">default options</a></li>

<li><a href="manual.html#IDX32">default values</a>, <a
href="manual.html#IDX817">default values</a>, <a
href="manual.html#IDX1410">default values</a>, <a
href="manual.html#IDX1437">default values</a></li>

<li><a href="manual.html#IDX1063">default values, <code>BLOB</code>
and <code>TEXT</code> columns</a></li>

<li><a href="manual.html#IDX232">default values,
suppression</a></li>

<li><a href="manual.html#IDX518">default, privileges</a></li>

<li><a
href="manual.html#IDX708"><code>default-character-set</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1706">defaults, embedded</a></li>

<li><a href="manual.html#IDX1417">delayed_insert_limit</a></li>

<li><a href="manual.html#IDX1431">deleting, database</a></li>

<li><a href="manual.html#IDX1727">deleting, function</a></li>

<li><a href="manual.html#IDX1456">deleting, index</a>, <a
href="manual.html#IDX1479">deleting, index</a></li>

<li><a href="manual.html#IDX1459">deleting, primary key</a></li>

<li><a href="manual.html#IDX1808">deleting, rows</a></li>

<li><a href="manual.html#IDX1472">deleting, table</a></li>

<li><a href="manual.html#IDX1787">deletion,
<code>mysql.sock</code></a></li>

<li><a href="manual.html#IDX1826">Delphi</a></li>

<li><a href="manual.html#IDX1613">Delphi program</a></li>

<li><a href="manual.html#IDX861">design, choices</a></li>

<li><a href="manual.html#IDX152">design, issues</a></li>

<li><a href="manual.html#IDX815">design, limitations</a></li>

<li><a href="manual.html#IDX1829">developers, list of</a></li>

<li><a href="manual.html#IDX240">development source tree</a></li>

<li><a href="manual.html#IDX994">digits</a></li>

<li><a href="manual.html#IDX192">directory structure,
default</a></li>

<li><a href="manual.html#IDX360">disconnecting, from the
server</a></li>

<li><a href="manual.html#IDX1785">disk full</a></li>

<li><a href="manual.html#IDX913">disk issues</a></li>

<li><a href="manual.html#IDX329">disks, splitting data
across</a></li>

<li><a href="manual.html#IDX992">display size</a></li>

<li><a href="manual.html#IDX779">displaying, database
information</a></li>

<li><a href="manual.html#IDX607">displaying, information,
<code>SHOW</code></a></li>

<li><a href="manual.html#IDX608">displaying, table status</a></li>

<li><a href="manual.html#IDX908">DNS</a></li>

<li><a href="manual.html#IDX305">downgrading</a></li>

<li><a href="manual.html#IDX170">downloading</a></li>

<li><a href="manual.html#IDX764">dumping, databases</a>, <a
href="manual.html#IDX769">dumping, databases</a></li>

<li><a href="manual.html#IDX1513">dynamic table
characteristics</a></li>
</ul>

<h2>E</h2>

<ul>
<li><a href="manual.html#IDX89">e-mail lists</a></li>

<li><a href="manual.html#IDX1714">Eiffel Wrapper</a></li>

<li><a href="manual.html#IDX1705">embedded MySQL server
library</a></li>

<li><a href="manual.html#IDX54">employment with MySQL</a></li>

<li><a href="manual.html#IDX52">employment, contact
information</a></li>

<li><a
href="manual.html#IDX713"><code>enable-named-commands</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX365">entering, queries</a></li>

<li><a href="manual.html#IDX1084">ENUM, size</a></li>

<li><a href="manual.html#IDX434">environment variables</a>, <a
href="manual.html#IDX504">environment variables</a>, <a
href="manual.html#IDX634">environment variables</a>, <a
href="manual.html#IDX667">environment variables</a></li>

<li><a href="manual.html#IDX1863">environment variables, list
of</a></li>

<li><a href="manual.html#IDX786">Errcode</a></li>

<li><a href="manual.html#IDX785">errno</a></li>

<li><a href="manual.html#IDX1774">error mesaages, can't find
file</a></li>

<li><a href="manual.html#IDX783">error messages,
displaying</a></li>

<li><a href="manual.html#IDX624">error messages, languages</a></li>

<li><a href="manual.html#IDX1755">errors, access denied</a></li>

<li><a href="manual.html#IDX568">errors, checking tables
for</a></li>

<li><a href="manual.html#IDX1753">errors, common</a></li>

<li><a href="manual.html#IDX339">errors, directory
checksum</a></li>

<li><a href="manual.html#IDX1741">errors, handling for
UDFs</a></li>

<li><a href="manual.html#IDX151">errors, known</a></li>

<li><a href="manual.html#IDX1769">errors, linking</a></li>

<li><a href="manual.html#IDX1754">errors, list of</a></li>

<li><a href="manual.html#IDX3">errors, reporting</a>, <a
href="manual.html#IDX86">errors, reporting</a>, <a
href="manual.html#IDX96">errors, reporting</a></li>

<li><a href="manual.html#IDX924">escape characters</a></li>

<li><a href="manual.html#IDX837">estimating, query
performance</a></li>

<li><a href="manual.html#IDX650">example option</a></li>

<li><a href="manual.html#IDX665">examples, compressed
tables</a></li>

<li><a href="manual.html#IDX578">examples, <code>myisamchk</code>
output</a></li>

<li><a href="manual.html#IDX407">examples, queries</a></li>

<li><a href="manual.html#IDX1610">Excel</a></li>

<li><a href="manual.html#IDX709"><code>execute</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1367">expression aliases</a>, <a
href="manual.html#IDX1371">expression aliases</a></li>

<li><a href="manual.html#IDX398">expressions, extended</a></li>

<li><a href="manual.html#IDX114">extensions, to ANSI SQL</a></li>

<li><a href="manual.html#IDX392">extracting, dates</a></li>
</ul>

<h2>F</h2>

<ul>
<li><a href="manual.html#IDX253"><code>fatal signal
11</code></a></li>

<li><a href="manual.html#IDX31">features of MySQL</a></li>

<li><a href="manual.html#IDX1454">field, changing</a></li>

<li><a href="manual.html#IDX793">files, binary log</a></li>

<li><a href="manual.html#IDX247">files,
<code>config.cache</code></a></li>

<li><a href="manual.html#IDX626">files, error messages</a></li>

<li><a href="manual.html#IDX217">files, log</a>, <a
href="manual.html#IDX797">files, log</a></li>

<li><a href="manual.html#IDX1775">files, not found message</a></li>

<li><a href="manual.html#IDX1773">files, permissions</a></li>

<li><a href="manual.html#IDX789">files, query log</a></li>

<li><a href="manual.html#IDX562">files, repairing</a></li>

<li><a href="manual.html#IDX422">files, script</a></li>

<li><a href="manual.html#IDX39">files, size limits</a></li>

<li><a href="manual.html#IDX796">files, slow query log</a></li>

<li><a href="manual.html#IDX775">files, text</a></li>

<li><a href="manual.html#IDX293">files, <code>tmp</code></a></li>

<li><a href="manual.html#IDX791">files, update log</a></li>

<li><a href="manual.html#IDX807">files,<tt>`my.cnf'</tt></a></li>

<li><a href="manual.html#IDX1008">floating-point number</a></li>

<li><a href="manual.html#IDX958">floats</a></li>

<li><a href="manual.html#IDX759">flush tables</a></li>

<li><a href="manual.html#IDX711"><code>force</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX145">foreign keys</a>, <a
href="manual.html#IDX408">foreign keys</a>, <a
href="manual.html#IDX1468">foreign keys</a></li>

<li><a href="manual.html#IDX76">free licensing</a></li>

<li><a href="manual.html#IDX264">FreeBSD troubleshooting</a></li>

<li><a href="manual.html#IDX1784">full disk</a></li>

<li><a href="manual.html#IDX1496">full-text search</a></li>

<li><a href="manual.html#IDX1497">FULLTEXT</a></li>

<li><a href="manual.html#IDX1728">function, deleting</a></li>

<li><a href="manual.html#IDX1086">functions for <code>SELECT</code>
and <code>WHERE</code> clauses</a></li>

<li><a href="manual.html#IDX1630">functions, C API</a></li>

<li><a href="manual.html#IDX1089">functions, grouping</a></li>

<li><a href="manual.html#IDX1748">functions, native,
adding</a></li>

<li><a href="manual.html#IDX1720">functions, new</a></li>

<li><a href="manual.html#IDX1734">functions, user-definable,
adding</a></li>

<li><a href="manual.html#IDX1724">functions, user-defined</a></li>
</ul>

<h2>G</h2>

<ul>
<li><a href="manual.html#IDX227"><code>gcc</code></a></li>

<li><a href="manual.html#IDX1848">gdb, using</a></li>

<li><a href="manual.html#IDX2">general information</a></li>

<li><a href="manual.html#IDX22">General Public License</a></li>

<li><a href="manual.html#IDX70">General Public License,
MySQL</a></li>

<li><a href="manual.html#IDX173">getting MySQL</a></li>

<li><a href="manual.html#IDX510">global privileges</a></li>

<li><a href="manual.html#IDX25">goals of MySQL</a></li>

<li><a href="manual.html#IDX1909">GPL, General Public
License</a></li>

<li><a href="manual.html#IDX1910">GPL, GNU General Public
License</a></li>

<li><a href="manual.html#IDX71">GPL, MySQL</a></li>

<li><a href="manual.html#IDX501">grant tables</a></li>

<li><a href="manual.html#IDX525">grant tables, re-creating</a></li>

<li><a href="manual.html#IDX484">grant tables, sorting</a>, <a
href="manual.html#IDX490">grant tables, sorting</a></li>

<li><a href="manual.html#IDX512">granting, privleges</a></li>

<li><a href="manual.html#IDX1365"><code>GROUP BY</code>, aliases
in</a></li>

<li><a href="manual.html#IDX1362"><code>GROUP BY</code>, extensions
to ANSI SQL</a>, <a href="manual.html#IDX1380"><code>GROUP
BY</code>, extensions to ANSI SQL</a></li>

<li><a href="manual.html#IDX1090">grouping, expressions</a></li>
</ul>

<h2>H</h2>

<ul>
<li><a href="manual.html#IDX1742">handling, errors</a></li>

<li><a href="manual.html#IDX1505"><code>HEAP</code> table
type</a></li>

<li><a href="manual.html#IDX651">help option</a></li>

<li><a href="manual.html#IDX699"><code>help</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX118">hints</a>, <a
href="manual.html#IDX1381">hints</a>, <a
href="manual.html#IDX1399">hints</a>, <a
href="manual.html#IDX1400">hints</a>, <a
href="manual.html#IDX1401">hints</a></li>

<li><a href="manual.html#IDX681">history file</a></li>

<li><a href="manual.html#IDX27">history of MySQL</a></li>

<li><a href="manual.html#IDX496"><code>host</code> table</a></li>

<li><a href="manual.html#IDX493"><code>host</code> table,
sorting</a></li>

<li><a href="manual.html#IDX715"><code>host</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX909">hostname caching</a></li>

<li><a href="manual.html#IDX467">hostname, default</a></li>

<li><a href="manual.html#IDX343">HP-UX, binary
distribution</a></li>

<li><a href="manual.html#IDX716"><code>html</code>,
<code>mysql</code> option</a></li>
</ul>

<h2>I</h2>

<ul>
<li><a href="manual.html#IDX1694">ID, unique</a></li>

<li><a href="manual.html#IDX714"><code>ignore-space</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX773">importing, data</a></li>

<li><a href="manual.html#IDX814">increasing, performance</a></li>

<li><a href="manual.html#IDX801">increasing, speed</a></li>

<li><a href="manual.html#IDX1457">index, deleting</a>, <a
href="manual.html#IDX1480">index, deleting</a></li>

<li><a href="manual.html#IDX1475">indexes</a></li>

<li><a href="manual.html#IDX1442">indexes, and <code>BLOB</code>
columns</a></li>

<li><a href="manual.html#IDX877">indexes, and <code>IS
NULL</code></a></li>

<li><a href="manual.html#IDX874">indexes, and
<code>LIKE</code></a></li>

<li><a href="manual.html#IDX1440">indexes, and <code>NULL</code>
values</a></li>

<li><a href="manual.html#IDX1444">indexes, and <code>TEXT</code>
columns</a></li>

<li><a href="manual.html#IDX615">indexes, block size</a></li>

<li><a href="manual.html#IDX878">indexes, columns</a></li>

<li><a href="manual.html#IDX870">indexes, leftmost prefix
of</a></li>

<li><a href="manual.html#IDX882">indexes, multi-column</a></li>

<li><a href="manual.html#IDX1476">indexes, multi-part</a></li>

<li><a href="manual.html#IDX966">indexes, names</a></li>

<li><a href="manual.html#IDX869">indexes, use of</a></li>

<li><a href="manual.html#IDX1507"><code>InnoDB</code> table
type</a></li>

<li><a href="manual.html#IDX135"><code>InnoDB</code>
tables</a></li>

<li><a href="manual.html#IDX1416">INSERT DELAYED</a></li>

<li><a href="manual.html#IDX854">inserting, speed of</a></li>

<li><a href="manual.html#IDX190">installation layouts</a></li>

<li><a href="manual.html#IDX209">installation overview</a></li>

<li><a href="manual.html#IDX437">Installing many servers</a></li>

<li><a href="manual.html#IDX197">installing, binary
distribution</a></li>

<li><a href="manual.html#IDX167">installing, overview</a></li>

<li><a href="manual.html#IDX347">installing, Perl</a></li>

<li><a href="manual.html#IDX348">installing, Perl on
Windows</a></li>

<li><a href="manual.html#IDX207">installing, source
distribution</a></li>

<li><a href="manual.html#IDX1745">installing, user-defined
functions</a></li>

<li><a href="manual.html#IDX957">integers</a></li>

<li><a href="manual.html#IDX255">internal compiler errors</a></li>

<li><a href="manual.html#IDX857">internal locking</a></li>

<li><a href="manual.html#IDX1716">internals</a></li>

<li><a href="manual.html#IDX111">Internet Relay Chat</a></li>

<li><a href="manual.html#IDX80">Internet Service Providers</a></li>

<li><a href="manual.html#IDX110">IRC</a></li>

<li><a href="manual.html#IDX1506"><code>ISAM</code> table
type</a></li>

<li><a href="manual.html#IDX77">ISP services</a></li>
</ul>

<h2>J</h2>

<ul>
<li><a href="manual.html#IDX1710">Java connectivity</a></li>

<li><a href="manual.html#IDX1711">JDBC</a></li>

<li><a href="manual.html#IDX55">jobs at MySQL</a></li>
</ul>

<h2>K</h2>

<ul>
<li><a href="manual.html#IDX1512">key space, MyISAM</a></li>

<li><a href="manual.html#IDX880">keys</a></li>

<li><a href="manual.html#IDX146">keys, foreign</a>, <a
href="manual.html#IDX409">keys, foreign</a></li>

<li><a href="manual.html#IDX883">keys, multi-column</a></li>

<li><a href="manual.html#IDX412">keys, searching on two</a></li>

<li><a href="manual.html#IDX988">keywords</a></li>

<li><a href="manual.html#IDX153">known errors</a></li>
</ul>

<h2>L</h2>

<ul>
<li><a href="manual.html#IDX627">language support</a></li>

<li><a href="manual.html#IDX1693">last row, unique ID</a></li>

<li><a href="manual.html#IDX191">layout of installation</a></li>

<li><a href="manual.html#IDX871">leftmost prefix of
indexes</a></li>

<li><a href="manual.html#IDX963">legal names</a></li>

<li><a href="manual.html#IDX1914">LGPL, GNU Lesser General Public
License</a></li>

<li><a href="manual.html#IDX1912">LGPL, GNU Library General Public
License</a></li>

<li><a href="manual.html#IDX1913">LGPL, Lesser General Public
License</a></li>

<li><a href="manual.html#IDX1911">LGPL, Library General Public
License</a></li>

<li><a href="manual.html#IDX1704">libmysqld</a></li>

<li><a href="manual.html#IDX1533">library,
<code>mysqlclient</code></a></li>

<li><a href="manual.html#IDX66">licenses</a></li>

<li><a href="manual.html#IDX62">licensing costs</a></li>

<li><a href="manual.html#IDX67">licensing policy</a></li>

<li><a href="manual.html#IDX56">licensing terms</a></li>

<li><a href="manual.html#IDX53">licensing, contact
information</a></li>

<li><a href="manual.html#IDX72">licensing, examples</a></li>

<li><a href="manual.html#IDX75">licensing, free</a></li>

<li><a href="manual.html#IDX816">limitations, design</a></li>

<li><a href="manual.html#IDX38">limits, file-size</a></li>

<li><a href="manual.html#IDX1699">linking</a></li>

<li><a href="manual.html#IDX1768">linking, errors</a></li>

<li><a href="manual.html#IDX1696">linking, problems</a></li>

<li><a href="manual.html#IDX903">linking, speed</a></li>

<li><a href="manual.html#IDX917">links, symbolic</a></li>

<li><a href="manual.html#IDX322">Linux, binary
distribution</a></li>

<li><a href="manual.html#IDX923">literals</a></li>

<li><a href="manual.html#IDX374">loading, tables</a></li>

<li><a href="manual.html#IDX896">locking</a></li>

<li><a href="manual.html#IDX1858">locking methods</a></li>

<li><a href="manual.html#IDX141">locking, row-level</a></li>

<li><a href="manual.html#IDX858">locking, tables</a></li>

<li><a href="manual.html#IDX787">Log files</a></li>

<li><a href="manual.html#IDX216">log files</a></li>

<li><a href="manual.html#IDX799">log files, maintaining</a></li>

<li><a href="manual.html#IDX550">log files, names</a></li>

<li><a href="manual.html#IDX652">log option</a></li>

<li><a href="manual.html#IDX1834">log, changes</a></li>

<li><a href="manual.html#IDX83">logos</a></li>
</ul>

<h2>M</h2>

<ul>
<li><a href="manual.html#IDX105">mailing address, for customer
support</a></li>

<li><a href="manual.html#IDX5">mailing list address</a></li>

<li><a href="manual.html#IDX88">mailing lists</a></li>

<li><a href="manual.html#IDX91">mailing lists, archive
location</a></li>

<li><a href="manual.html#IDX109">mailing lists, guidelines</a></li>

<li><a href="manual.html#IDX30">main features of MySQL</a></li>

<li><a href="manual.html#IDX798">maintaining, log files</a></li>

<li><a href="manual.html#IDX573">maintaining, tables</a></li>

<li><a
href="manual.html#IDX637"><code>make_binary_distribution</code></a></li>

<li><a href="manual.html#IDX9">manual, available formats</a></li>

<li><a href="manual.html#IDX8">manual, online location</a></li>

<li><a href="manual.html#IDX11">manual, typographical
conventions</a></li>

<li><a href="manual.html#IDX804">master-slave setup</a></li>

<li><a href="manual.html#IDX397">matching, patterns</a></li>

<li><a href="manual.html#IDX763">max memory used</a></li>

<li><a
href="manual.html#IDX742"><code>max_allowed_packet</code></a></li>

<li><a
href="manual.html#IDX745"><code>max_join_size</code></a></li>

<li><a href="manual.html#IDX563">memory usage, myisamchk</a></li>

<li><a href="manual.html#IDX762">memory use</a>, <a
href="manual.html#IDX907">memory use</a></li>

<li><a href="manual.html#IDX1508"><code>MERGE</code> table
type</a></li>

<li><a href="manual.html#IDX1521">MERGE tables, defined</a></li>

<li><a href="manual.html#IDX625">messages, languages</a></li>

<li><a href="manual.html#IDX1859">methods, locking</a></li>

<li><a href="manual.html#IDX174">mirror sites</a></li>

<li><a href="manual.html#IDX275">MIT-pthreads</a></li>

<li><a href="manual.html#IDX418">modes, batch</a></li>

<li><a href="manual.html#IDX34">modules, list of</a></li>

<li><a href="manual.html#IDX357">monitor, terminal</a></li>

<li><a href="manual.html#IDX1197">mSQL compatibility</a></li>

<li><a href="manual.html#IDX162">mSQL vs. MySQL, protocol</a></li>

<li><a href="manual.html#IDX157">mSQL, MySQL vs mSQL,
overview</a></li>

<li><a href="manual.html#IDX684"><code>msql2mysql</code></a></li>

<li><a href="manual.html#IDX647">multi mysqld</a></li>

<li><a href="manual.html#IDX1766">multi-byte character
sets</a></li>

<li><a href="manual.html#IDX633">multi-byte characters</a></li>

<li><a href="manual.html#IDX881">multi-column indexes</a></li>

<li><a href="manual.html#IDX1477">multi-part index</a></li>

<li><a href="manual.html#IDX443">multiple servers</a></li>

<li><a href="manual.html#IDX29">My, derivation</a></li>

<li><a href="manual.html#IDX806"><tt>`my.cnf'</tt> file</a></li>

<li><a href="manual.html#IDX1510"><code>MyISAM</code> table
type</a></li>

<li><a href="manual.html#IDX662">MyISAM, compressed tables</a>, <a
href="manual.html#IDX1518">MyISAM, compressed tables</a></li>

<li><a href="manual.html#IDX239"><code>myisamchk</code></a>, <a
href="manual.html#IDX636"><code>myisamchk</code></a></li>

<li><a href="manual.html#IDX579"><code>myisamchk</code>, example
output</a></li>

<li><a href="manual.html#IDX558"><code>myisamchk</code>,
options</a></li>

<li><a href="manual.html#IDX663"><code>myisampack</code></a>, <a
href="manual.html#IDX1446"><code>myisampack</code></a>, <a
href="manual.html#IDX1519"><code>myisampack</code></a></li>

<li><a href="manual.html#IDX1603">MyODBC</a></li>

<li><a href="manual.html#IDX1619">MyODBC, reporting
problems</a></li>

<li><a href="manual.html#IDX694"><code>mysql</code></a></li>

<li><a href="manual.html#IDX43">MySQL AB, defined</a></li>

<li><a href="manual.html#IDX181">MySQL binary distribution</a></li>

<li><a href="manual.html#IDX47">MySQL certification</a></li>

<li><a href="manual.html#IDX695"><code>mysql</code> command-line
options</a></li>

<li><a href="manual.html#IDX49">MySQL consulting</a></li>

<li><a href="manual.html#IDX26">MySQL history</a></li>

<li><a href="manual.html#IDX87">MySQL mailing lists</a></li>

<li><a href="manual.html#IDX28">MySQL name</a></li>

<li><a href="manual.html#IDX182">MySQL source distribution</a></li>

<li><a href="manual.html#IDX1509">MySQL table types</a></li>

<li><a href="manual.html#IDX158">MySQL tools, conversion</a></li>

<li><a href="manual.html#IDX45">MySQL training</a></li>

<li><a href="manual.html#IDX171">MySQL version</a></li>

<li><a href="manual.html#IDX16">MySQL, defined</a></li>

<li><a href="manual.html#IDX17">MySQL, introduction</a></li>

<li><a href="manual.html#IDX24">MySQL, pronunciation</a></li>

<li><a href="manual.html#IDX220">mysql.sock, changing location
of</a></li>

<li><a href="manual.html#IDX1786"><code>mysql.sock</code>,
protection</a></li>

<li><a
href="manual.html#IDX502"><code>mysql_fix_privilege_tables</code></a></li>

<li><a
href="manual.html#IDX640"><code>mysql_install_db</code></a></li>

<li><a href="manual.html#IDX289"><code>mysql_install_db</code>
script</a></li>

<li><a href="manual.html#IDX685"><code>mysqlaccess</code></a></li>

<li><a href="manual.html#IDX585"><code>mysqladmin</code></a>, <a
href="manual.html#IDX589"><code>mysqladmin</code></a>, <a
href="manual.html#IDX611"><code>mysqladmin</code></a>, <a
href="manual.html#IDX686"><code>mysqladmin</code></a>, <a
href="manual.html#IDX752"><code>mysqladmin</code></a>, <a
href="manual.html#IDX1429"><code>mysqladmin</code></a>, <a
href="manual.html#IDX1433"><code>mysqladmin</code></a></li>

<li><a href="manual.html#IDX653">mysqladmin option</a></li>

<li><a href="manual.html#IDX551"><code>mysqlbinlog</code></a>, <a
href="manual.html#IDX794"><code>mysqlbinlog</code></a></li>

<li><a href="manual.html#IDX638"><code>mysqlbug</code></a></li>

<li><a href="manual.html#IDX97"><code>mysqlbug</code>
script</a></li>

<li><a href="manual.html#IDX6"><code>mysqlbug</code> script,
location</a></li>

<li><a href="manual.html#IDX1531"><code>mysqlclient</code>
library</a></li>

<li><a href="manual.html#IDX639"><code>mysqld</code></a></li>

<li><a href="manual.html#IDX654">mysqld option</a></li>

<li><a href="manual.html#IDX901"><code>mysqld</code>
options</a></li>

<li><a href="manual.html#IDX428">mysqld options</a></li>

<li><a href="manual.html#IDX898"><code>mysqld</code> server, buffer
sizes</a></li>

<li><a href="manual.html#IDX1772"><code>mysqld</code>,
starting</a></li>

<li><a href="manual.html#IDX666"><code>mysqld-max</code></a></li>

<li><a href="manual.html#IDX648"><code>mysqld_multi</code></a></li>

<li><a href="manual.html#IDX644"><code>mysqld_safe</code></a></li>

<li><a href="manual.html#IDX317"><code>mysqldump</code></a>, <a
href="manual.html#IDX687"><code>mysqldump</code></a>, <a
href="manual.html#IDX768"><code>mysqldump</code></a></li>

<li><a href="manual.html#IDX318"><code>mysqlimport</code></a>, <a
href="manual.html#IDX688"><code>mysqlimport</code></a>, <a
href="manual.html#IDX777"><code>mysqlimport</code></a>, <a
href="manual.html#IDX1425"><code>mysqlimport</code></a></li>

<li><a href="manual.html#IDX689"><code>mysqlshow</code></a></li>

<li><a href="manual.html#IDX1718">mysqltest, MySQL Test
Suite</a></li>
</ul>

<h2>N</h2>

<ul>
<li><a href="manual.html#IDX324">named pipes</a></li>

<li><a href="manual.html#IDX962">names</a></li>

<li><a href="manual.html#IDX975">names, case-sensitivity</a></li>

<li><a href="manual.html#IDX983">names, variables</a></li>

<li><a href="manual.html#IDX186">naming, releases of MySQL</a></li>

<li><a href="manual.html#IDX1747">native functions, adding</a></li>

<li><a href="manual.html#IDX177">native thread support</a></li>

<li><a href="manual.html#IDX959">negative values</a></li>

<li><a href="manual.html#IDX90">net etiquette</a>, <a
href="manual.html#IDX106">net etiquette</a></li>

<li><a
href="manual.html#IDX743"><code>net_buffer_length</code></a></li>

<li><a href="manual.html#IDX481">netmask notation, in
<code>mysql.user</code> table</a></li>

<li><a href="manual.html#IDX1751">new procedures, adding</a></li>

<li><a href="manual.html#IDX203">new users, adding</a></li>

<li><a href="manual.html#IDX1811">no matching rows</a></li>

<li><a href="manual.html#IDX700"><code>no-auto-rehash</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX702"><code>no-beep</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX655">no-log option</a></li>

<li><a href="manual.html#IDX712"><code>no-named-commands</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX719"><code>no-pager</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX720"><code>no-tee</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1051">non-delimited strings</a></li>

<li><a href="manual.html#IDX1758">Non-transactional tables</a></li>

<li><a href="manual.html#IDX395">NULL value</a></li>

<li><a href="manual.html#IDX1439"><code>NULL</code> values, and
indexes</a></li>

<li><a href="manual.html#IDX1800"><code>NULL</code> values, vs.
empty values</a></li>

<li><a href="manual.html#IDX1110"><code>NULL</code>, testing for
null</a>, <a href="manual.html#IDX1112"><code>NULL</code>, testing
for null</a>, <a href="manual.html#IDX1122"><code>NULL</code>,
testing for null</a>, <a
href="manual.html#IDX1136"><code>NULL</code>, testing for
null</a></li>

<li><a href="manual.html#IDX1806"><code>NULL</code> values, and
<code>AUTO_INCREMENT</code> columns</a></li>

<li><a href="manual.html#IDX1805"><code>NULL</code> values, and
<code>TIMESTAMP</code> columns</a></li>

<li><a href="manual.html#IDX955">numbers</a></li>

<li><a href="manual.html#IDX1075">numeric types</a></li>
</ul>

<h2>O</h2>

<ul>
<li><a href="manual.html#IDX1601">ODBC</a></li>

<li><a href="manual.html#IDX973">ODBC compatibility</a>, <a
href="manual.html#IDX1011">ODBC compatibility</a>, <a
href="manual.html#IDX1094">ODBC compatibility</a>, <a
href="manual.html#IDX1115">ODBC compatibility</a>, <a
href="manual.html#IDX1397">ODBC compatibility</a>, <a
href="manual.html#IDX1435">ODBC compatibility</a>, <a
href="manual.html#IDX1840">ODBC compatibility</a></li>

<li><a href="manual.html#IDX1604">ODBC, administrator</a></li>

<li><a href="manual.html#IDX1612">odbcadmin program</a></li>

<li><a href="manual.html#IDX1824">OLEDB</a></li>

<li><a href="manual.html#IDX724"><code>one-database</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX7">online location of manual</a></li>

<li><a href="manual.html#IDX21"><code>Open Source</code>,
defined</a></li>

<li><a href="manual.html#IDX761">open tables</a>, <a
href="manual.html#IDX885">open tables</a></li>

<li><a href="manual.html#IDX889">opening, tables</a></li>

<li><a href="manual.html#IDX758">opens</a></li>

<li><a href="manual.html#IDX541">OpenSSL</a></li>

<li><a href="manual.html#IDX37">operating systems, file-size
limits</a></li>

<li><a href="manual.html#IDX176">operating systems,
supported</a></li>

<li><a href="manual.html#IDX333">operating systems, Windows versus
Unix</a></li>

<li><a href="manual.html#IDX1209">operations, arithmetic</a></li>

<li><a href="manual.html#IDX1206">operators, cast</a>, <a
href="manual.html#IDX1208">operators, cast</a></li>

<li><a href="manual.html#IDX855">optimisation, tips</a></li>

<li><a href="manual.html#IDX843">optimisations</a></li>

<li><a href="manual.html#IDX847">optimising, DISTINCT</a></li>

<li><a href="manual.html#IDX849">optimising, LEFT JOIN</a></li>

<li><a href="manual.html#IDX851">optimising, LIMIT</a></li>

<li><a href="manual.html#IDX572">optimising, tables</a></li>

<li><a href="manual.html#IDX430">option files</a></li>

<li><a href="manual.html#IDX427">options, command-line</a></li>

<li><a href="manual.html#IDX697">options, command-line,
<code>mysql</code></a></li>

<li><a href="manual.html#IDX214">options, configure</a></li>

<li><a href="manual.html#IDX557">options,
<code>myisamchk</code></a></li>

<li><a href="manual.html#IDX358">options, provided by
MySQL</a></li>

<li><a href="manual.html#IDX805">options, replication</a></li>

<li><a href="manual.html#IDX123">Oracle compatibility</a>, <a
href="manual.html#IDX1358">Oracle compatibility</a>, <a
href="manual.html#IDX1486">Oracle compatibility</a></li>

<li><a href="manual.html#IDX1363"><code>ORDER BY</code>, aliases
in</a></li>

<li><a href="manual.html#IDX1">overview</a></li>
</ul>

<h2>P</h2>

<ul>
<li><a href="manual.html#IDX664"><code>pack_isam</code></a></li>

<li><a href="manual.html#IDX725"><code>pager</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX897">parameters, server</a></li>

<li><a href="manual.html#IDX50">partnering with MySQL AB</a></li>

<li><a href="manual.html#IDX1320">password encryption,
reversibility of</a></li>

<li><a href="manual.html#IDX656">password option</a></li>

<li><a href="manual.html#IDX523">password, root user</a></li>

<li><a href="manual.html#IDX726"><code>password</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX516">passwords, for users</a></li>

<li><a href="manual.html#IDX1781">passwords, forgotten</a></li>

<li><a href="manual.html#IDX1782">passwords, resetting</a></li>

<li><a href="manual.html#IDX461">passwords, security</a></li>

<li><a href="manual.html#IDX513">passwords, setting</a>, <a
href="manual.html#IDX536">passwords, setting</a>, <a
href="manual.html#IDX911">passwords, setting</a></li>

<li><a href="manual.html#IDX210">patches, applying</a></li>

<li><a href="manual.html#IDX396">pattern matching</a></li>

<li><a href="manual.html#IDX827">performance, benchmarks</a></li>

<li><a href="manual.html#IDX914">performance, disk issues</a></li>

<li><a href="manual.html#IDX839">performance, estimating</a></li>

<li><a href="manual.html#IDX813">performance, improving</a>, <a
href="manual.html#IDX868">performance, improving</a></li>

<li><a href="manual.html#IDX1536">Perl API</a></li>

<li><a href="manual.html#IDX352">Perl DBI/DBD, installation
problems</a></li>

<li><a href="manual.html#IDX346">Perl, installing</a></li>

<li><a href="manual.html#IDX349">Perl, installing on
Windows</a></li>

<li><a href="manual.html#IDX1823">Perl, modules</a></li>

<li><a href="manual.html#IDX829">permission checks, effect on
speed</a></li>

<li><a href="manual.html#IDX784">perror</a></li>

<li><a href="manual.html#IDX1534">PHP API</a></li>

<li><a href="manual.html#IDX727"><code>port</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX818">portability</a></li>

<li><a href="manual.html#IDX1071">portability, types</a></li>

<li><a href="manual.html#IDX1844">porting, to other
systems</a></li>

<li><a href="manual.html#IDX436">post-install, many
servers</a></li>

<li><a href="manual.html#IDX277">post-installation, setup and
testing</a></li>

<li><a href="manual.html#IDX125">PostgreSQL compatibility</a></li>

<li><a href="manual.html#IDX166">PostgreSQL vs. MySQL,
benchmarks</a></li>

<li><a href="manual.html#IDX165">PostgreSQL vs. MySQL,
features</a></li>

<li><a href="manual.html#IDX163">PostgreSQL vs. MySQL,
overview</a></li>

<li><a href="manual.html#IDX164">PostgreSQL vs. MySQL,
strategies</a></li>

<li><a href="manual.html#IDX64">prices, support</a></li>

<li><a href="manual.html#IDX1460">primary key, deleting</a></li>

<li><a href="manual.html#IDX464">privilege information,
location</a></li>

<li><a href="manual.html#IDX460">privilege system</a></li>

<li><a href="manual.html#IDX462">privilege system,
described</a></li>

<li><a href="manual.html#IDX498">privilege, changes</a></li>

<li><a href="manual.html#IDX453">privileges, access</a></li>

<li><a href="manual.html#IDX529">privileges, adding</a></li>

<li><a href="manual.html#IDX517">privileges, default</a></li>

<li><a href="manual.html#IDX620">privileges, display</a></li>

<li><a href="manual.html#IDX508">privileges, granting</a></li>

<li><a href="manual.html#IDX509">privileges, revoking</a></li>

<li><a href="manual.html#IDX1756">problems, access denied
errors</a></li>

<li><a href="manual.html#IDX1752">problems, common errors</a></li>

<li><a href="manual.html#IDX244">problems, compiling</a></li>

<li><a href="manual.html#IDX1799">problems, <code>DATE</code>
columns</a></li>

<li><a href="manual.html#IDX1053">problems, date values</a></li>

<li><a href="manual.html#IDX345">problems, installing on
IBM-AIX</a></li>

<li><a href="manual.html#IDX337">problems, installing on
Solaris</a></li>

<li><a href="manual.html#IDX351">problems, installing Perl</a></li>

<li><a href="manual.html#IDX1770">problems, linking</a></li>

<li><a href="manual.html#IDX1618">problems, ODBC</a></li>

<li><a href="manual.html#IDX95">problems, reporting</a></li>

<li><a href="manual.html#IDX299">problems, starting the
server</a></li>

<li><a href="manual.html#IDX860">problems, table locking</a></li>

<li><a href="manual.html#IDX1790">problems, timezone</a></li>

<li><a href="manual.html#IDX1749">procedures, adding</a></li>

<li><a href="manual.html#IDX143">procedures, stored</a></li>

<li><a href="manual.html#IDX179">process support</a></li>

<li><a href="manual.html#IDX619">processes, display</a></li>

<li><a href="manual.html#IDX1738">processing, arguments</a></li>

<li><a href="manual.html#IDX74">products, selling</a></li>

<li><a href="manual.html#IDX1701">programs, client</a></li>

<li><a href="manual.html#IDX1822">programs, contributed</a></li>

<li><a href="manual.html#IDX820">programs, crash-me</a></li>

<li><a href="manual.html#IDX635">programs, list of</a>, <a
href="manual.html#IDX668">programs, list of</a></li>

<li><a href="manual.html#IDX749"><code>prompt</code>
command</a></li>

<li><a href="manual.html#IDX701"><code>prompt</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX366">prompts, meanings</a></li>

<li><a href="manual.html#IDX23">pronunciation, MySQL</a></li>

<li><a href="manual.html#IDX315">Protocol mismatch</a></li>

<li><a href="manual.html#IDX1712">Python APIs</a></li>
</ul>

<h2>Q</h2>

<ul>
<li><a href="manual.html#IDX364">queries, entering</a></li>

<li><a href="manual.html#IDX838">queries, estimating
performance</a></li>

<li><a href="manual.html#IDX406">queries, examples</a></li>

<li><a href="manual.html#IDX828">queries, speed of</a></li>

<li><a href="manual.html#IDX424">queries, Twin Studeis
project</a></li>

<li><a href="manual.html#IDX1498">Query Cache</a></li>

<li><a href="manual.html#IDX788">query log</a></li>

<li><a href="manual.html#IDX756">questions</a></li>

<li><a href="manual.html#IDX107">questions, answering</a></li>

<li><a href="manual.html#IDX728"><code>quick</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX949">quotes, in strings</a></li>

<li><a href="manual.html#IDX951">quoting</a></li>

<li><a href="manual.html#IDX950">quoting binary data</a></li>

<li><a href="manual.html#IDX1551">quoting strings</a></li>
</ul>

<h2>R</h2>

<ul>
<li><a href="manual.html#IDX729"><code>raw</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX526">re-creating, grant tables</a></li>

<li><a href="manual.html#IDX245">reconfiguring</a>, <a
href="manual.html#IDX250">reconfiguring</a></li>

<li><a href="manual.html#IDX565">recovery, from crash</a></li>

<li><a href="manual.html#IDX865">reducing, data size</a></li>

<li><a href="manual.html#IDX1469">references</a></li>

<li><a href="manual.html#IDX1906">regex</a></li>

<li><a href="manual.html#IDX1907">regular expression syntax,
described</a></li>

<li><a href="manual.html#IDX19">relational databases,
defined</a></li>

<li><a href="manual.html#IDX183">release numbers</a></li>

<li><a href="manual.html#IDX187">releases, naming scheme</a></li>

<li><a href="manual.html#IDX188">releases, testing</a></li>

<li><a href="manual.html#IDX194">releases, updating</a></li>

<li><a href="manual.html#IDX1816">reordering, columns</a></li>

<li><a href="manual.html#IDX561">repair options, myisamchk</a></li>

<li><a href="manual.html#IDX570">repairing, tables</a></li>

<li><a href="manual.html#IDX690"><code>replace</code></a></li>

<li><a href="manual.html#IDX800">replication</a></li>

<li><a href="manual.html#IDX810">replication, commands</a></li>

<li><a href="manual.html#IDX812">replication, two-way</a></li>

<li><a href="manual.html#IDX94">reporting, bugs</a></li>

<li><a href="manual.html#IDX4">reporting, errors</a>, <a
href="manual.html#IDX85">reporting, errors</a></li>

<li><a href="manual.html#IDX1617">reporting, MyODBC
problems</a></li>

<li><a href="manual.html#IDX989">reserved words,
exceptions</a></li>

<li><a href="manual.html#IDX288">restarting, the server</a></li>

<li><a href="manual.html#IDX379">retrieving, data from
tables</a></li>

<li><a href="manual.html#IDX1740">return values, UDFs</a></li>

<li><a href="manual.html#IDX511">revoking, privleges</a></li>

<li><a href="manual.html#IDX519">root password</a></li>

<li><a href="manual.html#IDX1783">root user, password
resetting</a></li>

<li><a href="manual.html#IDX1007">rounding errors</a>, <a
href="manual.html#IDX1256">rounding errors</a></li>

<li><a href="manual.html#IDX399">rows, counting</a></li>

<li><a href="manual.html#IDX1809">rows, deleting</a></li>

<li><a href="manual.html#IDX140">rows, locking</a></li>

<li><a href="manual.html#IDX1812">rows, matching problems</a></li>

<li><a href="manual.html#IDX381">rows, selecting</a></li>

<li><a href="manual.html#IDX386">rows, sorting</a></li>

<li><a href="manual.html#IDX168">RPM file</a></li>

<li><a href="manual.html#IDX169">RPM Package Manager</a>, <a
href="manual.html#IDX200">RPM Package Manager</a></li>

<li><a href="manual.html#IDX199">RPM, defined</a></li>

<li><a href="manual.html#IDX1860">RTS-threads</a></li>

<li><a href="manual.html#IDX82">running a web server</a></li>

<li><a href="manual.html#IDX248">running <code>configure</code>
after prior invocation</a></li>

<li><a href="manual.html#IDX116">running, ANSI mode</a></li>

<li><a href="manual.html#IDX420">running, batch mode</a></li>

<li><a href="manual.html#IDX445">running, multiple servers</a></li>

<li><a href="manual.html#IDX363">running, queries</a></li>
</ul>

<h2>S</h2>

<ul>
<li><a href="manual.html#IDX748"><code>safe-mode</code>
command</a></li>

<li><a href="manual.html#IDX736"><code>safe-updates</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX643"><code>safe_mysqld</code></a></li>

<li><a href="manual.html#IDX421">script files</a></li>

<li><a href="manual.html#IDX642">scripts</a>, <a
href="manual.html#IDX646">scripts</a>, <a
href="manual.html#IDX693">scripts</a></li>

<li><a href="manual.html#IDX290">scripts,
<code>mysql_install_db</code></a></li>

<li><a href="manual.html#IDX99">scripts,
<code>mysqlbug</code></a></li>

<li><a href="manual.html#IDX1794">searching, and
case-sensitivity</a></li>

<li><a href="manual.html#IDX1495">searching, full-text</a></li>

<li><a href="manual.html#IDX92">searching, MySQL web pages</a></li>

<li><a href="manual.html#IDX411">searching, two keys</a></li>

<li><a href="manual.html#IDX454">security system</a></li>

<li><a href="manual.html#IDX457">security, against
crackers</a></li>

<li><a href="manual.html#IDX1499"><code>SELECT</code>, Query
Cache</a></li>

<li><a href="manual.html#IDX744"><code>select_limit</code></a></li>

<li><a href="manual.html#IDX370">selecting, databases</a></li>

<li><a href="manual.html#IDX73">selling products</a></li>

<li><a href="manual.html#IDX1332">sequence emulation</a></li>

<li><a href="manual.html#IDX751">server administration</a></li>

<li><a href="manual.html#IDX361">server, connecting</a>, <a
href="manual.html#IDX468">server, connecting</a></li>

<li><a href="manual.html#IDX1845">server, debugging</a></li>

<li><a href="manual.html#IDX362">server, disconnecting</a></li>

<li><a href="manual.html#IDX287">server, restart</a></li>

<li><a href="manual.html#IDX285">server, shutdown</a></li>

<li><a href="manual.html#IDX281">server, starting</a></li>

<li><a href="manual.html#IDX302">server, starting and
stopping</a></li>

<li><a href="manual.html#IDX298">server, starting problems</a></li>

<li><a href="manual.html#IDX444">servers, multiple</a></li>

<li><a href="manual.html#IDX78">services, ISP</a></li>

<li><a href="manual.html#IDX79">services, web</a></li>

<li><a href="manual.html#IDX1085">SET, size</a></li>

<li><a href="manual.html#IDX723"><code>set-variable</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX537">setting, passwords</a></li>

<li><a href="manual.html#IDX279">setup, post-installation</a></li>

<li><a href="manual.html#IDX14">shell syntax</a></li>

<li><a href="manual.html#IDX782">showing, database
information</a></li>

<li><a href="manual.html#IDX286">shutting down, the server</a></li>

<li><a href="manual.html#IDX1445">silent column changes</a></li>

<li><a href="manual.html#IDX730"><code>silent</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX36">size of tables</a></li>

<li><a href="manual.html#IDX993">sizes, display</a></li>

<li><a href="manual.html#IDX722"><code>skip-column-names</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX718"><code>skip-line-numbers</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX757">slow queries</a></li>

<li><a href="manual.html#IDX795">slow query log</a></li>

<li><a href="manual.html#IDX219">socket location, changing</a></li>

<li><a href="manual.html#IDX731"><code>socket</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX336">Solaris installation
problems</a></li>

<li><a href="manual.html#IDX263">Solaris troubleshooting</a></li>

<li><a href="manual.html#IDX623">sorting, character sets</a></li>

<li><a href="manual.html#IDX388">sorting, data</a></li>

<li><a href="manual.html#IDX485">sorting, grant tables</a>, <a
href="manual.html#IDX491">sorting, grant tables</a></li>

<li><a href="manual.html#IDX387">sorting, table rows</a></li>

<li><a href="manual.html#IDX208">source distribution,
installing</a></li>

<li><a href="manual.html#IDX905">speed, compiling</a></li>

<li><a href="manual.html#IDX802">speed, increasing</a></li>

<li><a href="manual.html#IDX853">speed, inserting</a></li>

<li><a href="manual.html#IDX906">speed, linking</a></li>

<li><a href="manual.html#IDX830">speed, of queries</a>, <a
href="manual.html#IDX841">speed, of queries</a></li>

<li><a href="manual.html#IDX808">SQL commands, replication</a></li>

<li><a href="manual.html#IDX20">SQL, defined</a></li>

<li><a href="manual.html#IDX254"><code>sql_yacc.cc</code>
problems</a></li>

<li><a href="manual.html#IDX997">square brackets</a></li>

<li><a href="manual.html#IDX325">SSH</a></li>

<li><a href="manual.html#IDX542">SSL and X509 Basics</a></li>

<li><a href="manual.html#IDX545">SSL related options</a></li>

<li><a href="manual.html#IDX33">stability</a></li>

<li><a href="manual.html#IDX113">standards compatibility</a></li>

<li><a href="manual.html#IDX438">Starting many servers</a></li>

<li><a href="manual.html#IDX149">starting, comments</a></li>

<li><a href="manual.html#IDX1771">starting,
<code>mysqld</code></a></li>

<li><a href="manual.html#IDX280">starting, the server</a></li>

<li><a href="manual.html#IDX300">starting, the server
automatically</a></li>

<li><a href="manual.html#IDX432">startup options, default</a></li>

<li><a href="manual.html#IDX900">startup parameters</a></li>

<li><a href="manual.html#IDX698">startup parameters,
<code>mysql</code></a></li>

<li><a href="manual.html#IDX895">startup parameters,
tuning</a></li>

<li><a href="manual.html#IDX222">statically, compiling</a></li>

<li><a href="manual.html#IDX747"><code>status</code>
command</a></li>

<li><a href="manual.html#IDX753">status command, results</a></li>

<li><a href="manual.html#IDX610">status, tables</a></li>

<li><a href="manual.html#IDX301">stopping, the server</a></li>

<li><a href="manual.html#IDX863">storage of data</a></li>

<li><a href="manual.html#IDX1073">storage requirements, column
type</a></li>

<li><a href="manual.html#IDX866">storage space, minimising</a></li>

<li><a href="manual.html#IDX142">stored procedures and triggers,
defined</a></li>

<li><a href="manual.html#IDX631">string collating</a></li>

<li><a href="manual.html#IDX1193">string comparisons,
case-sensitivity</a></li>

<li><a href="manual.html#IDX1058">string types</a></li>

<li><a href="manual.html#IDX921">strings, defined</a></li>

<li><a href="manual.html#IDX922">strings, escaping
characters</a></li>

<li><a href="manual.html#IDX1052">strings, non-delimited</a></li>

<li><a href="manual.html#IDX1552">strings, quoting</a></li>

<li><a href="manual.html#IDX915">striping, defined</a></li>

<li><a href="manual.html#IDX127">sub<code>SELECT</code>s</a></li>

<li><a href="manual.html#IDX520">superuser</a></li>

<li><a href="manual.html#IDX63">support costs</a></li>

<li><a href="manual.html#IDX57">support terms</a></li>

<li><a href="manual.html#IDX180">support, for operating
systems</a></li>

<li><a href="manual.html#IDX69">support, licensing</a></li>

<li><a href="manual.html#IDX103">support, mailing address</a></li>

<li><a href="manual.html#IDX58">support, types</a></li>

<li><a href="manual.html#IDX233">suppression, default
values</a></li>

<li><a href="manual.html#IDX1482">Sybase compatibility</a></li>

<li><a href="manual.html#IDX327">symbolic links</a>, <a
href="manual.html#IDX916">symbolic links</a></li>

<li><a href="manual.html#IDX1908">syntax, regular
expression</a></li>

<li><a href="manual.html#IDX894">system optimisation</a></li>

<li><a href="manual.html#IDX833">system table</a></li>

<li><a href="manual.html#IDX985">system variables</a></li>

<li><a href="manual.html#IDX459">system, privilege</a></li>

<li><a href="manual.html#IDX451">system, security</a></li>
</ul>

<h2>T</h2>

<ul>
<li><a href="manual.html#IDX1379">table aliases</a></li>

<li><a href="manual.html#IDX891">table cache</a></li>

<li><a href="manual.html#IDX912">table is full</a>, <a
href="manual.html#IDX1762">table is full</a></li>

<li><a href="manual.html#IDX120">table names, case-sensitivity</a>,
<a href="manual.html#IDX978">table names, case-sensitivity</a></li>

<li><a href="manual.html#IDX1502">table types, choosing</a></li>

<li><a href="manual.html#IDX1449">table, changing</a>, <a
href="manual.html#IDX1466">table, changing</a>, <a
href="manual.html#IDX1815">table, changing</a></li>

<li><a href="manual.html#IDX1473">table, deleting</a></li>

<li><a href="manual.html#IDX732"><code>table</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1527">tables, <code>BDB</code></a></li>

<li><a href="manual.html#IDX1528">tables, <code>Berkeley
DB</code></a></li>

<li><a href="manual.html#IDX1819">tables, changing column
order</a></li>

<li><a href="manual.html#IDX560">tables, checking</a></li>

<li><a href="manual.html#IDX888">tables, closing</a></li>

<li><a href="manual.html#IDX661">tables, compressed</a></li>

<li><a href="manual.html#IDX1516">tables, compressed
format</a></li>

<li><a href="manual.html#IDX836">tables, constant</a>, <a
href="manual.html#IDX845">tables, constant</a></li>

<li><a href="manual.html#IDX400">tables, counting rows</a></li>

<li><a href="manual.html#IDX372">tables, creating</a></li>

<li><a href="manual.html#IDX576">tables, defragment</a>, <a
href="manual.html#IDX1515">tables, defragment</a></li>

<li><a href="manual.html#IDX581">tables, defragmenting</a></li>

<li><a href="manual.html#IDX1810">tables, deleting rows</a></li>

<li><a href="manual.html#IDX780">tables, displaying</a></li>

<li><a href="manual.html#IDX609">tables, displaying status</a></li>

<li><a href="manual.html#IDX766">tables, dumping</a>, <a
href="manual.html#IDX771">tables, dumping</a></li>

<li><a href="manual.html#IDX1514">tables, dynamic</a></li>

<li><a href="manual.html#IDX567">tables, error checking</a></li>

<li><a href="manual.html#IDX760">tables, flush</a></li>

<li><a href="manual.html#IDX582">tables, fragmentation</a></li>

<li><a href="manual.html#IDX500">tables, grant</a></li>

<li><a href="manual.html#IDX1523">tables,
<code>HEAP</code></a></li>

<li><a href="manual.html#IDX497">tables, <code>host</code></a></li>

<li><a href="manual.html#IDX867">tables, improving
performance</a></li>

<li><a href="manual.html#IDX577">tables, information</a></li>

<li><a href="manual.html#IDX404">tables, information about</a></li>

<li><a href="manual.html#IDX1522">tables, ISAM</a></li>

<li><a href="manual.html#IDX375">tables, loading data</a></li>

<li><a href="manual.html#IDX859">tables, locking</a></li>

<li><a href="manual.html#IDX574">tables, maintenance
regimen</a></li>

<li><a href="manual.html#IDX35">tables, maximum size</a></li>

<li><a href="manual.html#IDX1520">tables, merging</a></li>

<li><a href="manual.html#IDX402">tables, multiple</a></li>

<li><a href="manual.html#IDX965">tables, names</a></li>

<li><a href="manual.html#IDX884">tables, open</a></li>

<li><a href="manual.html#IDX887">tables, opening</a></li>

<li><a href="manual.html#IDX571">tables, optimising</a></li>

<li><a href="manual.html#IDX569">tables, repairing</a></li>

<li><a href="manual.html#IDX378">tables, retrieving data</a></li>

<li><a href="manual.html#IDX384">tables, selecting columns</a></li>

<li><a href="manual.html#IDX382">tables, selecting rows</a></li>

<li><a href="manual.html#IDX389">tables, sorting rows</a></li>

<li><a href="manual.html#IDX919">tables, symbolic links</a></li>

<li><a href="manual.html#IDX834">tables, system</a></li>

<li><a href="manual.html#IDX892">tables, too many</a></li>

<li><a href="manual.html#IDX1695">tables, unique ID for last
row</a></li>

<li><a href="manual.html#IDX133">tables, updating</a></li>

<li><a href="manual.html#IDX338">tar, problems on Solaris</a></li>

<li><a href="manual.html#IDX1713">Tcl APIs</a></li>

<li><a href="manual.html#IDX657">tcp-ip option</a></li>

<li><a href="manual.html#IDX323">TCP/IP</a></li>

<li><a href="manual.html#IDX68">technical support,
licensing</a></li>

<li><a href="manual.html#IDX102">technical support, mailing
address</a></li>

<li><a href="manual.html#IDX734"><code>tee</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX292">temporary file, write
access</a></li>

<li><a href="manual.html#IDX1820">temporary tables,
problems</a></li>

<li><a href="manual.html#IDX356">terminal monitor, defined</a></li>

<li><a href="manual.html#IDX1719">testing mysqld,
mysqltest</a></li>

<li><a href="manual.html#IDX479">testing, connection to the
server</a></li>

<li><a href="manual.html#IDX283">testing, installation</a></li>

<li><a href="manual.html#IDX189">testing, of MySQL
releases</a></li>

<li><a href="manual.html#IDX278">testing,
post-installation</a></li>

<li><a href="manual.html#IDX282">testing, the server</a></li>

<li><a href="manual.html#IDX10">Texinfo</a></li>

<li><a href="manual.html#IDX1065"><code>TEXT</code> columns,
default values</a></li>

<li><a href="manual.html#IDX1443"><code>TEXT</code> columns,
indexing</a></li>

<li><a href="manual.html#IDX776">text files, importing</a></li>

<li><a href="manual.html#IDX1082"><code>TEXT</code>, size</a></li>

<li><a href="manual.html#IDX1862">thread packages, differences
between</a></li>

<li><a href="manual.html#IDX178">thread support</a></li>

<li><a href="manual.html#IDX276">thread support,
non-native</a></li>

<li><a href="manual.html#IDX1703">threaded clients</a></li>

<li><a href="manual.html#IDX755">threads</a>, <a
href="manual.html#IDX1717">threads</a></li>

<li><a href="manual.html#IDX618">threads, display</a></li>

<li><a href="manual.html#IDX1861">threads, RTS</a></li>

<li><a href="manual.html#IDX1078">time types</a></li>

<li><a href="manual.html#IDX614">timeout</a>, <a
href="manual.html#IDX1336">timeout</a>, <a
href="manual.html#IDX1418">timeout</a></li>

<li><a href="manual.html#IDX740">timeout,
<code>connect_timeout</code> variable</a></li>

<li><a href="manual.html#IDX1803"><code>TIMESTAMP</code>, and
<code>NULL</code> values</a></li>

<li><a href="manual.html#IDX1789">timezone problems</a></li>

<li><a href="manual.html#IDX856">tips, optimisation</a></li>

<li><a href="manual.html#IDX154">ToDo list for MySQL</a></li>

<li><a href="manual.html#IDX1707">TODO, embedded server</a></li>

<li><a href="manual.html#IDX920">TODO, symlinks</a></li>

<li><a href="manual.html#IDX692">tools, command-line</a></li>

<li><a href="manual.html#IDX160">tools, converting</a></li>

<li><a href="manual.html#IDX645">tools, mysqld_multi</a></li>

<li><a href="manual.html#IDX641">tools, safe_mysqld</a></li>

<li><a href="manual.html#IDX84">trademarks</a></li>

<li><a href="manual.html#IDX44">training</a></li>

<li><a href="manual.html#IDX132">transaction-safe tables</a>, <a
href="manual.html#IDX1525">transaction-safe tables</a></li>

<li><a href="manual.html#IDX131">transactions, support</a>, <a
href="manual.html#IDX1524">transactions, support</a></li>

<li><a href="manual.html#IDX144">triggers, stored</a></li>

<li><a href="manual.html#IDX266">troubleshooting, FreeBSD</a></li>

<li><a href="manual.html#IDX265">troubleshooting, Solaris</a></li>

<li><a href="manual.html#IDX355">tutorial</a></li>

<li><a href="manual.html#IDX423">Twin Studies, queries</a></li>

<li><a href="manual.html#IDX1093">type conversions</a></li>

<li><a href="manual.html#IDX59">types of support</a></li>

<li><a href="manual.html#IDX991">types, columns</a>, <a
href="manual.html#IDX1068">types, columns</a></li>

<li><a href="manual.html#IDX1079">types, date</a></li>

<li><a href="manual.html#IDX1044">types, Date and Time</a></li>

<li><a href="manual.html#IDX1076">types, numeric</a></li>

<li><a href="manual.html#IDX1511">types, of tables</a></li>

<li><a href="manual.html#IDX1070">types, portability</a></li>

<li><a href="manual.html#IDX1057">types, strings</a></li>

<li><a href="manual.html#IDX1080">types, time</a></li>

<li><a href="manual.html#IDX12">typographical conventions</a></li>
</ul>

<h2>U</h2>

<ul>
<li><a href="manual.html#IDX1744">UDFs, compiling</a></li>

<li><a href="manual.html#IDX1723">UDFs, defined</a></li>

<li><a href="manual.html#IDX1739">UDFs, return values</a></li>

<li><a href="manual.html#IDX721"><code>unbuffered</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX1692">unique ID</a></li>

<li><a href="manual.html#IDX380">unloading, tables</a></li>

<li><a href="manual.html#IDX790">update log</a></li>

<li><a href="manual.html#IDX195">updating, releases of
MySQL</a></li>

<li><a href="manual.html#IDX134">updating, tables</a></li>

<li><a href="manual.html#IDX304">upgrading</a></li>

<li><a href="manual.html#IDX314">upgrading, 3.20 to 3.21</a></li>

<li><a href="manual.html#IDX313">upgrading, 3.21 to 3.22</a></li>

<li><a href="manual.html#IDX311">upgrading, 3.22 to 3.23</a></li>

<li><a href="manual.html#IDX309">upgrading, 3.23 to 4.0</a></li>

<li><a href="manual.html#IDX307">upgrading, 4.0 to 4.1</a></li>

<li><a href="manual.html#IDX316">upgrading, different
architecture</a></li>

<li><a href="manual.html#IDX754">uptime</a></li>

<li><a href="manual.html#IDX175">URLS for downloading
MySQL</a></li>

<li><a href="manual.html#IDX515">user names, and passwords</a></li>

<li><a href="manual.html#IDX658">user option</a></li>

<li><a href="manual.html#IDX531">user privileges, adding</a></li>

<li><a href="manual.html#IDX486"><code>user</code> table,
sorting</a></li>

<li><a href="manual.html#IDX982">user variables</a></li>

<li><a href="manual.html#IDX1722">user-defined functions,
adding</a>, <a href="manual.html#IDX1733">user-defined functions,
adding</a></li>

<li><a href="manual.html#IDX735"><code>user</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX204">users, adding</a></li>

<li><a href="manual.html#IDX521">users, root</a></li>

<li><a href="manual.html#IDX821">uses, of MySQL</a></li>

<li><a href="manual.html#IDX328">using multiple disks to start
data</a></li>

<li><a href="manual.html#IDX1828">utilities</a></li>
</ul>

<h2>V</h2>

<ul>
<li><a href="manual.html#IDX956">valid numbers, examples</a></li>

<li><a href="manual.html#IDX1083"><code>VARCHAR</code>,
size</a></li>

<li><a href="manual.html#IDX902">variables,
<code>mysqld</code></a></li>

<li><a href="manual.html#IDX612">variables, status</a></li>

<li><a href="manual.html#IDX984">variables, System</a></li>

<li><a href="manual.html#IDX981">variables, user</a></li>

<li><a href="manual.html#IDX613">variables, values</a></li>

<li><a href="manual.html#IDX737"><code>verbose</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX659">version option</a></li>

<li><a href="manual.html#IDX184">version, choosing</a></li>

<li><a href="manual.html#IDX172">version, latest</a></li>

<li><a href="manual.html#IDX738"><code>version</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX710"><code>vertical</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX147">views</a></li>

<li><a href="manual.html#IDX256">virtual memory, problems while
compiling</a></li>

<li><a href="manual.html#IDX1615">Visual Basic</a></li>
</ul>

<h2>W</h2>

<ul>
<li><a href="manual.html#IDX739"><code>wait</code>,
<code>mysql</code> option</a></li>

<li><a href="manual.html#IDX81">web server, running</a></li>

<li><a href="manual.html#IDX544">What is an
X509/Certificate?</a></li>

<li><a href="manual.html#IDX543">What is encryption</a></li>

<li><a href="manual.html#IDX875">wildcards, and
<code>LIKE</code></a></li>

<li><a href="manual.html#IDX495">wildcards, in
<code>mysql.columns_priv</code> table</a></li>

<li><a href="manual.html#IDX488">wildcards, in
<code>mysql.db</code> table</a></li>

<li><a href="manual.html#IDX489">wildcards, in
<code>mysql.host</code> table</a></li>

<li><a href="manual.html#IDX494">wildcards, in
<code>mysql.tables_priv</code> table</a></li>

<li><a href="manual.html#IDX480">wildcards, in
<code>mysql.user</code> table</a></li>

<li><a href="manual.html#IDX1602">Windows</a></li>

<li><a href="manual.html#IDX331">Windows, compiling on</a></li>

<li><a href="manual.html#IDX335">Windows, open issues</a></li>

<li><a href="manual.html#IDX332">Windows, versus Unix</a></li>

<li><a href="manual.html#IDX1611">Word program</a></li>

<li><a href="manual.html#IDX1715">wrappers, Eiffel</a></li>

<li><a href="manual.html#IDX291">write access, tmp</a></li>
</ul>

<h2>X</h2>

<ul>
<li><a href="manual.html#IDX717"><code>xml</code>,
<code>mysql</code> option</a></li>
</ul>

<h2>Y</h2>

<ul>
<li><a href="manual.html#IDX40">Year 2000 compliance</a></li>

<li><a href="manual.html#IDX1046">Year 2000 issues</a></li>
</ul>

<br />
<br />
</body>
</html>

